<?xml version="1.0" encoding="UTF-8"?><unload unload_date="2022-02-02 06:38:12">
<sys_remote_update_set action="INSERT_OR_UPDATE">
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<application_name>Nutanix Calm</application_name>
<application_scope>x_nuta2_nutanix_ca</application_scope>
<application_version>1.1.2</application_version>
<collisions/>
<commit_date/>
<deleted/>
<description>This update set has :
1. Nutanix Calm v1.5.1 Complete Full Build
2. Nutanix Calm V1.5.1  Final Certification Changes(31-01)</description>
<inserted/>
<name>Nutanix Calm v1.5.1 Complete Full Build with certification changes</name>
<origin_sys_id/>
<parent display_value=""/>
<release_date/>
<remote_base_update_set display_value=""/>
<remote_parent_id/>
<remote_sys_id>79815ee32fd50110e49924c62799b627</remote_sys_id>
<state>loaded</state>
<summary/>
<sys_class_name>sys_remote_update_set</sys_class_name>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>80021aa32fd50110e49924c62799b6ce</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<update_set display_value=""/>
<update_source display_value=""/>
<updated/>
</sys_remote_update_set>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>catalog_script_client_6b2884fc37a52300fdfc097973990e68</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="catalog_script_client"&gt;&lt;catalog_script_client action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;applies_catalog&gt;true&lt;/applies_catalog&gt;&lt;applies_extended&gt;false&lt;/applies_extended&gt;&lt;applies_req_item&gt;false&lt;/applies_req_item&gt;&lt;applies_sc_task&gt;false&lt;/applies_sc_task&gt;&lt;applies_target_record&gt;false&lt;/applies_target_record&gt;&lt;applies_to&gt;item&lt;/applies_to&gt;&lt;cat_item display_value="General Settings"&gt;d4d3da7f37d12300fdfc097973990e11&lt;/cat_item&gt;&lt;cat_variable&gt;IO:6c4fb1ed37b9a300fdfc097973990e2f&lt;/cat_variable&gt;&lt;condition/&gt;&lt;description/&gt;&lt;field/&gt;&lt;global&gt;true&lt;/global&gt;&lt;isolate_script&gt;false&lt;/isolate_script&gt;&lt;messages/&gt;&lt;name&gt;Get Catalog Information&lt;/name&gt;&lt;order/&gt;&lt;script&gt;&lt;![CDATA[function onLoad() {
    //Type appropriate comment here, and begin script below

    if (g_form.getValue('item_name') != '')
        return;

    var catalogItemSysID = g_form.getValue('cat_item');

    var ga = new GlideAjax('Nutanix_ClientServerScriptBridge');
    ga.addParam('sysparm_name', 'getCatalogInfo');
    ga.addParam('sysparm_catalogItemSysID', catalogItemSysID);
    ga.getXML(processBlueprint);

    function processBlueprint(response) {
        var getCatalogData = response.responseXML.documentElement.getAttribute("answer");
        if (getCatalogData != '') {
            var answer = JSON.parse(getCatalogData);
            g_form.setValue('item_name', answer.itemName + '', answer.itemName + '');
            g_form.setValue('description', answer.description + '', answer.description + '');
            g_form.setValue('assign_users', answer.usersSysId + '', answer.usersName + '');
            g_form.setValue('assign_groups', answer.groupsSysId + '', answer.groupsName + '');
            g_form.setValue('assign_local_groups', answer.groupsSysId + '', answer.groupsName + '');
        }
    }
}
]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;catalog_script_client&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-31 16:55:37&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;6b2884fc37a52300fdfc097973990e68&lt;/sys_id&gt;&lt;sys_mod_count&gt;33&lt;/sys_mod_count&gt;&lt;sys_name&gt;Get Catalog Information&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;protected&lt;/sys_policy&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;catalog_script_client_6b2884fc37a52300fdfc097973990e68&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2022-01-24 12:18:48&lt;/sys_updated_on&gt;&lt;table/&gt;&lt;type&gt;onLoad&lt;/type&gt;&lt;ui_type&gt;0&lt;/ui_type&gt;&lt;variable_set/&gt;&lt;view/&gt;&lt;/catalog_script_client&gt;&lt;/record_update&gt;</payload>
<payload_hash>1912459001</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>04021aa32fd50110e49924c62799b6cf</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb91c1fe90000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table/>
<target_name>Get Catalog Information</target_name>
<type>Catalog Client Scripts</type>
<update_domain>global</update_domain>
<update_guid>bda901781c59c1109f47aaf19d66a14c</update_guid>
<update_guid_history>bda901781c59c1109f47aaf19d66a14c:1912459001,dac7c50ea3328010e87d51f074d7d988:495111725,b9aa2882d7fe4010f626b96cd6d1accc:84385449,b56ae8828ffe40104ffc5c81612868dc:523382560,16c7e88e1dbe4010fea2d1205b6f6aea:495111725,6f3c149d49bb3300faada206c377ba04:887462787,875b98afdac87300799df3b4c02cc9c9:-1411115260,74be5397df79e300e93c844046f6114d:826120171,41b1a003af35a3008411040c3d4f60fc:1037603787,a0bf815de4bd6300cce61eb2c9aa8dc2:887292195,2478a5c57da52300d3307245b72ffca7:-150213079,1918ad8564a52300245b6b6a1e246c63:1247570851,43e7ed8555a52300f59f5b44ec2953a1:-1195007013,a4d76d85b8a523004c0a842cb87fafd2:905076779,4787a145f3a52300db84514111373eac:-1537501085,bf772905e9a523006f4ebc823f2eca8a:905076779,a077614526a523006cc661862dcdbd2b:-1537501085,eac66905fca52300a370d1fbe25392e1:294302129,caa7ebbc33212300d3c443d531ef3ca0:128844020,64dfd8fcc3e523005fcd3a43e47e93d2:2105990278,7b3f54fc9be5230027d499a6c9fe8593:-1391313065,e63c1c3c38e52300d87a5c1db4014024:-427110117,5efb583ce9e5230055e4f4d864a5fa9a:1782267142,d9dbd43ca1e52300ed60d0c3af2e8122:-589967633,f4cbd03c09e5230015535cb00c023714:-1874708491,238b143cc1e523008ee44b225b414b29:-233801780,8bb81c78e2e523004246f106bc455294:474078092,7755d8b481e52300b95927c80d90c3f8:1103483416,95c4d8b457e52300f52b631e75e22cec:379323938,be53dc342ee52300192d518597e760af:334813746,0872947010e52300f3e1f28021c05335:-941738213,e742107428e523003b0ee644586ce04b:766889772,e7a1dc34fbe523003a2b4a3ee92113a7:-947787529,026b047012e52300f9c512b545e630f7:886054435</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>item_option_new_9e549aff37d12300fdfc097973990e9a</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="item_option_new"><item_option_new action="INSERT_OR_UPDATE"><active>true</active><attributes>glide_list=true</attributes><cat_item display_value="General Settings">d4d3da7f37d12300fdfc097973990e11</cat_item><category/><choice_direction>down</choice_direction><choice_field/><choice_table/><create_roles/><default_html_value/><default_value/><delete_roles/><delivery_plan/><description/><display_title>false</display_title><do_not_select_first>false</do_not_select_first><dynamic_default_value/><dynamic_ref_qual/><enable_also_request_for>false</enable_also_request_for><example_text/><field/><global>false</global><help_tag>More information</help_tag><help_text/><hidden>false</hidden><include_none>false</include_none><instructions/><layout>normal</layout><list_table>sys_user</list_table><lookup_label/><lookup_price/><lookup_table/><lookup_unique>false</lookup_unique><lookup_value/><macro/><macroponent/><mandatory>false</mandatory><map_to_field>false</map_to_field><mask_use_confirmation>false</mask_use_confirmation><mask_use_encryption>false</mask_use_encryption><name>assign_users</name><order>300</order><price_if_checked>0</price_if_checked><pricing_implications>false</pricing_implications><published_ref/><question_text>Assign Users</question_text><read_only>false</read_only><read_roles/><read_script/><rec_lookup_price/><rec_price_if_checked>0</rec_price_if_checked><record/><record_producer_table/><reference/><reference_qual>javascript:new x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge().getUsers()+"^ldap_server!=NULL";</reference_qual><reference_qual_condition/><rich_text/><roles_to_use_also_request_for/><save_script/><scale_max>5</scale_max><scale_min>0</scale_min><show_help>false</show_help><show_help_on_load>false</show_help_on_load><sp_widget/><summary_macro/><sys_class_name>item_option_new</sys_class_name><sys_created_by>girishgyani</sys_created_by><sys_created_on>2018-10-29 00:21:01</sys_created_on><sys_id>9e549aff37d12300fdfc097973990e9a</sys_id><sys_mod_count>19</sys_mod_count><sys_name>Assign Users</sys_name><sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>item_option_new_9e549aff37d12300fdfc097973990e9a</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2022-01-03 12:19:55</sys_updated_on><table/><tooltip/><type>21</type><ui_page/><unique>false</unique><use_dynamic_default>false</use_dynamic_default><use_reference_qualifier>advanced</use_reference_qualifier><validate_regex/><variable_name/><variable_set/><variable_width>50</variable_width><visibility>1</visibility><visible_bundle>true</visible_bundle><visible_guide>true</visible_guide><visible_standalone>true</visible_standalone><visible_summary>true</visible_summary><write_roles/></item_option_new><sys_translated_text action="delete_multiple" query="documentkey=9e549aff37d12300fdfc097973990e9a"/><fx_price action="delete_multiple" query="id=9e549aff37d12300fdfc097973990e9a"/><fx_price action="INSERT_OR_UPDATE"><amount>0</amount><currency display_value="USD">USD</currency><field>price_if_checked</field><id>9e549aff37d12300fdfc097973990e9a</id><parent/><reference_amount>0</reference_amount><reference_currency display_value="USD">USD</reference_currency><sys_created_by>girishgyani</sys_created_by><sys_created_on>2018-10-29 00:21:01</sys_created_on><sys_id>dd94d6ff37d12300fdfc097973990e4c</sys_id><sys_mod_count>0</sys_mod_count><sys_updated_by>girishgyani</sys_updated_by><sys_updated_on>2018-10-29 00:21:01</sys_updated_on><table>item_option_new</table><type>calculated</type></fx_price><fx_price action="INSERT_OR_UPDATE"><amount>0</amount><currency display_value="USD">USD</currency><field>rec_price_if_checked</field><id>9e549aff37d12300fdfc097973990e9a</id><parent/><reference_amount>0</reference_amount><reference_currency display_value="USD">USD</reference_currency><sys_created_by>girishgyani</sys_created_by><sys_created_on>2018-10-29 00:21:01</sys_created_on><sys_id>9594d6ff37d12300fdfc097973990e4b</sys_id><sys_mod_count>0</sys_mod_count><sys_updated_by>girishgyani</sys_updated_by><sys_updated_on>2018-10-29 00:21:01</sys_updated_on><table>item_option_new</table><type>calculated</type></fx_price></record_update>]]></payload>
<payload_hash>-1306234172</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>10021aa32fd50110e49924c62799b6d0</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb918964e0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table/>
<target_name>Assign Users</target_name>
<type>Variable</type>
<update_domain>global</update_domain>
<update_guid>958085c24e780110940b1bb017ca094f</update_guid>
<update_guid_history>958085c24e780110940b1bb017ca094f:-1306234172,11108d82ff7801105327bbf52707608c:667786053,cc6af08e2a380110f3a3153050ac058f:-1306234172,761afc4e083801105348f89fe258fefd:-375820201,47c9f84e913801105678ace51c0e56fa:-1306234172,ac29f04e8f3801108c4d20e31bfb0466:-1842258644,c658b80e213801106991bcb51220322b:-784275775,8ca7300e633801103aecc4c822f11496:175257025,56f638ca09380110c0aa3b85777b757e:1284039321,c4a634ca7f38011053ce700761659907:-1858656308,8194b84a81380110d1ffeac1e4dde513:14889823,c13581b859880110006299b2ad909703:-384172291,0832421b4586a30054147581354abc93:1853902758,2ae529c132a523009040a98bcfdd0d12:-1083805935,4cd4e58162a523007be023fdeb7031f2:480820526,d9b89c78a7e52300c894996a695c46bf:-1083805935,183510f4a5e52300ad399f61ab6d8adf:256844337,4044d8b460e523006d91c6111a9a566a:209737748,2ba354b4bee52300529ecd08898df7f4:-1509743517,039314b4fae52300e2bb27dd188a6cc9:1636116087,7db496ff1fd123006adc2de3a6305a78:-1509743517,11941eff3cd12300fb4d61e62d89eac2:1409403884</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_37c15d5f37896300fdfc097973990e1a</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Nutanix_ImportApplicationProfiles&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Nutanix_ImportApplicationProfiles&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Nutanix_ImportApplicationProfiles = Class.create();
Nutanix_ImportApplicationProfiles.prototype = {
    initialize: function() {
        this.appUtil = new Nutanix_Calm_Utils();
        this.logger = new Nutanix_Calm_Logger();
        this.dateFormat = gs.getProperty('glide.sys.date_format');
        this.timeFormat = gs.getProperty('glide.sys.time_format');
        this.order = 1;
    },

	
    _invalidateCatalogItem: function(CatSysId) {
        var grCat = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
        grCat.addQuery("blueprint", CatSysId);
        grCat.query();
        while (grCat.next()) {
            grCat.state = "inactive";
            grCat.update();
            this.logger.debug("Nutanix_ImportApplicationProfiles.processApplicationProfiles Deactivated catalog item " + grCat.name + "Logic associated profile deleted");
        }
    },

    _checkVarNegativeSync: function(profileVarArray, profileSysId, catSysId) {

        var arr_var_current = {};
        var arr_var_updated = {};

        var grCatVar = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
        grCatVar.addQuery('application_profile', profileSysId);
        grCatVar.addQuery('type', 'Profile');
        grCatVar.addQuery('catalog_item', catSysId);
        grCatVar.query();
        while (grCatVar.next())
            arr_var_current[grCatVar.uuid] = {
                "variable": grCatVar.variable + "",
                "var_name": grCatVar.variable.question_text + ""
            };

        for (var i in profileVarArray)
            arr_var_updated[profileVarArray[i].uuid] = {
                "var_name": (profileVarArray[i].label &amp;&amp; (profileVarArray[i].label).trim() != "") ? profileVarArray[i].label + '' : profileVarArray[i].name + '',
                "var_value": profileVarArray[i].value + ""
            };

        for (var uuid in arr_var_current) {

            if (!(uuid in arr_var_updated) || (uuid in arr_var_updated &amp;&amp; (arr_var_current[uuid].var_name + "" != arr_var_updated[uuid].var_name + ""))) {

                this._invalidateCatalogItem(catSysId);
				var column_fields = {};
                column_fields.cat_item = "";
                var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable(arr_var_current[uuid].variable + "", column_fields, 'update');
                var grCatVarDel = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                grCatVarDel.addQuery('catalog_item', catSysId + "");
                grCatVarDel.addQuery('uuid', uuid + "");
                grCatVarDel.query();
                while (grCatVarDel.next())
                    grCatVarDel.deleteRecord();
            }
        }
    },

    processApplicationProfiles: function(current) {
        try {
            this.logger.debug("Inside Nutanix_ImportApplicationProfiles.processApplicationProfiles");

            var payload = this.appUtil.parse(current.payload);

            var catSysId = current.parameter + '';

            var activeProfiles = [];

            this._createContainer(catSysId);
            if (current.substrate) {
                var substrate = this.appUtil.parse(current.substrate);
                var sub_type_rel = [];

                for (var l = 0; l &lt; substrate.length; l++) {
                    var sub_entity = substrate[l];
                    sub_type_rel[l] = {
                        "uuid": sub_entity.uuid + "",
                        "type": (sub_entity.type + "").replace("_VM", "")
                    };
                }
            }
            for (var i = 0; i &lt; payload.length; i++) {
                this.logger.info("Retrieved Number of Application Profiles " + payload.length);
                var profile = payload[i];

                activeProfiles.push(profile.uuid + '');

                var profileGR = new GlideRecord(this.appUtil.configuration.table.applicationProfiles + '');
                profileGR.addQuery('uuid', profile.uuid + '');
                profileGR.query();

                var profileSysId;

                if (profileGR.next()) {
                    profileSysId = profileGR.sys_id;

                    profileGR.name = profile.name + '';
                    profileGR.description = profile.description + '';
                    profileGR.update();

                } else {
                    profileGR.initialize();
                    profileGR.name = profile.name + '';
                    profileGR.description = profile.description + '';
                    profileGR.uuid = (profile.uuid) ? profile.uuid + '' : '';
                    profileSysId = profileGR.insert();
                }

                this.logger.debug("Successful record insertion in App Profile Table. Record name:- " + profile.name);
                var variablesList = profile.variable_list;

                this._checkVarNegativeSync(variablesList, profileSysId, current.parameter);

                for (var j = 0; j &lt; variablesList.length; j++) {

                    var field = variablesList[j];
                    var fieldSysd = '';

                    var fieldGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                    fieldGR.addQuery('description', field.uuid + '');
                    fieldGR.addQuery('cat_item', current.parameter + '');
                    fieldGR.query();

                    var varType = this._returnVarType(field);
                    if (fieldGR.next()) {
						var column_fields={};
						column_fields.type = varType.type + ''; //(field.type+'' == 'SECRET') ? 25 : 6;
                        column_fields.cat_item = current.parameter + '';
                        column_fields.active = true;
                        column_fields.question_text = (field.label &amp;&amp; (field.label).trim() != "") ? field.label + '' : field.name + '';
                        column_fields.name = field.name + '_' + profileSysId;
                        column_fields.tooltip = field.description + '';
                        column_fields.variable_width = '50';
                        column_fields.order = 11;
                        column_fields.description = field.uuid;
                        column_fields.show_help = true;
                        column_fields.help_text = (field.description + '') ? field.description + '' : '';
                        column_fields.mandatory = (field.is_mandatory + '') ? field.is_mandatory : '';
                        if (varType.type == 21) {
                            column_fields.list_table = this.appUtil.configuration.table.dropDownTable + '';
                            column_fields.attributes = "glide_list";
                        }
						fieldSysd = new Nutanix_ConfigureSettingScripts().updateVariableTable(fieldGR.sys_id, column_fields, 'update');
                        this.logger.debug("Nutanix_ImportApplicationProfiles.processApplicationProfiles fieldSysd update: " + fieldSysd);
                        if (varType.type + '' == '5' || varType.type + '' == '21') {
                            this._updateOtions(fieldSysd, varType.opt, varType.type);

                        }

                    } else {
						var column_fields={};
						column_fields.type = (varType).type + ''; //(field.type+'' == 'SECRET') ? 25 : 6;
                        column_fields.cat_item = current.parameter + '';
                        column_fields.active = true;
                        column_fields.question_text = (field.label &amp;&amp; (field.label).trim() != "") ? field.label + '' : field.name + '';
                        column_fields.name = field.name + '_' + profileSysId;
                        column_fields.tooltip = field.description + '';
                        column_fields.variable_width = '50';
                        column_fields.order = 11;
                        column_fields.description = field.uuid;
                        column_fields.show_help = true;
                        column_fields.help_text = (field.description + '') ? field.description + '' : '';
                        column_fields.mandatory = (field.is_mandatory + '') ? field.is_mandatory : '';
                        if (varType.type == 21) {
                            column_fields.list_table = this.appUtil.configuration.table.dropDownTable + '';
                            column_fields.attributes = "glide_list";
                        }
						fieldSysd = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');
                        this.logger.debug("Nutanix_ImportApplicationProfiles.processApplicationProfiles insert fieldSysd : " + fieldSysd + " field.label : " + field.label + " field.label : " + field.label + " | " + (field.label &amp;&amp; (field.label).trim() != "") ? field.label + '' : field.name + '');
                        if (varType.type + '' == '5' || varType.type + '' == '21') {
                            this._updateOtions(fieldSysd, varType.opt, varType.type);
                        }
                    }

                    this._insertCatalogVariableProperties(profileSysId, field, fieldSysd, current.parameter + '', field.uuid);
                    this.order++;
                    this.logger.debug("Successful record insertion in App Profile Variable Set. Record Name:- " + field.name);
                }
                //////
                if (profile.deployment_create_list) {
                    var deployment = profile.deployment_create_list;
                    var provider = "";

                    //var len = deployment.length-1;
                    for (var k = 0; k &lt; deployment.length; k++) {
                        var dep_entity = deployment[k];
                        var subs_entity = (dep_entity.substrate_local_reference) ? dep_entity.substrate_local_reference.uuid : "";
                        for (var c = 0; c &lt; sub_type_rel.length; c++) {
                            var subs_rel_entity = sub_type_rel[c];
                            if (subs_rel_entity.uuid == subs_entity &amp;&amp; !provider.includes(subs_rel_entity.type)) {
                                //provider = (k != (deployment.length-1) ) ? provider + subs_rel_entity.type + "," : provider + subs_rel_entity.type + "";
                                provider = (k == 0) ? subs_rel_entity.type : provider + "," + subs_rel_entity.type + "";
                                break;
                            }
                        }
                    }

                }

                ///////
                var setProfileGR = new GlideRecord(this.appUtil.configuration.table.catalogProfileRelation + '');
                setProfileGR.addQuery('application_profile', profileSysId + '');
                setProfileGR.addQuery('catalog_item', current.parameter + '');
                setProfileGR.query();

                if (!setProfileGR.hasNext()) {
                    setProfileGR.initialize();
                    setProfileGR.application_profile = profileSysId + '';
                    setProfileGR.catalog_item = current.parameter + '';
                    setProfileGR.providers = provider;

                    setProfileGR.state = 'active';

                    setProfileGR.insert();

                    this.logger.info("Nutanix_ImportApplicationProfiles.processApplicationProfiles:" + setProfileGR.sys_id + " record inserted application_profile " + setProfileGR.application_profile + " catalog_item " + setProfileGR.catalog_item + " provider " + setProfileGR.providers + " state " + setProfileGR.state);
                } else if (setProfileGR.next()) {

                    setProfileGR.application_profile = profileSysId + '';
                    setProfileGR.catalog_item = current.parameter + '';
                    setProfileGR.providers = provider;

                    setProfileGR.state = 'active';

                    setProfileGR.update();
                    this.logger.info("Nutanix_ImportApplicationProfiles.processApplicationProfiles:" + setProfileGR.sys_id + " record updated application_profile " + setProfileGR.application_profile + " catalog_item " + setProfileGR.catalog_item + " provider " + setProfileGR.providers + " state " + setProfileGR.state);
                }

            }

            var queryString = 'state=active^catalog_item=' + current.parameter;

            for (var i in activeProfiles)
                queryString += '^application_profile.uuid!=' + activeProfiles[i];

            var inactiveProfileSysID = [];

            var gr = new GlideRecord(this.appUtil.configuration.table.catalogProfileRelation + "");
            gr.addEncodedQuery(queryString);
            gr.query();

            while (gr.next()) {
                gr.state = 'inactive';
                gr.update();
                inactiveProfileSysID.push(gr.application_profile + '');
                this.logger.info("Nutanix_ImportApplicationProfiles.processApplicationProfiles: Deactivated catalogProfileRelation " + gr.sys_id);
            }

            // 			var inactiveCatItems = [];

            // 			var catGr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig+'');
            // 			catGr.addEncodedQuery('state!=inactive^state!=deleted^multiple_application_profileIN' + inactiveProfileSysID.toString());
            // 			catGr.query();

            // 			while(catGr.next()){

            // 				inactiveCatItems.push(catGr.item_name.name);

            // 				catGr.state = 'inactive';
            // 				catGr.update();			
            // 				this.logger.info("Nutanix_ImportApplicationProfiles.processApplicationProfiles: Deactivated catalog item "+catGr.item_name.name+" logic associated application profile mark inactive");
            // 			}

            // 			this.logger.info("Deactivated " + catGr.getRowCount() + " catalog items (" + inactiveCatItems.toString() + ") as there PRofiles got into a Non-Active State.");

        } catch (e) {
            this.logger.error("Error Nutanix_ImportApplicationProfiles.processApplicationProfiles: Error:- " + e);
        }

    },

    _updateOtions: function(fieldSysid, opt, type) {
        try {
            this.logger.debug("Inside Nutanix_ImportApplicationProfiles._updateOtions");
            if (type == 5) {
                var grQust = new GlideRecord('question_choice');
                grQust.addQuery('question', fieldSysid);
                grQust.query();
                while (grQust.next()) {
                    grQust.setValue('question', '');
                    grQust.update();
                }
                grQust.deleteMultiple();

                for (var i in opt) {
                    grQust = new GlideRecord('question_choice');
                    grQust.initialize();
                    grQust.sys_class_name = "question_choice";
                    grQust.question = fieldSysid + '';
                    grQust.text = opt[i] + '';
                    grQust.value = opt[i] + '';
                    grQust.insert();
                }
            } else if (type == 21) {
                var grQust = new GlideRecord(this.appUtil.configuration.table.dropDownTable);
                grQust.addQuery('variable', fieldSysid);
                grQust.deleteMultiple();

                for (var i in opt) {
                    grQust = new GlideRecord(this.appUtil.configuration.table.dropDownTable);
                    grQust.initialize();
                    grQust.variable = fieldSysid;
                    grQust.name = opt[i];
                    grQust.value = opt[i];
                    grQust.insert();
                }
                var fGR = new GlideRecord('item_option_new');
                fGR.addQuery('sys_id', fieldSysid);
                fGR.query();
                if (fGR.next()) {
					var column_fields={};
					column_fields.reference_qual = "variable=" + fieldSysid;
					var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable(fGR.sys_id, column_fields, 'update');
                }

            }
        } catch (e) {
            this.logger.error("Inside Nutanix_ImportApplicationProfiles._updateOtions " + e);
        }

    },

    _returnVarType: function(field) {
        try {
            this.logger.debug("Inside Nutanix_ImportApplicationProfiles._returnVarType field.data_type " + field.data_type + " field.type " + field.type);
            var options;
            if (field.data_type + '' == "BASE") {
                if (field.type + '' == "EXEC_LOCAL" || field.type + '' == "HTTP_SECRET" || field.type + '' == "EXEC_SECRET" || (field.type + '' == "HTTP_LOCAL"))
                    options = {
                        "type": 5,
                        "opt": []
                    };

                else if (field.type + '' == "LOCAL" &amp;&amp; field.options &amp;&amp; field.options.type + '' == "PREDEFINED" &amp;&amp; (field.options.choices).length &gt; 0)
                    options = {
                        "type": 5,
                        "opt": field.options.choices
                    };

                else if (field.type + '' == "SECRET" || field.attrs.type + '' == "SECRET")
                    options = {
                        "type": 25,
                        "opt": []
                    };

                else if (field.val_type + '' == 'MULTILINE_STRING')
                    options = {
                        "type": 2,
                        "opt": []
                    };

                else if (field.val_type + '' == 'DATE')
                    options = {
                        "type": 9,
                        "opt": []
                    };

                else if (field.val_type + '' == 'DATE_TIME')
                    options = {
                        "type": 10,
                        "opt": []
                    };

                else
                    options = {
                        "type": 6,
                        "opt": []
                    };

            } else if (field.data_type + '' == "LIST") {

                if (field.type + '' == "EXEC_LOCAL" || field.type + '' == "HTTP_SECRET" || field.type + '' == "EXEC_SECRET" || (field.type + '' == "HTTP_LOCAL"))
                    options = {
                        "type": 5,
                        "opt": []
                    };

                else if (field.type + '' == "LOCAL" &amp;&amp; (field.options) &amp;&amp; field.options.type + '' == "PREDEFINED" &amp;&amp; (field.options.choices).length &gt; 0)
                    options = {
                        "type": 21,
                        "opt": field.options.choices
                    };
            }
            if (!options) options = {
                "type": 6,
                "opt": []
            };
            return options;
        } catch (e) {
            this.logger.error("Inside Nutanix_ImportApplicationProfiles._returnVarType" + e);
        }

    },

    _createContainer: function(catSysId) {

        try {
            var containerCheck = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
            containerCheck.addEncodedQuery('name=profile_configuration^cat_item=' + catSysId);
            containerCheck.query();

            if (!containerCheck.hasNext()) {
                this._createContainerStart(catSysId + '');
                this._createContainerEnd(catSysId + '');
            }
        } catch (e) {
            this.logger.error("Error Nutanix_ImportApplicationProfiles._createContainer: Error:- " + e);
        }

    },

    _createContainerStart: function(catSysID) {

        try {
            this.logger.debug("Inside Nutanix_ImportApplicationProfiles._createContainerStart");
            var cat_item_class = '';
            var cat_item = new GlideRecord('sc_cat_item');
            if (cat_item.get(catSysID)) {
                cat_item_class = cat_item.sys_class_name + '';
            }
			var column_fields={};
			column_fields.type = '19';
            column_fields.display_title = 'true';
            column_fields.cat_item = catSysID;
            column_fields.active = 'true';
            column_fields.order = 10;
            if (cat_item_class == 'x_nuta2_nutanix_ca_runbooks')
                column_fields.question_text = 'Variable Configuration';
            else
                column_fields.question_text = 'Profile Configuration';
            column_fields.name = 'profile_configuration';
            column_fields.layout = 'normal'; //2across';
			var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable("", column_fields, 'insert');
        } catch (e) {
            this.logger.error("Error Nutanix_ImportApplicationProfiles._createContainerStart: Error:- " + e);
        }

    },

    _createContainerEnd: function(catSysID) {

        try {
            this.logger.debug("Inside Nutanix_ImportApplicationProfiles._createContainerEnd");
			var column_fields = {};
            column_fields.type = '20';
            column_fields.cat_item = catSysID;
            column_fields.active = 'true';
            column_fields.order = 12;
            var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable("", column_fields, 'insert');
        } catch (e) {
            this.logger.error("Error Nutanix_ImportApplicationProfiles._createContainerEnd: Error:- " + e);
        }
    },

    _insertCatalogVariableProperties: function(profileSysId, field, fieldSysd, catalogSysId, field_uuid) {

        try {
            this.logger.debug("Inside Nutanix_ImportApplicationProfiles._insertCatalogVariableProperties:\n profileSysId : " + profileSysId + "\n field : " + JSON.stringify(field) + "\n fieldSysd : " + fieldSysd + "\n catalogSysId : " + catalogSysId + "\n field_uuid : " + field_uuid);
            var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
            gr.addQuery('application_profile', profileSysId);
            gr.addQuery('catalog_item', catalogSysId);
            gr.addQuery('variable.description', field_uuid);
            gr.query();

            if (gr.next()) {

                if (field.is_hidden &amp;&amp; (field.is_hidden + '' != gr.is_hidden + "")) {
                    this._invalidateCatalogItem(catalogSysId);
                    this.logger.info("Deactivated catalog due to a change in profile variable's private state!");
                }

                if (field &amp;&amp; field.editables &amp;&amp; field.editables.value) {
                    if (field.editables.value + "" != gr.runtime_config + "") {
                        this._invalidateCatalogItem(catalogSysId);
                        this.logger.info("Deactivated catalog due to a change in profile variable's runtime-config!");
                    }
                }

                if (gr.value_type + "" != field.val_type + '') {
                    this._invalidateCatalogItem(catalogSysId);
                    this.logger.info("Deactivated catalog due to a change in profile variable's type!");
                }

                gr.application_profile = profileSysId + '';
                gr.catalog_item = catalogSysId;
                gr.default_value =
                    (field.val_type + '' == 'DATE' || field.val_type + '' == 'DATE_TIME') ? this._formttedDateTime(field.value + '', field.val_type + '') : ((field.value) ? (field.value).includes("@@{") ? "@@{" + this.appUtil._createMacroArray(field.value + "") + "_" + profileSysId + "}@@" : field.value + '' : '');
                //gr.runtime_config = (field.editables &amp;&amp; field.editables.value+'' == 'true' &amp;&amp; field.is_hidden+'' == 'false') ? "true" : "false"; //((field.value+'').indexOf('@@') != -1) ? false : field.editables.value+'';
                if (field.is_hidden &amp;&amp; field.is_hidden + '' == 'true') {
                    gr.runtime_config = "false";
                } else {
                    gr.runtime_config = (field.editables &amp;&amp; field.editables.value + '' == 'true') ? "true" : "false";
                }
                gr.uuid = field.uuid + '';
                gr.variable = fieldSysd;
                gr.isprofilevariable = true;
                gr.type = "Profile";
                //gr.isdisabled = (field.editables &amp;&amp; field.editables.value+'' == 'true' &amp;&amp; field.is_hidden+'' == 'false') ? false : true;//((field.value+'').indexOf('@@') != -1) ? true : (field.editables.value+'' == 'true') ? false : true;
                /**advanced var**/
                if (field.is_hidden &amp;&amp; field.is_hidden + '' == 'true') {
                    gr.isdisabled = true;
                } else {
                    gr.isdisabled = (field.editables &amp;&amp; field.editables.value + '' == 'true') ? false : true;
                }
                gr.value_type = field.val_type + '';
                gr.data_type = (field.type + '' == "LOCAL" &amp;&amp; field.options &amp;&amp; field.options.type + '' == "PREDEFINED" &amp;&amp; field.options.choices &amp;&amp; (field.options.choices).length &gt; 0) ? "PREDEFINED" : field.type + '';
                //gr.field_regex = (field.regex &amp;&amp; field.regex.should_validate &amp;&amp; gr.data_type != "LOCAL" &amp;&amp; field.val_type != "DATE"  &amp;&amp; field.val_type != "DATE_TIME") ? field.regex.value+'' : this._fieldRegex(field);


                var k = (field.regex &amp;&amp; field.regex.should_validate) ? field.regex.value + '' : this._fieldRegex(field);

                if (gr.data_type + '' == "LOCAL" &amp;&amp; (field.val_type + '' == "DATE" || field.val_type + '' == "DATE_TIME"))
                    k = this._fieldRegex(field);

                gr.field_regex = k;
                gr.is_hidden = (field.is_hidden + '' == 'true') ? true : false;

                if (field) {
                    gr.field_json = JSON.stringify(field);
                }

                /**advanced var**/
                gr.update();

            } else {

                this._invalidateCatalogItem(catalogSysId);

                gr.initialize();
                gr.application_profile = profileSysId + '';
                gr.catalog_item = catalogSysId + '';
                gr.default_value = (field.val_type + '' == 'DATE' || field.val_type + '' == 'DATE_TIME') ? this._formttedDateTime(field.value + '', field.val_type + '') : ((field.value) ? ((field.value).includes("@@{") ? "@@{" + this.appUtil._createMacroArray(field.value + "") + "_" + profileSysId + "}@@" : (field.value)) : '');

                //gr.runtime_config = (field.editables &amp;&amp; field.editables.value+'' == 'true' &amp;&amp; field.is_hidden+'' == 'false') ? "true" : "false";//((field.value+'').indexOf('@@') != -1) ? false : field.editables.value+'';
                if (field.is_hidden &amp;&amp; field.is_hidden + '' == 'true') {
                    gr.runtime_config = "false";
                } else {
                    gr.runtime_config = (field.editables &amp;&amp; field.editables.value + '' == 'true') ? "true" : "false";
                }
                gr.uuid = field.uuid + '';
                gr.variable = fieldSysd;

                gr.isprofilevariable = true;
                gr.type = "Profile";
                //gr.isdisabled = (field.editables &amp;&amp; field.editables.value+'' == 'true' &amp;&amp; field.is_hidden+'' == 'false') ? false : true;//((field.value+'').indexOf('@@') != -1) ? true : (field.editables.value+'' == 'true') ? false : true;
                if (field.is_hidden &amp;&amp; field.is_hidden + '' == 'true') {
                    gr.isdisabled = true;
                } else {
                    gr.isdisabled = (field.editables &amp;&amp; field.editables.value + '' == 'true') ? false : true;
                }
                /**advanced var**/

                gr.value_type = field.val_type + '';
                gr.data_type = (field.type + '' == "LOCAL" &amp;&amp; field.options &amp;&amp; field.options.type + '' == "PREDEFINED" &amp;&amp; field.options.choices &amp;&amp; (field.options.choices).length &gt; 0) ? "PREDEFINED" : field.type + '';

                var k = (field.regex &amp;&amp; field.regex.should_validate) ? field.regex.value + '' : this._fieldRegex(field);

                if (gr.data_type + '' == "LOCAL" &amp;&amp; (field.val_type + '' == "DATE" || field.val_type + '' == "DATE_TIME"))
                    k = this._fieldRegex(field);

                gr.field_regex = k;

                gr.field_regex = (field.regex &amp;&amp; field.regex.should_validate &amp;&amp; gr.data_type != "LOCAL" &amp;&amp; field.val_type != "DATE" &amp;&amp; field.val_type != "DATE_TIME") ? field.regex.value + '' : this._fieldRegex(field);
                gr.is_hidden = (field.is_hidden + '' == 'true') ? true : false;
                /**advanced var**/
                if (field) {
                    gr.field_json = JSON.stringify(field);
                }

                gr.insert();

            }

        } catch (e) {
            this.logger.error("Error Nutanix_ImportApplicationProfiles._insertCatalogVariableProperties: Error:- " + e);
        }

    },

    _fieldRegex: function(field) {

        var reg = "";
        switch (field.val_type + '') {

            case "INT":
                reg = '^[\\d]*$';
                break;

            case "STRING":
                reg = '^.*$';
                break;

            case "DATE":
                reg = '^.*$'; //'^((0[1-9]|[12]\\d|3[01])/(0[1-9]|1[0-2])/[12]\\d{3})$';
                break;

            case "TIME":
                reg = '^([01]\\d|2[0-3]):[0-5][\\d]:[0-5][\\d]$';
                break;

            case "DATE_TIME":
                reg = '^.*$'; //'^((0[1-9]|[12]\\d|3[01])/(0[1-9]|1[0-2])/[12]\\d{3})((T)|(\\s-\\s))[\\d]{2}:[\\d]{2}(:[0-5]\\d)?$';
                break;

            case "MULTILINE_STRING":
                reg = '^(.|\n)*$';
                break;

        }
        return reg;


    },

    _formttedDateTime: function(value, type, getDate) {

        var newVal = '';
        if (getDate === true) {
            if (type == "DATE") {
                var gdt = new GlideDate();
                gdt.setValue(value);
                return gdt.getByFormat(this.dateFormat);
            } else {
                var gdt = new GlideDateTime();
                gdt.setValue(value);
                return gdt.getDate().getByFormat(this.dateFormat) + ' ' + gdt.getTime().getByFormat(this.timeFormat);
            }
        } else {
            var arr = value.split('/');
            if (type == "DATE") {
                newVal = arr[2] + '-' + arr[1] + '-' + arr[0];
                var gdt = new GlideDate();
                gdt.setValue(newVal);
                return gdt.getValue();
                //return gdt.getByFormat(this.dateFormat);
            } else {
                var year = arr[2].split(' ');
                newVal = year[0] + '-' + arr[1] + '-' + arr[0] + ' ' + year[2];
                var gdt = new GlideDateTime();
                gdt.setValue(newVal);
                return gdt.getValue();
                //return gdt.getDate().getByFormat(this.dateFormat)+' '+gdt.getTime().getByFormat(this.timeFormat);
            }
        }
    },
    processRunbookVariable: function(current) {
        try {
            this.logger.debug("Inside Nutanix_ImportApplicationProfiles.processRunbookVariable current " + JSON.stringify(current));

            var payload = current.payload;

            var catSysId = current.parameter + '';

            this._createContainer(catSysId);

            for (var i = 0; i &lt; payload.length; i++) {
                this.logger.info("Retrieved Number of Application Profiles " + payload.length);
                var profile = payload[i];

                var profileGR = new GlideRecord(this.appUtil.configuration.table.applicationProfiles + '');
                profileGR.addQuery('uuid', profile.uuid + '');
                profileGR.query();

                var profileSysId;

                if (profileGR.next()) {
                    profileSysId = profileGR.sys_id;

                    profileGR.name = profile.name + '';
                    profileGR.description = profile.description + '';
                    profileGR.update();
                } else {
                    profileGR.initialize();
                    profileGR.name = profile.name + '';
                    profileGR.description = profile.description + '';
                    profileGR.uuid = (profile.uuid) ? profile.uuid + '' : '';
                    profileSysId = profileGR.insert();
                }

                this.logger.debug("Successful record insertion in App Profile Table. Record name:- " + profile.name + ' profile.variable_list ' + JSON.stringify(profile.variable_list));

                var variablesList = profile.variable_list;

                for (var j = 0; j &lt; variablesList.length; j++) {
                    var field = variablesList[j];
                    var fieldSysd = '';

                    var fieldGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                    fieldGR.addQuery('description', field.uuid + '');
                    fieldGR.addQuery('cat_item', current.parameter + '');
                    fieldGR.query();
                    var varType = this._returnVarType(field);
                    if (fieldGR.next()) {
						var column_fields = {};
                        column_fields.type = varType.type + ''; //(field.type+'' == 'SECRET') ? 25 : 6;					
                        column_fields.cat_item = current.parameter + '';
                        column_fields.active = true;
                        column_fields.question_text = (field.label &amp;&amp; (field.label).trim() != "") ? field.label + '' : field.name + '';
                        column_fields.name = field.name + '_' + profileSysId;
                        column_fields.tooltip = field.description + '';
                        column_fields.variable_width = '50';
                        column_fields.order = 11;
                        column_fields.description = field.uuid;
                        column_fields.show_help = true;
                        column_fields.help_text = (field.description + '') ? field.description + '' : '';
                        column_fields.mandatory = (field.is_mandatory + '') ? field.is_mandatory : '';
                        if (varType.type == 21) {
                            column_fields.list_table = this.appUtil.configuration.table.dropDownTable + '';
                            column_fields.attributes = "glide_list";
                        }
                        fieldSysd = new Nutanix_ConfigureSettingScripts().updateVariableTable(fieldGR.sys_id, column_fields, 'update');
                        this.logger.debug("Nutanix_ImportApplicationProfiles.processRunbookVariable fieldSysd update: " + fieldSysd);
                        if (varType.type + '' == '5' || varType.type + '' == '21') {
                            this._updateOtions(fieldSysd, varType.opt, varType.type);

                        }
                    } else {
                        gs.info("possible inside else" + (varType).type + ' current.parameter ' + current.parameter + ' field.name ' + field.name + ' field.description ' + field.description + ' field.uuid ' + field.uuid + 'field.description ' + field.description + ' is_mandatory ' + field.is_mandatory);
						var column_fields={};
						column_fields.type = (varType).type + ''; //(field.type+'' == 'SECRET') ? 25 : 6;
                        column_fields.cat_item = current.parameter + '';
                        column_fields.active = true;
                        column_fields.question_text = (field.label &amp;&amp; (field.label).trim() != "") ? field.label + '' : field.name + '';
                        column_fields.name = field.name + '_' + profileSysId;
                        column_fields.tooltip = field.description + '';
                        column_fields.variable_width = '50';
                        column_fields.order = 11;
                        column_fields.description = field.uuid;
                        column_fields.show_help = true;
                        column_fields.help_text = (field.description + '') ? field.description + '' : '';
                        column_fields.mandatory = (field.is_mandatory + '') ? field.is_mandatory : '';
                        if (varType.type == 21) {
                            column_fields.list_table = this.appUtil.configuration.table.dropDownTable + '';
                            column_fields.attributes = "glide_list";
                        }
						fieldSysd = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');
                        this.logger.debug("Nutanix_ImportApplicationProfiles.processRunbookVariable insert fieldSysd : " + fieldSysd + " field.label : " + field.label + " field.label : " + field.label + " | " + (field.label &amp;&amp; (field.label).trim() != "") ? field.label + '' : field.name + '');
                        if (varType.type + '' == '5' || varType.type + '' == '21') {
                            this._updateOtions(fieldSysd, varType.opt, varType.type);
                        }
                    }

                    this._insertCatalogVariableProperties(profileSysId, field, fieldSysd, current.parameter + '', field.uuid);
                    this.order++;
                    this.logger.debug("Successful record insertion in App Profile Variable Set. Record Name:- " + field.name);
                }


                ///////
                var setProfileGR = new GlideRecord(this.appUtil.configuration.table.catalogProfileRelation + '');
                setProfileGR.addQuery('application_profile', profileSysId + '');
                setProfileGR.addQuery('catalog_item', current.parameter + '');
                setProfileGR.query();

                if (!setProfileGR.hasNext()) {
                    setProfileGR.initialize();
                    setProfileGR.application_profile = profileSysId + '';
                    setProfileGR.catalog_item = current.parameter + '';
                    setProfileGR.providers = 'runbook';
                    setProfileGR.state = 'active';
                    setProfileGR.insert();
                    this.logger.info("Nutanix_ImportApplicationProfiles.processRunbookVariable:" + setProfileGR.sys_id + " record inserted application_profile " + setProfileGR.application_profile + " catalog_item " + setProfileGR.catalog_item + " provider " + setProfileGR.providers + " state " + setProfileGR.state);
                } else if (setProfileGR.next()) {

                    setProfileGR.application_profile = profileSysId + '';
                    setProfileGR.catalog_item = current.parameter + '';
                    setProfileGR.providers = 'runbook';
                    setProfileGR.state = 'active';
                    setProfileGR.update();
                    this.logger.info("Nutanix_ImportApplicationProfiles.processRunbookVariable:" + setProfileGR.sys_id + " record updated application_profile " + setProfileGR.application_profile + " catalog_item " + setProfileGR.catalog_item + " provider " + setProfileGR.providers + " state " + setProfileGR.state);
                }

            }

        } catch (e) {
            this.logger.error("Error Nutanix_ImportApplicationProfiles.processRunbookVariable: Error:- " + e);
        }

    },
    type: 'Nutanix_ImportApplicationProfiles'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-14 20:00:23&lt;/sys_created_on&gt;&lt;sys_id&gt;37c15d5f37896300fdfc097973990e1a&lt;/sys_id&gt;&lt;sys_mod_count&gt;302&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_ImportApplicationProfiles&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_37c15d5f37896300fdfc097973990e1a&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2022-01-14 14:04:49&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1577930865</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>10021aa32fd50110e49924c62799b6d3</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb91c1f330000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table/>
<target_name>Nutanix_ImportApplicationProfiles</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>ed024ae12a81011020e1797e953a931f</update_guid>
<update_guid_history>ed024ae12a81011020e1797e953a931f:-1577930865,38ec31ad79410110eaa47d81f167a98d:-365624786,8679f529c44101105ae7122be49828ba:166994561,efca6b30fc0d01102460c24f543839db:1886088129,dbe66b7c6ec90110bb4dd5c5d0372b01:1845066274,1840d73ca04901103b8d4f433732f001:1142982844,836bc3386f490110ef84db2ea4f932ff:660924883,1287baf4698501101892de9bf218d730:-178888269,9e667ab46885011096a97c3e407a3446:1871723636,ce623af0d585011081a0e188b625114c:-1346264294,6cec9ab0da4501100b7f76015a7b8b7a:1255590274,f9795a30ad4501104304afe38b41bc58:275504959,70295efca9050110d96b699a158ae0b5:-1378508347,66781ebc8d05011017768127219e357d:631216709,ae779a38790501109b99da37f50b785b:1631413469,9835567837c101107cded26fa82adfd7:-170478017,3b44927840c10110282304bc33f06222:-220264434,23041efc21810110f1b4c758bd474176:-129716397,4b0ece3496c10110555dbfbf526b12da:-1182098786,98e0a9bdf54930d099c7bb6308d70041:-129716397,3802f03dcec130d0e484ff9e70741618:1968266804,b5260d2f90bc38905973379be0021425:-1412550130,625581a71afc3890f6bb0a10cfaec1fa:-1386042352,20dfb0af0bbc38900b64808c6f5244d9:1966968398,8c5ffcab13bc3890f3303562c15c976b:260769383,45eebc2ffabc389035349b448a640775:1709704529,fb9bb4e79abc3890a6f3d68cbb95b87e:-111358550,5698b02b1cbc38903fa7ff2b5a2f48ae:295632342,8ebfe463e1bc38909a7eca3a6ff8a17c:857191244,ab6de0af877c3890048c911a18bace08:-1406584023,625aec27d87c38907ed30b71fb8fb31a:-1362356987,1635eca76db8389091bbd827806bfc63:-1142338639,6fb068a78bb8389095a5fce3971c3168:-1611661563,3195946f5c783890fc8ab508e119b092:-527248192,6cd290eb277838903d8d723bdf1591f4:1272455949,43c0106b0178389086693c86a36cbd32:1857335549,a410dce72b783890f03fc5a28f893800:758166048,e7fe40e7f478389059fefbff652fece1:-1355669207,accd80a7807838905da97d9bccfac2d9:529126312,ac8d80e7e5f438900d84a92e863a4d96:-22330790,fd01545b1e7cf49051c7443ed641434e:968562676,5c298017e1b8f490160a01c8d2ee0001:-512888473,9b83c8977c78f4907020abac720bb7d0:-412672060,e59f3b0f2cb4f49030bc169de1e72e12:1550411255,480fa347ac74f49037cdbb7426cda9c9:864243862,4e3d7ae062bcbc502c6f14d0d8245c13:1750694734,caacb2ec547cbc50adcac0cac88f6c11:1661112976,84b9f1a015f4bc50d74dd3522fa648e8:353319982,f2b6ef1cbf383c509f8cd6c02f6ae2f2:-649072870,30866f1433383c50865d7f5a37dbb5a3:-1570118687,76eaf6101e38f8503e9aa68ed22c3d0c:-1229717571,a466434420f878508ea3ecaf0f6443c9:1039283638,8c6fb6cce1b87850153a070c5438bd01:-1229717571,6199b2c82cb878504f656e7b64b0a421:-465444724,9974bd1ab3283050788cae2993c6334f:-2119458254,e534755a11283050ce098a6959ffb352:1233142464,f4433dd65b283050dab53e65f6dd700e:1208008992,a97235568b283050b2df0e46b45c9bf8:-1120346586,d6913156a028305037f65c90fa2cc526:-1610583797,64507d16e728305088d3d4b9c56f852e:574586126,03cfa5d291283050ff88d59ed8f42f66:-291704430,0e6eed5260283050c93e26e4ceefca6e:-1950196988,44bc29128b2830502c195ccd64e98bc7:972479416,da26219ae6e43050783753794b1e3483:-1637444234,59b5e55acde4305079aa1347d2871245:-74077185,3c9d4c96d2e03050ff2870ff981d2fbe:2066116498,19cc00d67fe03050806de33c49e18417:483476360,181f6382b1a030500d11b841b2c96043:1840494758,feed9342bc603050cb038548dd004688:630581159,e37b97025c603050044c5964fcdb1a0f:1215055691,80fdac0197aa6090f60096831fa778c4:-1883155323,c53797f4f2e26090b27fe634f6e46e5f:2007027707,4309f278e3ae2090fadf882608c70afb:1339816561,63b71c0927d56490d2eb1d761e8189aa:377270829,7b0580494c9564907122eb27115719b3:1441679265,4f086d874709ec50425965af169be300:2086901641,3f2acc8f74c1ec50223862b2747ffb27:-960261328,02c90c8fb7c1ec5094dffbabd9d2ef58:-1565811695,c620be7209cdac50fd0845d9262e50ed:-724466431,04fe62fa888dac5008c5b59a2e0aa2e6:-1565811695,51b96af6218dac50e02437fef9bb2313:312776069,792962fa228dac506ef5521c466328d0:-2126445755,4c97eeb2198dac50362148cfbfb897e6:1111887475,feddd27ec94dac50d079f35a9f96d24a:1045179151,ccd35ebe270dac50938c93fe6e0c994b:-1920585764,3db09ebea40dac506995a40a817b1095:-1565811695,632342b6c985ac50a54761e315a6449e:848053873,e3311cc1e3112010cae03339dd8b1bd7:1482327027,e6f46b6259496c506a734329b65cdd6e:-1565811695,4f4c2a027849e8507c2c54dcdb2bf296:-700067246,323311a55b816850a6aeade82de39667:-139421799,65efa065160168502fc004b7cd58b1ae:-1464645174,0b4f2c255f01685099d5d81f0e38fd12:964282466,de5802c16309e450e420cf0c2f335d60:-1993663708,be57cec17c09e450748136e0e5b776a5:451653984,f9ef07b419cda450e8270cbbe50a3b58:542808854,769b0f786f4da4500f90e6a0cc68882a:-1870403804,ec460bfc84c9a45096ce9d988bfc66bf:206419004,3574d31e5d606410f4a1be1152415058:-1032211430,da74cbde0eec2410e2e0a7d7b19abee7:480167413,7083eed2002c2410aedb5f1aa699e6c4:-1095492845,c096ded6d1a82410c4c9e81da0b96e5a:1686449024,81111a120268241020c4253c027fcd59:-1539020747,8414ce1e5da424103aa5c3c5f5d3e029:337906057,106a3d5a38242410819cf4aa4ea34553:-296263169,d16040f0e12020100e7ea553332354ff:-1321649261,f59751ef391ca4104f77ca21490f30c6:1067480776,3a14d5ebe61ca41004a979ce696607d4:-373279188,8a5f4d27f21ca41056d894605ab08628:848812709,319ac1efd0d8a410048f8df8a66a9e73:1751282995,c309c16fdb98a410205d2b45f5c1173c:1718840041,b76eac67b898a410ab038fc7590dd07d:1639123235,7baae0276f98a410560269fad5e29aee:1751282995,b2596023eb98a410ad222959fd4de54d:-53449970,54f560eb6a58a4109107da5365eb4978:-569212911,729d18238a58a410a063b42e95b8d029:-959946543,673bbfdb77d4a4106304fa81c44bc5f8:1987960581,f4b513139594a4107aa3aa735f362083:792216682,c48fb6579914a410add8b2bbf3e388ee:-480346054,fc53c3474f986410653fdbcb76a22556:-637662231,748f56cb001864104050950b44736cb6:1009157974,e4a69e4f17d46410d042b26c4e95f9f7:-966012126,2b5560e8e0d31c10ec16bd1ee550cc34:-840807788,ff7a0f10251f1010a60744a6507d44e8:1444745442,cd6ca0d1f0839c90f1607700dffcdecd:-172346174,d4faa0d179839c908676e09d1ac54dc7:801029632,92198a74f2035c90365dd0ab6dbd4196:433462508,0524efe0f34b1c906831b7fc21ec757f:-329199832,db5f13e0bd0b1c90027d0eec3a64057b:128374118,9cc91a6c22071c9099fb3fd76ef3c4be:-424674786,a1eaaf1f0fe6585002fcd369bca01e9b:433462508,45a6a3dbf4e658508a1c7d0aec59a698:1703668928,86a535fad2229450957abe66c64200a9:247467084,9d457dba65229450c5ff97d05a45fe25:712709530,90c5c93d19aa9050ac6a83ff2816c9c5:1934991080,7a940db964aa9050c9ab80845c0df9c9:-2120453112,57bfd42883aadc1094bcd77cb2c0b4b6:181599598,8ca774988722dc1034e79044cd005ea0:-466447146,feb634583c22dc10d7a3c8de76b5b844:433817660,0144b090fe22dc101dd07a2c7c9b01ac:1560378414,dc047890e222dc10be4724ebbeba22ce:855338542,251378500b22dc10393d2074aec57068:605903798,9561f05cb6ee9c1058ef3e8a43ea10fe:-224009657,bb4f2c58b5ee9c10cb0fb379c5e23b4c:1595206427,6829a89038ae9c105a82f45043ec167e:2044126884,9384a094776e9c10ea28961a41a1b9bc:319969606,5f9e1814502e9c10c84a5621a832a35c:954721997,dd9c8c50d32e9c102d9b13c655a624f4:1355370362,51d688d8c5ea9c103976ddb3092abacc:1871587423,9765001c75ea9c10e35fe23dea469501:1937290360,5c04081882ea9c10a96415819bfb0988:-598590507,b492cc947bea9c10d52f0b6d8aafa617:-1770043703,c56f7380e9ea9c1024f8fbf1e91e3566:-1976799106,571bf74ca0aa9c1009827f9683104b8b:-2075758334,4b49bb0c30aa9c102dad04610e8feb9d:216218208,8ec8bbc86faa9c10a9ffa0b978fa06c0:1248244960,4214af08b36a9c1057945a6f6cf7ba52:1662318348,662b174c182a9c107bb08f02415b6f2c:187435944,8d481b48e32a9c10156194123c77a33f:-1359202343,9cfe4f48b9e69c1005921291e18d8ae3:-139687268,6c2ac74001e69c10dd8a915052a868fd:-1782711177,a3def0c4b2629c103764167d3b21623f:1863463918,6fac30043a629c10b302a50b1ece3157:1290353198,ca017c8026229c108045988fdb72ee68:2122650051,6e7c680c6eee5c10082f83e7dc174453:-995656445,bcf32004c7ee5c1093af3370c9ee7a24:1088774096,797394081f2e5c10546dd34bed68b967:859885639,0d6d840c97aa5c10a1b744b39ff5ddaf:50452162,4b090804acaa5c1044585928b7df6488:747355655,f256cc8c216a5c1010a757d9abba94e5:-1853860153,07d3c00ccb6a5c10644bdec45b6eb2aa:-824259292,0c320408276a5c106ef7a609fe468c83:-1362202617,e32c3f3fa51a5c10033ee03ee5ed35bb:-1653135430,c349f73bdd1a5c10d1dd93fa35b777b9:-1084297876,635733776b1a5c102da4f036d380b12e:-681252149,afd5bb33501a5c10bcc100007f68a549:315770260,ed15ff7fb0d65c10c8753d0153061a7b:-1660685554,836f6f7768d65c1002a804e1e3c0eb34:-1356699358,c34feb77f2d65c104b25fe26d1f17505:1310907333,71fd6f734dd65c1057331b8a6549b13e:372797545,51cd27b3fed65c10fa34796b6c3e0953:1884620491,a88b27bf81965c101b711e83cbdbfc19:1200760674,50986f3bb9965c106d85f6b9a9958964:1503966855,98ed03ffd6925c10dca85ec1da630fd7:44993841,95bd0fbfd9925c10dee73e634a0e7691:2108899025,a9440bfb5c525c105e8b28ead2ccaa5b:884635229,80bd7eb77d525c10851ca040d7e25e0b:-129438097,f3ac72b723525c100abfea1b24739611:-445345689,c3b4f2fb35125c10681f6b1e6b7024d4:-1806500904,98a27ef75f125c10b3230d157a8ab8ed:1126536187,3c3cd67ff55e1c102b28ccf2f0a5e474:-901643823,d5d092bbef1e1c101af2234c033b88d3:-1086392530,7dccc63ba11e1c10a9515f2ffbe79d05:-595555916,7042672b77561c10ad820c9db7396444:-1094962114,838f262f96121c10f67d0f129ef43a74:1851828289,80c7ec93181e98103421e11e38dfc698:1811537762,0eb60f8238581410080b710813966e78:-1133324793,6bad0683499f801068297daaaaf77a63:-745838657,5a4a0e0fd05f8010cd68802bb55f6980:748515876,78d80a47f95f801000c794b41ca17ca3:-382410123,bbb702430f5f80102ac1e936732a85d7:-428589692,d6950243425f8010c13904a01bdf99a9:-1589394447,04150a03975f801006123629e92a5f35:1362227930,0883c24f201f8010fad010a402e85842:1400628607,0a9fb947721f8010a5d452a65563249e:-217459256,d88a710f4edb80104eb9da18849cd772:738563201,b749fdcbb8db8010ef297044df10c6a8:-843879244,13437d8fba9b8010ac0595ad79304fdf:-1621699992,c655e1832a9b80103a52822a60577b4e:1905127185,ccc399075b1b8010634cc6287c8641dc:-924680854,466c221ed1dfc010921085c567d1973d:-2120355865,1a9d98caca97801047ad3ce8d429ccf3:1555431431,c11bd48a539780108a4658ef57b3b782:5989679,7f3c884e63578010438008a51541a5d6:1118744043,00037da3f00b08101e2df784c93fa949:1361197291,40713da3ff0b0810ed2e0d9c8f42bd94:-1015093601,c40175e38a0b08101002f0d4b0613d75:498950890,b2c89067c4030810a7c3d7b92308fd57:383698505,544794a3350308109ed15c2734197615:2144048023,6f16d82fefcfc4107ca54f67140ea5dd:-1156658929,6534946f26cfc4104df141e3bd49230b:1859487118,64d15c67e6cfc410104c4189348d632d:-1200550171,79409c27f5cfc41044b426bfdec2425a:-1577893423,1d105c672ccfc410eecb3afdd644afcc:-1062346961,8afd00a387cfc410b737b5fb56c86bc6:-2129340365,c8da48eb308fc410db5db63f9105fd68:-1103495805,a7f9cc2fab8fc410334d4692101b11c5:1064712808,2549c42f868fc41070deed6a767881cf:-1509427113,0be9ef13aa0fc41085e647e82be27c91:-863399276,d7b26fd332cbc4104722bed49812b56c:-1880696232,d21ffb82fb8704108402d3c2f3ebef39:-1435319240,51a6730ef9470410e7468c8310ecca67:917338101,0c66770aa6470410e061d69cd7ace6dd:-1604299613,7ac22338d38f00103ca2120a7c2c1114:1036472555,abf74778db4f00105db7f7ddb4cdf310:847633237,9707bfc3127e48500c1e3e7fde1f2d7b:577790486,76d39c4a4fb68450b225e939b592c660:393175031,d0658db01f2a8410d378a7df7359d2f1:55122764,057dbc3c6ee68410bdb9e940255fb33f:1571284275,4d2eab6f93ce4490831aca73dd41c25c:-502255941,2c15c3027055001012aaab97551f020e:-1860266920,2c15c3027055001012aaab97551f020e:-1860266920,2307228373790c103d3250925617becb:1571284275,19669ffe0e01041084abf942e8ee98a3:-1860266920,ba859ffe980104107d9308592dcc5b2d:-1464812316,42dfc3f64f010410e5787d42f64a51e7:2141686510,aa7a837e10cdc010568596d288f474ad:-1464812316,c43d8cf28833f300fb70f0aa5fc5079b:-1686970024,a2bb5bcaca7773002acbed12466960bc:295308306,06146798b877730095ba383d5d5f0d25:-1201165882,b5fd5a586e737300506a9f61df3aed1a:-1780380322,066ba68895bf7300a1cdbc63f47d6d2b:-2097618578,93f56e843ebf73004063d87b3a31760d:34621272,3acc19ff35237300efcf057089aa9314:-1382807800,26abc83f902f3300746ecfa007acef1c:365952913,ef6b086b3fe3330071cdfbd7cfed4041:1946039272,8bba086b20e33300609a3131ae7b8ea3:-1542663941,4f6484a7f8e333008c69e2b983ac0465:-391742540,fae6b3db07a33300bcbc56467114ba69:-1686337157,77fa0b1feb23330070f4b557b80a5fce:1127449479,ac47eaeaf61333009e2d038555b946bc:26038883,56cffb14305b3300a115a22ad68d43e0:182136071,f81bd7c31ac7f3006ce6eb774f471b69:799811645,31ba5fc3b4c7f300c7705d26e865325f:-1719314543,a35917c379c7f30058e7af678721c4b2:499227926,8071fac74f83f300ee5b429c9e9d1fb6:1474058765,0e8e664fce43f3000436ee12a3efb786:-621048838,8c29ea4bd203f3002f2c1c9d7dacb819:-1462493296,f5016e0b02cfb300fbc31770d9f46599:1105073700,286c1e8bb38fb3005a5460300b9b3e48:874423665,3b8bde4b948fb300e72dce839940118d:387273702,5cdc1c36d14f73000a4e120e2324046d:2006431194,fb4c5bc9d18373004b7d8d419b60eed7:-1724365334,64fade09408f3300e680b6cf8043524c:-158901688,ab0a06787407330030630f41381a558a:-440370374,3e8de5b0a7c3330083fbb128725f1e05:733133816,633b156801873300cd7ee944cdf2e2bc:173172334,50ccdca8e643330011eb9697cd5c9465:-1782310561,5f435ce4874333002e0f3a330593f711:-1229023784,d4018ca0e3033300dc85628f33d95fb7:-408735646,e8640372523e7300aa3efa25920ccdbd:-728704308,3bb0b27ac0ba7300c31e22486c7c8556:-1784940876,ac6d8552f0363300791deaaf2c7bdb5c:1349409602,442741daa2f2330010bb6827ede7e152:930029980,dbd5459a9af23300f63221af5fb14fee:-151352100,e553451ac1f23300ed590d4625e70593:-458290006,7b92c5d6b8f233006ed4c7bb72596424:545124248,30d18196e0f233008ba3d34156c112d0:-2118218564,3c8fd81295b2330083e95ba75b8c36d5:-611873875,d91d549e5372330098f342b265a8e252:-1293963652,c50c5cda47723300c8a0420757d7018b:2110613908,c4c9981e2f72330018dce665fd5a844a:979097532,dd779c9a4b7233009ef5ae4fd66b2e23:534923071,0d66d85a0d723300b41c6bda315123ea:-1057019605,ca83d01a16723300c1058920d736709b:1589256223,d030bf02f4323300d6b0f80e5835527a:1010573266,c7ca800a80363300701324aafef3ce5b:-358516873,c4794c06ff363300f2d07bc42073b2c6:609373333,7dceeb75abf23300c1fa95a7b1bf2222:-1423726537,d3ac6f757ef23300384af48a74bbebb1:-249681324,a698e3b9e9b23300d590cf78319cb591:1378098100,a6a66ff506b23300492b360c07860607:-2018613041,8855afb5deb233000ca864572a1801a4:-1322799556,9b9b9ffde3723300dff2fa46fdff2096:-1392010560,923bdf31ffb233009cbdebbff4c643fa:-756399541,2ba797fd3c723300be3df7e98f83174f:338120032,4e14d37dcd723300e84c599cd3b7611d:163823104,17f35775207233001ff2184fe9448bf7:500507025,c2fe4b7d6d32330071190b7b932d594e:1465445131,1b9d0b79d3723300090fd5d839f549d8:389006976,378683ac387e3300f744737add39935c:1943999882,0ce67ea0727e330037ee24a59fe4974c:-498607618,0ca76e20d73e3300dc39b1b3a300c49b:576795453,69f55660933e3300540ae6cbfee0f8d4:799544257,0e4bdb1cf89b330085be8af7bd6f2f01:-1410767874,18d953d4839b3300e529f1b753df702c:-139820260,f37c22d001d73300c2440435da6cb128:566784384,f07b791c6b573300240d48b807b8714b:-646484739,e9b049cf558233007c304a5ecbbacea1:1237272605,9e66f887aa8233001f1ed39c0913e831:139063087,05553cc71f823300a02928f76e91a93c:-799806103,9dc3f84fa6023300610f2363fb893596:280863367,0623b8879982330060be9d0cb460933d:-497626843,0dc5f532e3f13300c584c68c763fcd91:120475216,735552b078c0330061eefacd8b0e8c8e:1262380752,7f8b174cf1eb63003a0dbf6ba0365fb2:-1821348850,53f6fb3bef936300766a6d9872687d74:-387962898,0665b3f778936300ef3d7c4fb9faf948:1327874578,5c72f377e393630080b3cd6789fdcf28:-814573655,615b72b3101363000122721030d18d0c:1294995529,4031ed32d23223008ae31ba4cbd7876d:1972985704,1e63fde2fdb223006330105219069638:-1611251064,a761cf5077622300960a1606a11fdf0b:1290091683,debb36980b22230082b18afbd737b05c:1310990805,26daf650de222300e4d50bd1b292bd68:716978595,939bbb8f9b8a6300144051b4246d5916:915859770,627eda8f2782630043410345210f151d:594843244,4a825a9e29b923004beac7741833db6b:671547019,a1540abd2975e300caf21a668f48e30d:1748063407,cdd324759071e30045e692d508bd1475:264715999,b6ac10fd0931e30019276c29c5395b7f:-68706485,317d1a61213da30049799574cfb6484a:-1214544966,84fe8601f529230097ced6ddd49e2e60:2049584125,774e4ecd8be523006fc7f271fd34aa08:1295790229,3abaad0980a52300276bb218adf2aff6:1054477631,3db4e941e9a52300161ccfb4de3924da:-1340900555,aec0e54dae65230088ec788d2a8ea8ad:217617367,b7da9bb0b7212300d26b9b6db97a726f:932951285,6d8a559cc4e563004ed14b7807d2573c:1687944643,1a79a81cd0256300e29a2e9ae316a5a8:-1598614132,ff55d850dc256300220170886f7ed5bc:-1206829520,3c80109cc3e1630057ad52d65c7fcb7f:-368194477,b7fd48d89be16300d8ef1da2011899e5:1302333907,1aad84d420e163008366ed2aefc45f2b:1622577747,4b08fe480c216300882d0939c02f9bbe:-2082647491,1cd7ba4829216300cfef266adbdf287f:555611147,7156b6c44621630017bae87b1e092388:752533375,b702168860ad2300354b3f9372ce3199:-11273026,cfce0e8423ad2300192f15237598391c:1155992701,28250eccc66d2300ed30f74ea82430bf:-871238194,eb20aaf75e152300186f23d403bded91:2114851829,8a064cf9e1512300d843647942f598ee:1984140026,7bdaf1b4fbd1230025a1180b983a42d3:627950640,e41b68b8e3d96300cbf09df02e8dc085:1841904109,a4c7230c0915230037e84cd46d04a608:63173992,444a12087151230081b095718de82897:629803261,93f95284ae51230064094d407bf7db8b:-342796762,47d99e844d9123007f5decb4679cb41e:534193080,ea50b077894d230007230fe9594eeef2:-972693962,64bc0dabd9452300625ccb4eee1dfc61:668684258,6d55291f05c96300d14683523cc05767:1814973651,27442d5b56c96300a378d61710ba6e77:211521779,6c44219b48c963005c5ab1b6e7d95067:-1831112281,ce24a5db1dc96300bea7f8900fd63e32:1658269847,9c532d5b5ec96300f31c26c599077357:-1161246977,e1c2a55bf9c963003b7fc3f1027649e7:-1415557340,fcf0e9d7dac963005be6d0de7bb93a25:-1442731709,28b025d704c9630044a67dd6d3373c57:-892850893,05a061d75ec96300c66eacadde525e9f:-1926114035,ec7029d7fdc96300e87f7aef96706e96:168725665,d000a997a1c963002f810052bbc181f6:1239568554,443e9517e8c96300c547c800cb0373ac:-811368579,b2a2959fa2896300be970f7e92c5ca33:-1406358572</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_scope_privilege_e4ce33221ba4411098a61f4a234bcbdc</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_scope_privilege"><sys_scope_privilege action="INSERT_OR_UPDATE"><operation>execute</operation><source_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</source_scope><status>allowed</status><sys_class_name>sys_scope_privilege</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2021-12-24 05:13:06</sys_created_on><sys_id>e4ce33221ba4411098a61f4a234bcbdc</sys_id><sys_mod_count>0</sys_mod_count><sys_name>ResourceSupport</sys_name><sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_scope_privilege_e4ce33221ba4411098a61f4a234bcbdc</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2021-12-24 05:13:06</sys_updated_on><target_name>ResourceSupport</target_name><target_scope display_value="Global">global</target_scope><target_type>sys_script_include</target_type></sys_scope_privilege></record_update>]]></payload>
<payload_hash>-1624436988</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>14021aa32fd50110e49924c62799b6d2</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb91895b40000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table/>
<target_name>ResourceSupport</target_name>
<type>Cross scope privilege</type>
<update_domain>global</update_domain>
<update_guid>b7eeb72290a441105bfb1c649cda37f6</update_guid>
<update_guid_history>b7eeb72290a441105bfb1c649cda37f6:-1624436988</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_properties_800b6410db20011044348e4748961904</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties"><sys_properties action="INSERT_OR_UPDATE"><choices/><description>Migration sytem property for v1.5.1</description><ignore_cache>true</ignore_cache><is_private>false</is_private><name>x_nuta2_nutanix_ca.1_5_1</name><read_roles>x_nuta2_nutanix_ca.calm_admin,x_nuta2_nutanix_ca.user</read_roles><suffix>1_5_1</suffix><sys_class_name>sys_properties</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2021-12-16 14:02:06</sys_created_on><sys_id>800b6410db20011044348e4748961904</sys_id><sys_mod_count>7</sys_mod_count><sys_name>x_nuta2_nutanix_ca.1_5_1</sys_name><sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_properties_800b6410db20011044348e4748961904</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2021-12-23 14:02:13</sys_updated_on><type>string</type><value>0</value><write_roles>x_nuta2_nutanix_ca.calm_admin</write_roles></sys_properties><sys_translated_text action="delete_multiple" query="documentkey=800b6410db20011044348e4748961904"/></record_update>]]></payload>
<payload_hash>-530388632</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>18021aa32fd50110e49924c62799b6d1</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb91895710000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table/>
<target_name>x_nuta2_nutanix_ca.1_5_1</target_name>
<type>System Property</type>
<update_domain>global</update_domain>
<update_guid>b07eeca24ba4411009aa922387addd2c</update_guid>
<update_guid_history>b07eeca24ba4411009aa922387addd2c:-530388632,24650066b3244110c19bffbc5e0e6336:-1483590265,e15d1fde95ac011063b5728667f7256b:-1264822023,e5b60d988e600110f7d006fa0d54939b:-1285159398,46554d588b600110b3b24253cb4147b9:-1264822023,7c733c1ce02001104e6223b26105f1f7:-1285159398,3a7bac94842001106b84255f18a1519e:-2137006404,4f4ba0d4942001104691eefa13845b61:710376739</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_ui_action_9342931e37152300d27b8cf6c3990e64</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_ui_action"&gt;&lt;sys_ui_action action="INSERT_OR_UPDATE"&gt;&lt;action_name&gt;nutanix_sync&lt;/action_name&gt;&lt;active&gt;true&lt;/active&gt;&lt;client&gt;true&lt;/client&gt;&lt;client_script_v2&gt;&lt;![CDATA[function onClick(g_form) {

}]]&gt;&lt;/client_script_v2&gt;&lt;comments/&gt;&lt;condition&gt;gs.getProperty('x_nuta2_nutanix_ca.calm_version')!=''&amp;amp;&amp;amp;(new Nutanix_ClientServerScriptBridge().checkQueue())&amp;amp;&amp;amp;gs.getProperty('x_nuta2_nutanix_ca.check.authentication')=='true'&lt;/condition&gt;&lt;form_action&gt;true&lt;/form_action&gt;&lt;form_button&gt;true&lt;/form_button&gt;&lt;form_button_v2&gt;false&lt;/form_button_v2&gt;&lt;form_context_menu&gt;true&lt;/form_context_menu&gt;&lt;form_link&gt;true&lt;/form_link&gt;&lt;form_menu_button_v2&gt;false&lt;/form_menu_button_v2&gt;&lt;form_style/&gt;&lt;hint/&gt;&lt;isolate_script&gt;false&lt;/isolate_script&gt;&lt;list_action&gt;false&lt;/list_action&gt;&lt;list_banner_button&gt;false&lt;/list_banner_button&gt;&lt;list_button&gt;false&lt;/list_button&gt;&lt;list_choice&gt;false&lt;/list_choice&gt;&lt;list_context_menu&gt;false&lt;/list_context_menu&gt;&lt;list_link&gt;false&lt;/list_link&gt;&lt;list_save_with_form_button&gt;false&lt;/list_save_with_form_button&gt;&lt;list_style/&gt;&lt;messages/&gt;&lt;name&gt;Sync Now&lt;/name&gt;&lt;onclick&gt;syncConfirmation()&lt;/onclick&gt;&lt;order&gt;100&lt;/order&gt;&lt;script&gt;&lt;![CDATA[//Client-side 'onclick' function
function syncConfirmation() { 
	var delConfirm = confirm("This will sync the complete inventory of Calm entities in ServiceNow. Launching Blueprints, Catalog and performing Day 2 actions will not be possible during this process. Do you really want to continue?");
	if(delConfirm) {
		importApp();
	}
	else
		return false;
} //function for pop up message
function importApp(){
	var href = parent.location.toString();
	if(href.indexOf("nav_to.do?uri=%2F") &gt;= 0){
		parent.location = "/nav_to.do?uri=%2Fx_nuta2_nutanix_ca_nutanix_process_queue_list.do%3Fsysparm_userpref_module%3D91e0175a37152300d27b8cf6c3990e07%26sysparm_query%3Dstate!%3Dcomplete%5EEQ%26sysparm_clear_stack%3Dtrue";
		
	} else{
		parent.location = "/x_nuta2_nutanix_ca_nutanix_process_queue_list.do?sysparm_userpref_module=91e0175a37152300d27b8cf6c3990e07&amp;sysparm_query=state!=complete^EQ&amp;sysparm_clear_stack=true";
		
	}
	gsftSubmit(null, g_form.getFormElement(), 'nutanix_sync');
}

if(typeof window == 'undefined')
	runScriptIncludeCode();

function runScriptIncludeCode(){
	updateCalmVersion();
	
	if(new x_nuta2_nutanix_ca.Migration_Script().updatedOneDotFiveDotOneMigrationNeeded()) {
		var appUtil = new Nutanix_Calm_Utils();
		appUtil.insertIntoQueue('startMigration_1_5_1', '', '', '', 'Migrating to v1.5.1', 'This process is migrating v1.4.5 to v1.5.1');
	}
	if(new x_nuta2_nutanix_ca.Migration_Script().checkForTheRuntimeConfigurationsCatalogItems()){
		var appUtil = new Nutanix_Calm_Utils();
		appUtil.insertIntoQueue('startMigration_1_4_5', '', '', '', 'Migrating to v1.4.5', 'This process is migrating v1.4.4 to v1.4.5');
	}
	if(new x_nuta2_nutanix_ca.Migration_Script().isCatalogItemsAvailable()){
		var appUtil = new Nutanix_Calm_Utils();
		appUtil.insertIntoQueue('startMigration_1_4_4', '', '', '', 'Migrating to v1.4.4', 'This process is migrating v1.4 to v1.4.4');
	}
	if(new x_nuta2_nutanix_ca.Migration_Script().isMigrationNeeded()){
		var appUtil = new Nutanix_Calm_Utils();
		appUtil.insertIntoQueue('startMigration', '', '', '', 'Migrating to v1.4', 'This process is migrating v1.3 to v1.4.');
	}
	if(gs.getProperty('x_nuta2_nutanix_ca.1_4_3') == 0){
		var appUtil = new Nutanix_Calm_Utils();
		appUtil.insertIntoQueue('start1_4_3_Migration', '', '', '', 'Migrating to v1.4', 'This process is migrating v1.3 to v1.4.');	
	}
	else{
		var appUtil = new Nutanix_Calm_Utils();
		appUtil.insertIntoQueue('startInventorySync', '', '', '', 'Start inventory sync', 'This process is invoking the import of all the inventories.');
	}
	
}
function updateCalmVersion(){
	var previous_calm_vesrsion = parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version'));
	var new_calm_version ;
	//gs.setProperty('x_nuta2_nutanix_ca.calm_version', '');
	var logger = new Nutanix_Calm_Logger();
    var utils = new Nutanix_Calm_Utils();

    var authResp = utils.makeCalmApiCall("post", "/projects/list", '{"kind" : "project"}');
    var statusCode = authResp.getStatusCode();
   
    if (authResp.getStatusCode() == '200' || authResp.getStatusCode() == '201') {

        var verResp = utils.makeCalmApiVersionCall("get", "/apps/version", '');
        if (verResp.getStatusCode() == '200' || verResp.getStatusCode() == '201') {
            var response = verResp.getBody();
			
				new_calm_version = parseFloat(response.split('.')[0] + '.' + response.split('.')[1]);
			    if((parseFloat(new_calm_version) == parseFloat("3.2")) &amp;&amp; (parseFloat(new_calm_version) &gt; parseFloat(previous_calm_vesrsion))){
					   gs.setProperty('x_nuta2_nutanix_ca.1_4_4', '0');
				}
			
            current.calm_version = response.split('.')[0] + '.' + response.split('.')[1];
			gs.setProperty('x_nuta2_nutanix_ca.calm_version', '');
            gs.setProperty('x_nuta2_nutanix_ca.calm_version', current.calm_version);    
            current.update();
			logger.info('Sync Now Calm Version updated-&gt;' + current.calm_version);
        } else {
            current.calm_version = '';
            current.update();

            gs.addErrorMessage('Nutanix Calm Version cannot be detected.Please check the logs and retry saving properties.');
            logger.error('Calm Version cannot be detected. Error-&gt;' + verResp.getBody());
        }
}
}
]]&gt;&lt;/script&gt;&lt;show_insert&gt;true&lt;/show_insert&gt;&lt;show_multiple_update&gt;false&lt;/show_multiple_update&gt;&lt;show_query&gt;false&lt;/show_query&gt;&lt;show_update&gt;true&lt;/show_update&gt;&lt;sys_class_name&gt;sys_ui_action&lt;/sys_class_name&gt;&lt;sys_created_by&gt;mumtaz.ansari&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-24 13:00:55&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;9342931e37152300d27b8cf6c3990e64&lt;/sys_id&gt;&lt;sys_mod_count&gt;481&lt;/sys_mod_count&gt;&lt;sys_name&gt;Sync Now&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_action_9342931e37152300d27b8cf6c3990e64&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-12-23 13:57:34&lt;/sys_updated_on&gt;&lt;table&gt;x_nuta2_nutanix_ca_calm_plugin_configuration&lt;/table&gt;&lt;ui11_compatible&gt;true&lt;/ui11_compatible&gt;&lt;ui16_compatible&gt;false&lt;/ui16_compatible&gt;&lt;/sys_ui_action&gt;&lt;/record_update&gt;</payload>
<payload_hash>667476194</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>18021aa32fd50110e49924c62799b6d4</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb918958f0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table>x_nuta2_nutanix_ca_calm_plugin_configuration</table>
<target_name>Sync Now</target_name>
<type>UI Action</type>
<update_domain>global</update_domain>
<update_guid>ac6d68a27ca44110e3aca98c26b9cbcd</update_guid>
<update_guid_history>ac6d68a27ca44110e3aca98c26b9cbcd:667476194,ee3d5bdec1ac0110f227e483f3d981ac:-1573325864,c4ac53de9cac01109b678ffd2cc54d25:1883042661,a46a93d288ac01104744c48fcf06d94a:-1573325864,e6d0834695a00110747d7133eadabe49:1883042661,4ce1f6ce33200110643d8c8a8babdcdc:145005447,0c988d1c90600110148345504e7030e9:1114803437,d888491c81600110e9698a6aa707ab0b:266260634,83e54598576001107e054502218baad8:1114803437,1c94385cd12001107fb25ebaa5c7cf9d:266260634,df83745cbe2001106640de8121ff010e:1715597309,8503b41c1f200110712dd91c423a0fcb:-1016384484,bac32695819401102ca4becc40d4cece:214543645,2f432e55f79401100d6c8e8c00d6fec6:-409205078,b8a7a11051a27010aed7543f60734812:214543645,66d62910e7a27010c3df9f642524fa6b:-409205078,5cc989dc45ee301086a1f871970b779b:214543645,bc2b248093e23010f92f0ef3ccdabea6:-409205078,96d4087e6852f4100947a08834f518e4:214543645,9f93443e0d52f41004094745aa826def:-409205078,bea7f54e2652f010379a66cf8e529402:214543645,4087314ec452f0105742d116e860d920:-409205078,83c004352ad2301028af5cc2440b6ca4:214543645,eeabbcd7484230105976b9d4ca4b7ba6:-409205078,4fc6a8d718023010c92ae11bc4674c13:-449648381,c6ef9dad7742f41053522e1e0598adfc:1499345845,be21fbf06ac67410118ed7eb3dabb718:236459816,42f1a400f0ca70103de8a38f0aeccbbd:1782239378,4041e8cca38a70107f946f48850d843a:1288488607,5a6fa989ccf13010c587a8c15ff9b6df:-1553726957,7b33ad01f5f1301076c5318cb987a98d:-826934170,477a86c446d53010d4b4e9c09df8b820:1782239378,b39efca78009b410ff80f46aa731a367:-332454607,21c0a2c6c381b0109409e98db61ca9ae:206239443,f890ae86ff81b010f191b5e5f8902d55:-640971994,4b6c7f95a9c13010dafb8c3b9f326f91:206239443,e507738534c13010933c5203d4ef594e:-1553726957,b5a67b45bcc1301037e2968956916c49:-826934170,725330e395053010cb5beeededee244b:-1553726957,3fc2f4a3e9053010f6ec3188650b22ca:-826934170,fdc4ea42905328505bc20d67b3301b6f:-1553726957,ea37130616032c10670fca5e75c219f0:-1779884368,b0559b8231032c10af5e18bc3bd3f9e3:-1914797187,790c556191832810c8fd00ec48239bc4:-1779884368,b9ba15213f832810bca47c39f4d7f63b:-1914797187,45cd6d8c08cbe01083fc0b81b83495f3:-2085355847,da4f1d04ffcbe01019c30320d6928914:-2081461940,ec8576ef49fe6010f288100cedc4df98:-2085355847,0d453eaf44fe60107f1e3e65b5f0a093:-2081461940,481df9dbf5b22010079a9247172aadbb:-2085355847,b0d2fdd3cbb220104a0faabaa21ecb9b:-2081461940,7662955b343220108b468af7a4230b54:-2085355847,98a1591bb4322010035ba2f0befdfb47:-2081461940,5762239ef2be6450815f03ef2a43d583:-2085355847,05af179a9ebe6450eb71186fd4b77f3b:-2081461940,1e6af61a22ba6450f18c4a6edd8fc6f5:-2085355847,07cbaa9e927a64504df8fa89013e49ea:-2081461940,6cb33d06257a24503eb36f4dbc90e2a3:-2085355847,9bca654ebf3a2450f40150113e54fe79:-2081461940,f17694f9e1faa050bc825fef0101dce7:-2085355847,aeea44b111faa05083ffcd9d19e1a544:-2081461940,1eea80b1f6faa05065fbe85609255bbd:-2085355847,116a8c716efaa0506587c72d7e7788a2:-2081461940,d1881fd1b6fa6050c248c7395aa5863c:-2085355847,043817d130fa6050eddb085109e864d4:-2081461940,7bca83513e3a6050b9887f87e83ce650:-2085355847,38f9c711e83a6050aafa60bb9efc324d:-2081461940,88e94711bd3a60503855a0104a616427:-2085355847,1ed10b9912f66050da1305bcb15f2967:-2081461940,757bf219cfb66050e0d21c4ad9e53297:-2085355847,6b93ba9129b660505a4140b27fcb161e:-2081461940,3c07924505b6205023c665c804bd8448:-2085355847,86661a05c8b620502a1d861e6716320e:-2081461940,07e1d2c51e7620501380406c4efcaf96:-2085355847,fdfdc281573620502b6534dc687a481c:-2081461940,7387fd09a9beec10d8624eb62cccedfe:-2085355847,2f27f50932beec1094428ca4844e59ef:-2081461940,133d24b0e33eac10428426e36f65bd25:-2085355847,749c68705a3eac1078167dda1b95a297:-2081461940,cd1e9c60257e6c10ad36c02136aea606:-2085355847,6e41d4e4d33e6c1008c8d9fe6be3055b:-2081461940,d36561b77faae810619d1a9a6a356445:-2085355847,ccf42977adaae81060c16ab2726dd3ac:-2081461940,1aac2caf902ea81061daeaa6b10e09bf:-2085355847,359bc85fb622a8106b69a2c053d47d69:-2081461940,3c97ae8b4322681044e08a048d989de7:-2085355847,dd472a8b272268100a6def77e830eb73:-2081461940,123c677e23262810e9692fa1fa56fe8d:-2085355847,d19aeffaec2628104f413e4e12bac3e1:-2081461940,19e5d6fecee2e410bc87932e60bd1285:-2085355847,22de8aba04e2e410644b0457ac020eaa:-2081461940,4ca129fe582ea410116e9b8fb57d2ccd:-2085355847,395125fe602ea410d8a325d14b5aac51:-2081461940,30a3330e482e2410dc3e6f4f17670828:-2085355847,3471f30ec42e24101bbba605840cb064:-2081461940,2e90a6658ea22010aaa5a5b9a43d5793:-2085355847,6e40ee2550a2201018bc37bd9aefbe95:-2081461940,d3c352ecd04fa410a263030ea6cfd31e:-1779884368,9843d2ec0b4fa410af7f964f15aa4954:-1923024751,52c51614f783a41023254827a70c4021:-1779884368,a0702d58d80f6410e02fabfd0c526d99:-2085355847,ffbdd594c10f64107850056dab06d1bb:-2081461940,b6a5b890e7476410ede021f8ad338ffd:-2085355847,2ee4bc5043476410dd05b2743a11edd6:-2081461940,4733b810f14764102786ead6130f43f6:-2085355847,8be27410924764104de1c61b968143ac:-2081461940,b7c2f010fb4764101f6cd7dde216c403:-2085355847,93823cdce407641073b573f992ee82a9:-2081461940,ec32f4dc79076410b2089ed578c6b35c:-2085355847,33d1fc9cad0764108f7c56ff6c0fda53:-2081461940,178e641c71076410baf051265ec349da:-2085355847,959e9c1022076410c4547d692ad20667:-2081461940,93a56e80fb032410355b213bcd92e032:-2085355847,3d55a6809e03241062b877617daf4be0:-2081461940,b38616cc13c7e010bab43cabfb8e9912:-2085355847,e8265e8ccfc7e010b2599a4153e807ac:-2081461940,6fe51a8c68c7e010669e7a9f919e67f8:-2085355847,6f65128c50c7e010e60cc0c70e557e22:-2081461940,9d359a4cedc7e0100e149e0e3eb0f6b1:-2085355847,88f4964c6ec7e010d1983a99c4020875:-2081461940,aa14160c4bc7e0101d7ff1047c5e01ba:-2085355847,4b1bc244e3c7e0107ebf88c90e360cd2:-2081461940,efa7cd04004fa010122cd754611cad8c:-2085355847,385705045d4fa010414558f762c49e04:-2081461940,434ee71c8a96e810270f3bc19b78dc8c:448599724,2e67a6f236c6e41074a97ad64fdf5b96:927579386,883666b2d0c6e41053074ff217794063:-778390707,52779ef2ec86e4101d3a96c01232cae0:927579386,a0b59ab26686e410f572181be83980dc:-778390707,5f7de9f6d706e4105db9289cd6d3bf1c:927579386,09ed45fedf82e4105bbde8f902c78c60:-2013979218,bb8d01fe2582e41072302ae34819fa54:-1772394215,8e7d8dbea482e410152c7e54dcd27a15:-2013979218,ad0b817ee982e41076dd053269d6754c:-901214150,56dacd3e0c82e4103ca6bc6fdb97046a:-1636415475,db29c9fadd82e410aec9de239130da73:-901214150,09d885fae882e4109566421fbe6d1397:-1636415475,cdf2347e4442e410c70eac018052bdc0:-901214150,9012783e8c42e410f5ff9e720fdd807e:-1636415475,14cfacba7d42e4107120114ce254034c:-901214150,ebae20ba1442e410b7da172bdfccf981:-1636415475,b340dc9a8fca641047979e528077fad3:-901214150,60409c9a6dca6410b6df5c4c3c20b8f5:-1636415475,54409c9a3bca64108d569b74e4dce0c0:-901214150,72205c9a1eca6410cf4f9b89b8b9a1e2:-1636415475,ae205c9adbca64106902ef4e39227e9d:-901214150,f58b04d6c3ca641015b11ee62fcb9e4c:-1636415475,3fc99f42ff4a64109e1ad0661420dc46:-901214150,64d94bc22b0a6410728b1dd315f16205:-1636415475,d5ffb28603466410a2a0f20ce3654ca0:-901214150,f5efbe46e746641071c6f89b4964c653:-1636415475,6def7e466f4664108352fed0de071b56:-901214150,ad3bbece95c2641062a152f30d76a960:-1636415475,2031865b3e4d60100bba99b8b9ee298f:-2027390131,954a85d38c81601016cf914bbd6b6297:-1458023348,8cbba636e4852010cc4c629ea1b17ecf:443524632,7119161334812010643957c0c7e2f6e3:1271541381,3a00179bd94d20106b22734218437e4c:443524632,84972a0ff6c9ec50e1e51f508741dad5:774654541,bed4268bb4c9ec50fa4a5908e34d5434:-665457203,7502260b6ec9ec50a18c9abecd7911c0:11459980,6db982b26909ac50f594a5b875055d35:774654541,020906725509ac50a68611b427abb439:-1816305126,ac968d3a79cd6c50012f12902470f679:774654541,055405f6facd6c50f1be151aedaf9c3e:-1816305126,ae3a64fe4b4d6c50a3cdabf7cfc51e42:774654541,b80823aa81496c50ec289afbdb0189a5:1603526084,7827e76a62496c50193074c6ff467619:-1816289647,a7e9bc6223816c50ed489076f611a49f:1603526084,f62d6026b5416c503df2cbd98c6978ff:-708314117,dbacace2d9416c505abcf6c2dca78998:-708303736,de5f42dad4492c50805d58a8d3735fe4:-708314117,d5c8c696d3492c50e2bee26dd969ba26:-708303736,761c62025d89e8507c98a731ce38e5c5:-708314117,3830260a9149e8508a911b4da927e985:-708303736,74bf3d4a0685e850cef0e6b064023ae7:-708314117,defbf1c65b85e85088ea7397a5853714:-708303736,fed661e9a145685094dcab1b18a4e92e:-708314117,5cf4a969f7456850437b9e97fc8ec682:-708303736,ad1ed755c709285068326d59c6472ab3:-708314117,f19d135562092850278673b5b86074ae:-708303736,a31cce453049e4501dde87e41ae85d8c:-708314117,7e0b464d0109e450e758cee70d9bd8e2:-708303736,9002977c37cda45014f4440fd8ed5d8b:-708314117,25819f3c13cda450045fd9ef95e985cc:-708303736,35fd83f0db8da450c8b70d72e2c32589:-708314117,d77d0fb0548da450ec10fed3b323e116:-708303736,d0b9cbf4eb0da4509c2cca0e8458a3c4:-708314117,34d747b4c10da450fbbbe63f2a7022f4:-708303736,b0713537b97ce050652c5abb3ea63cf0:-708314117,c1cb12f21bb46050185ed8454a08dae7:-708303736,30ef6db236b060500f52dd69eea202fd:-708314117,0175eea241b8205098d2a1aa657c0892:-708303736,e7f322a2b9b820509a2d209ab888fb6a:-708314117,ef932a622fb820508e3253312bde2b83:-708303736,f45d5266ed38205054f268bea2b4a87d:-708314117,642c522632382050b7c899c4d5cce5ee:-708303736,d63c79ee96b42050f4bf0ded63640cbe:-708314117,99bbb1eee7b42050ac893ac57a931d09:-708303736,dad3ec9a6fb4ec1072a36cd61c82e816:-708314117,6833249a8eb4ec109918c7dfb47cd5cd:-708303736,970ddc5e3334ec10ab7b1a4a5386abee:-708314117,60b0d8563e34ec10c9e2c682fdfa7952:-708303736,5f6c6af9b6b0ac106eec7c66e346ce76:-708314117,9679e6799bb0ac109ef40e26abef1eb6:-708303736,ca4152757130ac10e19587901286cfd3:-708314117,91e01e356130ac10113d71719cc3d21e:-708303736,d933be1a36ac2410d3e6b341f55bc507:-708314117,b742721a4bac2410bdbecdbb0bdbbce8:-708303736,eaf462da0a2c241016ce27dbc75e14e2:-708314117,31b46e9a852c241052c00b7d9784bf01:-708303736,15485a9e80a82410e1cb1c1056749889:-708314117,3c08169ec0a82410d2998c909e872847:-708303736,f8231e9670682410c9b6dc9d8279edd2:-708314117,21525296c9682410c1a0b117c8c62ea6:-708303736,ecb5c29ad3e4241024718d8976609f44:-708314117,da550e5a1ee42410e0cc561ba193b3f7:-708303736,496c351ed3642410ebaae988096cceed:-708314117,6d0cfdda2d64241015689432c6e6c4a0:-708303736,bd137206952ce01062b72fc2fee752ce:-708314117,9e1442863ba8e010f3557b707c157164:-708303736,1604a8b7d794e4100f6c20b0674b3f68:-708314117,dc3f54f32794e4101f1602a65937fe2b:-708303736,b79c88b7e114e4108b71c805f0f2d4e1:-708314117,e0f90c37cf14e410bb7361bc6453f5a1:-708303736,8ab3e16b775ca4108aaedaa805caf5b5:-708314117,d2389d63df5ca41066f63833cd912d33:-708303736,f7b4116f3a1ca4100ccfdc9983e1b371:-708314117,ff44192f471ca410f8be2e4ac89f70ef:-708303736,fdcf4da7971ca41012a548687b33bc85:-708314117,8e9f49a7e71ca4102809a07889e8f8fe:-708303736,d57b4163a51ca410b78860fc13a8ae0f:-708314117,ad2bc923311ca41032b947b7b1ad0837:-708303736,d989c92ff6d8a4101bb92234cd226541:-708314117,1049452f23d8a410595f9bb54f53c0e3:-708303736,3feee06b2698a410fd3741bac47593d5:-708314117,c5beec2bd598a41005120fa533a6b3b8:-708303736,6e2628aff958a410f48fc496ba2eb932:-708314117,e25068abd658a410233edc6a3275b925:-708303736,b07e1ca7c658a4103367e4e7f8e443de:-708314117,1b0e94a74f58a410af3f54285c8bee3b:-708303736,c80c7b5f48d4a410da07d064bc283672:-708314117,99bbf35f66d4a410d47553af95ee50d3:-708303736,35461b532c94a410b781fc196ad6d89b:-708314117,aaf517530594a410a30ecc83c2ed7b28:-708303736,996cc31bf454a410d024c811941fe36b:-708314117,0d1c8fd7bf54a410eee18d26b1b4705e:-708303736,e70a4fd3d654a4101cdfd10c1dd7b5a6:-708314117,e19987d35054a410910e615b06c017f8:-708303736,68160b9fe114a410b51c0eabddc4db90:-708314117,3675039f2d14a410c47083aff8c97041:-708303736,d368fe53f714a410b1966661624f49fb:-708314117,48c3430b43986410d8312625d01b49c7:-708303736,b45f92cb601864103ee36ee65f5f25d2:-708314117,068956c71d1864105e0b07e220eacd5b:-708303736,0cdd874d909420106c981e1793d110a2:-708314117,d09d434d4c9420105e73a9fe3d9ad9de:-708303736,8196edcd11d350106258c75c9d81a638:-708314117,7c4e5c050e135010b844def08d4a7897:1646977599,8ad4c270071b1010a849c2358242f40c:1271541381,f0d3f93c37d3101034de07c551da5ea2:980671885,b9b3b93cf9d310103178c8006943f903:2038853953,69b3793cd4d31010caaa6d1f6531afab:980671885,65518e803b9f54d082e20effd62e3c9a:-467769775,7e2e5ab3c44754d066465a81bd8a44e5:-1784174370,85af9ffe620b90d04191c4282da1b590:-467769775,6daa7f9e194750d078584e3a53b81eb1:-1784174370,cadcc519d0c39c90591b426b471d2ea7:-467769775,b1925af06e835c90faf52505606df0fe:-1784174370,6712d260d0031c903aad89914b6e66e9:-467769775,7f1c8a2ceccfd890833d84cbf1443004:-1784174370,918df8acd5fe1c50dedb97d9d3dae57b:-467769775,9b3408a0277e1c5076409bf8eb46ba27:-1784174370,992f2ed4837a1c500fd1d9b79a737caa:-467769775,174a0fc4f9321c502e0a48ada7d2b7ee:-1784174370,378c58bb366a985052acdb231c732b19:-467769775,9c1b947b6f6a9850059b2d8f5d004699:-1784174370,96839c730a6a98506a2315778a07ded6:-467769775,71f110731c6a9850da55ae104156bdd3:-1784174370,6951b793592a58504696ecd910025a43:-467769775,77d5ab9b43e65850ff1617394df35e31:-1784174370,21c7135bb4a258501195e7a3bbf6f1bb:-467769775,fad6531b41a25850e03288f37e119dd0:-1784174370,bc941b17aaa25850f1d072a9fc7cec43:-467769775,b093dbd373a25850a151fcfc2fd8d016:-1784174370,606b4bdb8b625850455f97ec04e6419a:-467769775,548c201ba6ea1850f43b3632ef6d9c3f:-1784174370,289ccd6eaea694506e4a71a77a96ec27:-467769775,6cabcd2e7ea694504e96bf9c4714a214:-1784174370,2a494d2a01a694503ead5781206bca74:-467769775,81d78de686a6945087c40cf3aa344acf:-1784174370,08a201a233a6945090786731b2dc8990:-467769775,58100522a5a69450a7f4fc653d2f3d3b:-1784174370,74b854ee54ee5450299eaa994c131da2:-467769775,75b5f4127fe6545029138e0e29f71c04:-1784174370,ef21d416ee625450726b8cc138033076:-467769775,5df944de1f225450bf440fa669a741d9:-1784174370,9640f6062e2a1450815fd4cb46f41cc2:-467769775,bf5feac2ae2a1450128d64f8bf2c2d9c:-1784174370,6bd80dad5d6e90509725c85184f86a77:-467769775,8ce389a92b6e905021201da3e082ac81:-1784174370,7479dfddada6905008fdffb2b1fda8d4:-467769775,93f6a9191aa290502b28f7d985cf1636:-1784174370,6150904d88ee1050fa33891c079a110d:-467769775,09b68c8598ee105004f5db5882a32f24:-1784174370,f80ca8d480ae9c10a6a6be9dd0a2c502:-467769775,e15aa4947bae9c1052528fea5ca3f122:-1784174370,983d50c8176e5c104e4e97c5efd6e3bb:-467769775,0b9c5888e56e5c10e36ad6af7c657745:-1784174370,c2bc000ce5aa5c10083301055bd78304:-467769775,a5fb04c8f6aa5c103bcad0018ba2d1ef:-1784174370,ad0bf73f8b1a5c10fe76888b2be65be8:-467769775,57a62f7bc1565c1082f1dc99e9895e45:-2103075343,abd6d7ff42165c105069915cd13ba486:-1295507522,cc2017b7d8d25c10ed3f8785952f0a88:-2103075343,758f4b7727d25c1018e843b646779e32:-1295507522,b8f0e63b789e1c100795b4a4bd03730b:-2103075343,b36062b7889e1c107584ede5e0f7073d:-1295507522,4939f2ebc4521c10a401ed76d7981461:-2103075343,3b9732ab43521c10e059e8b3a253766a:-1295507522,afaad99fc6de981035a424595cf9b59d:-2103075343,1faf09d7cbde9810ab27a35e980ca78b:-1295507522,d639cd1fdb5e981040737df589103a05:-2103075343,e14478df071e9810f610c62317d72333:-1295507522,30d113bd1b16d4109437d942c35ad698:-2103075343,4d5545b548de941020786a8de05ef971:-1295507522,3040087d841e5410a73b07adc1492613:-2103075343,21a1bfe1ec1e54105b4d6bcd5b5d12f4:-1295507522,3c2b854c6cd21010ab54152d5be96b49:-2103075343,d9aacd0c96d21010b681db87340fdb8e:-1295507522,1fb14ea4e90a1010b9c2c3362cd53948:-2103075343,10cc356c3ec610109c9c30277cac33e1:-687824871,da0c3d2c82c61010fa9e02ea55507944:-976423484,fae9f1a034c610105c85a1da64afc5bf:2025208838,d1367d6c118610103c2a013c55b95ecb:1515512998,c1637d6c1e8610102d93ae66ace30c26:963336326,e17dad68d78610105fe0f7e78d89093b:1425056729,a53b25a435861010d0bf55cf0b85683e:963336326,aafa2964bb8610108e7c7a49060c81be:-1208593942,99f9296456861010fadc6993c0479ec8:2120431144,8b486924b18610107e673ac3d4f16341:-1208593942,1618a5246286101021290cb46bd9c488:1230900458,dd27ada08f861010472bc7f248b42723:2087597464,62e5edec81461010c86b6d153c81f2bb:900627373,7111c1e0f906101034266d427d0479fc:1271541381,f8d0cda07c061010b53987580c1b2b89:975999704,dd9ff86c6cc2101058dd2fed235dc242:1271541381,d05ff46c12c210103456b6f1f0930e4b:975999704,9bacbc64cac21010b120e19fd47f6097:1271541381,2eba9ca46c4210100b4c0bbf2eec28d4:975999704,e100985267f118103cd90447b939fc49:1271541381,1abe0812d3f11810c59ee6ccc9a70e40:975999704,9b0817475f041010b0455a103e52cfae:1271541381,b714a08e44d78010e4620406a0d97494:975999704,7bc1bf81bcd340100efb6ce5120254d0:1271541381,ee01f3814fd340108d53146e3f987525:975999704,b5e56f852793401039109cd98af0d4b1:1271541381,c6c5ab854d934010e2de9dec94e6d13e:975999704,7ca5a7854c934010a0cb7eee76ed5b35:1271541381,eb55ef459f934010163924b704f4d35a:975999704,4c8f7ec58413401076c133b45f63d283:1271541381,c83e3a856913401048565abcacb96619:975999704,969dbe45a213401095ac915259d4469c:1271541381,0c0d364532134010f4492284fbec7225:975999704,a6cc7e05581340108534b8007ad1fc96:1271541381,2f457e8de8df0010d31c2fa5eccd8efa:975999704,eb4f2e85be9f00100e3b1a8a4a2cc393:1271541381,24f8a6458a1f001036c8bffe79fd967b:1990093829,87182e450c1f0010de83422730a20ea1:-267174851,e3036641771f0010782105c4716564fe:2052147412,1102eecd35db0010a6e7d0fc3151bd5e:1560078981,a8716a8d16db001080b65a037424232a:-1849389703,490126cd25db0010b85f093b8852dc0e:591380689,6e706a8de7db0010745291a78af207e0:-783699060,2a10a28d2adb001033b8b1b2ec9a4dc8:591380689,faed920d17db0010913c40e933299bf5:-783699060,b5bb91e53cc74010a517c9d5b9c3dd48:591380689,564bd5a56fc74010e33cc0d0d8dae58d:-128407402,03949d6d80874010f2da3523ecd47d4b:2019096243,3f64d96d738740101b0af604f95193db:-1491246676,47349961b2874010402bbd2fa69b0b47:-220654354,142411e1b3874010ac072c229e479e23:-2008962947,9c14516dd0874010695819b82a6400e4:-1286085155,4b1e4161ed8740104c03d979ce8cbcbd:2038242813,0bbd89ad38474010430423865e480cc2:754528827,c3965059bac7001093abf081d6d8e786:1492362791,ddce3385ff87001053a61e1f68b215ae:-600000013,22fa97890d830010fa0492a5d79220c1:1492362791,6cad03415783001039f40c87a61911ea:-600000013,e15da472cb11001039b9ae68bafe3578:1492362791,2d548e37d8a000103476e266d9d0caa5:-1010824337,2134ca3796a000101a688208bfc90b11:-70679749,c36e21631ae00010226b334552333733:-1010824337,226eed238be0001042650d7a3d35a538:-70679749,ecfda523e5e0001045552c584e57b9dc:-1010824337,14fd652371e00010892d94411d9aee18:-70679749,fe9d2123bde000104c0da7cbd1c6d364:-1010824337,269d2123fae000106f7ddc72ccb8dc13:-70679749,cf8c61efe5a00010ef834256f1812f3c:-1010824337,57ab65afcaa0001089c79a73819a16d0:-70679749,294bad6fb8a0001098dc5ec641697e02:-1010824337,3ada296f95a0001031145024ca590f8e:-1258394346,72da296f0ba0001086272f634f4b2361:-1762257118,fc9a256f2ea000108682de2972e1bf70:-1258394346,3c9a256fdea00010122637d59998464b:-1762257118,127a216f53a00010d07d8763c7b7e76b:-1258394346,8209612f06a00010f211196957a5e336:496574537,7109612f8aa000109f50d858d9b72e0f:1135659413,d2c86deb8fa00010c582bf21616657ff:496574537,16e625ab48a00010e98bd5e24bb2a3dc:1135659413,2c766d6bf2a0001017786b5665c61c6d:496574537,cda32de77da000108194a21a0e3b1603:1135659413,c11e59e367a00010cb41d91c5cdf7f55:496574537,7c1e19e356a00010f5f2c7cdddcd618b:1135659413,9e0cd963fea00010602e7fe132d36f09:496574537,18e3112f18600010ea51e727556237ba:1135659413,333e21229720401075a3e849a18b29e1:496574537,d3bde1ee0aec001059c037f6be2219d7:1135659413,d75ce1aeaaec00100c54e8c768b01d52:496574537,1ccb296e6dec00106dda4c9762bc7d98:1135659413,d2623c568c6000109d5f07a028c27eef:496574537,0d427856146000104c3f4f0ed2fa6b20:1135659413,11bcce078d1b00101f87eb0ea90e60a3:980671885,ce6c86ecc3d90810e41dce6031e1c0d4:2038853953,687b06ecf6d90810bda09aa5bf6faa22:980671885,a45b0e2892d90810f9daf23e39ce8649:2038853953,39d0026c2059081089ffc92a7706b8f7:980671885,40a04a2c8e590810215c91bd145f51d6:2038853953,84cbf5a8a6190810f8182a50f7ab5fad:980671885,24bb75a8301908101fb3b131acc584ba:2038853953,1a9bf1a88d1908101dc341ca6426096b:980671885,cc9bfd28d8190810523dc745da8eda4f:2038853953,fb009aedfac10010e93ebfbf4af2934a:496574537,33bf86edd0c1001083607e8ea737aa25:1135659413,e3bf42ed1ec100107ba951cc05208011:496574537,ed5ec2adaac10010402f939c82b25009:1135659413,555e4e2950c10010667142c8ff46a424:496574537,854e42adc0c1001029ce797ed0c7cbb7:1135659413,0d4e822df2c100109febf35fe66e1497:496574537,b70ec22d95c10010bba37c01fe1c92fa:1135659413,e30e0ae974c1001008e3099b4bde195d:496574537,62fdc2e94ec10010017f4dad362973a9:1135659413,8c15d0fadc33f30081c32d819ce9bad0:496574537,235df666203fb3001ee5804c73fd43bb:331251442,ea51da08713373007390913f0aeb32a1:-667355002,6c005ec40d33730068440fcc924881f2:-2091137646,8ab7613bcb273300b54293d87175aa6b:-667355002,0ee5fcfb8fa33300ad47a3240af86eb1:-2091137646,dd351f8df5237300a085ef1fad163e27:-667355002,a1d4978da6237300c9ffc26a7a86a0ef:-2091137646,b482f58d90eb33008487bcf13ad3ff33:-667355002,c422718d86eb3300900525021b5a6094:-2091137646,0d5db950e2973300632d5f35a32490d1:-667355002,4f1db55046973300c2a2f302accdb99f:-2091137646,745b6c645b833300d38e350fc074083e:-667355002,6ce528a077833300d92f47cc589aa1ee:-2091137646,bcf406db9ec233005dc3533f72b2efcb:-667355002,0282b8264fbb330059dfcf348ac5e6e6:741104852,ec430a239cdf3300324eb8b25cf56591:-667355002,723d716f9b9f3300eac64e5539fd9cfe:-2091137646,185a26a2575333005a63cae2ae17e36a:-667355002,afc866621453330008b11155348dd210:-2091137646,53c1407c4b937300798fe200de324f3e:-667355002,73bf73ac779373002e7e0c65972e0826:-2091137646,dcddeb90bcd733003196cba807b0e5a5:-667355002,99fcef1430d73300f548df38e83dbc14:-2091137646,c5f14b93e38337001011d62c9225b177:-667355002,ba700b53188337009a046424588cb68a:-2091137646,106e2ad33d0337004280f25b90c7905e:-667355002,b0cce693ac0337005e65ea8d30dbff60:-2091137646,86456fcffec7f300f9f6088239fd2d5c:-667355002,f4d467cfeac7f3002e3dee6cfa32becd:-2091137646,eceeaa4f9543f3005c5a197cbdddc37f:-667355002,ab8e664fa743f3002a90f5e8d64c736a:-2091137646,461a2e4fc103f30027bb9a9c07b7f833:-667355002,c1e9e64f7703f3000f9cdf4065a7a9d7:-2091137646,c762668b2fcfb3003a76d8446e2dda26:-667355002,f0e16ecbebcfb300edac5523427560e5:-2091137646,c71e1ecff38fb3003bdc26277be9bae9:-667355002,84ddd6cf348fb30079ab108084a88fee:-2091137646,3066c1837b4bb3007c3c11863e2f85d9:-667355002,1936cd43314bb300ed473a1165e8d9be:-2091137646,d58adf561ccf3300a2ae05c5912cc98a:-667355002,8a89db5681cf3300d824e2176eff1460:-2091137646,21d43a41dc037300ad2d157fd6dd104c:-667355002,6506c9f453433300f27815c666ad9c82:-2091137646,15181d6c96473300571493f7a088bf84:-667355002,12c7d56c2547330009f2b54bf6f09341:-2091137646,0b93112c4b0733006eee681b363a812b:-667355002,4c6199a806073300ff48b285970db65a:-2091137646,afa7df08df43330090de91953d3e9367:-667355002,216797c89343330069870d1d892e675e:-2091137646,d5530fb665fa7300b7865aa0fbaa6694:-667355002,db22cffe63fa73005b5d6d1d2101de7f:-2091137646,acbba7712ff2330077e9714719240b42:-667355002,8d6a6b31a7f23300d4d1507c12fffd35:-2091137646,3568addb1e26b300d87f0c8c11a8336d:-667355002,9aa5e19b7426b3007b2a4aa37d03e858:-2091137646,367d6d8a78ae33004f356e514e54362d:-667355002,e8d6a986bdae33004a3c7cc9328f26d7:-2091137646,a57dee7525d633008c0161b54911381c:-667355002</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_dictionary_x_nuta2_nutanix_ca_generic_table_for_dropdown_value</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update&gt;&lt;sys_dictionary action="INSERT_OR_UPDATE" element="value" table="x_nuta2_nutanix_ca_generic_table_for_dropdown"&gt;&lt;active&gt;true&lt;/active&gt;&lt;array&gt;false&lt;/array&gt;&lt;array_denormalized&gt;false&lt;/array_denormalized&gt;&lt;attributes/&gt;&lt;audit&gt;false&lt;/audit&gt;&lt;calculation&gt;&lt;![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]&gt;&lt;/calculation&gt;&lt;choice/&gt;&lt;choice_field/&gt;&lt;choice_table/&gt;&lt;column_label&gt;Value&lt;/column_label&gt;&lt;comments/&gt;&lt;create_roles/&gt;&lt;default_value/&gt;&lt;defaultsort/&gt;&lt;delete_roles/&gt;&lt;dependent/&gt;&lt;dependent_on_field/&gt;&lt;display&gt;false&lt;/display&gt;&lt;dynamic_creation&gt;false&lt;/dynamic_creation&gt;&lt;dynamic_creation_script/&gt;&lt;dynamic_default_value/&gt;&lt;dynamic_ref_qual/&gt;&lt;element&gt;value&lt;/element&gt;&lt;element_reference&gt;false&lt;/element_reference&gt;&lt;foreign_database/&gt;&lt;function_definition/&gt;&lt;function_field&gt;false&lt;/function_field&gt;&lt;internal_type display_value="String"&gt;string&lt;/internal_type&gt;&lt;mandatory&gt;false&lt;/mandatory&gt;&lt;max_length&gt;200&lt;/max_length&gt;&lt;name&gt;x_nuta2_nutanix_ca_generic_table_for_dropdown&lt;/name&gt;&lt;next_element/&gt;&lt;primary&gt;false&lt;/primary&gt;&lt;read_only&gt;false&lt;/read_only&gt;&lt;read_roles/&gt;&lt;reference/&gt;&lt;reference_cascade_rule/&gt;&lt;reference_floats&gt;false&lt;/reference_floats&gt;&lt;reference_key/&gt;&lt;reference_qual/&gt;&lt;reference_qual_condition/&gt;&lt;reference_type/&gt;&lt;sizeclass/&gt;&lt;spell_check&gt;false&lt;/spell_check&gt;&lt;staged&gt;false&lt;/staged&gt;&lt;sys_class_name&gt;sys_dictionary&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2019-07-23 10:39:26&lt;/sys_created_on&gt;&lt;sys_id&gt;4fd1af354fb23300d8494ebf9310c755&lt;/sys_id&gt;&lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;&lt;sys_name&gt;Value&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_dictionary_x_nuta2_nutanix_ca_generic_table_for_dropdown_value&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2022-01-24 12:21:22&lt;/sys_updated_on&gt;&lt;table_reference&gt;false&lt;/table_reference&gt;&lt;text_index&gt;false&lt;/text_index&gt;&lt;unique&gt;false&lt;/unique&gt;&lt;use_dependent_field&gt;false&lt;/use_dependent_field&gt;&lt;use_dynamic_default&gt;false&lt;/use_dynamic_default&gt;&lt;use_reference_qualifier&gt;simple&lt;/use_reference_qualifier&gt;&lt;virtual&gt;false&lt;/virtual&gt;&lt;widget/&gt;&lt;write_roles/&gt;&lt;xml_view&gt;false&lt;/xml_view&gt;&lt;/sys_dictionary&gt;&lt;/record_update&gt;</payload>
<payload_hash>1273958971</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>1c021aa32fd50110e49924c62799b6d0</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb91c1ffe0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table>x_nuta2_nutanix_ca_generic_table_for_dropdown</table>
<target_name>Generic Table for Dropdown.Value</target_name>
<type>Dictionary</type>
<update_domain>global</update_domain>
<update_guid>e33a89784f59c1109196771798feb693</update_guid>
<update_guid_history>e33a89784f59c1109196771798feb693:1273958971,ff2c12f3794777006d49011c2c425680:-1154148757,9bf7da33cb477700630f51a9b2657b5e:885116054,9b922bb5beb2330019df0d2a975d369b:-1154148757</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_caeab4864f337300d8494ebf9310c73e</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;public&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Migration_Script&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;true&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Migration_Script&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Migration_Script = Class.create();
Migration_Script.prototype = {
    initialize: function() {
        this.appUtil = new Nutanix_Calm_Utils();
        this.logger = new Nutanix_Calm_Logger();
        this.createVariable = new Nutanix_CreateCatalogVariables();
        this.appScriptInstance = new Nutanix_ImportApplicationProfiles();
		this.protected_var = 'protected';
    },
	
    checkForTheRuntimeConfigurationsCatalogItems: function() {
        try {
            var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
            gr.query();
            if (gr.hasNext() &amp;&amp; (gs.getProperty('x_nuta2_nutanix_ca.1_4_5') == '0')) {
                this.logger.info("Migration to V 1_4_5 require");
                return true;
            }

            this.logger.info("Migration to V 1_4_5 not require");
            gs.setProperty("x_nuta2_nutanix_ca.1_4_5", "1");
            return false;
        } catch (e) {
            this.logger.error("Exception caught inside Migration_script.checkForTheRuntimeConfigurationsCatalogItems() Error : - " + e);
        }
    },

    updateTheFetchOnChangeClientScripts: function() {
        try {
            var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
            gr.query();
            while (gr.next()) { //nameINFetch dependencies on change of profile,On Change of Environment variable
                var catalogScriptGR = new GlideRecord('catalog_script_client');
                catalogScriptGR.addQuery('cat_item', gr.item_name + '');
                catalogScriptGR.addEncodedQuery('nameINFetch values OnChange,On Change of Environment variable,Fetch dependencies on change of profile,Fetch form data on change of profile,Hide Order details on request');
                catalogScriptGR.query();
                var catalogClientScript = new sn_sc.CatalogClientScript();
                var fieldList = [];
                var envFieldSysID;
                var profilesysID;
                var fetchformSysID;
                while (catalogScriptGR.next()) {
                    var field = (catalogScriptGR.cat_variable + '').replace("IO:", '');
                    catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                    if (catalogScriptGR.name + '' == 'Fetch values OnChange' &amp;&amp; fieldList.indexOf(field) == -1)
                        fieldList.push(field);
                    else if (catalogScriptGR.name + '' == 'On Change of Environment variable')
                        envFieldSysID = field;
                    else if (catalogScriptGR.name + '' == 'Fetch dependencies on change of profile')
                        profilesysID = field;
                    else if (catalogScriptGR.name + '' == 'Fetch form data on change of profile')
                        fetchformSysID = field;

                }
                var fieldListLength = fieldList.length;
                while (fieldListLength--) {
                    var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript.setAttributes({
                        "name": "Fetch values OnChange",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "cat_variable": "IO:" + fieldList[fieldListLength],
                        "active": true,
                        "order": 1000,
                        "description": "This script is auto created thorugh runtime module for fetching values.",
                        "applies_catalog": "true",
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,
                    });
                    onChangecatalogClientScript.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) {if (!sessionStorage['varValues']) return;var varValues = JSON.parse(sessionStorage['varValues']);oldValue = varValues[control.id + ''];if (isLoading || newValue == '' || oldValue + '' == newValue + '') {    new GlideModal().get('loader').destroy();return;}function varResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service; var var_array = [];for (var i in prof_json) {if (i + '' == control.id + '')continue;var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);varValues['IO:' + i] = curr_value + '';var parsed_field = JSON.parse(field);parsed_field.def_val = parsed_field.value + '';parsed_field.value = curr_value, parsed_field.sys_id = i + '', var_array.push(parsed_field);} getAdvancedVars(var_array);for (var j in serv_json) {var_array = [];for (var k in serv_json[j]) {if (control.id + '' == k) {continue;}var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);varValues['IO:' + k] = curr_value + '';var parsed_field = JSON.parse(field);parsed_field.def_val = parsed_field.value + '';parsed_field.value = curr_value, parsed_field.sys_id = k + '', var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(varValues);}function getAdvancedVars(variable_json) {var act_var_JSON = JSON.stringify(variable_json);var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name', 'variableArrayParser'),gajax.addParam('sysparm_field', control.id +''), gajax.addParam('sysparm_type', 'catalog'), gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + ''),gajax.addParam('sysparm_varJson', act_var_JSON), gajax.getXML(getVarResponse);}function getVarResponse(response) { new GlideModal().get('loader').destroy();var answer = response.responseXML.documentElement.getAttribute('answer');if (answer + '' == '' || answer + '' == 'undefined' || answer + '' == 'null') return;var parsedResponse = JSON.parse(answer);for (var i in parsedResponse) {var row = parsedResponse[i]; var sys_id = 'IO:' + row.sys_id;if (control.id + '' == sys_id) {continue;}var type = row.type + '';if (row.state == 'SUCCESS' &amp;&amp; (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET')) {g_form.clearOptions(sys_id);for (var k = 0; k &lt; row.value.length; k++) g_form.addOption(sys_id + '', row.value[k], row.value[k]);g_form.setValue(sys_id, row.value);} else {if (row.data_type + '' != 'BASE') {g_form.clearOptions(sys_id);for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + '', row.options[k], row.options[k]);}g_form.setValue(sys_id, row.value);}if (row.state == 'ERROR') {g_form.clearOptions(sys_id); g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}}}var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching variables...'); loadingDialog.renderWithContent(''+loadingHTML);var cat_sys_id = g_form.getUniqueValue();var profile = g_form.getValue('default_profile').trim();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars'), ga.addParam('sysparm_catsysid', cat_sys_id), ga.addParam('sysparm_profile', profile), ga.getXML(varResponse, null, loadingDialog);}";
                    onChangecatalogClientScript.addScript(onChangeScript);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(OnChangeCatalogScriptId)) {
                        grChange.setValue("sys_scope", "global");
                        grChange.update();
                    }
                }
                //environment..
                var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript.setAttributes({
                    "name": "On Change of Environment variable",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": gr.item_name + '',
                    "cat_variable": "IO:" + envFieldSysID,
                    "active": true,
                    "order": 1000,
                    "description": "This script is auto created thorugh runtime module for fetching values.",
                    "applies_catalog": "true",
                    "ui_type": "0",
                    "applies_req_item": false,
                    "applies_sc_task": false,
                });
                onChangecatalogClientScript.appliesToCatalogItem(true);
                var onChangeScript = "function onChange(control, oldValue, newValue, isLoading){if (isLoading || newValue == '') {return;} var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\";var loadingDialog = new GlideModal('environment_loader', true);loadingDialog.setTitle('Fetching Profiles...');loadingDialog.renderWithContent('' + loadingHTML);var gUrl = new GlideURL();gUrl.setFromCurrent();var def_project;for (var i = 0; i &lt; g_form.getControl('default_project').options.length; i++){if (g_form.getControl('default_project').options[i].value == g_form.getValue('default_project')) {def_project = g_form.getControl('default_project').options[i].innerText;break;}}var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchProfilesBasisOnEnvironment');ga.addParam('sysparm_env', g_form.getValue('default_environment'));ga.addParam('sysparm_proValue', g_form.getValue('default_project'));ga.addParam('sysparm_pro', def_project + '');ga.addParam('sysparm_profile', gUrl.getParam('profileSysId'));ga.addParam('sysparm_blueprint', gUrl.getParam('uuid'));ga.addParam('sysparm_type', gUrl.getParam('type'));ga.getXML(parseData);function parseData(response) {var answer = response.responseXML.documentElement.getAttribute('answer');jslog(' On Change of Environment variable answer' + answer);answer = JSON.parse(answer);if (answer.length == 0) {g_form.hideFieldMsg('default_profile', true); g_form.clearOptions('default_profile');g_form.showFieldMsg('default_profile', 'There are no applicable Profile(s) that match the selected Environment.  Please choose a different Environment to proceed.');var elemen = g_form.elements;for (var i in elemen) {g_form.setDisplay(elemen[i].fieldName, false);}g_form.setDisplay('default_profile', true);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setMandatory('default_profile', true);}else{var elemen = g_form.elements;for (var i in elemen) {g_form.setDisplay(elemen[i].fieldName, true);}g_form.hideFieldMsg('default_profile', true);g_form.clearOptions('default_profile');for (var i = 0; i &lt; answer.length; i++) {g_form.addOption('default_profile', answer[i], answer[i]);}if (answer.length == 1) {g_form.setReadOnly('default_profile', true);}}new GlideModal().get('environment_loader').destroy();new GlideModal().get('environment_loader').destroy();new GlideModal().get('environment_loader').destroy();}}";
                onChangecatalogClientScript.addScript(onChangeScript);
                var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                var grChange = new GlideRecord('catalog_script_client');
                if (grChange.get(OnChangeCatalogScriptId)) {
                    grChange.setValue("sys_scope", "global");
                    grChange.update();
                }

                //Profile..

                var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript.setAttributes({
                    "name": "Fetch dependencies on change of profile",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": gr.item_name + '',
                    "cat_variable": "IO:" + profilesysID,
                    "active": true,
                    "order": 1000,
                    "description": "This script is auto created thorugh runtime module for fetching values.",
                    "applies_catalog": "true",
                    "ui_type": "0",
                    "applies_req_item": false,
                    "applies_sc_task": false,
                });
                onChangecatalogClientScript.appliesToCatalogItem(true);
                var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + '').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchLaunchVars'); ga.addParam('sysparm_catsysid', cat_sys_id); ga.addParam('sysparm_profile', profile); ga.getXML(varResponse);}function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); console.log(answer); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue('IO:' + i); var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value = curr_value; parsed_field.sys_id = i + ''; sess_json['IO:' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue('IO:' + k); var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value = curr_value; parsed_field.sys_id = k + ''; sess_json['IO:' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage['varValues'] = JSON.stringify(sess_json);}function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); gajax.addParam('sysparm_name', 'variableArrayParser'); gajax.addParam('sysparm_type', 'catalog'); gajax.addParam('sysparm_field', 'onLoad');gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + ''); gajax.addParam('sysparm_varJson', act_var_JSON); gajax.getXML(getVarResponse);}function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) {var row = parsedResponse[i]; var sys_id = 'IO:' + row.sys_id; var type = row.type + ''; if (row.state == 'SUCCESS' &amp;&amp; (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET')) {g_form.clearOptions(sys_id);for (var k = 0; k &lt; row.value.length; k++) g_form.addOption(sys_id + '', row.value[k], row.value[k]);g_form.setValue(sys_id, row.value);} else {if (row.data_type + '' != 'BASE') {g_form.clearOptions(sys_id);for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + '', row.options[k], row.options[k]);}g_form.setValue(sys_id, row.value);}if (row.state == 'ERROR') {g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}}new GlideModal().get('variables_loader').destroy(); }";
                onChangecatalogClientScript.addScript(onChangeScript);
                var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                var grChange = new GlideRecord('catalog_script_client');
                if (grChange.get(OnChangeCatalogScriptId)) {
                    grChange.setValue("sys_scope", "global");
                    grChange.update();
                }

                //formDataDisplay

                var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript.setAttributes({
                    "name": "Fetch form data on change of profile",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": gr.item_name + '',
                    "cat_variable": "IO:" + fetchformSysID,
                    "active": true,
                    "order": 1000,
                    "description": "This script is auto created thorugh runtime module for fetching values.",
                    "applies_catalog": "true",
                    "ui_type": "0",
                    "applies_req_item": false,
                    "applies_sc_task": false,
                });
                onChangecatalogClientScript.appliesToCatalogItem(true);
                var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading) { return; } try { var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == 'false') { if (newValue == '') return; var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; } g_form.setMandatory(flds[i].prettyName, false); g_form.setDisplay(flds[i].prettyName, false); } g_form.setVariablesReadOnly(true); g_form.setDisplay('provider_icons', false); g_form.setReadOnly('default_project', false); g_form.setReadOnly('default_app_name', false); g_form.setReadOnly('default_profile', false); g_form.setDisplay('default_project', true); g_form.setDisplay('default_app_name', true); g_form.setDisplay('default_profile', true); g_form.setMandatory('default_profile', true); g_form.setDisplay('default_environment', true); g_form.setReadOnly('default_environment', false); var profile = newValue; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchOrderFormData'); ga.addParam('sysparm_profile', profile); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } var nameTypeMap = {}; var flds = g_form.nameMap; for (var i in flds) { nameTypeMap[flds[i].prettyName + ''] = fldType[flds[i].realName + ''] + ''; } var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf('cluster_name') == -1) { if (nameTypeMap[i + ''] + '' == 'masked') { fielVal[i] = parsed[i].value; g_form.setValue(i + '', ''); } else { g_form.setValue(i + '', parsed[i].value + ''); } g_form.setReadOnly(i + '', parsed[i].readOnly + ''); g_form.setDisplay(i + '', !parsed[i].readOnly); } else { g_form.setValue(i + '', parsed[i].value+''); g_form.setDisplay(i + '', !parsed[i].readOnly); g_form.setReadOnly(i + '', true); } } sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal); new GlideModal().get('loader').destroy(); var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchCredentialsList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var credArr = {}; var parsed = JSON.parse(answer); for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + '').toLowerCase().replace(/ /g, '_'); g_form.setValue(name + '_credential_name', credential.name + ''); g_form.setReadOnly(name + '_credential_name', true); g_form.setValue(name + '_secret_type', credential.type + '', (credential.type + '' == 'KEY') ? 'SSH Private Key' : 'Password'); g_form.setReadOnly(name + '_secret_type', true); g_form.setValue(name + '_username', credential.username.value); g_form.setReadOnly(name + '_username', credential.username.readOnly); g_form.setDisplay(name + '_username', !credential.username.readOnly); if ((credential.type == 'KEY')) { g_form.setValue(name + '_ssh_private_key', credential.ssh_private_key.value); g_form.setReadOnly(name + '_ssh_private_key', credential.ssh_private_key.readOnly); g_form.setValue(name + '_passphrase', credential.passphrase.value); g_form.setReadOnly(name + '_passphrase', credential.passphrase.readOnly); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_ssh_private_key', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + '_passphrase', !credential.passphrase.readOnly); } else { g_form.setValue(name + '_password', ''); credArr[name + '_password'] = credential.password.value; g_form.setReadOnly(name + '_password', credential.password.readOnly); g_form.setDisplay(name + '_password', !credential.password.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); } g_form.setDisplay(name + '_credential_reference', 'false'); if (credential.credential_reference &amp;&amp; credential.credential_reference.name) { g_form.setDisplay(name + '_credential_reference', 'true'); g_form.addOption(name + '_credential_reference', credential.credential_reference.uuid + '', credential.credential_reference.name + ''); g_form.setReadOnly(name + '_credential_reference', credential.credential_reference.readOnly); g_form.setDisplay(name + '_credential_reference', !credential.credential_reference.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_secret_type', 'false'); } } sessionStorage['credentials_' + g_form.getUniqueValue()] = JSON.stringify(credArr); new GlideModal().get('loader').destroy(); } } } else { var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getFieldDetails'); ga.addParam('cat_item_sys_id', g_form.getUniqueValue()); ga.addParam('fieldNameArray', g_form.getFieldNames()); ga.getXML(parseFieldResponse); function parseFieldResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var object1 = JSON.parse(answer); for (var i in object1) { if (object1[i].var_type == 'formatter' || object1[i].var_type == 'container' || object1[i].var_type == 'checkbox_container' || object1[i].var_type == 'undefined' || object1[i].var_type == 'Container Start') { continue; } g_form.setDisplay(object1[i].var_type + '', false); g_form.setReadOnly(object1[i].var_type + '', true); } } g_form.setDisplay('provider_icons', 'true'); g_form.setReadOnly('default_project', false); g_form.setReadOnly('default_app_name', false); g_form.setReadOnly('default_profile', false); g_form.setDisplay('default_project', true); g_form.setDisplay('default_app_name', true); g_form.setDisplay('default_profile', true); var profile = newValue; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchOrderFormData'); ga.addParam('sysparm_profile', profile); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchOrderFormData'); ga.addParam('sysparm_profile', profile); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse1, null); function parseResponse1(response) { var answer1 = response.responseXML.documentElement.getAttribute('answer'); var object1 = JSON.parse(answer1); for (var i in object1) { var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf('cluster_name') == -1) { if (object1[i].var_type + '' == 'masked') { fielVal[i] = parsed[i].value; g_form.setValue(i + '', ''); } else { g_form.setValue(i + '', parsed[i].value + ''); } g_form.setReadOnly(i + '', parsed[i].readOnly + ''); g_form.setDisplay(i + '', !parsed[i].readOnly); } else { g_form.setValue(i + '', parsed[i].value+''); g_form.setDisplay(i + '', !parsed[i].readOnly); g_form.setReadOnly(i + '', true); } } sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal); } } } } } } catch (e) { console.log('Inside onchange profile: ' + e.message); } }";
                onChangecatalogClientScript.addScript(onChangeScript);
                var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                var grChange = new GlideRecord('catalog_script_client');
                if (grChange.get(OnChangeCatalogScriptId)) {
                    grChange.setValue("sys_scope", "global");
                    grChange.update();
                }

                //onload

                var onLoadCatalogClientScriptGR = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScriptGR.setAttributes({
                    "name": "Hide Order details on request",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": gr.item_name + '',
                    "active": true,
                    "order": 10,
                    "description": "Hide values on request details.",
                    "applies_catalog": "false",
                    "ui_type": "0",
                    "applies_req_item": "true",
                    "applies_sc_task": "false"
                });
                onLoadCatalogClientScriptGR.appliesToCatalogItem(false);
                onLoadCatalogClientScriptGR.appliesToRequestedItem(true);
                var onLoadScriptHide = "function onLoad() {if(g_form.getTableName() + '' == 'sc_req_item') {var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;}g_form.setMandatory(flds[i].prettyName,false);g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'false');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_environment', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = g_form.getValue('default_profile') + '';var cat_sys_id = g_form.getValue('cat_item') + '';var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile + '');ga.addParam('sysparm_catSysID', cat_sys_id + '');ga.getXML(parseResponse);} function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var nameTypeMap = {};var flds = g_form.nameMap;for (var i in flds) {nameTypeMap[flds[i].prettyName + ''] = fldType[flds[i].realName + ''] + '';}var fielVal = {};var parsed = JSON.parse(answer);for (var i in parsed) {if (i.indexOf('cluster_name') == -1) {if (nameTypeMap[i + ''] + '' == 'masked') {fielVal[i] = parsed[i].value;g_form.setValue(i + '', '');}g_form.setReadOnly(i + '', true); g_form.setDisplay(i + '', !parsed[i].readOnly);} else {g_form.setDisplay(i + '', !parsed[i].readOnly);g_form.setReadOnly(i + '', true);}}sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);}}";
                onLoadCatalogClientScriptGR.addScript(onLoadScriptHide);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScriptGR.create();
                var grChange = new GlideRecord('catalog_script_client');
                if (grChange.get(onLoadCatalogClientScriptId)) {
                    grChange.setValue("sys_scope", "global");
                    grChange.update();
                }
            }
            gs.setProperty("x_nuta2_nutanix_ca.1_4_5", "1");
        } catch (e) {
            this.logger.error("Exception caugh inside Migration_script.updateTheFetchOnChangeClientScripts() Error : - " + e);
        }
    },

    updatedOneDotFiveDotOneMigrationNeeded: function() {
        try {
            var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
            gr.query();
            if (gr.hasNext() &amp;&amp; (gs.getProperty('x_nuta2_nutanix_ca.1_5_1') == '0')) {
                this.logger.info("Migration to V 1_5_1 require");
                return true;
            }
            this.logger.info("Migration to V 1_5_1 not require");
            gs.setProperty("x_nuta2_nutanix_ca.1_5_1", "1");
            return false;
        } catch (e) {
            this.logger.error("Exception caught inside Migration_script.isOneDotFiveOneMigrationNeeded() Error : - " + e);
        }
    },

    updateBpTypeForOneDotFive: function() {
        gs.info("Inside updateBpTypeForOneDotFive Function");
        var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
        gr.query();

        while (gr.next()) {
            if (gr.item_name.category.title + '' == 'Marketplace Blueprint') {
                gr.type_of_blueprint = 'published';
            } else if (gr.item_name.category.title + '' == 'Blueprint') {
                gr.type_of_blueprint = 'unpublished';
            }
            gr.update();
        }
    },


    updateTheCatalogClientScriptForOneDotFiveDotOne: function() {
        try {
            this.updateBpTypeForOneDotFive();
            var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
            gr.query();

            while (gr.next()) {

                var fieldGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                fieldGR.addEncodedQuery('cat_item=' + gr.item_name + '');
                fieldGR.query();
                var nic_list = '';
                var counter = 0;
                var nicSysIdList = [];
                while (fieldGR.next()) {

                    if ((fieldGR.name + '').indexOf('_nic_') != -1) {
                        nicSysIdList.push(fieldGR.sys_id + '');
                        nic_list = "Populate Nic on change of Nic Sys_id : " + counter + ' ,' + nic_list;
                        counter++;
                    }
                }
                gs.info('nic_list:: ' + nic_list);
                var catalogScriptGR = new GlideRecord('catalog_script_client');
                catalogScriptGR.addQuery('cat_item', gr.item_name + '');
                catalogScriptGR.addEncodedQuery('nameINGet Project and Profile List onLoad,Get Credentials OnLoad,Fetch values OnChange,Fetch dynamic value for advance variable,Fetch form data on change of profile,Get Subnet Info,Check AppName OnChange,Check AppName OnSubmit,Hide Order details on request,Get Subnet Info on project change,Check Catalog Item Validity project,Check Catalog Item Validity profile,Set Session Vars,Fetch dependencies on change of profile,Service portal fixes,On Change of Project,On Change of Environment variable,Check Catalog Item Validity,' + nic_list);
                catalogScriptGR.query();

                var catalogClientScript = new sn_sc.CatalogClientScript();
                var fieldList = [];
                var envFieldSysID;
                var profilesysID;
                var fetchformSysID;
                var appSysID;
                var subnetInfo;
                var catItemValidity;
                var catItemProValidity;
                var setSessionVars;
                var portalfix;
                var onchangeproject;


                // For NIC onchange



                while (catalogScriptGR.next()) {
                    var field = (catalogScriptGR.cat_variable + '').replace("IO:", '');
                    catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                    if (catalogScriptGR.name + '' == 'Fetch values OnChange' &amp;&amp; fieldList.indexOf(field) == -1)
                        fieldList.push(field);
                    else if (catalogScriptGR.name + '' == 'On Change of Environment variable')
                        envFieldSysID = field;
                    else if (catalogScriptGR.name + '' == 'Fetch dependencies on change of profile')
                        profilesysID = field;
                    else if (catalogScriptGR.name + '' == 'Fetch form data on change of profile')
                        fetchformSysID = field;
                    else if (catalogScriptGR.name + '' == 'Check AppName OnChange')
                        appSysID = field;
                    else if (catalogScriptGR.name + '' == 'Get Subnet Info on project change')
                        subnetInfo = field;
                    else if (catalogScriptGR.name + '' == 'Check Catalog Item Validity project')
                        catItemValidity = field;
                    else if (catalogScriptGR.name + '' == 'Check Catalog Item Validity profile')
                        catItemProValidity = field;
                    else if (catalogScriptGR.name + '' == 'Set Session Vars')
                        setSessionVars = field;
                    else if (catalogScriptGR.name + '' == 'Service portal fixes')
                        portalfix = field;
                    else if (catalogScriptGR.name + '' == 'On Change of Project')
                        onchangeproject = field;

                }

                //onchange

                for (var x = 0; x &lt; nicSysIdList.length; x++) {
                    var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript.setAttributes({
                        "name": "Populate Nic on change of Nic Sys_id : " + x,
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "cat_variable": "IO:" + nicSysIdList[x],
                        "active": true,
                        "order": 400,
                        "description": "This script is created for onChange of Nic",
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onChangecatalogClientScript.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == 'false') { var clusterJson = JSON.parse(sessionStorage.getItem('clusterName_' + g_form.getUniqueValue())); var catCluster = clusterJson.catalog_data; var clusterInfo = clusterJson.cluster_info; var clusterVal; for (var i in clusterInfo) { for (var k in clusterInfo[i].subnet) { if (k == newValue) { clusterVal = i + ''; } } } var clustername, relatedNic; for (var i in catCluster) { var nic = catCluster[i].nics; for (var k in nic) { var nicElem = nic[k]; if ('" + nicSysIdList[x] + "' == k) { if (!catCluster[i].value) { g_form.setValue(catCluster[i].name, clusterVal); relatedNic = catCluster[i].nics; addNicOptions(relatedNic); } else { g_form.setValue(catCluster[i].name, clusterVal); relatedNic = catCluster[i].nics; } } } } function addNicOptions(relatedNic) { for (var n in relatedNic) { for (var l in clusterInfo) { if (l != clusterVal &amp;&amp; clusterVal) for (var j in clusterInfo[l].subnet) { g_form.removeOption(relatedNic[n], j); } } } } } else { var clusterJson = JSON.parse(sessionStorage.getItem('clusterName_' + g_form.getUniqueValue())); var catCluster = clusterJson.catalog_data; var clusterInfo = clusterJson.cluster_info; var clusterVal; for (var i in clusterInfo) { for (var k in clusterInfo[i].subnet) { if (k == newValue) { clusterVal = i + ''; } } } var clustername, relatedNic; for (var i in catCluster) { var nic = catCluster[i].nics; for (var k in nic) { var nicElem = nic[k]; if ('" + nicSysIdList[x] + "' == k) { if (!catCluster[i].value) { g_form.setValue(catCluster[i].name, clusterVal); relatedNic = catCluster[i].nics; addNicOptions(relatedNic); } else { g_form.setValue(catCluster[i].name, clusterVal); relatedNic = catCluster[i].nics; } } } } if (typeof clusterVal == \"undefined\") { g_form.showFieldMsg(catCluster[i].name,'This Nic is not associated with the project, Please select another Nic. To Filterout unassociated Nic reload the page.', 'error'); } function addNicOptions(relatedNic){ for (var n in relatedNic) { for (var l in clusterInfo) { if (l != clusterVal &amp;&amp; clusterVal) for (var j in clusterInfo[l].subnet){ g_form.removeOption(relatedNic[n], j); } } } } } } }";
                    onChangecatalogClientScript.addScript(onChangeScript);
                    var onChangeCatalogClientScriptId = onChangecatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onChangeCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();

                    }
                }




                //Fetch values on change loop

                var fieldListLength = fieldList.length;
                while (fieldListLength--) {
                    var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript.setAttributes({
                        "name": "Fetch values OnChange",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "cat_variable": "IO:" + fieldList[fieldListLength],
                        "active": true,
                        "order": 1000,
                        "description": "This script is auto created thorugh runtime module for fetching values.",
                        "applies_catalog": "true",
                        "ui_type": "10",
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onChangecatalogClientScript.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { if (!sessionStorage[\'varValues\']) return; var varValues = JSON.parse(sessionStorage[\'varValues\']); oldValue = varValues[control.id + \'\']; if (isLoading || newValue == \'\' || oldValue + \'\' == newValue + \'\') { new GlideModal().get(\'loader\').destroy(); return; } function varResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var var_array = []; for (var i in prof_json) { if (i + \'\' == control.id + \'\') continue; var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); varValues[\'IO:\' + i] = curr_value + \'\'; var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value, parsed_field.sys_id = i + \'\', var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { if (control.id + \'\' == k) { continue; } var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); varValues[\'IO:\' + k] = curr_value + \'\'; var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value, parsed_field.sys_id = k + \'\', var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(varValues); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'), gajax.addParam(\'sysparm_field\', control.id + \'\'), gajax.addParam(\'sysparm_type\', \'catalog\'), gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'), gajax.addParam(\'sysparm_varJson\', act_var_JSON), gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')), gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')), gajax.getXML(getVarResponse); } function getVarResponse(response) { new GlideModal().get(\'loader\').destroy(); var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; if (control.id + \'\' == sys_id) { continue; } var type = row.type + \'\'; if (row.state == \'SUCCESS\' &amp;&amp; (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\')) { g_form.clearOptions(sys_id); for (var k = 0; k &lt; row.value.length; k++) g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); g_form.setValue(sys_id, row.value); } else { if (row.data_type + \'\' != \'BASE\') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + \'\', row.options[k], row.options[k]); } g_form.setValue(sys_id, row.value); } if (row.state == \'ERROR\') { g_form.clearOptions(sys_id); g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } } var loadingHTML = \"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var loadingDialog = new GlideModal(\'loader\', true); loadingDialog.setTitle(\'Fetching variables...\'); loadingDialog.renderWithContent(\'\' + loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue(\'default_profile\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'), ga.addParam(\'sysparm_catsysid\', cat_sys_id), ga.addParam(\'sysparm_profile\', profile), ga.getXML(varResponse, null, loadingDialog); } else { try { if (!sessionStorage[\'varValues\']) return; var control_id =\'" + fieldList[fieldListLength] + "\'; var varValues = JSON.parse(sessionStorage[\'varValues\']); oldValue = varValues[control_id + \'\']; if (isLoading || newValue == \'\' || oldValue + \'\' == newValue + \'\') { return; } console.log(oldValue); console.log(newValue); function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); varValues[\'IO:\' + i] = curr_value + \'\'; var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value, parsed_field.sys_id = i + \'\', var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); varValues[\'IO:\' + k] = curr_value + \'\'; var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value, parsed_field.sys_id = k + \'\', var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(varValues); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'), gajax.addParam(\'sysparm_field\', control_id + \'\'), gajax.addParam(\'sysparm_type\', \'catalog\'), gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'), gajax.addParam(\'sysparm_varJson\', act_var_JSON), gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')), gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')), gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\' &amp;&amp; (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\')) { g_form.clearOptions(sys_id); for (var k = 0; k &lt; row.value.length; k++) g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); g_form.setValue(sys_id, row.value[0]); } else { if (row.data_type + \'\' != \'BASE\') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + \'\', row.options[k], row.options[k]); } g_form.setValue(sys_id, row.value); } row.state == \'ERROR\' &amp;&amp; g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue(\'default_profile\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'), ga.addParam(\'sysparm_catsysid\', cat_sys_id), ga.addParam(\'sysparm_profile\', profile), ga.getXML(varResponse); } catch (e) { console.log(\'Fetch values OnChange\' + e) } } } }";
                    onChangecatalogClientScript.addScript(onChangeScript);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(OnChangeCatalogScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                }

                //onload
                //if(gr.getDisplayValue('category') == 'Blueprint' || gr.getDisplayValue('category') == 'Marketplace Blueprint') {
                if (gr.item_name.category == '7a30431637512300fdfc097973990ec8' || gr.item_name.category == '88bfbad237512300fdfc097973990e06') {

                    try {
                        var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                        onLoadCatalogClientScript.setAttributes({
                            "name": "Get Project and Profile List onLoad",
                            "type": "onLoad",
                            "applies_to": "item",
                            "cat_item": gr.item_name + '',
                            "active": "true",
                            "order": "100",
                            "description": "This script is auto created thorugh runtime module for getting projects and profile list.",
                            "applies_catalog": "true",
                            "ui_type": '10',
                            "applies_req_item": false,
                            "applies_sc_task": false
                        });
                        onLoadCatalogClientScript.appliesToCatalogItem(true);
                        var onLoadScript = "";
                        if (parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2")) {
                            onLoadScript = "function onLoad() { try { var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; } var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchProjectAndProfileList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer); var projectList = parsed.projectList; g_form.clearOptions('default_project'); for (var i = 0; i &lt; projectList.length; i++) { var project = projectList[i]; g_form.addOption('default_project', project.uuid, project.name); } if (portal_check == 'true') { project = projectList[0]; g_form.setValue('default_project', project.uuid); } if (projectList.length == 1) { g_form.setReadOnly('default_project', true); } if (portal_check == 'false') new GlideModal().get('loader').destroy(); } } catch (e) { console.log('Exception in Get project and profile list onload ' + e.message); }}";
                        } else {
                            onLoadScript = "function onLoad() { var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if(portal_check =='false') { var loadingHTML = \"&lt;div class='loading-container'&gt;&lt;div class='loading-indicator icon-loading icon-lg'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching Project And Profile'); loadingDialog.renderWithContent('' + loadingHTML); } var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchProjectAndProfileList'); ga.addParam('sysparm_catSysID', cat_sys_id); if(portal_check == 'false') ga.getXML(parseResponse, null, loadingDialog); else ga.getXML(parseResponse); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer); var projectList = parsed.projectList; g_form.clearOptions('default_project'); for (var i = 0; i &lt; projectList.length; i++) { var project = projectList[i]; g_form.addOption('default_project', project.uuid, project.name); } var profileList = parsed.profileList.split(','); g_form.clearOptions('default_profile'); for (i = 0; i &lt; profileList.length; i++) { g_form.addOption('default_profile', profileList[i] + '', profileList[i] + ''); } g_form.setValue('default_profile', profileList[0]); if (projectList.length == 1) { g_form.setReadOnly('default_project', true); } if (profileList.length == 1) { g_form.setReadOnly('default_profile', true); } new GlideModal().get('loader').destroy(); var loadingHTML = \"&lt;div class='loading-container'&gt;&lt;div class='loading-indicator icon-loading icon-lg'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching variables...'); loadingDialog.renderWithContent('' + loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue('default_profile').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchLaunchVars'); ga.addParam('sysparm_catsysid', cat_sys_id); ga.addParam('sysparm_profile', profile); ga.getXML(varResponse, null, loadingDialog); } function parseResponseForPortal(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer); var projectList = parsed.projectList; g_form.clearOptions('default_project'); for (var i = 0; i &lt; projectList.length; i++) { var project = projectList[i]; g_form.addOption('default_project', project.uuid, project.name); } var profileList = parsed.profileList.split(','); g_form.clearOptions('default_profile'); for (i = 0; i &lt; profileList.length; i++) { g_form.addOption('default_profile', profileList[i] + '', profileList[i] + ''); } g_form.setValue('default_profile', profileList[0]); if (projectList.length == 1) { g_form.setReadOnly('default_project', true); } if (profileList.length == 1) { g_form.setReadOnly('default_profile', true); } var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue('default_profile').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchLaunchVars'); ga.addParam('sysparm_catsysid', cat_sys_id); ga.addParam('sysparm_profile', profile); ga.getXML(varResponseForPortal); } function varResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue('IO:' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + ''; sess_json['IO:' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue('IO:' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + ''; sess_json['IO:' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage['varValues'] = JSON.stringify(sess_json); } function varResponseForPortal(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue('IO:' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + ''; sess_json['IO:' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue('IO:' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + ''; sess_json['IO:' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage['varValues'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); gajax.addParam('sysparm_name', 'variableArrayParser'); gajax.addParam('sysparm_type', 'catalog'); gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + ''); gajax.addParam('sysparm_varJson', act_var_JSON); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = 'IO:' + row.sys_id; var type = row.type + ''; if (row.state == 'SUCCESS') { if (type == 'LOCAL') g_form.setValue(sys_id, row.value); if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; (row.value).length; k++) { g_form.addOption(sys_id + '', row.value[k], row.value[k]); } } } if (row.state == 'ERROR') { g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]); } } } } }";
                        }
                        onLoadCatalogClientScript.addScript(onLoadScript);
                        var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                        var grChange = new GlideRecord('catalog_script_client');
                        if (grChange.get(onLoadCatalogClientScriptId)) {
                            grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                            grChange.setValue('sys_policy', 'protected');
                            grChange.update();
                        }
                    } catch (e) {
                        gs.info('Get Project and Profile List onLoad: ' + e.message);
                    }
                }

                // onload

                try {
                    gs.info('get_credentialss:: ' + gr.item_name);
                    var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                    onLoadCatalogClientScript.setAttributes({
                        "name": "Get Credentials OnLoad",
                        "type": "onLoad",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "active": true,
                        "order": 900,
                        "description": "This script is auto created thorugh runtime module for getting Credentials list.",
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onLoadCatalogClientScript.appliesToCatalogItem(true);
                    var onLoadScript = "function onLoad() { try { var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXML(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == 'false') { var loadingHTML = \"&lt;div class='loading-container'&gt;&lt;div class='loading-indicator icon-loading icon-lg'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching Credentials List...'); loadingDialog.renderWithContent('' + loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchCredentialsList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var credArr = {}; var parsed = JSON.parse(answer); for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + '').toLowerCase().replace(/ /g, '_'); g_form.setValue(name + '_credential_name', credential.name + ''); g_form.setReadOnly(name + '_credential_name', true); g_form.setValue(name + '_secret_type', credential.type + '', (credential.type + '' == 'KEY') ? 'SSH Private Key' : 'Password'); g_form.setReadOnly(name + '_secret_type', true); g_form.setValue(name + '_username', credential.username.value); g_form.setReadOnly(name + '_username', credential.username.readOnly); g_form.setDisplay(name + '_username', !credential.username.readOnly); if ((credential.type == 'KEY')) { g_form.setValue(name + '_ssh_private_key', credential.ssh_private_key.value); g_form.setReadOnly(name + '_ssh_private_key', credential.ssh_private_key.readOnly); g_form.setValue(name + '_passphrase', credential.passphrase.value); g_form.setReadOnly(name + '_passphrase', credential.passphrase.readOnly); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_ssh_private_key', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + '_passphrase', !credential.passphrase.readOnly); } else { g_form.setValue(name + '_password', ''); credArr[name + '_password'] = credential.password.value; g_form.setReadOnly(name + '_password', credential.password.readOnly); g_form.setDisplay(name + '_password', !credential.password.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); } g_form.setDisplay(name + '_credential_reference', 'false'); if (credential.credential_reference &amp;&amp; credential.credential_reference.name) { g_form.setDisplay(name + '_credential_reference', 'true'); g_form.addOption(name + '_credential_reference', credential.credential_reference.uuid + '', credential.credential_reference.name + ''); g_form.setReadOnly(name + '_credential_reference', credential.credential_reference.readOnly); g_form.setDisplay(name + '_credential_reference', !credential.credential_reference.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_secret_type', 'false'); } } sessionStorage['credentials_' + g_form.getUniqueValue()] = JSON.stringify(credArr); new GlideModal().get('loader').destroy(); } } else { var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchCredentialsList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var credArr = {}; var parsed = JSON.parse(answer); for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + '').toLowerCase().replace(/ /g, '_'); g_form.setValue(name + '_credential_name', credential.name + ''); g_form.setReadOnly(name + '_credential_name', true); g_form.setValue(name + '_secret_type', credential.type + '', (credential.type + '' == 'KEY') ? 'SSH Private Key' : 'Password'); g_form.setReadOnly(name + '_secret_type', true); g_form.setValue(name + '_username', credential.username.value); g_form.setReadOnly(name + '_username', credential.username.readOnly); g_form.setDisplay(name + '_username', !credential.username.readOnly); if ((credential.type == 'KEY')) { g_form.setValue(name + '_ssh_private_key', credential.ssh_private_key.value); g_form.setReadOnly(name + '_ssh_private_key', credential.ssh_private_key.readOnly); g_form.setValue(name + '_passphrase', credential.passphrase.value); g_form.setReadOnly(name + '_passphrase', credential.passphrase.readOnly); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_ssh_private_key', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + '_passphrase', !credential.passphrase.readOnly); } else { g_form.setValue(name + '_password', ''); credArr[name + '_password'] = credential.password.value; g_form.setReadOnly(name + '_password', credential.password.readOnly); g_form.setDisplay(name + '_password', !credential.password.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); } g_form.setDisplay(name + '_credential_reference', 'false'); if (credential.credential_reference &amp;&amp; credential.credential_reference.name) { g_form.setDisplay(name + '_credential_reference', 'true'); g_form.addOption(name + '_credential_reference', credential.credential_reference.uuid + '', credential.credential_reference.name + ''); g_form.setReadOnly(name + '_credential_reference', credential.credential_reference.readOnly); g_form.setDisplay(name + '_credential_reference', !credential.credential_reference.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_secret_type', 'false'); } } sessionStorage['credentials_' + g_form.getUniqueValue()] = JSON.stringify(credArr); } } } } catch(e) { console.log('Exception Inside Get Credentials OnLoad '+e.message); } }";
                    onLoadCatalogClientScript.addScript(onLoadScript);
                    var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onLoadCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                } catch (e) {
                    gs.info('Get Credentials OnLoad: ' + e.message);
                }


                //onload

                try {
                    var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                    onLoadCatalogClientScript.setAttributes({
                        "name": "Fetch dynamic value for advance variables onload",
                        "type": "onLoad",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "active": true,
                        "order": 10,
                        "description": "This script is created for fetching dynamic values for advance variables onload.",
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onLoadCatalogClientScript.appliesToCatalogItem(true);
                    var onLoadScript = "function onLoad() { var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXML(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == 'false') { var loadingHTML = \"&lt;div class='loading-container'&gt;&lt;div class='loading-indicator icon-loading icon-lg'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching Dynamic values for advance variables...'); loadingDialog.renderWithContent('' + loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var elemen = g_form.nameMap; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'advanceVariableDynamicOptions'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parse = JSON.parse(answer); var keys = Object.keys(parse[0]); var fieldRegex = parse[1]; parse = parse[0]; sessionStorage['FieldRegex_' + g_form.getUniqueValue()] = JSON.stringify(fieldRegex); for (var i = 0; i &lt; keys.length; i++) { var row = parse[keys[i] + '']; if (row.options.state == 'SUCCESS') { g_form.clearOptions(keys[i] + ''); for (var k = 0; k &lt; (row.options.values).length; k++) { g_form.addOption(keys[i] + '', row.options.values[k], row.options.values[k]); } } else { g_form.addErrorMessage('Error in variable: ' + keys[i] + ': ' + row.options.values[0]); } } new GlideModal().get('loader').destroy(); } } else { var cat_sys_id = g_form.getUniqueValue(); var elemen = g_form.nameMap; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'advanceVariableDynamicOptions'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parse = JSON.parse(answer); var keys = Object.keys(parse[0]); var fieldRegex = parse[1]; parse = parse[0]; sessionStorage['FieldRegex_' + g_form.getUniqueValue()] = JSON.stringify(fieldRegex); for (var i = 0; i &lt; keys.length; i++) { var row = parse[keys[i] + '']; if (row.options.state == 'SUCCESS') { g_form.clearOptions(keys[i] + ''); for (var k = 0; k &lt; (row.options.values).length; k++) { g_form.addOption(keys[i] + '', row.options.values[k], row.options.values[k]); } } else { g_form.showFieldMsg(keys[i], 'Error in variable: ' + keys[i] + ': ' + row.options.values[0], 'error'); } } } } } }";
                    onLoadCatalogClientScript.addScript(onLoadScript);
                    var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onLoadCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                } catch (e) {
                    gs.info('Fetch dynamic value for advance variables onload: ' + e.message);
                }

                //onchange********************** (need to change variable onchange)

                //if(gr.getDisplayValue('category') == 'Blueprint' || gr.getDisplayValue('category') == 'Marketplace Blueprint') {
                if (gr.item_name.category == '7a30431637512300fdfc097973990ec8' || gr.item_name.category == '88bfbad237512300fdfc097973990e06') {
                    try {
                        var catalogScriptGR = new sn_sc.CatalogClientScript();
                        catalogScriptGR.setAttributes({
                            "name": "Fetch form data on change of profile",
                            "type": "onChange",
                            "applies_to": "item",
                            "cat_item": gr.item_name + '',
                            "cat_variable": "IO:" + fetchformSysID,
                            "active": true,
                            "order": 100,
                            "description": 'This script is auto created thorugh runtime module for fetching and setting form data and visibility.',
                            "applies_catalog": true,
                            "ui_type": '10',
                            "applies_req_item": false,
                            "applies_sc_task": false
                        });
                        catalogScriptGR.appliesToCatalogItem(true);
                        var script = '';
                        if (parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2")) {
                            script = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } try { var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { if (newValue == \'\') return; var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + \'\'] + \'\' == \'formatter\' || fldType[flds[i].realName + \'\'] + \'\' == \'container\' || fldType[flds[i].realName + \'\'] + \'\' == \'checkbox_container\' || fldType[flds[i].realName + \'\'] + \'\' == \'undefined\') { continue; } if (flds[i].prettyName != \'default_app_name\') { g_form.setMandatory(flds[i].prettyName, false); } g_form.setDisplay(flds[i].prettyName, false); } g_form.setVariablesReadOnly(true); g_form.setDisplay(\'provider_icons\', false); g_form.setReadOnly(\'default_project\', false); g_form.setReadOnly(\'default_app_name\', false); g_form.setReadOnly(\'default_profile\', false); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_app_name\', true); g_form.setDisplay(\'default_profile\', true); g_form.setMandatory(\'default_profile\', true); g_form.setDisplay(\'default_environment\', true); g_form.setReadOnly(\'default_environment\', false); var profile = newValue; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchOrderFormData\'); ga.addParam(\'sysparm_profile\', profile); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var nameTypeMap = {}; var flds = g_form.nameMap; for (var i in flds) { nameTypeMap[flds[i].prettyName + \'\'] = fldType[flds[i].realName + \'\'] + \'\'; } var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf(\'cluster_name\') == -1) { if (nameTypeMap[i + \'\'] + \'\' == \'masked\') { fielVal[i] = parsed[i].value; g_form.setValue(i + \'\', \'\'); } else { g_form.setValue(i + \'\', parsed[i].value + \'\'); } g_form.setReadOnly(i + \'\', parsed[i].readOnly + \'\'); g_form.setDisplay(i + \'\', !parsed[i].readOnly); if (parsed[i].mandatory) { g_form.setMandatory(i + \'\', parsed[i].mandatory); } } else { g_form.setValue(i + \'\', parsed[i].value + \'\'); g_form.setDisplay(i + \'\', !parsed[i].readOnly); g_form.setReadOnly(i + \'\', true); if (parsed[i].mandatory) { g_form.setMandatory(i + \'\', parsed[i].mandatory); } } } sessionStorage[\'fieldValues_\' + g_form.getUniqueValue()] = JSON.stringify(fielVal); new GlideModal().get(\'loader\').destroy(); var cat_sys_id = g_form.getUniqueValue(); var envUUID = (g_form.getValue(\'default_environment\') + \'\').trim(); var projectUUID = (g_form.getValue(\'default_project\') + \'\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchCredentialsList\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.addParam(\'sysparm_project\', projectUUID); ga.addParam(\'sysparm_env\', envUUID); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var credArr = {}; var parsed = JSON.parse(answer); for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + \'\').toLowerCase().replace(\/ \/g, \'_\'); g_form.setValue(name + \'_credential_name\', credential.name + \'\'); g_form.setReadOnly(name + \'_credential_name\', true); g_form.setValue(name + \'_secret_type\', credential.type + \'\', (credential.type + \'\' == \'KEY\') ? \'SSH Private Key\' : \'Password\'); g_form.setReadOnly(name + \'_secret_type\', true); g_form.setValue(name + \'_username\', credential.username.value); g_form.setReadOnly(name + \'_username\', credential.username.readOnly); g_form.setDisplay(name + \'_username\', !credential.username.readOnly); if ((credential.type == \'KEY\')) { g_form.setValue(name + \'_ssh_private_key\', credential.ssh_private_key.value); g_form.setReadOnly(name + \'_ssh_private_key\', credential.ssh_private_key.readOnly); g_form.setValue(name + \'_passphrase\', credential.passphrase.value); g_form.setReadOnly(name + \'_passphrase\', credential.passphrase.readOnly); g_form.setDisplay(name + \'_password\', \'false\'); g_form.setDisplay(name + \'_ssh_private_key\', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + \'_passphrase\', !credential.passphrase.readOnly); } else { g_form.setValue(name + \'_password\', \'\'); credArr[name + \'_password\'] = credential.password.value; g_form.setReadOnly(name + \'_password\', credential.password.readOnly); g_form.setDisplay(name + \'_password\', !credential.password.readOnly); g_form.setDisplay(name + \'_ssh_private_key\', \'false\'); g_form.setDisplay(name + \'_passphrase\', \'false\'); } g_form.setDisplay(name + \'_credential_reference\', \'false\'); if (credential.credential_reference &amp;&amp; credential.credential_reference[0].name) { g_form.setDisplay(name + \'_credential_reference\', \'true\'); for (var i = 0; i &lt; credential.credential_reference.length; i++) { g_form.addOption(name + \'_credential_reference\', credential.credential_reference[i].uuid + \'\', credential.credential_reference[i].name + \'\'); } if (credential.credential_reference.length &lt;= 1) { g_form.setReadOnly(name + \'_credential_reference\', \'true\'); } else g_form.setReadOnly(name + \'_credential_reference\', \'false\'); g_form.setDisplay(name + \'_credential_reference\', credential.credential_reference[0].readOnly); g_form.setDisplay(name + \'_ssh_private_key\', \'false\'); g_form.setDisplay(name + \'_passphrase\', \'false\'); g_form.setDisplay(name + \'_password\', \'false\'); g_form.setDisplay(name + \'_secret_type\', \'false\'); } } sessionStorage[\'credentials_\' + g_form.getUniqueValue()] = JSON.stringify(credArr); new GlideModal().get(\'loader\').destroy(); } } } else { var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'getFieldDetails\'); ga.addParam(\'cat_item_sys_id\', g_form.getUniqueValue()); ga.addParam(\'fieldNameArray\', g_form.getFieldNames()); ga.getXML(parseFieldResponse); function parseFieldResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var object1 = JSON.parse(answer); for (var i in object1) { if (object1[i].var_type == \'formatter\' || object1[i].var_type == \'container\' || object1[i].var_type == \'checkbox_container\' || object1[i].var_type == \'undefined\' || object1[i].var_type == \'Container Start\') { continue; } if (object1[i].var_name != \'default_app_name\') { g_form.setMandatory(object1[i].var_name + \'\', false); } if (object1[i].var_name != \'default_environment\' &amp;&amp; object1[i].var_name != \'default_project\' &amp;&amp; object1[i].var_name != \'default_profile\') { g_form.setDisplay(object1[i].var_name + \'\', false); } } } g_form.setDisplay(\'provider_icons\', \'true\'); g_form.setReadOnly(\'default_project\', false); g_form.setReadOnly(\'default_app_name\', false); g_form.setReadOnly(\'default_profile\', false); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_app_name\', true); g_form.setDisplay(\'default_profile\', true); g_form.setDisplay(\'default_environment\', true); var profile = newValue; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchOrderFormData\'); ga.addParam(\'sysparm_profile\', profile); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponse, null); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchOrderFormData\'); ga.addParam(\'sysparm_profile\', profile); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponse1, null); function parseResponse1(response) { var answer1 = response.responseXML.documentElement.getAttribute(\'answer\'); var object1 = JSON.parse(answer1); for (var i in object1) { var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf(\'cluster_name\') == -1) { if (object1[i].var_type + \'\' == \'masked\') { fielVal[i] = parsed[i].value; g_form.setValue(i + \'\', \'\'); } else { g_form.setValue(i + \'\', parsed[i].value + \'\'); } g_form.setReadOnly(i + \'\', parsed[i].readOnly + \'\'); g_form.setDisplay(i + \'\', !parsed[i].readOnly); if (parsed[i].mandatory) { g_form.setMandatory(i + \'\', parsed[i].mandatory); } } else { g_form.setValue(i + \'\', parsed[i].value + \'\'); g_form.setDisplay(i + \'\', !parsed[i].readOnly); g_form.setReadOnly(i + \'\', true); if (parsed[i].mandatory) { g_form.setMandatory(i + \'\', parsed[i].mandatory); } } } sessionStorage[\'fieldValues_\' + g_form.getUniqueValue()] = JSON.stringify(fielVal); } } } } } } catch (e) { console.log(\'Inside onchange profile: \' + e.message); } }";
                        } else {
                            script = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } var loadingHTML = \"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var loadingDialogbox = new GlideModal(\'loader\', true); loadingDialogbox.setTitle(\'Fetching Order Form Data...\'); loadingDialogbox.renderWithContent(\'\' + loadingHTML); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + \'\'] + \'\' == \'formatter\' || fldType[flds[i].realName + \'\'] + \'\' == \'container\' || fldType[flds[i].realName + \'\'] + \'\' == \'checkbox_container\' || fldType[flds[i].realName + \'\'] + \'\' == \'undefined\') { continue; } if (flds[i].prettyName != \'default_app_name\') { g_form.setMandatory(flds[i].prettyName, false); } g_form.setDisplay(flds[i].prettyName, false); } g_form.setVariablesReadOnly(true); g_form.setDisplay(\'provider_icons\', \'false\'); g_form.setReadOnly(\'default_project\', false); g_form.setReadOnly(\'default_app_name\', false); g_form.setReadOnly(\'default_profile\', false); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_app_name\', true); g_form.setDisplay(\'default_profile\', true); var profile = newValue; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchOrderFormData\'); ga.addParam(\'sysparm_profile\', profile); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponse, null, loadingDialogbox); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var nameTypeMap = {}; var flds = g_form.nameMap; for (var i in flds) { nameTypeMap[flds[i].prettyName + \'\'] = fldType[flds[i].realName + \'\'] + \'\'; } var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf(\'cluster_name\') == -1) { if (nameTypeMap[i + \'\'] + \'\' == \'masked\') { fielVal[i] = parsed[i].value; g_form.setValue(i + \'\', \'\'); } else { g_form.setValue(i + \'\', parsed[i].value + \'\'); } g_form.setReadOnly(i + \'\', parsed[i].readOnly + \'\'); g_form.setDisplay(i + \'\', !parsed[i].readOnly); if (parsed[i].mandatory) { g_form.setMandatory(i + \'\', parsed[i].mandatory); } } else { g_form.setDisplay(i + \'\', !parsed[i].readOnly); g_form.setReadOnly(i + \'\', true); if (parsed[i].mandatory) { g_form.setMandatory(i + \'\', parsed[i].mandatory); } } } sessionStorage[\'fieldValues_\' + g_form.getUniqueValue()] = JSON.stringify(fielVal); new GlideModal().get(\'loader\').destroy(); var loadingHTML = \"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var loadingDialog = new GlideModal(\'loader\', true); loadingDialog.setTitle(\'Fetching Credentials List...\'); loadingDialog.renderWithContent(\'\' + loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchCredentialsList\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var credArr = {}; var parsed = JSON.parse(answer); for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + \'\').toLowerCase().replace(\/ \/g, \'_\'); g_form.setValue(name + \'_credential_name\', credential.name + \'\'); g_form.setReadOnly(name + \'_credential_name\', true); g_form.setValue(name + \'_secret_type\', credential.type + \'\', (credential.type + \'\' == \'KEY\') ? \'SSH Private Key\' : \'Password\'); g_form.setReadOnly(name + \'_secret_type\', true); g_form.setValue(name + \'_username\', credential.username.value); g_form.setReadOnly(name + \'_username\', credential.username.readOnly); g_form.setDisplay(name + \'_username\', !credential.username.readOnly); if ((credential.type == \'KEY\')) { g_form.setValue(name + \'_ssh_private_key\', credential.ssh_private_key.value); g_form.setReadOnly(name + \'_ssh_private_key\', credential.ssh_private_key.readOnly); g_form.setValue(name + \'_passphrase\', credential.passphrase.value); g_form.setReadOnly(name + \'_passphrase\', credential.passphrase.readOnly); g_form.setDisplay(name + \'_password\', \'false\'); g_form.setDisplay(name + \'_ssh_private_key\', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + \'_passphrase\', !credential.passphrase.readOnly); } else { g_form.setValue(name + \'_password\', \'\'); credArr[name + \'_password\'] = credential.password.value; g_form.setReadOnly(name + \'_password\', credential.password.readOnly); g_form.setDisplay(name + \'_password\', !credential.password.readOnly); g_form.setDisplay(name + \'_ssh_private_key\', \'false\'); g_form.setDisplay(name + \'_passphrase\', \'false\'); } g_form.setDisplay(name + \'_credential_reference\', \'false\'); if (credential.credential_reference &amp;&amp; credential.credential_reference.name) { g_form.setDisplay(name + \'_credential_reference\', \'true\'); g_form.addOption(name + \'_credential_reference\', credential.credential_reference.uuid + \'\', credential.credential_reference.name + \'\'); g_form.setReadOnly(name + \'_credential_reference\', credential.credential_reference.readOnly); g_form.setDisplay(name + \'_credential_reference\', !credential.credential_reference.readOnly); g_form.setDisplay(name + \'_ssh_private_key\', \'false\'); g_form.setDisplay(name + \'_passphrase\', \'false\'); g_form.setDisplay(name + \'_password\', \'false\'); g_form.setDisplay(name + \'_secret_type\', \'false\'); } } sessionStorage[\'credentials_\' + g_form.getUniqueValue()] = JSON.stringify(credArr); new GlideModal().get(\'loader\').destroy(); } } }";
                        }
                        catalogScriptGR.addScript(script);
                        var ScriptId = catalogScriptGR.create();
                        var grChange = new GlideRecord('catalog_script_client');
                        if (grChange.get(ScriptId)) {
                            grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                            grChange.setValue('sys_policy', 'protected');
                            grChange.update();
                        }
                    } catch (e) {
                        gs.info('Fetch form data on change of profile: ' + e.message);
                    }
                }
                //onload (ACTIVE = FALSE);

                try {
                    var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                    onLoadCatalogClientScript.setAttributes({
                        "name": "Get Subnet Info",
                        "type": "onLoad",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "active": false,
                        "order": 50,
                        "description": "This script is created for getting subnet list.",
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onLoadCatalogClientScript.appliesToCatalogItem(true);
                    var onLoadScript = "function onLoad() { var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getSubnet');ga.addParam('sysparm_catSysID', catalogSysId);ga.getXML(processAnswer);function processAnswer(response) {var ans = response.responseXML.documentElement.getAttribute('answer');sessionStorage['clusterName_' + g_form.getUniqueValue()] = ans;ans = JSON.parse(ans);var catalog_clusterJSON = ans.catalog_data;clusterJSON = ans.cluster_info;var nicList = [];for(var m in clusterJSON){nicList.push(clusterJSON[m].subnet);}for (var k in catalog_clusterJSON) {for (var i in catalog_clusterJSON[k].nics) {if (catalog_clusterJSON[k].value + '') {for (var l in clusterJSON) {var subnetList = clusterJSON[l].subnet;if (l != catalog_clusterJSON[k].value + '')for (var s in subnetList){ /*g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', s);*/}}}{var opt = g_form.getElement(catalog_clusterJSON[k].nics[i] + '');for (var x=1, n = opt.options.length; x &lt; n; x++) {var present = false;var val = opt.options[x].value+'';for(var s=0; s &lt; nicList.length ;s++){if (nicList[s][val]) {present =true;break;}} if(!present){g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', opt.options[x].value+''); x--;n--; } }} }}}}";
                    onLoadCatalogClientScript.addScript(onLoadScript);
                    var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onLoadCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                } catch (e) {
                    gs.info('Get Subnet Info: ' + e.message);
                }

                //onchange

                try {
                    var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript.setAttributes({
                        "name": "Check AppName OnChange",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "cat_variable": "IO:" + appSysID,
                        "active": true,
                        "order": 100,
                        "description": "This script is auto created thorugh runtime module for checking application name.",
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false

                    });
                    onChangecatalogClientScript.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; var name = newValue; if ((newValue.length != ((newValue.trim()).length)) || (!(\/^[\\_\\-\\w ]+$\/.test(name) &amp;&amp; (name.trim().lastIndexOf('-') != (name.trim().length - 1))))) { if(portal_check == 'false') g_form.clearValue('default_app_name'); else g_form.setValue('default_app_name', ''); g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and in between spaces are allowed and cannot end with hyphens(-). Leading and trailing spaces are not allowed.'); } } }";
                    onChangecatalogClientScript.addScript(onChangeScript);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(OnChangeCatalogScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                } catch (e) {
                    gs.info('Check AppName OnChange: ' + e.message);
                }

                //onsubmit

                try {
                    var onSubmitcatalogScriptGR = new sn_sc.CatalogClientScript();
                    onSubmitcatalogScriptGR.setAttributes({
                        "name": "Check AppName OnSubmit",
                        "type": "onSubmit",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "active": 'false',
                        "order": 100,
                        "description": "This script is auto created thorugh runtime module for checking application name on submit.",
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onSubmitcatalogScriptGR.appliesToCatalogItem(true);
                    var onSubmitscript = "function onSubmit() { var result = true; var name = g_form.getValue('default_app_name'); if (!(/^[_-\\w ]+$/.test(name) &amp;&amp; (name.trim().lastIndexOf('-') != (name.trim().length - 1)))) { g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and spaces are allowed and cannot end with hyphens(-).'); result = false; } var errorFieldName = ''; var errorIntFieldName = ''; var parse = JSON.parse(sessionStorage.getItem('FieldRegex_' + g_form.getUniqueValue())); var keys = Object.keys(parse); for (var i = 0; i &lt; keys.length; i++) { var row = parse[keys[i] + '']; var patt = row.regex + ''; var reg = new RegExp(patt); var value = g_form.getValue(keys[i] + ''); var dataType = (row.data_type + '' == 'EXEC_SECRET' || row.data_type + '' == 'HTTP_SECRET' || row.data_type + '' == 'EXEC_LOCAL' || row.data_type + '' == 'HTTP_LOCAL') ? 'Dynamic' : row.data_type + ''; if (row.type + '' == 21) { var splitted = value.split(','); var actualVal = row.listRegex; var count = 0; for (var j = 0, n = splitted.length; j &lt; n; j++) { var listVal = actualVal[splitted[j] + ''];  if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') &amp;&amp; j == n - 1 &amp;&amp; listVal.includes('\n')){ while(listVal.indexOf('\n') != -1){ listVal = listVal.replace('\n','');} if (reg.test(listVal)) { count++;} } if (count == n) row.status = true; } else { if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') &amp;&amp; value.includes('\n')){while(value.indexOf('\n') != -1){value = value.replace('\n','');}} if (reg.test(value)) { row.status = true; } } if (value &amp;&amp; row.status == false) { result = false; g_form.hideFieldMsg(keys[i] + ''); if(dataType == ''){ errorIntFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'This is a Integer field.Please provide a integer value.'); } else{ errorFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'Value does not match specified regex: ' + row.regex); } }} if (result) {   var parse = JSON.parse(sessionStorage.getItem('fieldValues_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 			 parse = JSON.parse(sessionStorage.getItem('credentials_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 		 sessionStorage.removeItem('fieldValues_' + g_form.getUniqueValue()); sessionStorage.removeItem('credentials_' + g_form.getUniqueValue());      sessionStorage.removeItem('clusterName_' + g_form.getUniqueValue()); sessionStorage.removeItem('FieldRegex_' + g_form.getUniqueValue());var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\" ;var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Validating field value with regex..'); loadingDialog.renderWithContent(''+loadingHTML);} else { errorIntFieldName = (errorIntFieldName.endsWith(',')) ? errorIntFieldName.substr(0, errorIntFieldName.length - 1) : errorIntFieldName; errorFieldName = (errorFieldName.endsWith(',')) ? errorFieldName.substr(0, errorFieldName.length - 1) : errorFieldName; if(errorIntFieldName != '' ) g_form.addErrorMessage('Variables are Integer field.Please provide suitable values: ' + errorIntFieldName); if(errorFieldName != '' ) g_form.addErrorMessage('Variables value does not match specified Regex.Please provide suitable values: ' + errorFieldName); new GlideModal().get('loader').destroy(); return false; }var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+'';var profileName = (g_form.getValue('default_profile')+'').trim(); if(profileName == '') return; var projectUUID = (g_form.getValue('default_project')+'').trim(); if(projectUUID == '') return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName);ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; }if(flds[i].label == \"Project\"  &amp;&amp; flds[i].prettyName == \"default_project\")continue;if(flds[i].label == \"Profile\"  &amp;&amp; flds[i].prettyName == \"default_profile\")continue;if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName);  /*	 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true'; 	*/			} }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   }}";
                    onSubmitcatalogScriptGR.addScript(onSubmitscript);
                    var onSubmitcatalogScriptId = onSubmitcatalogScriptGR.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onSubmitcatalogScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                } catch (e) {
                    gs.info('Check AppName OnSubmit: ' + e.message);
                }

                //onload

                try {
                    var onLoadCatalogClientScriptGR = new sn_sc.CatalogClientScript();
                    onLoadCatalogClientScriptGR.setAttributes({
                        "name": "Hide Order details on request",
                        "type": "onLoad",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "active": true,
                        "order": 10,
                        "description": "Hide values on request details.",
                        "applies_catalog": "false",
                        "ui_type": '10',
                        "applies_req_item": "true",
                        "applies_sc_task": "false"
                    });
                    onLoadCatalogClientScriptGR.appliesToCatalogItem(false);
                    onLoadCatalogClientScriptGR.appliesToRequestedItem(true);
                    var onLoadScriptHide = "function onLoad() { var blueprintType = \"\"; if (g_form.getTableName() + \'\' == \'sc_req_item\') { var item_name = g_form.getValue(\"cat_item\"); var glide = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); glide.addParam(\'sysparm_name\', \'fetchBlueprintType\'); glide.addParam(\'sysparm_item_sys_id\', item_name); glide.getXML(getBlueprintResponse); function getBlueprintResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); blueprintType = answer; var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + \'\'] + \'\' == \'formatter\' || fldType[flds[i].realName + \'\'] + \'\' == \'container\' || fldType[flds[i].realName + \'\'] + \'\' == \'checkbox_container\' || fldType[flds[i].realName + \'\'] + \'\' == \'undefined\') { continue; } g_form.setMandatory(flds[i].prettyName, false); g_form.setDisplay(flds[i].prettyName, false); } g_form.setVariablesReadOnly(true); g_form.setDisplay(\'provider_icons\', \'false\'); g_form.setReadOnly(\'default_project\', true); g_form.setReadOnly(\'default_environment\', true); g_form.setReadOnly(\'default_app_name\', true); g_form.setReadOnly(\'default_profile\', true); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_environment\', true); g_form.setDisplay(\'default_app_name\', true); g_form.setDisplay(\'default_profile\', true); if (blueprintType == \"Runbook\" || blueprintType == \"Marketplace Runbook\") { g_form.setDisplay(\'default_endpoint\', true); } var profile = g_form.getValue(\'default_profile\') + \'\'; var cat_sys_id = g_form.getValue(\'cat_item\') + \'\'; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchOrderFormData\'); ga.addParam(\'sysparm_profile\', profile + \'\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id + \'\'); ga.getXML(parseResponse); } } function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var nameTypeMap = {}; var flds = g_form.nameMap; for (var i in flds) { nameTypeMap[flds[i].prettyName + \'\'] = fldType[flds[i].realName + \'\'] + \'\'; } var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf(\'cluster_name\') == -1) { if (nameTypeMap[i + \'\'] + \'\' == \'masked\') { fielVal[i] = parsed[i].value; g_form.setValue(i + \'\', \'\'); } g_form.setReadOnly(i + \'\', true); g_form.setDisplay(i + \'\', !parsed[i].readOnly); } else { g_form.setDisplay(i + \'\', !parsed[i].readOnly); g_form.setReadOnly(i + \'\', true); } } sessionStorage[\'fieldValues_\' + g_form.getUniqueValue()] = JSON.stringify(fielVal); } }";
                    onLoadCatalogClientScriptGR.addScript(onLoadScriptHide);
                    var onLoadCatalogClientScriptId = onLoadCatalogClientScriptGR.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onLoadCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                } catch (e) {
                    gs.info('Hide Order details on request: ' + e.message);
                }

                //onchange

                try {
                    var onChangecatalogClientScript1 = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript1.setAttributes({
                        "name": "Get Subnet Info on project change",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "cat_variable": "IO:" + subnetInfo,
                        "active": true,
                        "order": 600,
                        "description": "This script is auto created thorugh runtime module for checking application name on submit.",
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false

                    });
                    onChangecatalogClientScript1.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (newValue == \'\') { return; } var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'getSubnet\'); ga.addParam(\'sysparm_catSysID\', catalogSysId); ga.addParam(\'sysparm_ProjectUuid\', newValue); ga.getXML(processAnswer); function processAnswer(response) { var ans = response.responseXML.documentElement.getAttribute(\'answer\'); sessionStorage[\'clusterName_\' + g_form.getUniqueValue()] = ans; ans = JSON.parse(ans); var catalog_clusterJSON = ans.catalog_data; clusterJSON = ans.cluster_info; var nicList = []; for (var m in clusterJSON) { nicList.push(clusterJSON[m].subnet); } for (var k in catalog_clusterJSON) { for (var i in catalog_clusterJSON[k].nics) { if (catalog_clusterJSON[k].value + \'\') { for (var l in clusterJSON) { var subnetList = clusterJSON[l].subnet; if (l != catalog_clusterJSON[k].value + \'\') for (var s in subnetList) { \/*g_form.removeOption(catalog_clusterJSON[k].nics[i] + \'\', s);*\/ } } } { var opt = g_form.getElement(catalog_clusterJSON[k].nics[i] + \'\'); var n=0; if(opt.options) { n = opt.options.length; } for (var x = 1; x &lt; n; x++) { var present = false; var val = opt.options[x].value + \'\'; for (var s = 0; s &lt; nicList.length; s++) { if (nicList[s][val]) { present = true; break; } } if (!present) { g_form.removeOption(catalog_clusterJSON[k].nics[i] + \'\', opt.options[x].value + \'\'); x--; n--; } } } } } } } else { try { var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'getSubnet\'); ga.addParam(\'sysparm_catSysID\', catalogSysId); ga.addParam(\'sysparm_ProjectUuid\', newValue); ga.addParam(\'sysparm_ProjectUuid\', newValue); ga.getXML(processAnswer); function processAnswer(response) { var ans = response.responseXML.documentElement.getAttribute(\'answer\'); sessionStorage[\'clusterName_\' + g_form.getUniqueValue()] = ans; ans = JSON.parse(ans); var catalog_clusterJSON = ans.catalog_data; clusterJSON = ans.cluster_info; var nicList = []; for (var m in clusterJSON) { nicList.push(clusterJSON[m].subnet); } var nic_variable_namme = []; for (var n in catalog_clusterJSON) { var nics = catalog_clusterJSON[n].nics; for (var k in nics) nic_variable_namme.push(nics[k]); } var catNicJson = { \"nic\": nic_variable_namme, \"nicList\": nicList }; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'setSubnet\'); ga.addParam(\'sysparm_catSysID\', catalogSysId); ga.addParam(\'sysparm_catNicJson\', JSON.stringify(catNicJson)); ga.getXML(processAnswer1); function processAnswer1(response) { var ans = response.responseXML.documentElement.getAttribute(\'answer\'); } } } catch (err) {} } } }";
                    onChangecatalogClientScript1.addScript(onChangeScript);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript1.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(OnChangeCatalogScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                } catch (e) {
                    gs.info('"Get Subnet Info on project change: ' + e.message);
                }

                //onchange


                try {
                    var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                    onLoadCatalogClientScript.setAttributes({
                        "name": "Check Catalog Item Validity project",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "cat_variable": "IO:" + catItemValidity,
                        "active": true,
                        "order": 1,
                        "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onLoadCatalogClientScript.appliesToCatalogItem(true);
                    var onLoadScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } g_form.setReadOnly(\'default_endpoint\', false); var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { var selectedEndpointList; var allEndpointList; portal_check = response; if (portal_check == \'false\') { var loadingHTML = \"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var projectUUID = (newValue + \'\').trim(); if (projectUUID == \'\') return; var loadingDialog = new GlideModal(\'loader\', true); loadingDialog.setTitle(\'Checking Project Status...\'); loadingDialog.renderWithContent(\'\' + loadingHTML); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'checkCatalogValidity\'); ga.addParam(\'onChangeType\', \'project\'); ga.addParam(\'sysparm_projectUUID\', projectUUID); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); for (var index in parsed) { var message = \'\'; if (parsed[index].state == \'INACTIVE\') { message = parsed[index].name + \' is not available at Calm. So, Catalog Item cant be launched.Re - Directing back to catalog launch page. \'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } else if (parsed[index].state == \'CANTCHECK\') { message = \' Cant check whether the \' + parsed[index].name + \' from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.\'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } } new GlideModal().get(\'loader\').destroy(); } function clearFieldValue(message) { var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + \'\'] + \'\' == \'formatter\' || fldType[flds[i].realName + \'\'] + \'\' == \'container\' || fldType[flds[i].realName + \'\'] + \'\' == \'checkbox_container\' || fldType[flds[i].realName + \'\'] + \'\' == \'undefined\') { continue; } if (flds[i].label == \"Project\" &amp;&amp; flds[i].prettyName == \"default_project\") continue; if (flds[i].label == \"Profile\" &amp;&amp; flds[i].prettyName == \"default_profile\") continue; if (flds[i].prettyName.indexOf(\'cluster_name\') == -1) g_form.clearValue(flds[i].prettyName); } } function getParameterValue(name) { name = name.replace(\/[\\[]\/, \"\\\\\\[\").replace(\/[\\]]\/, \"\\\\\\]\"); var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\"; var regex = new RegExp(regexS); var results = regex.exec(self.location); if (results == null) { return \"\"; } else { return unescape(results[1]); } } var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchSelectedEndpointList\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponseMultipleProjectAndEndpointList); function parseResponseMultipleProjectAndEndpointList(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); selectedEndpointList = parsed.endpointList; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchEndpointAssociatedToProject\'); ga.addParam(\'sysparm_projectID\', newValue); ga.addParam(\'sysparm_selected_endpoint\', JSON.stringify(selectedEndpointList)); ga.getXML(parseResponseProjectAndEndpointList); function parseResponseProjectAndEndpointList(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); console.log(\"Endpoint associated to new project ::\" + answer); var parse = JSON.parse(answer); var final_endpointList = parse.single; g_form.clearOptions(\'default_endpoint\'); for (var i = 0; i &lt; final_endpointList.length; i++) { var endpoint = final_endpointList[i]; g_form.addOption(\'default_endpoint\', endpoint.uuid + \'\', endpoint.name + \'\'); console.log(\"endpoint ::\" + endpoint.uuid); if (endpoint.uuid == \"\") { g_form.showFieldMsg(\'default_endpoint\', \'There are no applicable Endpoints(s) that match the selected Project. Please choose a different Project to proceed.\'); } } if (final_endpointList.length == 1) { g_form.setReadOnly(\'default_endpoint\', true); } } } } else { var projectUUID = (newValue + \'\').trim(); if (projectUUID == \'\') return; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'checkCatalogValidity\'); ga.addParam(\'onChangeType\', \'project\'); ga.addParam(\'projectUUID\', projectUUID); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); for (var index in parsed) { var message = \'\'; if (parsed[index].state == \'INACTIVE\') { message = parsed[index].name + \' is not available at Calm. So, Catalog Item cant be launched.Re - Directing back to catalog launch page. \'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } else if (parsed[index].state == \'CANTCHECK\') { message = \' Cant check whether the \' + parsed[index].name + \' from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.\'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } } } function getParameterValue(name) { name = name.replace(\/[\\\\[]\/, \"\\\\\\\\\\\\[\").replace(\/[\\\\]]\/, \"\\\\\\\\\\\\]\"); var regexS = \"[\\\\\\\\?&amp;]\" + name + \"=([^&amp;#]*)\"; var regex = new RegExp(regexS); var results = regex.exec(self.location); if (results == null) { return \"\"; } else { return unescape(results[1]); } } function clearFieldValue(message) { alert(message); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'getFieldDetails\'); ga.addParam(\'cat_item_sys_id\', g_form.getUniqueValue()); ga.addParam(\'fieldNameArray\', g_form.getFieldNames()); ga.getXML(parseResponse1); function parseResponse1(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var object = JSON.parse(answer); for (var i in object) { if (object[i].var_type == \'formatter\' || object[i].var_type == \'container\' || object[i].var_type == \'checkbox_container\' || object[i].var_type == \'undefined\' || object[i].var_type == \'Container Start\') { continue; } if (object[i].var_name.indexOf(\'cluster_name\') == -1) g_form.clearValue(object[i].var_name); } } self.location = \'\/sp?id=sc_category&amp;catalog_id=240abede37112300fdfc097973990e24\'; } var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchSelectedEndpointList\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponseMultipleProjectAndEndpointList); function parseResponseMultipleProjectAndEndpointList(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); selectedEndpointList = parsed.endpointList; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchEndpointAssociatedToProject\'); ga.addParam(\'sysparm_projectID\', newValue); ga.addParam(\'sysparm_selected_endpoint\', JSON.stringify(selectedEndpointList)); ga.getXML(parseResponseProjectAndEndpointList); function parseResponseProjectAndEndpointList(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); console.log(\"Endpoint assciated to new project ::\" + answer); var parse = JSON.parse(answer); var final_endpointList = parse.single; g_form.clearOptions(\'default_endpoint\'); for (var i = 0; i &lt; final_endpointList.length; i++) { var endpoint = final_endpointList[i]; g_form.addOption(\'default_endpoint\', endpoint.uuid + \'\', endpoint.name + \'\'); console.log(\"endpoint ::\" + endpoint.uuid); if (endpoint.uuid == \"\") { g_form.showFieldMsg(\'default_endpoint\', \'There are no applicable Endpoints(s) that match the selected Project. Please choose a different Project to proceed.\'); } } if (final_endpointList.length == 1) { g_form.setReadOnly(\'default_endpoint\', true); } } } } } }";
                    onLoadCatalogClientScript.addScript(onLoadScript);
                    var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onLoadCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                } catch (e) {
                    gs.info('Check Catalog Item Validity project: ' + e.message);
                }


                //onchange
                //if(gr.getDisplayValue('category') == 'Blueprint' || gr.getDisplayValue('category') == 'Marketplace Blueprint') {
                if (gr.item_name.category == '7a30431637512300fdfc097973990ec8' || gr.item_name.category == '88bfbad237512300fdfc097973990e06') {
                    try {

                        var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                        onLoadCatalogClientScript.setAttributes({
                            "name": "Check Catalog Item Validity profile",
                            "type": "onChange",
                            "applies_to": "item",
                            "cat_item": gr.item_name + '',
                            "cat_variable": "IO:" + catItemProValidity,
                            "active": true,
                            "order": 1,
                            "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
                            "applies_catalog": true,
                            "ui_type": '10',
                            "applies_req_item": false,
                            "applies_sc_task": false
                        });
                        onLoadCatalogClientScript.appliesToCatalogItem(true);
                        var onLoadScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } try { var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { var blueprintType = getParameterValue(\'type\') + \'\'; var blueprintUUID = getParameterValue(\'uuid\') + \'\'; var profileSysId = getParameterValue(\'profileSysId\') + \'\'; var profileName = (newValue + \'\').trim(); var envUUID = (g_form.getValue(\'default_environment\')+\'\').trim(); var loadingHTML = \"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var loadingDialog = new GlideModal(\'loader\', true); loadingDialog.setTitle(\'Checking Blueprint Status...\'); loadingDialog.renderWithContent(\'\' + loadingHTML); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'checkCatalogValidity\'); ga.addParam(\'onChangeType\', \'profile\'); ga.addParam(\'sysparm_blueprintType\', blueprintType); ga.addParam(\'sysparm_blueprintUUID\', blueprintUUID); ga.addParam(\'sysparm_envUUID\', envUUID); ga.addParam(\'sysparm_profileSysId\', profileSysId); ga.addParam(\'sysparm_profileName\', profileName); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); for(var index in parsed) { var message = \'\'; if(parsed[index].state == \'INACTIVE\'){ message = parsed[index].name+\' is not available at Calm. So, Catalog Item cant be launched.Re - Directing back to catalog launch page. \'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } else if (parsed[index].state == \'CANTCHECK\') { message = \' Cant check whether the \'+ parsed[index].name+\' from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.\'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } } new GlideModal().get(\'loader\').destroy(); } function clearFieldValue(message) { var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + \'\'] + \'\' == \'formatter\' || fldType[flds[i].realName + \'\'] + \'\' == \'container\' || fldType[flds[i].realName + \'\'] + \'\' == \'checkbox_container\' || fldType[flds[i].realName + \'\'] + \'\' == \'undefined\') { continue; } if (flds[i].label == \"Project\" &amp;&amp; flds[i].prettyName == \"default_project\") continue; if (flds[i].label == \"Profile\" &amp;&amp; flds[i].prettyName == \"default_profile\") continue; if (flds[i].prettyName.indexOf(\'cluster_name\') == -1) g_form.clearValue(flds[i].prettyName); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } } function getParameterValue(name) { name = name.replace(\/[[]\/, \"\\[\").replace(\/[]]\/, \"\\]\"); var regexS = \"[\\?&amp;]\" + name + \"=([^&amp;#]*)\"; var regex = new RegExp(regexS); var results = regex.exec(self.location); if (results == null) { return \"\"; } else { return unescape(results[1]); } } } else { var blueprintType = getParameterValue(\'type\') + \'\'; var blueprintUUID = getParameterValue(\'uuid\') + \'\'; var profileSysId = getParameterValue(\'profileSysId\') + \'\'; var profileName = (newValue + \'\').trim(); if (profileName == \'\') return; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'checkCatalogValidity\'); ga.addParam(\'onChangeType\', \'profile\'); ga.addParam(\'blueprintType\', blueprintType); ga.addParam(\'blueprintUUID\', blueprintUUID); ga.addParam(\'profileSysId\', profileSysId); ga.addParam(\'profileName\', profileName); ga.addParam(\'cat_item_sys_id\', g_form.getUniqueValue()); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); for(var index in parsed) { var message = \'\'; if(parsed[index].state == \'INACTIVE\'){ message = parsed[index].name+\' is not available at Calm. So, Catalog Item cant be launched.Re - Directing back to catalog launch page. \'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } else if (parsed[index].state == \'CANTCHECK\') { message = \' Cant check whether the \'+ parsed[index].name+\' from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.\'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } } } function getParameterValue(name) { name = name.replace(\/[\\[]\/, \"\\\\\\[\").replace(\/[\\]]\/, \"\\\\\\]\"); var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\"; var regex = new RegExp(regexS); var results = regex.exec(self.location); if (results == null) { return \"\"; } else { return unescape(results[1]); } } function clearFieldValue(message) { alert(message); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'getFieldDetails\'); ga.addParam(\'cat_item_sys_id\', g_form.getUniqueValue()); ga.addParam(\'fieldNameArray\', g_form.getFieldNames()); ga.getXML(parseResponse1); function parseResponse1(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var object = JSON.parse(answer); for (var i in object) { if (object[i].var_type == \'formatter\' || object[i].var_type == \'container\' || object[i].var_type == \'checkbox_container\' || object[i].var_type == \'undefined\' || object[i].var_type == \'Container Start\') { continue; } if (object[i].var_name.indexOf(\'cluster_name\') == -1) g_form.clearValue(object[i].var_name); } } self.location = \'\/sp?id=sc_category&amp;catalog_id=240abede37112300fdfc097973990e24\'; } } } } catch (e) { console.log(\'inside Check Catalog Item Validity profile:: \' + e.message); } }";
                        onLoadCatalogClientScript.addScript(onLoadScript);
                        var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                        var grChange = new GlideRecord('catalog_script_client');
                        if (grChange.get(onLoadCatalogClientScriptId)) {
                            grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                            grChange.setValue('sys_policy', 'protected');
                            grChange.update();
                        }
                    } catch (e) {
                        gs.info('Check Catalog Item Validity profile: ' + e.message);
                    }
                }

                //onchange

                try {
                    var onChangecatalogClientScript2 = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript2.setAttributes({
                        "name": "Set Session Vars",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "cat_variable": "IO:" + setSessionVars,
                        "active": true,
                        "order": 700,
                        "description": "This script is auto created thorugh runtime module for setting session json.",
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false

                    });
                    onChangecatalogClientScript2.appliesToCatalogItem(true);
                    var onChangeScriptSess = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } try { var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + \'\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); jslog(answer); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; } for (var j in serv_json) { for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; } } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } } else { var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + \'\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); } function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'); gajax.addParam(\'sysparm_type\', \'catalog\'); gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'); gajax.addParam(\'sysparm_varJson\', act_var_JSON); gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')); gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\') { if (type == \'LOCAL\') g_form.setValue(sys_id, row.value); if (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; (row.value).length; k++) { g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); } } } if (row.state == \'ERROR\') { g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } } } } catch (e) { console.log(\'inside Set Session Vars:: \' + e.message); } }";
                    onChangecatalogClientScript2.addScript(onChangeScriptSess);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript2.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(OnChangeCatalogScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                } catch (e) {
                    gs.info('Set Session Vars: ' + e.message);
                }


                //onchange
                //if(gr.getDisplayValue('category') == 'Blueprint' || gr.getDisplayValue('category') == 'Marketplace Blueprint') {
                if (gr.item_name.category == '7a30431637512300fdfc097973990ec8' || gr.item_name.category == '88bfbad237512300fdfc097973990e06') {
                    try {
                        var onChangecatalogClientScript3 = new sn_sc.CatalogClientScript();
                        onChangecatalogClientScript3.setAttributes({
                            "name": "Fetch dependencies on change of profile",
                            "type": "onChange",
                            "applies_to": "item",
                            "cat_item": gr.item_name + '',
                            "cat_variable": "IO:" + profilesysID,
                            "active": true,
                            "order": 900,
                            "description": "This script is auto created thorugh runtime module for getting variables on change of profile.",
                            "applies_catalog": true,
                            "ui_type": '10',
                            "applies_req_item": false,
                            "applies_sc_task": false
                        });
                        onChangecatalogClientScript3.appliesToCatalogItem(true);
                        var onChangeScriptVars = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + \'\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); console.log(answer); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); if (portal_check == \'false\') parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); if (portal_check == \'false\') parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'); gajax.addParam(\'sysparm_type\', \'catalog\'); gajax.addParam(\'sysparm_field\', \'onLoad\'); gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'); gajax.addParam(\'sysparm_varJson\', act_var_JSON); gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')); gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\' &amp;&amp; (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\')) { g_form.clearOptions(sys_id); if (row.value) { for (var k = 0; k &lt; row.value.length; k++) g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); } if (row.value != \'\' &amp;&amp; row.value != \'undefined\') { g_form.setValue(sys_id, row.value[0]); } } else { if (row.data_type + \'\' != \'BASE\') { g_form.clearOptions(sys_id); if (row.options) { for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + \'\', row.options[k], row.options[k]); } } if (row.value != \'\' &amp;&amp; row.value != \'undefined\') { g_form.setValue(sys_id, row.value); } } if (row.state == \'ERROR\') { g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } if (portal_check == \'false\') new GlideModal().get(\'variables_loader\').destroy(); } } } } }";
                        onChangecatalogClientScript3.addScript(onChangeScriptVars);
                        var OnChangeCatalogScriptId = onChangecatalogClientScript3.create();
                        var grChange = new GlideRecord('catalog_script_client');
                        if (grChange.get(OnChangeCatalogScriptId)) {
                            grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                            grChange.setValue('sys_policy', 'protected');
                            grChange.update();
                        }
                    } catch (e) {
                        gs.info('Fetch dependencies on change of profile:: ' + e.message);
                    }
                }

                //onchange
                try {
                    gs.info('portal_fix: ' + portalfix);
                    var active_flag = gs.getProperty('x_nuta2_nutanix_ca.Nutanix_Calm_Select_Service_Portal') + '';

                    var catalogScriptGR = new sn_sc.CatalogClientScript();
                    catalogScriptGR.setAttributes({
                        "name": "Service portal fixes",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "cat_variable": "IO:" + portalfix,
                        "active": active_flag,
                        "order": 300,
                        "description": 'This script is auto created thorugh runtime module for service portal fixes.',
                        "applies_catalog": true,
                        "ui_type": "10",
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    catalogScriptGR.appliesToCatalogItem(true);
                    var Script = "function onChange(control, oldValue, newValue, isLoading) { try { if (isLoading) { return; } var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if( portal_check == 'true') { if (newValue == '') { var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + '' === 'default_profile' || elemen[i] + '' === 'default_project' || elemen[i] + '' === 'default_environment' || elemen[i] + '' === 'default_app_name') g_form.setDisplay(elemen[i], true); else { g_form.setMandatory(elemen[i], false); g_form.setDisplay(elemen[i], false); } } g_form.setDisplay('default_profile', true); g_form.setDisplay('default_project', true); g_form.setDisplay('default_environment', true); g_form.setDisplay('default_app_name', true); g_form.setMandatory('default_profile', true); } else { var credentials = g_form.getFieldNames(); for (var i in credentials) { if (credentials[i].includes('_password') || credentials[i].includes('_private_key') || credentials[i].includes('_passphrase')) { g_form.setVisible(credentials[i] + '', false); } } var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'extraFields'); ga.addParam('sysparm_catSysID', g_form.getUniqueValue()); ga.addParam('sysparm_fieldNames', g_form.getFieldNames()); ga.addParam('sysparm_profile', newValue); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var object = JSON.parse(answer); var extraFields = JSON.parse(object.extraFields); var privateFields = JSON.parse(object.privateFields); var showRuntimeVariables = JSON.parse(object.showRuntimeVariables); var secretVariables = JSON.parse(object.secretVariables); var extraCredentials = JSON.parse(object.extraCredentials); for (var i in extraFields) g_form.setVisible(extraFields[i] + '', false); for (var j in privateFields) g_form.setVisible(privateFields[j] + '', false); for (var k in showRuntimeVariables) g_form.setVisible(showRuntimeVariables[k] + '', true); for (var l in secretVariables) g_form.clearValue(secretVariables[l] + ''); for (var m in extraCredentials) g_form.setVisible(extraCredentials[k] + '', true); } } } } } catch (e) { console.log('Service portal fix' + e); }}";
                    catalogScriptGR.addScript(Script);
                    var ScriptId = catalogScriptGR.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(ScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                } catch (e) {
                    gs.info('Fetch dependencies on change of profile:: ' + e.message);
                }


                //ONLOAD


                var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Check Catalog Item Validity",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": gr.item_name + '',
                    "active": false,
                    "order": 1,
                    "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
                    "applies_catalog": true,
                    "ui_type": '10',
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = "function onLoad() { var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+''; var projectUUID = getParameterValue('projectUUID') + ''; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; } if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName); } 				 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true'; 				 }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   } }";
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                var grChange = new GlideRecord('catalog_script_client');
                if (grChange.get(onLoadCatalogClientScriptId)) {
                    grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                    grChange.setValue('sys_policy', 'protected');
                    grChange.update();
                }

                //IFCONDITION onchange

                if (parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2")) {
                    //if(gr.getDisplayValue('category') == 'Blueprint' || gr.getDisplayValue('category') == 'Marketplace Blueprint') {
                    if (gr.item_name.category == '7a30431637512300fdfc097973990ec8' || gr.item_name.category == '88bfbad237512300fdfc097973990e06') {
                        try {
                            var onChangeCatalogProject = new sn_sc.CatalogClientScript();
                            onChangeCatalogProject.setAttributes({
                                "name": "On Change of Project",
                                "type": "onChange",
                                "applies_to": "item",
                                "cat_item": gr.item_name,
                                "cat_variable": "IO:" + onchangeproject,
                                "active": true,
                                "order": 700,
                                "description": "This script is auto created thorugh runtime module for getting variables on change of project.",
                                "applies_catalog": true,
                                "ui_type": '10',
                                "applies_req_item": false,
                                "applies_sc_task": false

                            });
                            onChangeCatalogProject.appliesToCatalogItem(true);
                            var onChangeProjectScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchEnvironments\'); ga.addParam(\'sysparm_cat_sys_id\', cat_sys_id); ga.addParam(\'sysparm_project_id\', newValue); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var result = JSON.parse(answer); if (result.length == 0) { g_form.hideFieldMsg(\'default_environment\', true); g_form.clearOptions(\'default_environment\'); g_form.showFieldMsg(\'default_environment\', \'This Project has no valid Environments configured, you cannot proceed with the launch. Please contact your administrator\'); g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); if (portal_check == \'true\') { var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + \'\' === \'default_profile\' || elemen[i] + \'\' === \'default_project\' || elemen[i] + \'\' === \'default_environment\' || elemen[i] + \'\' === \'default_app_name\') g_form.setDisplay(elemen[i], true); else { g_form.setMandatory(elemen[i], false); g_form.setDisplay(elemen[i], false); } } } g_form.setMandatory(\'default_profile\', true); g_form.showFieldMsg(\'default_profile\', \'There are no applicable Profile(s) that match the selected Environment. Please choose a different Environment to proceed.\'); if (portal_check == \'false\') { var elemen = g_form.elements; for (var i in elemen) { g_form.setDisplay(elemen[i].fieldName, false); } } g_form.setDisplay(\'default_profile\', true); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_environment\', true); g_form.setMandatory(\'default_profile\', true); } else { g_form.clearMessages(); g_form.clearOptions(\'default_environment\'); g_form.clearValue(\'default_environment\'); for (var i = 0; i &lt; result.length; i++) { var jsonObj = result[i]; g_form.addOption(\'default_environment\', jsonObj.UUID + \'\', jsonObj.Name + \'\'); } if (portal_check == \'true\') { var jsonobj = result[0]; g_form.setValue(\'default_environment\', jsonObj.UUID); } } } } }";
                            onChangeCatalogProject.addScript(onChangeProjectScript);
                            var OnChangeCatalogScriptId = onChangeCatalogProject.create();
                            var grChange = new GlideRecord('catalog_script_client');
                            if (grChange.get(OnChangeCatalogScriptId)) {
                                grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                                grChange.setValue('sys_policy', 'protected');
                                grChange.update();
                            }
                            this.logger.debug("Created On Change of Project (calm evirment 3.2) client script on  " + gr.item_name);

                            //onchange

                            var onChangeCatalogEnvironment = new sn_sc.CatalogClientScript();
                            onChangeCatalogEnvironment.setAttributes({
                                "name": "On Change of Environment variable",
                                "type": "onChange",
                                "applies_to": "item",
                                "cat_item": gr.item_name + '',
                                "cat_variable": "IO:" + envFieldSysID,
                                "active": true,
                                "order": 700,
                                "description": "This script is auto created thorugh runtime module for getting variables on change of project.",
                                "applies_catalog": true,
                                "ui_type": '10',
                                "applies_req_item": false,
                                "applies_sc_task": false
                            });
                            onChangeCatalogEnvironment.appliesToCatalogItem(true);
                            var onChangeEnvironmentScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { var loadingHTML = \"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var loadingDialog = new GlideModal(\'environment_loader\', true); loadingDialog.setTitle(\'Fetching Profiles...\'); loadingDialog.renderWithContent(\'\' + loadingHTML); var def_project; var gUrl = new GlideURL(); gUrl.setFromCurrent(); for (var i = 0; i &lt; g_form.getControl(\'default_project\').options.length; i++) { if (g_form.getControl(\'default_project\').options[i].value == g_form.getValue(\'default_project\')) { def_project = g_form.getControl(\'default_project\').options[i].innerText; break; } } var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchProfilesBasisOnEnvironment\'); ga.addParam(\'sysparm_env\', g_form.getValue(\'default_environment\')); ga.addParam(\'sysparm_proValue\', g_form.getValue(\'default_project\')); ga.addParam(\'sysparm_pro\', def_project + \'\'); ga.addParam(\'sysparm_profile\', gUrl.getParam(\'profileSysId\')); ga.addParam(\'sysparm_blueprint\', gUrl.getParam(\'uuid\')); ga.addParam(\'sysparm_type\', gUrl.getParam(\'type\')); ga.getXML(parseData); function parseData(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); jslog(\' On Change of Environment variable answer\' + answer); answer = JSON.parse(answer); if (answer.length == 0) { g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); g_form.showFieldMsg(\'default_profile\', \'There are no applicable Profile(s) that match the selected Environment. Please choose a different Environment to proceed.\'); var elemen = g_form.elements; for (var i in elemen) { g_form.setDisplay(elemen[i].fieldName, false); } g_form.setDisplay(\'default_profile\', true); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_environment\', true); g_form.setMandatory(\'default_profile\', true); } else { var elemen = g_form.elements; for (var i in elemen) { g_form.setDisplay(elemen[i].fieldName, true); } g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); for (var i = 0; i &lt; answer.length; i++) { g_form.addOption(\'default_profile\', answer[i], answer[i]); } if (answer.length == 1) { g_form.setReadOnly(\'default_profile\', true); } } new GlideModal().get(\'environment_loader\').destroy(); new GlideModal().get(\'environment_loader\').destroy(); new GlideModal().get(\'environment_loader\').destroy(); var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue(\'default_profile\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); } function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'); gajax.addParam(\'sysparm_type\', \'catalog\'); gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'); gajax.addParam(\'sysparm_varJson\', act_var_JSON); gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')); gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\') { if (type == \'LOCAL\') g_form.setValue(sys_id, row.value); if (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; (row.value).length; k++) { g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); } } } if (row.state == \'ERROR\') { g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } } } else { var def_project; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchProfilesBasisOnEnvironment\'); ga.addParam(\'sysparm_env\', g_form.getValue(\'default_environment\')); ga.addParam(\'sysparm_proValue\', g_form.getValue(\'default_project\')); ga.addParam(\'sysparm_sysID\', g_form.getUniqueValue()); ga.addParam(\'sysparm_type\', getParameterValue(\'type\')); ga.getXML(parseData); function parseData(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); answer = JSON.parse(answer); if (answer.length == 0) { g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); g_form.showFieldMsg(\'default_profile\', \'There are no applicable Profile(s) that match the selected Environment. Please choose a different Environment to proceed.\'); var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + \'\' === \'default_profile\' || elemen[i] + \'\' === \'default_project\' || elemen[i] + \'\' === \'default_environment\' || elemen[i] + \'\' === \'default_app_name\') g_form.setDisplay(elemen[i], true); else { g_form.setMandatory(elemen[i], false); g_form.setDisplay(elemen[i], false); } } g_form.setDisplay(\'default_profile\', true); g_form.setReadOnly(\'default_profile\', false); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_environment\', true); g_form.setMandatory(\'default_profile\', true); } else { g_form.setReadOnly(\'default_profile\', false); var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + \'\' === \'default_profile\' || elemen[i] + \'\' === \'default_project\' || elemen[i] + \'\' === \'default_environment\' || elemen[i] + \'\' === \'default_app_name\') g_form.setDisplay(elemen[i], true); else { g_form.setMandatory(elemen[i], false); g_form.setDisplay(elemen[i], false); } } g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); g_form.clearValue(\'default_profile\'); for (var i = 0; i &lt; answer.length; i++) { g_form.addOption(\'default_profile\', answer[i], answer[i]); } g_form.setValue(\'default_profile\', answer[0]); if (answer.length == 1) { g_form.setReadOnly(\'default_profile\', true); } } var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue(\'default_profile\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); } function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'); gajax.addParam(\'sysparm_type\', \'catalog\'); gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'); gajax.addParam(\'sysparm_varJson\', act_var_JSON); gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')); gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\') { if (type == \'LOCAL\') g_form.setValue(sys_id, row.value); if (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; (row.value).length; k++) { g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); } } } if (row.state == \'ERROR\') { g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } } function getParameterValue(name) { name = name.replace(\/[\\[]\/, \"\\\\\\[\").replace(\/[\\]]\/, \"\\\\\\]\"); var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\"; var regex = new RegExp(regexS); var results = regex.exec(self.location); if (results == null) { return \"\"; } else { return unescape(results[1]); } } } } }";
                            onChangeCatalogEnvironment.addScript(onChangeEnvironmentScript);
                            var OnChangeCatalogScriptId = onChangeCatalogEnvironment.create();
                            var grChange = new GlideRecord('catalog_script_client');
                            if (grChange.get(OnChangeCatalogScriptId)) {
                                grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                                grChange.setValue('sys_policy', 'protected');
                                grChange.update();
                            }
                            this.logger.debug("Created On Change of Environment (calm evirment 3.2) client script on  " + gr.item_name);
                        } catch (e) {
                            gs.info('Fetch 3.2:: ' + e.message);
                        }
                    }
                }

                var var_update = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                var_update.addQuery('cat_item.name', gr.item_name.getDisplayValue() + '');
                var_update.query();
                while (var_update.next()) {
					var column_fields={};
					column_fields.sys_scope = "3b7631654f452b001200e5201310c76b";
					if (var_update.name == 'default_app_name')
                        column_fields.order = 1;
                    if (var_update.name == 'default_project')
                        column_fields.order = 2;
                    if (var_update.name == 'default_environment')
                        column_fields.order = 3;
                    if (var_update.name == 'default_profile')
                        column_fields.order = 4;
					var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable(var_update.sys_id, column_fields, 'update');
					
                }

            }
            var gr_bp = new GlideRecord(this.appUtil.configuration.table.Blueprint + '');
            gr_bp.query();
            while (gr_bp.next()) {
                var var_update = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                var_update.addQuery('cat_item.name', gr_bp.name.getDisplayValue() + '');
                var_update.query();
                while (var_update.next()) {
					var column_fields={};
                    if (var_update.name == 'default_app_name')
                        column_fields.order = 1;
                    if (var_update.name == 'default_project')
                        column_fields.order = 2;
                    if (var_update.name == 'default_environment')
                        column_fields.order = 3;
                    if (var_update.name == 'default_profile')
                        column_fields.order = 4;
                   var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable(var_update.sys_id, column_fields, 'update');
                }
            }
            var gr_mpi = new GlideRecord(this.appUtil.configuration.table.marketplaceItem + '');
            gr_mpi.query();
            while (gr_mpi.next()) {
                var var_update = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                var_update.addQuery('cat_item.name', gr_mpi.name.getDisplayValue() + '');
                var_update.query();
                while (var_update.next()) {
				 var column_fields={};
                    if (var_update.name == 'default_app_name')
                        column_fields.order = 1;
                    if (var_update.name == 'default_project')
                        column_fields.order = 2;
                    if (var_update.name == 'default_environment')
                        column_fields.order = 3;
                    if (var_update.name == 'default_profile')
                        column_fields.order = 4;
					var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable(var_update.sys_id, column_fields, 'update');
                }
            }

            gs.setProperty("x_nuta2_nutanix_ca.1_5_1", "1");

        } catch (e) {
            this.logger.error("Exeption caught inside Migration_script.updateTheCatalogClientScriptForOneDotFiveDotOne() Error : - " + e);
        }
    },


    addEnvironmentVariableToAllCatalogs: function() {
        try {
            if ((parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2")) &amp;&amp; (gs.getProperty('x_nuta2_nutanix_ca.1_4_4') == '0')) {

                var mpi_cat_item = new GlideRecord('x_nuta2_nutanix_ca_nutanix_marketplaceitems');
                mpi_cat_item.query();
                while (mpi_cat_item.next()) {
                    var grItem = new GlideRecord("item_option_new");
                    grItem.addQuery('name', 'default_environment');
                    grItem.addQuery('cat_item', mpi_cat_item.sys_id + "");
                    grItem.query();
                    if (!grItem.hasNext()) {
						var column_fields = {};
						column_fields.type = '5';
                        column_fields.cat_item = mpi_cat_item.sys_id + "";
                        column_fields.active = true;
                        column_fields.question_text = 'Environment';
                        column_fields.name = 'default_environment';
                        column_fields.order = 2;
						var env_SysID = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');
                    }
                }

                var bp_cat_item = new GlideRecord('x_nuta2_nutanix_ca_nutanix_blueprint');
                bp_cat_item.query();
                while (bp_cat_item.next()) {
                    var grItem = new GlideRecord("item_option_new");
                    grItem.addQuery('name', 'default_environment');
                    grItem.addQuery('cat_item', bp_cat_item.sys_id + "");
                    grItem.query();
                    if (!grItem.hasNext()) {
						var column_fields = {};
						column_fields.type = '5';
                        column_fields.cat_item = bp_cat_item.sys_id + "";
                        column_fields.active = true;
                        column_fields.question_text = 'Environment';
                        column_fields.name = 'default_environment';
                        column_fields.order = 2;
						var env_SysID = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');
                    }
                }


                var cat_items = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
                cat_items.query();
                while (cat_items.next()) {
                    var grItem = new GlideRecord("item_option_new");
					var column_fields = {};
					column_fields.type = '5';
                    column_fields.cat_item = cat_items.item_name + "";
                    column_fields.active = true;
                    column_fields.question_text = 'Environment';
                    column_fields.name = 'default_environment';
                    column_fields.order = 2;
					var env_SysID = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');


                    //Creating new scripts:
                    var projectSysID = "";
                    var profileSysID = "";
                    var app_name_SysID = "";
                    var env_variable_SysID = "";
                    var grItemProf = new GlideRecord("item_option_new");
                    grItemProf.addQuery("cat_item", cat_items.item_name);
                    var qc = grItemProf.addQuery("name", "default_project");
                    qc.addOrCondition('name', 'default_profile');
                    qc.addOrCondition('name', 'default_app_name');
                    qc.addOrCondition('name', 'default_environment');
                    grItemProf.query();

                    while (grItemProf.next()) {
                        if (grItemProf.name + '' == "default_project")
                            projectSysID = grItemProf.sys_id + "";
                        if (grItemProf.name + '' == "default_profile")
                            profileSysID = grItemProf.sys_id + "";
                        if (grItemProf.name + '' == "default_app_name")
                            app_name_SysID = grItemProf.sys_id + "";
                        if (grItemProf.name + '' == "default_environment")
                            env_variable_SysID = grItemProf.sys_id + "";
                    }
                    //             gs.info("**************** projectSysID " + projectSysID + " profileSysID " + profileSysID);


                    var onChangeCatalogProject = new sn_sc.CatalogClientScript();
                    onChangeCatalogProject.setAttributes({
                        "name": "On Change of Project",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": cat_items.item_name + '',
                        "cat_variable": "IO:" + projectSysID,
                        "active": true,
                        "order": 700,
                        "description": "This script is auto created thorugh runtime module for getting variables on change of project.",
                        "applies_catalog": true,
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,

                    });
                    onChangeCatalogProject.appliesToCatalogItem(true);
                    var onChangeProjectScript = "function onChange(control, oldValue, newValue, isLoading){if (isLoading || newValue == ''){return;}var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchEnvironments');ga.addParam('sysparm_cat_sys_id', cat_sys_id);ga.getXML(parseResponse);function parseResponse(response){var answer = response.responseXML.documentElement.getAttribute('answer');var result = JSON.parse(answer);if (result.length == 0) {g_form.hideFieldMsg('default_environment', true);g_form.clearOptions('default_environment');g_form.showFieldMsg('default_environment', 'This Project has no valid Environments configured, you cannot proceed with the launch.  Please contact your administrator'); g_form.hideFieldMsg('default_profile', true);g_form.clearOptions('default_profile');g_form.setMandatory('default_profile', true);g_form.showFieldMsg('default_profile', 'There are no applicable Profile(s) that match the selected Environment.  Please choose a different Environment to proceed.');var elemen = g_form.elements;for (var i in elemen) { g_form.setDisplay(elemen[i].fieldName, false);} g_form.setDisplay('default_profile', true);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setMandatory('default_profile', true);}else{g_form.clearMessages();g_form.clearOptions('default_environment');for (var i = 0; i &lt; result.length; i++){var jsonObj = result[i];g_form.addOption('default_environment', jsonObj.UUID + '', jsonObj.Name + '');}}}}";
                    onChangeCatalogProject.addScript(onChangeProjectScript);
                    var OnChangeCatalogScriptId = onChangeCatalogProject.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(OnChangeCatalogScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }
                    //             gs.info("catalog client script  71 " + OnChangeCatalogScriptId);



                    var onChangeCatalogEnvironment = new sn_sc.CatalogClientScript();
                    onChangeCatalogEnvironment.setAttributes({
                        "name": "On Change of Environment variable",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": cat_items.item_name + '',
                        "cat_variable": "IO:" + env_variable_SysID,
                        "active": true,
                        "order": 700,
                        "description": "This script is auto created thorugh runtime module for getting variables on change of project.",
                        "applies_catalog": true,
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,

                    });
                    onChangeCatalogEnvironment.appliesToCatalogItem(true);
                    var onChangeEnvironmentScript = "function onChange(control, oldValue, newValue, isLoading){if (isLoading || newValue == '') {return;} var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\";var loadingDialog = new GlideModal('environment_loader', true);loadingDialog.setTitle('Fetching Profiles...');loadingDialog.renderWithContent('' + loadingHTML);var gUrl = new GlideURL();gUrl.setFromCurrent();var def_project;for (var i = 0; i &lt; g_form.getControl('default_project').options.length; i++){if (g_form.getControl('default_project').options[i].value == g_form.getValue('default_project')) {def_project = g_form.getControl('default_project').options[i].innerText;break;}}var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchProfilesBasisOnEnvironment');ga.addParam('sysparm_env', g_form.getValue('default_environment'));ga.addParam('sysparm_proValue', g_form.getValue('default_project'));ga.addParam('sysparm_pro', def_project + '');ga.addParam('sysparm_profile', gUrl.getParam('profileSysId'));ga.addParam('sysparm_blueprint', gUrl.getParam('uuid'));ga.addParam('sysparm_type', gUrl.getParam('type'));ga.getXML(parseData);function parseData(response) {var answer = response.responseXML.documentElement.getAttribute('answer');jslog(' On Change of Environment variable answer' + answer);answer = JSON.parse(answer);if (answer.length == 0) {g_form.hideFieldMsg('default_profile', true); g_form.clearOptions('default_profile');g_form.showFieldMsg('default_profile', 'There are no applicable Profile(s) that match the selected Environment.  Please choose a different Environment to proceed.');var elemen = g_form.elements;for (var i in elemen) {g_form.setDisplay(elemen[i].fieldName, false);}g_form.setDisplay('default_profile', true);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setMandatory('default_profile', true);}else{var elemen = g_form.elements;for (var i in elemen) {g_form.setDisplay(elemen[i].fieldName, true);}g_form.hideFieldMsg('default_profile', true);g_form.clearOptions('default_profile');for (var i = 0; i &lt; answer.length; i++) {g_form.addOption('default_profile', answer[i], answer[i]);}if (answer.length == 1) {g_form.setReadOnly('default_profile', true);}}new GlideModal().get('environment_loader').destroy();new GlideModal().get('environment_loader').destroy();new GlideModal().get('environment_loader').destroy();var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue('default_profile').trim();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse);}function varResponse(response){var answer = response.responseXML.documentElement.getAttribute('answer');var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service;var sess_json = {};var var_array = [];for (var i in prof_json){var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i); var parsed_field = JSON.parse(field);parsed_field.value = curr_value; parsed_field.sys_id = i + '';sess_json['IO:' + i] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);for (var j in serv_json){var_array = [];for (var k in serv_json[j]){var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:' + k] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(sess_json);}}function getAdvancedVars(variable_json){var act_var_JSON = JSON.stringify(variable_json);var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); gajax.addParam('sysparm_name', 'variableArrayParser');gajax.addParam('sysparm_type', 'catalog');gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + '');gajax.addParam('sysparm_varJson', act_var_JSON);gajax.getXML(getVarResponse);}function getVarResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');if (answer + '' == '' || answer + '' == 'undefined' || answer + '' == 'null') return;var parsedResponse = JSON.parse(answer);for (var i in parsedResponse) {var row = parsedResponse[i];var sys_id = 'IO:' + row.sys_id;var type = row.type + '';if (row.state == 'SUCCESS'){if (type == 'LOCAL') g_form.setValue(sys_id, row.value);if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET'){g_form.clearOptions(sys_id);for (var k = 0; k &lt; (row.value).length; k++){g_form.addOption(sys_id + '', row.value[k], row.value[k]);}}}if (row.state == 'ERROR') {g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}}}";
                    onChangeCatalogEnvironment.addScript(onChangeEnvironmentScript);
                    var OnChangeCatalogScriptId = onChangeCatalogEnvironment.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(OnChangeCatalogScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }
                    //             gs.info("catalog client script  100 " + OnChangeCatalogScriptId);

                    var catalogScriptGR = new GlideRecord('catalog_script_client');
                    catalogScriptGR.addQuery('cat_item', cat_items.item_name + '');
                    catalogScriptGR.query();
                    while (catalogScriptGR.next()) {
                        //  gs.info(catalogScriptGR.name + "catalog client script updatated");
                        if (catalogScriptGR.name + '' == "Get Project and Profile List onLoad") {
                            //                     gs.info("final If " + catalogScriptGR.name + "catalog client script updatated");
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                        if (catalogScriptGR.name + '' == "Fetch form data on change of profile") {
                            this.logger.info(" final If " + catalogScriptGR.name + "catalog client script updatated");
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                        if (catalogScriptGR.name + '' == "Check AppName OnChange") {
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                        if (catalogScriptGR.name + '' == "Check AppName OnSubmit") {
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                        if (catalogScriptGR.name + '' == "Hide Order details on request") {
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                    }


                    var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                    onLoadCatalogClientScript.setAttributes({
                        "name": "Get Project and Profile List onLoad",
                        "type": "onLoad",
                        "applies_to": "item",
                        "cat_item": cat_items.item_name + '',
                        "active": "true",
                        "order": "100",
                        "description": "This script is auto created thorugh runtime module for getting projects and profile list.",
                        "applies_catalog": "true",
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onLoadCatalogClientScript.appliesToCatalogItem(true);
                    var onLoadScript = "function onLoad() {var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchProjectAndProfileList');ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse);function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var parsed = JSON.parse(answer);var projectList = parsed.projectList;g_form.clearOptions('default_project');for (var i = 0; i &lt; projectList.length; i++) {var project = projectList[i];g_form.addOption('default_project', project.uuid, project.name)} if (projectList.length == 1) { g_form.setReadOnly('default_project', true)}new GlideModal().get('loader').destroy();}}";
                    onLoadCatalogClientScript.addScript(onLoadScript);
                    var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(onLoadCatalogClientScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }
                    //             gs.info("catalog client script  140 " + onLoadCatalogClientScriptId);
                    if (current.variables.type_of_blueprint == 'runbook' || current.variables.type_of_blueprint == 'published_runbook') {
                        var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                        onLoadCatalogClientScript.setAttributes({
                            "name": "Get Project and Endpoint List onLoad",
                            "type": "onLoad",
                            "applies_to": "item",
                            "cat_item": '' + catItemSysId,
                            "active": "true",
                            "order": "100",
                            "description": "This script is auto created thorugh runtime module for getting projects and profile list.",
                            "applies_catalog": "true",
                            "ui_type": "0",
                            "applies_req_item": false,
                            "applies_sc_task": false
                        });

                        onLoadCatalogClientScript.appliesToCatalogItem(true);
                        var onLoadScript = "function onLoad() { var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchMultipleProjectAndEndpointList\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponseMultipleProjectAndEndpointList); function parseResponseMultipleProjectAndEndpointList(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); var projectList = parsed.projectList; g_form.clearOptions(\'default_project\'); for (var i = 0; i &lt; projectList.length; i++) { var project = projectList[i]; g_form.addOption(\'default_project\', project.uuid, project.name); } if (projectList.length == 1) { g_form.setReadOnly(\'default_project\', true); } var endpointList = parsed.endpointList; } var ga1 = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga1.addParam(\'sysparm_name\', \'advanceVariableDynamicOptions\'); ga1.addParam(\'sysparm_catSysID\', cat_sys_id); ga1.getXML(parseResponseAdvanceVariable); function parseResponseAdvanceVariable(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parse = JSON.parse(answer); var keys = Object.keys(parse[0]); var fieldRegex = parse[1]; parse = parse[0]; sessionStorage[\'FieldRegex_\' + g_form.getUniqueValue()] = JSON.stringify(fieldRegex); for (var i = 0; i &lt; keys.length; i++) { var row = parse[keys[i] + \'\']; if (row.options.state == \'SUCCESS\') { g_form.clearOptions(keys[i] + \'\'); for (var k = 0; k &lt; (row.options.values).length; k++) { g_form.addOption(keys[i] + \'\', row.options.values[k], row.options.values[k]); } } else { g_form.addErrorMessage(\'Error in variable: \' + keys[i] + \': \' + row.options.values[0]); } } } var ga2 = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga2.addParam(\'sysparm_name\', \'fetchOrderFormData\'); ga2.addParam(\'sysparm_profile\', \'runbook\'); ga2.addParam(\'sysparm_catSysID\', cat_sys_id); ga2.getXML(parseResponseOrderFormData); function parseResponseOrderFormData(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var nameTypeMap = {}; var flds = g_form.nameMap; for (var i in flds) { nameTypeMap[flds[i].prettyName + \'\'] = fldType[flds[i].realName + \'\'] + \'\'; } var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf(\'cluster_name\') == -1) { if (nameTypeMap[i + \'\'] + \'\' == \'masked\') { fielVal[i] = parsed[i].value; g_form.setValue(i + \'\', \'\'); } else { g_form.setValue(i + \'\', parsed[i].value + \'\'); } g_form.setReadOnly(i + \'\', parsed[i].readOnly + \'\'); g_form.setDisplay(i + \'\', !parsed[i].readOnly); } else { g_form.setDisplay(i + \'\', !parsed[i].readOnly); g_form.setReadOnly(i + \'\', true); } } sessionStorage[\'fieldValues_\' + g_form.getUniqueValue()] = JSON.stringify(fielVal); } }";
                        onLoadCatalogClientScript.addScript(onLoadScript);
                        var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                        var gr = new GlideRecord('catalog_script_client');
                        if (gr.get(onLoadCatalogClientScriptId)) {
                            gr.setValue("sys_scope", "global");
                            gr.update();
                        }
                    }
                    var catalogScriptGR = new sn_sc.CatalogClientScript();
                    catalogScriptGR.setAttributes({
                        "name": "Fetch form data on change of profile",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": cat_items.item_name + '',
                        "cat_variable": "IO:" + profileSysID,
                        "active": true,
                        "order": 100,
                        "description": 'This script is auto created thorugh runtime module for fetching and setting form data and visibility.',
                        "applies_catalog": true,
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,
                    });
                    catalogScriptGR.appliesToCatalogItem(true);
                    var script = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading ) { return; } if(newValue == '') return; var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; } g_form.setDisplay(flds[i].prettyName, false); } g_form.setVariablesReadOnly(true); g_form.setDisplay('provider_icons', false); g_form.setReadOnly('default_project', false); g_form.setReadOnly('default_app_name', false); g_form.setReadOnly('default_profile', false); g_form.setDisplay('default_project', true); g_form.setDisplay('default_app_name', true); g_form.setDisplay('default_profile', true);g_form.setMandatory('default_profile', true); g_form.setDisplay('default_environment', true); g_form.setReadOnly('default_environment', false); var profile = newValue; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchOrderFormData'); ga.addParam('sysparm_profile', profile); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } var nameTypeMap = {}; var flds = g_form.nameMap; for (var i in flds) { nameTypeMap[flds[i].prettyName + ''] = fldType[flds[i].realName + ''] + ''; } var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf('cluster_name') == -1) { if (nameTypeMap[i + ''] + '' == 'masked') { fielVal[i] = parsed[i].value; g_form.setValue(i + '', ''); } else { g_form.setValue(i + '', parsed[i].value + ''); } g_form.setReadOnly(i + '', parsed[i].readOnly + ''); g_form.setDisplay(i + '', !parsed[i].readOnly); } else { g_form.setDisplay(i + '', !parsed[i].readOnly); g_form.setReadOnly(i + '', true); } } sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal); new GlideModal().get('loader').destroy(); var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchCredentialsList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var credArr = {}; var parsed = JSON.parse(answer); for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + '').toLowerCase().replace(/ /g, '_'); g_form.setValue(name + '_credential_name', credential.name + ''); g_form.setReadOnly(name + '_credential_name', true); g_form.setValue(name + '_secret_type', credential.type + '', (credential.type + '' == 'KEY') ? 'SSH Private Key' : 'Password'); g_form.setReadOnly(name + '_secret_type', true); g_form.setValue(name + '_username', credential.username.value); g_form.setReadOnly(name + '_username', credential.username.readOnly); g_form.setDisplay(name + '_username', !credential.username.readOnly); if ((credential.type == 'KEY')) { g_form.setValue(name + '_ssh_private_key', credential.ssh_private_key.value); g_form.setReadOnly(name + '_ssh_private_key', credential.ssh_private_key.readOnly); g_form.setValue(name + '_passphrase', credential.passphrase.value); g_form.setReadOnly(name + '_passphrase', credential.passphrase.readOnly); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_ssh_private_key', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + '_passphrase', !credential.passphrase.readOnly); } else { g_form.setValue(name + '_password', ''); credArr[name + '_password'] = credential.password.value; g_form.setReadOnly(name + '_password', credential.password.readOnly); g_form.setDisplay(name + '_password', !credential.password.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); } g_form.setDisplay(name + '_credential_reference', 'false'); if (credential.credential_reference &amp;&amp; credential.credential_reference.name) { g_form.setDisplay(name + '_credential_reference', 'true'); g_form.addOption(name + '_credential_reference', credential.credential_reference.uuid + '', credential.credential_reference.name + ''); g_form.setReadOnly(name + '_credential_reference', credential.credential_reference.readOnly); g_form.setDisplay(name + '_credential_reference', !credential.credential_reference.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_secret_type', 'false'); } } sessionStorage['credentials_' + g_form.getUniqueValue()] = JSON.stringify(credArr); new GlideModal().get('loader').destroy(); } }}";
                    catalogScriptGR.addScript(script);
                    var ScriptId = catalogScriptGR.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(ScriptId)) {
                        gr.setValue("sys_scope", "global");

                        gr.update();
                    }

                    //   gs.info("catalog client script  170 " + ScriptId);

                    var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript.setAttributes({
                        "name": "Check AppName OnChange",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": cat_items.item_name + '',
                        "cat_variable": "IO:" + app_name_SysID,
                        "active": true,
                        "order": 100,
                        "description": "This script is auto created thorugh runtime module for checking application name.",
                        "applies_catalog": true,
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,

                    });
                    onChangecatalogClientScript.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') {return;}var name = newValue; if ((newValue.length != ((newValue.trim()).length))  || (!(/^[\_\-\w ]+$/.test(name) &amp;&amp; (name.trim().lastIndexOf('-') != (name.trim().length - 1))))) {g_form.clearValue('default_app_name'); g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and in between spaces are allowed and cannot end with hyphens(-). Leading and trailing spaces are not allowed.');}}";
                    onChangecatalogClientScript.addScript(onChangeScript);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(OnChangeCatalogScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }


                    var onSubmitcatalogScriptGR = new sn_sc.CatalogClientScript();
                    onSubmitcatalogScriptGR.setAttributes({
                        "name": "Check AppName OnSubmit",
                        "type": "onSubmit",
                        "applies_to": "item",
                        "cat_item": cat_items.item_name + '',
                        "active": true,
                        "order": 100,
                        "description": "This script is auto created thorugh runtime module for checking application name on submit.",
                        "applies_catalog": true,
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,
                    });
                    onSubmitcatalogScriptGR.appliesToCatalogItem(true);
                    var onSubmitscript = "function onSubmit() { var result = true; var name = g_form.getValue('default_app_name'); if (!(/^[_-\\w ]+$/.test(name) &amp;&amp; (name.trim().lastIndexOf('-') != (name.trim().length - 1)))) { g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and spaces are allowed and cannot end with hyphens(-).'); result = false; } var errorFieldName = ''; var errorIntFieldName = ''; var parse = JSON.parse(sessionStorage.getItem('FieldRegex_' + g_form.getUniqueValue())); var keys = Object.keys(parse); for (var i = 0; i &lt; keys.length; i++) { var row = parse[keys[i] + '']; var patt = row.regex + ''; var reg = new RegExp(patt); var value = g_form.getValue(keys[i] + ''); var dataType = (row.data_type + '' == 'EXEC_SECRET' || row.data_type + '' == 'HTTP_SECRET' || row.data_type + '' == 'EXEC_LOCAL' || row.data_type + '' == 'HTTP_LOCAL') ? 'Dynamic' : row.data_type + ''; if (row.type + '' == 21) { var splitted = value.split(','); var actualVal = row.listRegex; var count = 0; for (var j = 0, n = splitted.length; j &lt; n; j++) { var listVal = actualVal[splitted[j] + ''];  if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') &amp;&amp; j == n - 1 &amp;&amp; listVal.includes('\n')){ while(listVal.indexOf('\n') != -1){ listVal = listVal.replace('\n','');} if (reg.test(listVal)) { count++;} } if (count == n) row.status = true; } else { if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') &amp;&amp; value.includes('\n')){while(value.indexOf('\n') != -1){value = value.replace('\n','');}} if (reg.test(value)) { row.status = true; } } if (value &amp;&amp; row.status == false) { result = false; g_form.hideFieldMsg(keys[i] + ''); if(dataType == ''){ errorIntFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'This is a Integer field.Please provide a integer value.'); } else{ errorFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'Value does not match specified regex: ' + row.regex); } }} if (result) {   var parse = JSON.parse(sessionStorage.getItem('fieldValues_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 			 parse = JSON.parse(sessionStorage.getItem('credentials_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 		 sessionStorage.removeItem('fieldValues_' + g_form.getUniqueValue()); sessionStorage.removeItem('credentials_' + g_form.getUniqueValue());      sessionStorage.removeItem('clusterName_' + g_form.getUniqueValue()); sessionStorage.removeItem('FieldRegex_' + g_form.getUniqueValue());var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\" ;var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Validating field value with regex..'); loadingDialog.renderWithContent(''+loadingHTML);} else { errorIntFieldName = (errorIntFieldName.endsWith(',')) ? errorIntFieldName.substr(0, errorIntFieldName.length - 1) : errorIntFieldName; errorFieldName = (errorFieldName.endsWith(',')) ? errorFieldName.substr(0, errorFieldName.length - 1) : errorFieldName; if(errorIntFieldName != '' ) g_form.addErrorMessage('Variables are Integer field.Please provide suitable values: ' + errorIntFieldName); if(errorFieldName != '' ) g_form.addErrorMessage('Variables value does not match specified Regex.Please provide suitable values: ' + errorFieldName); new GlideModal().get('loader').destroy(); return false; }var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+'';var profileName = (g_form.getValue('default_profile')+'').trim(); if(profileName == '') return; var projectUUID = (g_form.getValue('default_project')+'').trim(); if(projectUUID == '') return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName);ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; }if(flds[i].label == \"Project\"  &amp;&amp; flds[i].prettyName == \"default_project\")continue;if(flds[i].label == \"Profile\"  &amp;&amp; flds[i].prettyName == \"default_profile\")continue;if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName);  /*	 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true'; 	*/			} }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   }}";
                    onSubmitcatalogScriptGR.addScript(onSubmitscript);
                    var onSubmitcatalogScriptId = onSubmitcatalogScriptGR.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(onSubmitcatalogScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }

                    var onLoadCatalogClientScriptGR = new sn_sc.CatalogClientScript();
                    onLoadCatalogClientScriptGR.setAttributes({
                        "name": "Hide Order details on request",
                        "type": "onLoad",
                        "applies_to": "item",
                        "cat_item": cat_items.item_name + '',
                        "active": true,
                        "order": 10,
                        "description": "Hide values on request details.",
                        "applies_catalog": "false",
                        "ui_type": "0",
                        "applies_req_item": "true",
                        "applies_sc_task": "false"
                    });
                    onLoadCatalogClientScriptGR.appliesToCatalogItem(false);
                    onLoadCatalogClientScriptGR.appliesToRequestedItem(true);
                    var onLoadScriptHide = "function onLoad() {if(g_form.getTableName() + '' == 'sc_req_item') {var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;}g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'false');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_environment', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = g_form.getValue('default_profile') + '';var cat_sys_id = g_form.getValue('cat_item') + '';var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile + '');ga.addParam('sysparm_catSysID', cat_sys_id + '');ga.getXML(parseResponse);} function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var nameTypeMap = {};var flds = g_form.nameMap;for (var i in flds) {nameTypeMap[flds[i].prettyName + ''] = fldType[flds[i].realName + ''] + '';}var fielVal = {};var parsed = JSON.parse(answer);for (var i in parsed) {if (i.indexOf('cluster_name') == -1) {if (nameTypeMap[i + ''] + '' == 'masked') {fielVal[i] = parsed[i].value;g_form.setValue(i + '', '');}g_form.setReadOnly(i + '', true); g_form.setDisplay(i + '', !parsed[i].readOnly);} else {g_form.setDisplay(i + '', !parsed[i].readOnly);g_form.setReadOnly(i + '', true);}}sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);}}";
                    onLoadCatalogClientScriptGR.addScript(onLoadScriptHide);
                    var onLoadCatalogClientScriptId = onLoadCatalogClientScriptGR.create();
                    if (gr.get(onLoadCatalogClientScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }
                }
                this.fetchValuesOnChangeClientScript();

            }
            if ((parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &lt; parseFloat("3.2")) &amp;&amp; (gs.getProperty('x_nuta2_nutanix_ca.1_4_4') == '0')) {

                var cat_items1 = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
                cat_items1.query();
                while (cat_items1.next()) {


                    var grItemProf1 = new GlideRecord("item_option_new");
                    grItemProf1.addQuery("cat_item", cat_items1.item_name);
                    var qc = grItemProf1.addQuery("name", "default_profile");
                    qc.addOrCondition('name', 'default_app_name');
                    grItemProf1.query();
                    var profileSysID, appSysID;
                    while (grItemProf1.next()) {
                        if (grItemProf1.name + '' == "default_profile")
                            profileSysID = grItemProf1.sys_id + "";
                        if (grItemProf1.name + '' == "default_app_name")
                            appSysID = grItemProf1.sys_id + "";
                    }


                    var catalogScriptGR = new GlideRecord('catalog_script_client');
                    catalogScriptGR.addQuery('cat_item', cat_items1.item_name + '');
                    catalogScriptGR.query();
                    while (catalogScriptGR.next()) {
                        if (catalogScriptGR.name + '' == "Fetch dependencies on change of profile") {
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                        if (catalogScriptGR.name + '' == "Get Project and Profile List onLoad") {
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                        if (catalogScriptGR.name + '' == "Check AppName OnChange") {
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                        if (catalogScriptGR.name + '' == "Fetch form data on change of profile") {
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                        if (catalogScriptGR.name + '' == "Check AppName OnSubmit") {
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                        if (catalogScriptGR.name + '' == "Hide Order details on request") {
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                    }


                    var catalogScriptGR = new sn_sc.CatalogClientScript();
                    catalogScriptGR.setAttributes({
                        "name": "Fetch form data on change of profile",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": cat_items1.item_name + '',
                        "cat_variable": "IO:" + profileSysID,
                        "active": true,
                        "order": 100,
                        "description": 'This script is auto created thorugh runtime module for fetching and setting form data and visibility.',
                        "applies_catalog": true,
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,
                    });
                    catalogScriptGR.appliesToCatalogItem(true);
                    var script = "function onChange(control, oldValue, newValue, isLoading) {if (newValue == '') {return;} var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialogbox = new GlideModal('loader', true);loadingDialogbox.setTitle('Fetching Order Form Data...'); loadingDialogbox.renderWithContent(''+loadingHTML);var fldType = {};var elemen = g_form.elements;for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;} g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'false');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = newValue;var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile);ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse, null, loadingDialogbox);function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer');   var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; }  var nameTypeMap = {}; var flds = g_form.nameMap; for(var i in flds){ nameTypeMap[flds[i].prettyName+''] = fldType[flds[i].realName+'']+''; } 		  var fielVal = {};  var parsed = JSON.parse(answer);for (var i in parsed) {if(i.indexOf('cluster_name') == -1){ if(nameTypeMap[i+'']+'' == 'masked'){ fielVal[i] = parsed[i].value; g_form.setValue(i + '', ''); } else{ g_form.setValue(i + '', parsed[i].value + ''); }			 g_form.setReadOnly(i + '', parsed[i].readOnly + ''); g_form.setDisplay(i + '', !parsed[i].readOnly);	 }else{ g_form.setDisplay(i + '', !parsed[i].readOnly);	 g_form.setReadOnly(i + '', true);	 			}		}   sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);		  new GlideModal().get('loader').destroy();var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\";var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching Credentials List...'); loadingDialog.renderWithContent(''+loadingHTML); var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchCredentialsList');ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) {var answer = response.responseXML.documentElement.getAttribute('answer'); var credArr = {}; var parsed = JSON.parse(answer);for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + '').toLowerCase().replace(/ /g, '_');g_form.setValue(name + '_credential_name', credential.name + ''); g_form.setReadOnly(name + '_credential_name', true); g_form.setValue(name + '_secret_type', credential.type + '', (credential.type + '' == 'KEY') ? 'SSH Private Key' : 'Password'); g_form.setReadOnly(name + '_secret_type', true); g_form.setValue(name + '_username', credential.username.value); g_form.setReadOnly(name + '_username', credential.username.readOnly); g_form.setDisplay(name + '_username', !credential.username.readOnly); if ((credential.type == 'KEY')) {g_form.setValue(name + '_ssh_private_key', credential.ssh_private_key.value); g_form.setReadOnly(name + '_ssh_private_key', credential.ssh_private_key.readOnly); g_form.setValue(name + '_passphrase', credential.passphrase.value); g_form.setReadOnly(name + '_passphrase', credential.passphrase.readOnly); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_ssh_private_key', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + '_passphrase', !credential.passphrase.readOnly); } else { g_form.setValue(name + '_password', ''); credArr[name + '_password'] = credential.password.value; g_form.setReadOnly(name + '_password', credential.password.readOnly); g_form.setDisplay(name + '_password', !credential.password.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false');}g_form.setDisplay(name + '_credential_reference', 'false'); if (credential.credential_reference &amp;&amp; credential.credential_reference.name) {g_form.setDisplay(name + '_credential_reference', 'true');g_form.addOption(name + '_credential_reference', credential.credential_reference.uuid + '', credential.credential_reference.name + '');g_form.setReadOnly(name + '_credential_reference', credential.credential_reference.readOnly);g_form.setDisplay(name + '_credential_reference', !credential.credential_reference.readOnly);g_form.setDisplay(name + '_ssh_private_key', 'false');g_form.setDisplay(name + '_passphrase', 'false');g_form.setDisplay(name + '_password', 'false');g_form.setDisplay(name + '_secret_type', 'false');}} sessionStorage['credentials_' + g_form.getUniqueValue()] = JSON.stringify(credArr); new GlideModal().get('loader').destroy();}}}";
                    catalogScriptGR.addScript(script);
                    var ScriptId = catalogScriptGR.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(ScriptId)) {
                        gr.setValue("sys_scope", "global");

                        gr.update();
                    }


                    var onChangecatalogClientScript3 = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript3.setAttributes({
                        "name": "Fetch dependencies on change of profile",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": cat_items1.item_name + '',
                        "cat_variable": "IO:" + profileSysID,
                        "active": true,
                        "order": 700,
                        "description": "This script is auto created thorugh runtime module for getting variables on change of profile.",
                        "applies_catalog": true,
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,

                    });
                    onChangecatalogClientScript3.appliesToCatalogItem(true);
                    var onChangeScriptVars = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + '').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchLaunchVars'); ga.addParam('sysparm_catsysid', cat_sys_id); ga.addParam('sysparm_profile', profile); ga.getXML(varResponse);}function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); console.log(answer); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue('IO:' + i); var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value = curr_value; parsed_field.sys_id = i + ''; sess_json['IO:' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue('IO:' + k); var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value = curr_value; parsed_field.sys_id = k + ''; sess_json['IO:' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage['varValues'] = JSON.stringify(sess_json);}function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); gajax.addParam('sysparm_name', 'variableArrayParser'); gajax.addParam('sysparm_type', 'catalog'); gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + ''); gajax.addParam('sysparm_varJson', act_var_JSON); gajax.getXML(getVarResponse);}function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) {var row = parsedResponse[i]; var sys_id = 'IO:' + row.sys_id; var type = row.type + ''; if (row.state == 'SUCCESS') { if (type == 'LOCAL') g_form.setValue(sys_id, row.value); if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; (row.value).length; k++) { g_form.addOption(sys_id + '', row.value[k], row.value[k]); } } } if (row.state == 'ERROR') { g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]); } new GlideModal().get('variables_loader').destroy(); }}";
                    onChangecatalogClientScript3.addScript(onChangeScriptVars);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript3.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(OnChangeCatalogScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }


                    var project_load = new sn_sc.CatalogClientScript();
                    project_load.setAttributes({
                        "name": "Get Project and Profile List onLoad",
                        "type": "onLoad",
                        "applies_to": "item",
                        "cat_item": cat_items1.item_name + '',
                        "active": "true",
                        "order": "100",
                        "description": "This script is auto created thorugh runtime module for getting projects and profile list.",
                        "applies_catalog": "true",
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    project_load.appliesToCatalogItem(true);
                    var onLoadScript = "function onLoad() { var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching Project And Profile'); loadingDialog.renderWithContent(''+loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchProjectAndProfileList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null , loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer);var projectList = parsed.projectList; g_form.clearOptions('default_project');for (var i = 0; i &lt; projectList.length; i++) { var project = projectList[i]; g_form.addOption('default_project', project.uuid, project.name);}var profileList = parsed.profileList.split(','); g_form.clearOptions('default_profile'); for (i = 0; i &lt; profileList.length; i++) { g_form.addOption('default_profile', profileList[i] + '', profileList[i] + ''); } g_form.setValue('default_profile', profileList[0]);if (projectList.length == 1) { g_form.setReadOnly('default_project', true);} if (profileList.length == 1) { g_form.setReadOnly('default_profile', true);} new GlideModal().get('loader').destroy();var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\";var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching variables...'); loadingDialog.renderWithContent(''+loadingHTML);var cat_sys_id = g_form.getUniqueValue();var profile = g_form.getValue('default_profile').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse, null, loadingDialog);}function varResponse(response, loadingDialog) {var answer = response.responseXML.documentElement.getAttribute('answer');var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service; var sess_json = {};var var_array = [];for (var i in prof_json) {var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = i + '';sess_json['IO:'+i] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);for (var j in serv_json) {var_array = [];for (var k in serv_json[j]) {var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:'+k] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(sess_json);}}function getAdvancedVars(variable_json) {var act_var_JSON = JSON.stringify(variable_json);var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name', 'variableArrayParser');gajax.addParam('sysparm_type', 'catalog');gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + '');gajax.addParam('sysparm_varJson', act_var_JSON);gajax.getXML(getVarResponse);}function getVarResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null')return;var parsedResponse = JSON.parse(answer);for (var i in parsedResponse) {var row = parsedResponse[i];var sys_id = 'IO:' + row.sys_id;var type = row.type + '';if (row.state == 'SUCCESS') {if(type == 'LOCAL')g_form.setValue(sys_id, row.value);if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') {g_form.clearOptions(sys_id);for (var k = 0; k &lt; (row.value).length; k++) {g_form.addOption(sys_id + '', row.value[k], row.value[k]);}}}if (row.state == 'ERROR') {g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}}}";
                    project_load.addScript(onLoadScript);
                    var project_load_ScriptId = project_load.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(project_load_ScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }


                    var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript.setAttributes({
                        "name": "Check AppName OnChange",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": cat_items1.item_name + '',
                        "cat_variable": "IO:" + appSysID,
                        "active": true,
                        "order": 100,
                        "description": "This script is auto created thorugh runtime module for checking application name.",
                        "applies_catalog": true,
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,

                    });
                    onChangecatalogClientScript.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') {return;}var name = newValue; if ((newValue.length != ((newValue.trim()).length))  || (!(/^[_-\\w ]+$/.test(name) &amp;&amp; (name.trim().lastIndexOf('-') != (name.trim().length - 1))))) {g_form.clearValue('default_app_name'); g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and in between spaces are allowed and cannot end with hyphens(-). Leading and trailing spaces are not allowed.');}}";
                    onChangecatalogClientScript.addScript(onChangeScript);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(OnChangeCatalogScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }


                    var onSubmitcatalogScriptGR = new sn_sc.CatalogClientScript();
                    onSubmitcatalogScriptGR.setAttributes({
                        "name": "Check AppName OnSubmit",
                        "type": "onSubmit",
                        "applies_to": "item",
                        "cat_item": cat_items1.item_name + '',
                        "active": true,
                        "order": 100,
                        "description": "This script is auto created thorugh runtime module for checking application name on submit.",
                        "applies_catalog": true,
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,
                    });
                    onSubmitcatalogScriptGR.appliesToCatalogItem(true);
                    var onSubmitscript = "function onSubmit() { var result = true; var name = g_form.getValue('default_app_name'); if (!(/^[_-\\w ]+$/.test(name) &amp;&amp; (name.trim().lastIndexOf('-') != (name.trim().length - 1)))) { g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and spaces are allowed and cannot end with hyphens(-).'); result = false; } var errorFieldName = ''; var errorIntFieldName = ''; var parse = JSON.parse(sessionStorage.getItem('FieldRegex_' + g_form.getUniqueValue())); var keys = Object.keys(parse); for (var i = 0; i &lt; keys.length; i++) { var row = parse[keys[i] + '']; var patt = row.regex + ''; var reg = new RegExp(patt); var value = g_form.getValue(keys[i] + ''); var dataType = (row.data_type + '' == 'EXEC_SECRET' || row.data_type + '' == 'HTTP_SECRET' || row.data_type + '' == 'EXEC_LOCAL' || row.data_type + '' == 'HTTP_LOCAL') ? 'Dynamic' : row.data_type + ''; if (row.type + '' == 21) { var splitted = value.split(','); var actualVal = row.listRegex; var count = 0; for (var j = 0, n = splitted.length; j &lt; n; j++) { var listVal = actualVal[splitted[j] + ''];  if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') &amp;&amp; j == n - 1 &amp;&amp; listVal.includes('\n')){ while(listVal.indexOf('\n') != -1){ listVal = listVal.replace('\n','');} if (reg.test(listVal)) { count++;} } if (count == n) row.status = true; } else { if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') &amp;&amp; value.includes('\n')){while(value.indexOf('\n') != -1){value = value.replace('\n','');}} if (reg.test(value)) { row.status = true; } } if (value &amp;&amp; row.status == false) { result = false; g_form.hideFieldMsg(keys[i] + ''); if(dataType == ''){ errorIntFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'This is a Integer field.Please provide a integer value.'); } else{ errorFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'Value does not match specified regex: ' + row.regex); } }} if (result) {   var parse = JSON.parse(sessionStorage.getItem('fieldValues_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 			 parse = JSON.parse(sessionStorage.getItem('credentials_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 		 sessionStorage.removeItem('fieldValues_' + g_form.getUniqueValue()); sessionStorage.removeItem('credentials_' + g_form.getUniqueValue());      sessionStorage.removeItem('clusterName_' + g_form.getUniqueValue()); sessionStorage.removeItem('FieldRegex_' + g_form.getUniqueValue());var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\" ;var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Validating field value with regex..'); loadingDialog.renderWithContent(''+loadingHTML);} else { errorIntFieldName = (errorIntFieldName.endsWith(',')) ? errorIntFieldName.substr(0, errorIntFieldName.length - 1) : errorIntFieldName; errorFieldName = (errorFieldName.endsWith(',')) ? errorFieldName.substr(0, errorFieldName.length - 1) : errorFieldName; if(errorIntFieldName != '' ) g_form.addErrorMessage('Variables are Integer field.Please provide suitable values: ' + errorIntFieldName); if(errorFieldName != '' ) g_form.addErrorMessage('Variables value does not match specified Regex.Please provide suitable values: ' + errorFieldName); new GlideModal().get('loader').destroy(); return false; }var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+'';var profileName = (g_form.getValue('default_profile')+'').trim(); if(profileName == '') return; var projectUUID = (g_form.getValue('default_project')+'').trim(); if(projectUUID == '') return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName);ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; }if(flds[i].label == \"Project\"  &amp;&amp; flds[i].prettyName == \"default_project\")continue;if(flds[i].label == \"Profile\"  &amp;&amp; flds[i].prettyName == \"default_profile\")continue;if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName);  /*	 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true'; 	*/			} }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   }}";
                    onSubmitcatalogScriptGR.addScript(onSubmitscript);
                    var onSubmitcatalogScriptId = onSubmitcatalogScriptGR.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(onSubmitcatalogScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }
                    var onLoadCatalogClientScriptGR = new sn_sc.CatalogClientScript();
                    onLoadCatalogClientScriptGR.setAttributes({
                        "name": "Hide Order details on request",
                        "type": "onLoad",
                        "applies_to": "item",
                        "cat_item": cat_items1.item_name + '',
                        "active": true,
                        "order": 10,
                        "description": "Hide values on request details.",
                        "applies_catalog": "false",
                        "ui_type": "0",
                        "applies_req_item": "true",
                        "applies_sc_task": "false"
                    });
                    onLoadCatalogClientScriptGR.appliesToCatalogItem(false);
                    onLoadCatalogClientScriptGR.appliesToRequestedItem(true);
                    var onLoadScriptHide = "function onLoad() {if(g_form.getTableName() + '' == 'sc_req_item') {var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;}g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'false');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_environment', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = g_form.getValue('default_profile') + '';var cat_sys_id = g_form.getValue('cat_item') + '';var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile + '');ga.addParam('sysparm_catSysID', cat_sys_id + '');ga.getXML(parseResponse);} function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var nameTypeMap = {};var flds = g_form.nameMap;for (var i in flds) {nameTypeMap[flds[i].prettyName + ''] = fldType[flds[i].realName + ''] + '';}var fielVal = {};var parsed = JSON.parse(answer);for (var i in parsed) {if (i.indexOf('cluster_name') == -1) {if (nameTypeMap[i + ''] + '' == 'masked') {fielVal[i] = parsed[i].value;g_form.setValue(i + '', '');}g_form.setReadOnly(i + '', true); g_form.setDisplay(i + '', !parsed[i].readOnly);} else {g_form.setDisplay(i + '', !parsed[i].readOnly);g_form.setReadOnly(i + '', true);}}sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);}}";
                    onLoadCatalogClientScriptGR.addScript(onLoadScriptHide);
                    var onLoadCatalogClientScriptId = onLoadCatalogClientScriptGR.create();
                    if (gr.get(onLoadCatalogClientScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }

                }
                this.fetchValuesOnChangeClientScript();
            }
            gs.setProperty('x_nuta2_nutanix_ca.1_4_4', '1');
        } catch (e) {
            this.logger.error("Exception caught inside migraation_script.addEnvironmentVariableToAllCatalogs : " + e);
        }
    },

    isCatalogItemsAvailable: function() {
        var cat_items = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        cat_items.query();
        if (cat_items.hasNext() &amp;&amp; (gs.getProperty('x_nuta2_nutanix_ca.1_4_4') == '0')) {
            this.logger.info("Migration to V 1_4_4 require");
            return true;
        }
        this.logger.info("Migration to V 1_4_4 not require");
        return false;
    },
    fetchValuesOnChangeClientScript: function() {

        var cat_items1 = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        cat_items1.query();
        while (cat_items1.next()) {

            var catalogScriptGR = new GlideRecord('catalog_script_client');
            catalogScriptGR.addQuery('cat_item', cat_items1.item_name + '');
            catalogScriptGR.query();
            while (catalogScriptGR.next()) {
                if (catalogScriptGR.name + '' == "Fetch values OnChange") {

                    var field = (catalogScriptGR.cat_variable + '').replace("IO:", '');

                    var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript.setAttributes({
                        "name": "Fetch values OnChange",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": cat_items1.item_name + '',
                        "cat_variable": "IO:" + field,
                        "active": true,
                        "order": 1000,
                        "description": "This script is auto created thorugh runtime module for fetching values.",
                        "applies_catalog": "true",
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,
                    });
                    onChangecatalogClientScript.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if(!sessionStorage['varValues'])return; var varValues = JSON.parse(sessionStorage['varValues']);oldValue = varValues[control.id + '']; if (isLoading || newValue == '' || oldValue + '' == newValue + '') {new GlideModal().get('loader').destroy(); return; }jslog(oldValue);jslog(newValue); function varResponse(response,loadingDialog){var answer=response.responseXML.documentElement.getAttribute('answer');var varJSON=JSON.parse(answer);var prof_json=varJSON.profile;var serv_json=varJSON.service;var var_array=[];for(var i in prof_json){var field=prof_json[i];var curr_value=g_form.getValue('IO:'+i);varValues['IO:' + i] = curr_value + '';var parsed_field=JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value=curr_value,parsed_field.sys_id=i+'',var_array.push(parsed_field);}getAdvancedVars(var_array);for(var j in serv_json){var_array=[];for(var k in serv_json[j]){var field=serv_json[j][k];var curr_value=g_form.getValue('IO:'+k);varValues['IO:' + k] = curr_value + '';var parsed_field=JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value=curr_value,parsed_field.sys_id=k+'',var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(varValues);}function getAdvancedVars(variable_json){var act_var_JSON=JSON.stringify(variable_json);var gajax=new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name','variableArrayParser'),gajax.addParam('sysparm_type','catalog'),gajax.addParam('sysparm_parentUuid',g_form.getUniqueValue()+''),gajax.addParam('sysparm_varJson',act_var_JSON),gajax.getXML(getVarResponse);}function getVarResponse(response){ new GlideModal().get('loader').destroy(); var answer=response.responseXML.documentElement.getAttribute('answer');if(answer+''==''||answer+''=='undefined'||answer+''=='null')return;var parsedResponse=JSON.parse(answer);for(var i in parsedResponse){var row=parsedResponse[i];var sys_id='IO:'+row.sys_id;var type=row.type+'';if(row.state=='SUCCESS'&amp;&amp; (type=='EXEC_LOCAL'||type=='HTTP_LOCAL'||type=='EXEC_SECRET'||type=='HTTP_SECRET')){g_form.clearOptions(sys_id);for(var k=0;k&lt;row.value.length;k++)g_form.addOption(sys_id+'',row.value[k],row.value[k]); g_form.setValue(sys_id,row.value);} else {if(row.data_type + '' != 'BASE'){g_form.clearOptions(sys_id); for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + '', row.options[k], row.options[k]);} g_form.setValue(sys_id, row.value);}row.state=='ERROR'&amp;&amp;g_form.addErrorMessage('Error in variable: '+row.name+': '+row.error[0]);}}var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching variables...'); loadingDialog.renderWithContent(''+loadingHTML);var cat_sys_id=g_form.getUniqueValue();var profile=g_form.getValue('default_profile').trim();var ga=new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name','fetchLaunchVars'),ga.addParam('sysparm_catsysid',cat_sys_id),ga.addParam('sysparm_profile',profile),ga.getXML(varResponse,null,loadingDialog);}";
                    onChangecatalogClientScript.addScript(onChangeScript);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(OnChangeCatalogScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }

                    var catalogClientScript = new sn_sc.CatalogClientScript();
                    catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                }

            }
        }

    },
    isMigrationNeeded: function() {
        var cat_items = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        cat_items.addEncodedQuery('multiple_application_profileISEMPTY^multiple_projectsISEMPTY^state=active^ORstate=draft');
        cat_items.query();
        if (cat_items.hasNext()) {
            this.logger.info("Migration to V 1_4 require");
            return true;
        }
        this.logger.info("Migration to V 1_4 not require");
        return false;
    },

    updateCatalog: function() {
        this.logger.info("Migration to V1_4 Started");

        gs.setProperty('x_nuta2_nutanix_ca.migration.script.ran', 'true');

        this.catalogItem_1_4();
        var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        gr.query();
        while (gr.next()) {
            try {
                this.clientScript_1_4(gr.item_name);
                this.logger.info(gr.item_name.name + " Catalog client script succesfully migrated.");
            } catch (e) {
                this.logger.error(gr.item_name.name + " Catalog Item was not migrated due to issue in catalog client script.");
            }
        }
    },


    clientScript_1_4: function(catSysId) {
        var catalogScriptGR = new GlideRecord(this.appUtil.configuration.table.catalogClientScript + '');
        catalogScriptGR.addQuery('cat_item', catSysId);
        catalogScriptGR.query();
        this.logger.info("ctalog client Script " + catalogScriptGR.getRowCount() + "to be updatated");
        while (catalogScriptGR.next()) {
            this.logger.info(catalogScriptGR.name + "catalog client script updatated");
            if (catalogScriptGR.name + '' == "Fetch form data on change of profile") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);

            }
            if (catalogScriptGR.name + '' == "Get Project and Profile List onLoad") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
            }
            if (catalogScriptGR.name + '' == "Hide Order details on request") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
            }
            if (catalogScriptGR.name + '' == "Get Subnet Info") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
            }
            if (catalogScriptGR.name + '' == "Get Subnet Info on project change") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
            }
            if (catalogScriptGR.name + '' == "Check Catalog Item Validity") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
            }

        }
        var profileSysID = new GlideRecord('item_option_new');
        profileSysID.addEncodedQuery('cat_item=' + catSysId + '^nameLIKEdefault_profile');
        profileSysID.query();
        profileSysID.next();
        var catalogScriptGR = new sn_sc.CatalogClientScript();
        catalogScriptGR.setAttributes({
            "name": "Fetch form data on change of profile",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": "" + catSysId,
            "cat_variable": "IO:" + profileSysID.sys_id,
            "active": true,
            "order": 100,
            "description": 'This script is auto created thorugh runtime module for fetching and setting form data and visibility.',
            "applies_catalog": true,
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        catalogScriptGR.appliesToCatalogItem(true);
        var Script = "function onChange(control, oldValue, newValue, isLoading) {if (newValue == '') {return;} var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialogbox = new GlideModal('loader', true);loadingDialogbox.setTitle('Fetching Order Form Data...'); loadingDialogbox.renderWithContent(''+loadingHTML);var fldType = {};var elemen = g_form.elements;for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;} g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'false');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = newValue;var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile);ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse, null, loadingDialogbox);function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer');   var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; }  var nameTypeMap = {}; var flds = g_form.nameMap; for(var i in flds){ nameTypeMap[flds[i].prettyName+''] = fldType[flds[i].realName+'']+''; } 		  var fielVal = {};  var parsed = JSON.parse(answer);for (var i in parsed) {if(i.indexOf('cluster_name') == -1){ if(nameTypeMap[i+'']+'' == 'masked'){ fielVal[i] = parsed[i].value; g_form.setValue(i + '', ''); } else{ g_form.setValue(i + '', parsed[i].value + ''); }			 g_form.setReadOnly(i + '', parsed[i].readOnly + ''); g_form.setDisplay(i + '', !parsed[i].readOnly);	 }else{ g_form.setDisplay(i + '', !parsed[i].readOnly);	 g_form.setReadOnly(i + '', true);	 			}		}   sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);		  new GlideModal().get('loader').destroy();}} var cat_sys_id = g_form.getUniqueValue();	var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchProjectAndProfileList');ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer); var projectList = parsed.projectList; if (projectList.length == 1) { g_form.setReadOnly('default_project', true);}}";
        catalogScriptGR.addScript(Script);
        var ScriptId = catalogScriptGR.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Fetch form data on change of profile\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(ScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }


        var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
        onLoadCatalogClientScript.setAttributes({
            "name": "Get Project and Profile List onLoad",
            "type": "onLoad",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "active": "true",
            "order": "100",
            "description": "This script is auto created thorugh runtime module for getting projects and profile list.",
            "applies_catalog": "true",
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        onLoadCatalogClientScript.appliesToCatalogItem(true);
        var onLoadScript = "function onLoad() { var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching Project And Profile'); loadingDialog.renderWithContent(''+loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchProjectAndProfileList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null , loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer);var projectList = parsed.projectList; g_form.clearOptions('default_project');for (var i = 0; i &lt; projectList.length; i++) { var project = projectList[i]; g_form.addOption('default_project', project.uuid, project.name);}var profileList = parsed.profileList.split(','); g_form.clearOptions('default_profile'); for (i = 0; i &lt; profileList.length; i++) { g_form.addOption('default_profile', profileList[i] + '', profileList[i] + ''); } g_form.setValue('default_profile', profileList[0]);if (projectList.length == 1) { g_form.setReadOnly('default_project', true);} if (profileList.length == 1) { g_form.setReadOnly('default_profile', true);} new GlideModal().get('loader').destroy();var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\";var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching variables...'); loadingDialog.renderWithContent(''+loadingHTML);var cat_sys_id = g_form.getUniqueValue();var profile = g_form.getValue('default_profile').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse, null, loadingDialog);}function varResponse(response, loadingDialog) {var answer = response.responseXML.documentElement.getAttribute('answer');var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service; var sess_json = {};var var_array = [];for (var i in prof_json) {var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = i + '';sess_json['IO:'+i] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);for (var j in serv_json) {var_array = [];for (var k in serv_json[j]) {var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:'+k] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(sess_json);}}function getAdvancedVars(variable_json) {var act_var_JSON = JSON.stringify(variable_json);var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name', 'variableArrayParser');gajax.addParam('sysparm_type', 'catalog');gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + '');gajax.addParam('sysparm_varJson', act_var_JSON);gajax.getXML(getVarResponse);}function getVarResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null')return;var parsedResponse = JSON.parse(answer);for (var i in parsedResponse) {var row = parsedResponse[i];var sys_id = 'IO:' + row.sys_id;var type = row.type + '';if (row.state == 'SUCCESS') {if(type == 'LOCAL')g_form.setValue(sys_id, row.value);if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') {g_form.clearOptions(sys_id);for (var k = 0; k &lt; (row.value).length; k++) {g_form.addOption(sys_id + '', row.value[k], row.value[k]);}}}if (row.state == 'ERROR') {g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}}}";
        onLoadCatalogClientScript.addScript(onLoadScript);
        var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Get Project and Profile List onLoad\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(onLoadCatalogClientScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }

        var onLoadCatalogClientScriptGR = new sn_sc.CatalogClientScript();
        onLoadCatalogClientScriptGR.setAttributes({
            "name": "Hide Order details on request",
            "type": "onLoad",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "active": true,
            "order": 10,
            "description": "Hide values on request details.",
            "applies_catalog": "false",
            "ui_type": "0",
            "applies_req_item": "true",
            "applies_sc_task": "false",
            "sys_scope": "global"
        });
        onLoadCatalogClientScriptGR.appliesToCatalogItem(false);
        onLoadCatalogClientScriptGR.appliesToRequestedItem(true);
        var onLoadScriptHide = "function onLoad() {if(g_form.getTableName() + '' == 'sc_req_item') {var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;}g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'false');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_environment', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = g_form.getValue('default_profile') + '';var cat_sys_id = g_form.getValue('cat_item') + '';var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile + '');ga.addParam('sysparm_catSysID', cat_sys_id + '');ga.getXML(parseResponse);} function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var nameTypeMap = {};var flds = g_form.nameMap;for (var i in flds) {nameTypeMap[flds[i].prettyName + ''] = fldType[flds[i].realName + ''] + '';}var fielVal = {};var parsed = JSON.parse(answer);for (var i in parsed) {if (i.indexOf('cluster_name') == -1) {if (nameTypeMap[i + ''] + '' == 'masked') {fielVal[i] = parsed[i].value;g_form.setValue(i + '', '');}g_form.setReadOnly(i + '', true); g_form.setDisplay(i + '', !parsed[i].readOnly);} else {g_form.setDisplay(i + '', !parsed[i].readOnly);g_form.setReadOnly(i + '', true);}}sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);}}";
        onLoadCatalogClientScriptGR.addScript(onLoadScriptHide);
        var onLoadCatalogClientScriptId = onLoadCatalogClientScriptGR.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Hide values on request details.\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(onLoadCatalogClientScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }

        /*Insert new Scripts Get Subnet Info on project change*/
        var oldGR = new GlideRecord('item_option_new');
        oldGR.addEncodedQuery('cat_item=' + catSysId + '^nameLIKEdefault_project');
        oldGR.query();
        oldGR.next();
        var onChangecatalogClientScript1 = new sn_sc.CatalogClientScript();
        onChangecatalogClientScript1.setAttributes({
            "name": "Get Subnet Info on project change",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "cat_variable": "IO:" + oldGR.sys_id,
            "active": true,
            "order": 600,
            "description": "This script is auto created thorugh runtime module for checking application name on submit.",
            "applies_catalog": true,
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        onChangecatalogClientScript1.appliesToCatalogItem(true);
        var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (newValue == '') { return; }var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getSubnet');ga.addParam('sysparm_catSysID', catalogSysId);ga.addParam('sysparm_ProjectUuid', newValue);ga.getXML(processAnswer);function processAnswer(response) {var ans = response.responseXML.documentElement.getAttribute('answer');sessionStorage['clusterName_' + g_form.getUniqueValue()] = ans;ans = JSON.parse(ans);var catalog_clusterJSON = ans.catalog_data;clusterJSON = ans.cluster_info;var nicList = [];for(var m in clusterJSON){nicList.push(clusterJSON[m].subnet);}for (var k in catalog_clusterJSON) {for (var i in catalog_clusterJSON[k].nics) {if (catalog_clusterJSON[k].value + '') {for (var l in clusterJSON) {var subnetList = clusterJSON[l].subnet;if (l != catalog_clusterJSON[k].value + '')for (var s in subnetList){ /*g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', s);*/}}}{var opt = g_form.getElement(catalog_clusterJSON[k].nics[i] + '');for (var x=1, n = opt.options.length; x &lt; n; x++) {var present = false;var val = opt.options[x].value+'';for(var s=0; s &lt; nicList.length ;s++){if (nicList[s][val]) {present =true;break;}} if(!present){g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', opt.options[x].value+''); x--;n--; } }} }}}}";
        onChangecatalogClientScript1.addScript(onChangeScript);
        var OnChangeCatalogScriptId = onChangecatalogClientScript1.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Get Subnet Info on project change\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(OnChangeCatalogScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }

        var projectSysID = new GlideRecord('item_option_new');
        projectSysID.addEncodedQuery('cat_item=' + catSysId + '^nameLIKEdefault_project');
        projectSysID.query();
        projectSysID.next();
        var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
        onLoadCatalogClientScript.setAttributes({
            "name": "Check Catalog Item Validity project",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "cat_variable": "IO:" + projectSysID,
            "active": true,
            "order": 1,
            "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
            "applies_catalog": true,
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        onLoadCatalogClientScript.appliesToCatalogItem(true);
        var onLoadScript = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') { return;} var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+''; var profileName = (g_form.getValue('default_profile')+'').trim();if(profileName == '') return;var projectUUID = (newValue+'').trim();if(projectUUID == '')return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; }  if(flds[i].label == \"Project\"  &amp;&amp; flds[i].prettyName == \"default_project\")continue;if(flds[i].label == \"Profile\"  &amp;&amp; flds[i].prettyName == \"default_profile\")continue;if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName);/* self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true'; */			}	 }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   } }";
        onLoadCatalogClientScript.addScript(onLoadScript);
        var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Check Catalog Item Validity project\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(onLoadCatalogClientScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }


        var profileSysID = new GlideRecord('item_option_new');
        profileSysID.addEncodedQuery('cat_item=' + catSysId + '^nameLIKEdefault_profile');
        profileSysID.query();
        profileSysID.next();
        var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
        onLoadCatalogClientScript.setAttributes({
            "name": "Check Catalog Item Validity profile",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "cat_variable": "IO:" + profileSysID.sys_id,
            "active": true,
            "order": 1,
            "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
            "applies_catalog": true,
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        onLoadCatalogClientScript.appliesToCatalogItem(true);
        var onLoadScript = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') { return;} var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+'';var profileName = (newValue+'').trim(); if(profileName == '') return; var projectUUID = (g_form.getValue('default_project')+'').trim(); if(projectUUID == '') return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName);ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; } if(flds[i].label == \"Project\"  &amp;&amp; flds[i].prettyName == \"default_project\")continue;if(flds[i].label == \"Profile\"  &amp;&amp; flds[i].prettyName == \"default_profile\")continue;if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName);/*	 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true'; 	*/			 }}  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   } }";
        onLoadCatalogClientScript.addScript(onLoadScript);
        var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Check Catalog Item Validity profile\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(onLoadCatalogClientScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }


    },

    catalogItem_1_4: function() {
        var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        gr.addEncodedQuery('multiple_application_profileISEMPTY^multiple_projectsISEMPTY^state=active^ORstate=draft');
        gr.query();
        while (gr.next()) {
            try {
                gr.multiple_projects = gr.project;
                gr.multiple_application_profile = gr.application_profile;
                gr.update();
                this.logger.info("V1.4 migration, " + gr.item_name.name + " Catalog Item was migrated.");
            } catch (e) {
                this.logger.error("V1.4 migration, " + gr.item_name.name + " Catalog Item was not migrated due to issue in some field type and the value it contained.");
            }
        }
    },

    copyFieldJson: function() {

        this.logger.info("V1.4 migration: Migrating old variables");
        var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        gr.addQuery("state", "active");
        gr.query();
        while (gr.next()) {
            this._createOnChangeSessionScript(gr.item_name.sys_id);
            var grVars = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
            grVars.addEncodedQuery('catalog_item=' + gr.item_name.sys_id + '^isprofilevariable=true^ORisservicevariable=true');
            grVars.query();
            while (grVars.next()) {
                var grVarsBp = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
                grVarsBp.addQuery('catalog_item', gr.blueprint + "");
                grVarsBp.addQuery('uuid', grVars.uuid + "");
                grVarsBp.query();
                if (grVarsBp.next()) {
                    this._createOnChangeScript(grVars.variable.sys_id + "", gr.item_name.sys_id + "");
                    grVars.field_json = grVarsBp.field_json + '';
                    grVars.update();
                }
            }
        }

    },

    _createOnChangeSessionScript: function(catSysId) {

        var profileSysID = new GlideRecord('item_option_new');
        profileSysID.addEncodedQuery('cat_item=' + catSysId + '^nameLIKEdefault_profile');
        profileSysID.query();
        profileSysID.next();

        var onChangecatalogClientScript3 = new sn_sc.CatalogClientScript();
        onChangecatalogClientScript3.setAttributes({
            "name": "Fetch dependencies on change of profile",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "cat_variable": "IO:" + profileSysID.sys_id,
            "active": true,
            "order": 700,
            "description": "This script is auto created thorugh runtime module for getting variables on change of profile.",
            "applies_catalog": true,
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,

        });
        onChangecatalogClientScript3.appliesToCatalogItem(true);
        var onChangeScriptVars = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + '').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchLaunchVars'); ga.addParam('sysparm_catsysid', cat_sys_id); ga.addParam('sysparm_profile', profile); ga.getXML(varResponse);}function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); console.log(answer); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue('IO:' + i); var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value = curr_value; parsed_field.sys_id = i + ''; sess_json['IO:' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue('IO:' + k); var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value = curr_value; parsed_field.sys_id = k + ''; sess_json['IO:' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage['varValues'] = JSON.stringify(sess_json);}function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); gajax.addParam('sysparm_name', 'variableArrayParser'); gajax.addParam('sysparm_type', 'catalog'); gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + ''); gajax.addParam('sysparm_varJson', act_var_JSON); gajax.getXML(getVarResponse);}function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) {var row = parsedResponse[i]; var sys_id = 'IO:' + row.sys_id; var type = row.type + ''; if (row.state == 'SUCCESS') { if (type == 'LOCAL') g_form.setValue(sys_id, row.value); if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; (row.value).length; k++) { g_form.addOption(sys_id + '', row.value[k], row.value[k]); } } } if (row.state == 'ERROR') { g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]); } new GlideModal().get('variables_loader').destroy(); }}";
        onChangecatalogClientScript3.addScript(onChangeScriptVars);
        var OnChangeCatalogScriptId = onChangecatalogClientScript3.create();
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(OnChangeCatalogScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }

        var onChangecatalogClientScript2 = new sn_sc.CatalogClientScript();
        onChangecatalogClientScript2.setAttributes({
            "name": "Set Session Vars",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "cat_variable": "IO:" + profileSysID.sys_id,
            "active": true,
            "order": 700,
            "description": "This script is auto created thorugh runtime module for setting session json.",
            "applies_catalog": true,
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        onChangecatalogClientScript2.appliesToCatalogItem(true);
        var onChangeScriptSess = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') {return;}var cat_sys_id = g_form.getUniqueValue();var profile = (newValue + '').trim();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse);function varResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');jslog(answer);var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service;var sess_json = {};for (var i in prof_json) {var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = i + '';sess_json['IO:' + i] = curr_value;}for (var j in serv_json) {for (var k in serv_json[j]) {var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:' + k] = curr_value;}}sessionStorage['varValues'] = JSON.stringify(sess_json);}}";
        onChangecatalogClientScript2.addScript(onChangeScriptSess);
        var OnChangeCatalogScriptId = onChangecatalogClientScript2.create();
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(OnChangeCatalogScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }

        this.logger.debug("Created onChange script to set Session variables ");
    },

    _createOnChangeScript: function(varSysId, catSysId) {
        try {
            this.logger.info("V1.4 migration: Creating onChange Scripts");
            var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
            onChangecatalogClientScript.setAttributes({
                "name": "Fetch values OnChange",
                "type": "onChange",
                "applies_to": "item",
                "cat_item": '' + catSysId,
                "cat_variable": "IO:" + varSysId,
                "active": true,
                "order": 100,
                "description": "This script is auto created thorugh runtime module for fetching values.",
                "applies_catalog": "true",
                "ui_type": "0",
                "applies_req_item": false,
                "applies_sc_task": false,
                "sys_scope": "global"
            });
            onChangecatalogClientScript.appliesToCatalogItem(true);
            var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if(!sessionStorage['varValues'])return; var varValues = JSON.parse(sessionStorage['varValues']);oldValue = varValues[control.id + '']; if (isLoading || newValue == '' || oldValue + '' == newValue + '') {new GlideModal().get('loader').destroy(); return; }jslog(oldValue);jslog(newValue); function varResponse(response,loadingDialog){var answer=response.responseXML.documentElement.getAttribute('answer');var varJSON=JSON.parse(answer);var prof_json=varJSON.profile;var serv_json=varJSON.service;var var_array=[];for(var i in prof_json){var field=prof_json[i];var curr_value=g_form.getValue('IO:'+i);varValues['IO:' + i] = curr_value + '';var parsed_field=JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value=curr_value,parsed_field.sys_id=i+'',var_array.push(parsed_field);}getAdvancedVars(var_array);for(var j in serv_json){var_array=[];for(var k in serv_json[j]){var field=serv_json[j][k];var curr_value=g_form.getValue('IO:'+k);varValues['IO:' + k] = curr_value + '';var parsed_field=JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value=curr_value,parsed_field.sys_id=k+'',var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(varValues);}function getAdvancedVars(variable_json){var act_var_JSON=JSON.stringify(variable_json);var gajax=new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name','variableArrayParser'),gajax.addParam('sysparm_type','catalog'),gajax.addParam('sysparm_parentUuid',g_form.getUniqueValue()+''),gajax.addParam('sysparm_varJson',act_var_JSON),gajax.getXML(getVarResponse);}function getVarResponse(response){ new GlideModal().get('loader').destroy(); var answer=response.responseXML.documentElement.getAttribute('answer');if(answer+''==''||answer+''=='undefined'||answer+''=='null')return;var parsedResponse=JSON.parse(answer);for(var i in parsedResponse){var row=parsedResponse[i];var sys_id='IO:'+row.sys_id;var type=row.type+'';if(row.state=='SUCCESS'&amp;&amp; (type=='EXEC_LOCAL'||type=='HTTP_LOCAL'||type=='EXEC_SECRET'||type=='HTTP_SECRET')){g_form.clearOptions(sys_id);for(var k=0;k&lt;row.value.length;k++)g_form.addOption(sys_id+'',row.value[k],row.value[k]); g_form.setValue(sys_id,row.value);} else {if(row.data_type + '' != 'BASE'){g_form.clearOptions(sys_id); for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + '', row.options[k], row.options[k]);} g_form.setValue(sys_id, row.value);}row.state=='ERROR'&amp;&amp;g_form.addErrorMessage('Error in variable: '+row.name+': '+row.error[0]);}}var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching variables...'); loadingDialog.renderWithContent(''+loadingHTML);var cat_sys_id=g_form.getUniqueValue();var profile=g_form.getValue('default_profile').trim();var ga=new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name','fetchLaunchVars'),ga.addParam('sysparm_catsysid',cat_sys_id),ga.addParam('sysparm_profile',profile),ga.getXML(varResponse,null,loadingDialog);}";
            onChangecatalogClientScript.addScript(onChangeScript);
            var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
            this.logger.info("V1.4 migration, " + catSysId + " Fetch values OnChange catalog client script created.");
            var gr = new GlideRecord('catalog_script_client');
            if (gr.get(OnChangeCatalogScriptId)) {
                gr.setValue("sys_scope", "global");
                gr.update();
            }
        } catch (e) {
            this.logger.error("Exception caught inside Migration_Script._createOnChangeScript. Error:- " + e);
        }
    },

    type: 'Migration_Script'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2019-09-11 10:09:24&lt;/sys_created_on&gt;&lt;sys_id&gt;caeab4864f337300d8494ebf9310c73e&lt;/sys_id&gt;&lt;sys_mod_count&gt;277&lt;/sys_mod_count&gt;&lt;sys_name&gt;Migration_Script&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_caeab4864f337300d8494ebf9310c73e&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2022-01-24 12:07:32&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>564595917</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>1c021aa32fd50110e49924c62799b6d3</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb91c1fbc0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table/>
<target_name>Migration_Script</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>f417c9b41b59c1108ec36b583a4bd440</update_guid>
<update_guid_history>f417c9b41b59c1108ec36b583a4bd440:564595917,3ef7b7a0e7d1c11016d80e146be8e50a:-1241902738,81d4bb20d0d1c110812659074e6798a2:669796140,cd4c86f2c3cd0510f3912f01bef1884e:1633161428,b31d7572398d0510e7966951fa3504b0:-347430544,9ce10ea132810110960725e0b2c2f60a:-291785148,5ae00e6117810110578cda506fa2f782:2091108195,c77f1c9dd389c110b6f0ba7c38163e55:-2068068860,78dc0781f305c110d8a54244eb1a96be:-612866427,625ba370b60d011098ef37874fe24dd5:-1591033656,d179e7fc22c901102fa2852b258e8fd1:1604072556,e68f8378de490110b4d3a416ce057ddb:-1665072904,d45b0b384d4901107c10862a73118209:457926410,a4b5fe747e850110d654649aa4534ee6:1824973482,fa643274c385011015829d259b739e3e:126666290,ba172e7072450110c440a8cba47476cb:667192824,31472c3409f48110c63d32ee39aaf6cc:2045374892,9e1620f041f48110f37e11d4c60b5949:-2106535984,aa92d97f94ec4110f6a0b9cac5a9b0a4:479686869,d89505f31cec4110c32d8fed5161402a:-896478392,08b2c9732fec4110ba8e4fee0136520f:-1448571546,1bddb8fb7aac41108c6330482968bb8e:-359806840,a7fcb0bbb9ac4110191747ba86ffbaaa:537455560,f8eb787b27ac411035753ea5f5d24da1:1816658130,62d0b43366ac411065c9195c3481cb21:-715539098,fa60747344ac41108bd603306f701cc9:352278386,c3af28331aac4110599fcd1c51835974:1274494580,69ec6c3fc16c4110acb887c15937f8bf:-1132332820,5b9c60bf516c4110765c69762e25a8dc:-671730102,fdda283fb76c41106c0cd7581a782e2f:61190742,6e4a2cfbeb6c41108fb72179b67291f2:-1382399737,bb196cbb106c4110718073d0ec6861c7:-342496379,cc2e5c33922c4110128f99f34885dd49:-1842884508,8325d0f76ee84110de294a577e1668cf:-2026760935,b952543bcfe8411006f81ec913d2ba85:594460782,492de4a292a44110558989d6e513a3a9:54513762,8cecec62bea44110bd06a3a0d2bdc721:1185642688,e89ca86228a44110f3841c16fae9cc5e:-950536145,dd7fafc6dce001103aa7081871caaa13:114394639,c97b270a28e00110a32f3b01f192344e:-730268370,b7a0c7061fa00110cfa49b2de428e04a:367821837,09ffb6068ea00110f91f62e2b259c03c:1287630094,0d477e4e0c600110b68e38bc84a3607e:68299164,2b70b2c2416001100dffd354ed8a40ae:2009907766,7596ee8ac92001106eee2f4a8e4d6444:225627486,4505455889600110fdbcb7da474e448b:427526560,7a320d901f6001108e7d126421ef3817:-206183079,d963305cb720011089b46c784c7e0f99:-366824339,c232f01ce4200110e939525e3b80f968:1520862189,c588dd121c58c110d9bdf62fceca8a5d:1245898279,8c70dd968118c110bce103eef40ea3d6:1330174120,d165d58a961c8110c86d24fe3190d490:1530890451,5380594a46d8811077feefd1570f4a84:-1480813932,a9dab4466c588110dba786515d96b3fb:1958789908,62f9f0064a5881104ac7444dfbb9c207:-1867978835,d6f83446dd58811067dcb15eb792f387:295536045,e75ee371ce5481107fd9127831f4fb19:1890362036,0a8ca371a0548110e26264b1011c79c0:-514270583,c5ad0361e3544110f1ec7ed16d58a198:1461123380,4c5d8b2198544110635f92d6968864dc:949634035,586b47a9201441104978e9f03cd162a1:-965354766,d2e44729c0144110a2a423727c40a590:354714322,7bdcb66d46d0411031b5f34c3f533f52:655812691,1beb81411218011040b063497b68b5b9:668646699,08db0141d81801105a91dedc101916b9:-2141639350,208bc9017a180110fe77e57ced6d34ad:1910222441,485760017a94011037fed14b0f301f3f:904399047,32e0e4c57f5401109169e3306a07861a:781571110,5ff12df09f2b70102ea2585a284c6e16:240202252,c46d1c205e2b30109625ea77198e2542:418486220,e9fb068407e77010178696f939a90606:-645650333,373b8a0454e77010f82b9975f5105fe7:-1548980156,8d3e5b92701330106d38a19ec6292f49:-1531830563,85ad7386b7973010e148049df515c45d:-1502480195,552d3f06c197301007a909ad31f6f455:-1767730081,bf6e7d24bd57301040863023f1db0996:-1553341945,18f8c4841c9f30105cf58805cf6f0324:1574439623,75b7cc8c7f5f3010c1387a32b8c41a37:-1449447165,51b6cc8c215f3010310fa762c9291e2e:-1394220927,85cc6f33324f3010788cf8f565c1927b:-2010780423,bb5ecb77548730109387578a156856b5:-1209343744,ca1e8fb3fa87301078f41b227358ef5a:872977994,04fa07337c8730108b6a174657f1d17a:461609457,330987ff54473010b103cd08003b6711:1233523042,265607bf01473010357befe0b13e87d6:-582136325,53e4c3bbd1473010d173c0c41ea7b444:1941002858,4297163b210330102fad94b8beee213c:1325434101,09b320d3ad03b010e3517a09fc0ff350:358490808,823a74876f4770106a0cb4e7fb2b96b1:-1501252599,f62970878d47701042c7446ceb2bdb9b:-1521908045,6ffc5c4f84037010832adb7acd1ad8bd:-762000402,26cfb7fa0e0f30102f599a6e4dbc22b5:658461248,2c6f6ffec5cb301010f4a6f83510aee7:564891251,4db22fbe870b3010660b1eb3632ed6fa:-120087928,68326b7a254b30106b1158420cfa9b88:-1145961286,a56e977ef70b3010e56a97dbdc551aa0:663017488,50a1784619873010a99b309a3bc773aa:1526442245,c28178c21087301037d0a45f85f7e728:-1159804267,3eccf08ab8c33010071b13873ef22513:-1145961286,d86a90a57ebe3010508b226e2bab1920:409325012,6e7a8059ffbef01077e0bd6012eebc69:-1572446163,690a8815debef0105e10e242c9b7ebd9:932758705,b6534d3cc372b010fc39fe17ed2f8f7a:393841677,2e9fc41cee7a3010f67836b5157391f9:258672790,962e22e26ea67010f8f9a7bd7a8e267a:1827917398,37412edc0eeab010f79ba31c7dc62919:-84269191,d8d165d267a2f0107e5b00380d1194af:-374573469,5a4e0c8a8b2a301079e0a444a2ba9fbc:1889581950,7bd80c06b62a3010698a1ed79d29a106:-150168476,802880063c2a301082b6d789df45ecce:-126795519,60478006112a3010b8c9709215a672c5:-477448563,55bea9d84ca27010d0621b02630dee14:1172023067,7f4ca954d2a27010e840cf7b0c0f3ca3:-727312091,cd489910a4627010f6027367f2e9a876:1643192907,740d70c01e2630102d24b087566017af:2145624869,593bb440e0263010c85f57d5b45aa6b3:-819869057,54a9413a529af41054d917c2e337f0d1:-335986668,43b74872d192f41067fb52dfa61763f1:462730292,00247f228f52f41064b13896dbae2996:-1254368604,0b51fb2a7e12f41094e5607e03d57eee:682042963,ec0b6fa62412f410ab867d27a71f12c8:256853256,1fc827e28012f410faf73968d86e8fe7:1730618909,699a1b620fdeb41060bbd142e7aae9c0:382769039,6a61bb1ed1da74108696ef1664039c3a:-2015507746,764bb8d79f4230108b0a7bea55a7503b:1240786352,51e9e89be3023010a9db317ad1455fe7:304575975,93e3c0db304630107fc5ca8d803e5e78:-230389499,c5a363f0aa8674101b5fa29d4eb6767d:1335374726,a91e5144784eb01037203f98e2ceb1ad:786994458,fbbf184cb0c63010b683d7c073e118d4:942722367,2d9dbbfb1c7530104a80f73451dc7b41:-1295704493,6a01ca5b33353010f70009f8fdbe1a9e:1088082811,933925d34af13010ecb40f5c065bd642:1948496571,7028428a44d53010c1b87755ecd15b1b:942722367,618b714211d5301041ae84b418fae96d:-1942728233,e0b1c10ad4d130101fe6a69ab93e3447:-1009747617,397c3c06c3d13010d882e5dd68bd05be:-1605575298,4f5cb80651d13010ed4f002e566844f0:-1353169315,0afb44b4535530107384f27ecc8f103d:-57606340,ae5a44749b553010c4fee518bba3d982:-1067315875,1deff768c215301051e956e35af960c0:1535536410,1a673fa0ac153010d9fe858fae4d71d4:1111149809,acfa020815d53010d8c0856b81547229:710172544,ed9a024871d5301029d97d9dcead9732:-810970093,b5684244e8d530103e8a132df66793ee:-1110566222,a345b9c0a89530102f409eda80e2a69a:-148746295,730d610870553010f2ac30ea2b80f31e:1189553387,a6f72d08845530109fa71c1d1f3c4751:465295556,bfefa8bf9d01b0106ee8eb9096994906:184489179,569e7ba3f4c970108cce95fe44f1b77f:815448707,8e53632753cdb410117032dadf28f8b4:-1586753179,0635852fee09b4102f0f6d8db631801a:1083306717,d282c16b5a09b4109080414cc7049fa9:-1292438715,785ef4a73e09b4107ce93dacd54f9568:-730310953,122d3c67d809b41002982eceae7fb701:1528106518,02bab3938245b410cfd5d6c875e1ec33:-294932510,3fc58179f5c5701009b9a23d4b9f4a66:-64071947,4f35413503c57010df31491561b8773b:610240660,c91c35e5f08d3010770c1c093b5eeb9d:-1110779083,37ebb1e5a48d30107216f3615989f6f5:-1157056010,dc3ba86d7b89301087bc52abb4de56d8:-2067725401,02ccff1dc80530107fff432a0191c988:978993168,c255c5f66dc4bc10f1705dbb4e97e0d6:-1109679404,d62adbee0c00bc10fa6982c207e50b8f:-938829013,49aab656cd083c106f340f9e02a56b90:-1734164096,55f87296b0083c10c4342345f7d84afd:-1609613233,bfff2c82c684f8100c5db50630ef1f6f:722887562,19a7984eaa80f810aa30186ef864a7d2:-1233627957,0f630c06cb40f810d7ee72a14e79be16:-521573323,91a349f9570c3050f87fa75e0ef678c6:1482369167,300df475a80c3050c352b2029387233f:612141019,b8c4b07d6fc83050989f6eb5b57f3dde:726323892,ad34bc3db7c8305081358ee7d4a87ace:1482146395,cd8338f93dc830501505b498d87a4a3d:1573019862,334824f5dfcc78101c89c5d93198227a:-1227885991,175c547dd14878100fd31d90d5f69fed:1169846369,1fafe6218dc8f4104596af8184e1b011:-720350223,412d26a96788f410c124dba629ce846a:-1798572143,498c22a90988f410776a564955d584a2:-867119740,924a16252d08f410d7c3267812b9409f:2092517432,cec542998640b410af329e8914cab513:-1672704215,419cad19bb00b4103c24a1faac51bd21:-382632969,c44268c2a3b92010f8037d330688f89c:-817609419,d4a037756b356010049369bed1960b5c:321711684,4b99783f18306010975804e74f21f0fd:-833368849,b9703433933060105ae5ef3bc0ec66b4:1000706849,197fc16b53fc2010843e38a314d1de01:-439317812,b2ba0d6b18bc20105208c7f5e549926d:2098178244,52ec371fbdfc60105ee76cae1fc14867:535339084,23ce549372b460106e9a8da327817362:1084760422,a979a70395346010d7bca5bb7cbd7672:530587356,f42ed103d4ac60102f4d80a7c9bc20e4:1702884945,d45055cf2a2c6010fc83c472232b4237:616941326,ad97b199e7a0a01087e6296ca746e877:1930885726,18c57159bfa0a0107b9349c7b7e768c7:1848365702,e11e0acdec286010d5016313aa8a39ce:-853561603,901ccec51d286010ad34cbed1f6181ed:-1084338431,bed53dc5e7e460106714528214f26f01:1408175284,7a22b1092ee46010e1fa12a4abbfbebf:-123892049,d5d5258592a46010f8061da235deca65:627640957,a1856d4537a46010ae72c042254dd109:1406714032,2f141d0d51e8e050b1ab8ae6565ba48d:-845142013,2cdfc0701caca05033384a629ef3b17b:2142404088,192a8c340d2ca050a88e659c03abc712:-1080722118,1997087cdce8a0507474b0138e8eaecb:514958393,afe3c87c7ca8a05061cc40460b965cbe:-1541715594,2350b222c884e010f8a75a518aec8a3d:-41385206,0e6fe6a2a144e010bca144d7cdf3f196:-1102985943,d9dc2fd24fb3a410fe9fcc9d62222f50:-1469873954,fd93ce5f8fe36010f8c94281d1e907cc:160055078,4b51ce9bbee36010b6f82541f72a287f:-575326538,ef8fb55b2be36010bd6ddeae5169c0b0:1366020,2eac399752e360106fa3c126a7b8dbd0:-1988079278,ca2bf197a3e3601010653a38e39a8bba:1949172809,e41fa95fcca3601087110000b30cae81:1624193497,41a9e5d701a360109fe99f4c0e48f69a:118896578,db88e646215328502a302a7ba650c4d7:-968929448,2be66282185328501e4c31f3dfd9855f:-978935699,dd13059913dfe01048ab85fed9a8b407:2130190675,e2db7c99fe1fe010052d4c603789092c:1175978801,ae6e9bc9a6df24501b2d6d924f56cdb1:-815861837,d0691fc9d6dba010a42a58717226f2ba:-359754939,c11e1788fa5f24508ed093a3684ca2e3:-1096120895,ea0917445d5f24505fa91859ed7e5637:1614014441,2d1487440a1f2450cd31913520a38d15:148956159,26b4c6fa7acf205001d442dcb2e5e35c:-1822618430,0f193ae25bcbac107a3437976f9e8f50:1576682166,3c9d577498cfe4101a45a013dda6b794:2018940530,9cfa97bca58fe410696adb3330839baf:106374574,03b817bc628fe410186ba17a476dc778:1741628813,a9be433ce04fe4108e955b93ee172e89:-1764988119,645b03b0318fe410ac2c3fbdf7a5ed09:-1159529184,74f703b0d88fe4104ce63bdf59e96201:302834688,bdcf363cdf4fe410a5c2ad1cfe263f54:120077110,2c6f3238954fe410ec13af9440db65b4:-2087249129,f104f2b05b4fe4102598b192f3d6f9dd:1780587574,bf613abca20fe4102413f9bbb06fd252:-1728770921,0d603ebcac0fe4106fa127ea9beab149:-324153062,6709d270730fe410251987f1abf5b097:846296896,f48892303a0fe410049b833e6779627e:-22190541,e522563c49cbe4105c25970c37a60ff2:-1617558480,f5f1c134400be410fc78212be6757903:1443369704,868bccfc3307e410ba754bd463b37f23:860664901,edf356ec674fa4100078e74afd17c072:1152600773,39455c20880ba410a804ba4d27132eea:-1999482427,5ef4dc24520ba41029393b3fdec119df:88895795,8bcfd65c0d83a410cfdbb3a7d375ef7e:142322403,e09e921c4983a410b8a36c83f2512565:-176275878,aa2cde988283a410606c08b8502ef47e:1683341362,e2269214c183a4100b1d716544355dae:-1085842769,92359a541783a41009b85fb2563db52c:423638413,85f7cc8da595649049a5f92a39515a38:-1671888124,a50cc04d0304a010d9e06307ee334b0a:-1435386113,20e7800d5304a010e25bf925369f0997:2069133929,9a314da67e6f54106849e7642e6e92b6:175809751,a799715618675410d72ca6b5433c3031:2114252140,8d25cdd630a35410a9c4b394f93d421c:634838339,025ab502246b141092561d35ebcf395f:-1070049925,249214c250e31410c0f5c7cc8b582da8:1541575440,13d75efdd3a750109bd9a5857eef766d:2140628624,66c52031d12bd0107741bda29317207b:812274704,a5f46c312b2bd010a9324c1a97cb6a79:-2088715855,d7fbd4b5e6e7d010977039698d86385a:-1845678258,fdba54f573e7d010d0fbc3255a827352:1712006664,b0990c39bda7d0106693c68f6285ad93:163655485,ada4f3259267d010e307908d3856c9f0:745814570,5a158204172b9010f0ef7bb83ba779b6:869112296,247dc508e6679010115cd078465f1a9d:-1108733538,8d56a101f41750102e39357d41da928a:-993732319,cf04e84d01135010dd3401cc9cd40f56:-947411583,c33a1c056213501027b75accf99002b4:1592620463,46c75c055a1350101aaebed65445e27c:1471297535,b40bf9706ad710103440c5aaae477384:1933924403,53022024d21350109bdc074d55bd8bf6:350800390,479294284bdf1010b37ded70cf7c21fc:1105798470,369f0864a4df10109a37324f02e536ac:1151522099,3d8a8f10df1f101058d18586073f1b69:-1687325504,08b89c0163c75c908290bf7147f54842:901634930,66786d50ee83d89027e982b625aa6619:-1217183196,443319949f87d0104c96842f47285f5d:-804901250,fc25415c1147d010cfde50e1cad46aef:-1852353262,8cf14d98ee47d01073d2af49e4e581fa:1481362477,3351c5987347d0109e0071da0819f5de:-50525092,1c9db094ec47d010f3dc881df45e612c:-1874550043,66e7b410a547d0104b11948a9abb313d:849508809,d033f4106947d010ba51dd0066299872:2052980060,061f68909407d010d07bdfc3bde72dfb:-276613048,f5bbe4dcefc3d0107eb2e582eea2a0a3:927928773,df96a4d818c3d0106955cd2460128be0:-805653090,8c25a45896c3d010bd40cf31680e6ed2:-2091770536,a983ec582cc3d010aa1842bafb8a9b60:1328227568,06c1189c3e83d0107fc9cff8189b52d2:-1901943432,3bdf4018b483d01064c13aa922d1dc1c:934422790,d60b059fb7ba5010e540b304a8d9f10e:1500667199,fb790d5b4c7a50100ec0a46114923695:806665422,1a2ac2cffbb25010655dd9a7144de1a7:1521625119,32b1e16f972298503552fe8fefd8b8d9:-551997769,c76b1f26783b84101699a4e185cba18b:-753688393,097b64f2a41100103d297aa02e5c1a8d:-912298074,470bb568d71908104151472ef344ea38:-741977356,e8b97d2867190810ced38c88647e1927:867468443,72bd17fe6c41041045fca46ec9ce8b74:1563531241,c694e3b73c7f330077f703ee6df280c0:907140764,af00f5aefd3bb300d33393d88e1ec300:-931762699,9c8795a61ff7b3009da79fc6d24e2fe4:909114287,80b9f06670b7b300a0dc0713f4a1201c:-1866674801,d143b8eacebb3300a9b26b1f21873d8d:-1840373311,9fd0b82689bb3300e81365b9698843c5:210928253,8fd9a0e215bb330064f496ab81075243:-630791341,a70df396e43b330039398af0d931612b:1631528564,2f9aa6da0f37330088be1cd81c61cf6b:185703213,127aa6daff373300429261ee6d857564:-1848709098,cf3aaa9abf3733000042c1b2f32cb215:-304031332,ff2aae9a5a3733002a5c8c2a06ec8ccf:344153237,e5e4a696e0373300423e76365a56f98c:-2078374087,18a6d25a95f33300e3097677b4d030d3:489118318,8c96521e2ff33300a084c7c921fc9116:-2111722977,562196d63fb33300c2baf2d26a8f0b75:-896639251,a4f2ca96dbb33300ac3ce7d0e49b826a:-1385597839,25c1429257b333000e63959788a73a41:-940423726,4ab1b95a3e333300409bc2c1f0615602:546104125,b920355a5f7333006d2374e3d4d84234:527834964,60642d1afa333300deab36de8709c65a:-1575383558,fdfad51693333300f0aba0a5886da3cc:612375769,c709d5928d333300db64d85c27324fef:-548422816,f71bda4abb37730041004c07e4f84ef4:-293315480,40159a4666f37300332d5ff896b245f7:2037898708,e9f30e4a26f373007bbfe229bc083bc9:-1598826147,45152dce777373007b61d0fd0d7b6348:1031060289,034269424db373000478953c57913805:574640253,57b1a1428fb373003e7f8a5c292ce8b4:-1118767405,3ea1614251b37300ce5fd7d09f82f6fa:-81791376,46afd1ce8f737300fe6c21326add9110:-1812907213,c7ee5542777373009ce66e45d66d3cb4:1275437037,0f8acd0a7e3373009915d4ad8a677bff:81599683,763bf0427f3373004bc5657665a53663:616933246</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>catalog_script_client_6113fb5d3735a300fdfc097973990ef3</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="catalog_script_client"&gt;&lt;catalog_script_client action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;applies_catalog&gt;true&lt;/applies_catalog&gt;&lt;applies_extended&gt;false&lt;/applies_extended&gt;&lt;applies_req_item&gt;false&lt;/applies_req_item&gt;&lt;applies_sc_task&gt;false&lt;/applies_sc_task&gt;&lt;applies_target_record&gt;false&lt;/applies_target_record&gt;&lt;applies_to&gt;item&lt;/applies_to&gt;&lt;cat_item display_value="General Settings"&gt;d4d3da7f37d12300fdfc097973990e11&lt;/cat_item&gt;&lt;cat_variable/&gt;&lt;condition/&gt;&lt;description/&gt;&lt;field/&gt;&lt;global&gt;true&lt;/global&gt;&lt;isolate_script&gt;false&lt;/isolate_script&gt;&lt;messages/&gt;&lt;name&gt;Get Blueprint Details&lt;/name&gt;&lt;order/&gt;&lt;script&gt;&lt;![CDATA[function onLoad() {
    //Type appropriate comment here, and begin script below

    if (g_form.getValue('item_name') != '')
        return;

    var type = g_form.getValue('type');
    if (type == 'new') {
        var blueprint = g_form.getValue('blueprint');

        var ga = new GlideAjax('Nutanix_ClientServerScriptBridge');
        ga.addParam('sysparm_name', 'getBlueprintInfo');
        ga.addParam('sysparm_blueprint', blueprint);
        ga.getXML(processBlueprint);
		
        function processBlueprint(response) {
            var getCatalogData = response.responseXML.documentElement.getAttribute("answer");
            if (getCatalogData != '') {
                var answer = JSON.parse(getCatalogData);
                g_form.setValue('item_name', '', '');
                //g_form.setValue('item_name', answer.itemName+'', answer.itemName+'');
                g_form.setValue('description', answer.description + '', answer.description + '');
                g_form.setValue('assign_users', '', '');
                g_form.setValue('assign_groups', '', '');
            }
        }
    } else {
        var cat_item = g_form.getValue('cat_item');

        var ga = new GlideAjax('Nutanix_ClientServerScriptBridge');
        ga.addParam('sysparm_name', 'getCatalogInfo');
        ga.addParam('sysparm_catalogItemSysID', cat_item);
        ga.getXML(processBlueprint);

        function processBlueprint(response) {
            var answer = JSON.parse(response.responseXML.documentElement.getAttribute("answer"));
            g_form.setValue('item_name', answer.itemName + '', answer.itemName + '');
            g_form.setValue('description', answer.description + '', answer.description + '');
            g_form.setValue('assign_users', answer.usersSysId + '', answer.usersName + '');
            g_form.setValue('assign_groups', answer.groupsSysId + '', answer.groupsName + '');
        }
    }
}]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;catalog_script_client&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-11-15 09:24:49&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;6113fb5d3735a300fdfc097973990ef3&lt;/sys_id&gt;&lt;sys_mod_count&gt;12&lt;/sys_mod_count&gt;&lt;sys_name&gt;Get Blueprint Details&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;catalog_script_client_6113fb5d3735a300fdfc097973990ef3&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2022-01-28 12:13:52&lt;/sys_updated_on&gt;&lt;table/&gt;&lt;type&gt;onLoad&lt;/type&gt;&lt;ui_type&gt;0&lt;/ui_type&gt;&lt;variable_set/&gt;&lt;view/&gt;&lt;/catalog_script_client&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1023725895</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>40021aa32fd50110e49924c62799b6cf</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb91c20110000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table/>
<target_name>Get Blueprint Details</target_name>
<type>Catalog Client Scripts</type>
<update_domain>global</update_domain>
<update_guid>30ee2942d5950110e33d4cedd2bdb99e</update_guid>
<update_guid_history>30ee2942d5950110e33d4cedd2bdb99e:-1023725895,4742f4c633910110755522753b31bbf9:1122350247,fdb178863d9101101265aba2a7f539b1:1118377745,1c213486e99101109c17de94d2b91c2f:987411227,0f3cd01da6bb330027dd29a26735175f:395266714,2d1bd8af42c87300e6450487ba3740cc:-1630761615,b0be53979279e300f1c45e5349f56844:-1086645143,a0082e1b3a75e30028d0782780ce89cb:-875161527,83f64265b0f9a30080c010b589595e2f:-523814383,e5d833917775a3002a23f9b8d17ffb5d:-660181276,0ea8bf515375a300d062432d86d83a5a:962487044,6a287b116775a30093bb1f36c3f18fbd:344763972,0d14b79dea35a300d8f2569d6459bdae:-897329885</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_scope_privilege_993e7be21ba4411098a61f4a234bcb73</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_scope_privilege"><sys_scope_privilege action="INSERT_OR_UPDATE"><operation>execute</operation><source_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</source_scope><status>allowed</status><sys_class_name>sys_scope_privilege</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2021-12-24 05:11:26</sys_created_on><sys_id>993e7be21ba4411098a61f4a234bcb73</sys_id><sys_mod_count>0</sys_mod_count><sys_name>CatalogClientScriptJS.deleteRecord</sys_name><sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_scope_privilege_993e7be21ba4411098a61f4a234bcb73</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2021-12-24 05:11:26</sys_updated_on><target_name>CatalogClientScriptJS.deleteRecord</target_name><target_scope display_value="Global">global</target_scope><target_type>scriptable</target_type></sys_scope_privilege></record_update>]]></payload>
<payload_hash>-367581951</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>50021aa32fd50110e49924c62799b6d2</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb91895a70000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table/>
<target_name>CatalogClientScriptJS.deleteRecord</target_name>
<type>Cross scope privilege</type>
<update_domain>global</update_domain>
<update_guid>9f8eb722dba4411084cb42be6e1ab901</update_guid>
<update_guid_history>9f8eb722dba4411084cb42be6e1ab901:-367581951</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_properties_759ca3b74f03230039f0aa95d310c741</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties"><sys_properties action="INSERT_OR_UPDATE"><choices/><description>Describes the version of the plugin</description><ignore_cache>true</ignore_cache><is_private>false</is_private><name>x_nuta2_nutanix_ca.plugin_version</name><read_roles>x_nuta2_nutanix_ca.calm_admin</read_roles><suffix>plugin_version</suffix><sys_class_name>sys_properties</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2019-01-24 06:37:30</sys_created_on><sys_id>759ca3b74f03230039f0aa95d310c741</sys_id><sys_mod_count>9</sys_mod_count><sys_name>x_nuta2_nutanix_ca.plugin_version</sys_name><sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_properties_759ca3b74f03230039f0aa95d310c741</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2021-12-17 06:50:47</sys_updated_on><type>string</type><value>v1.5.1</value><write_roles>x_nuta2_nutanix_ca.calm_admin</write_roles></sys_properties><sys_translated_text action="delete_multiple" query="documentkey=759ca3b74f03230039f0aa95d310c741"/></record_update>]]></payload>
<payload_hash>-726090460</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>54021aa32fd50110e49924c62799b6d1</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb918955a0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table/>
<target_name>x_nuta2_nutanix_ca.plugin_version</target_name>
<type>System Property</type>
<update_domain>global</update_domain>
<update_guid>be229cec70680110ea06694bc010c41e</update_guid>
<update_guid_history>be229cec70680110ea06694bc010c41e:-726090460,acb366bd33423010b85d71e9009d51a9:-369413561,2292dd62a5c530105ede436dfd519f3c:1309389577,409bdefeea10301097d43a9bdcf91be3:-1800367625,dd3caf7e6311b0102ec2f7d507e84365:-173415120,8857012430ee20106190325d7baa5df8:-688935569,a96f6cb28c8d6c502728c4ae920935ae:-1204456018,c149d464e6421010e280973d501c483f:-888257623,9bc615bf8ac7c4109e5a37d3324a9104:-1919298521,649406bb57f63300873c652de645531e:1860148326,bb2875073ad13300871a245858095eca:1344627877,241d63b79e0323009f84301037d2ec15:1860148326</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_eb0201073775a300fdfc097973990eda</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Nutanix_CatalogFormScripts&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Nutanix_CatalogFormScripts&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Nutanix_CatalogFormScripts = Class.create();
Nutanix_CatalogFormScripts.prototype = {
    initialize: function() {
        this.appUtil = new Nutanix_Calm_Utils();
        this.logger = new Nutanix_Calm_Logger();
    },
	
	
    fetchProjectAndProfileList: function(catSysID) {
        try {
            this.logger.debug("Inside Nutanix_CatalogFormScripts.fetchProjectAndProfileList");
            var gr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
            gr.addQuery('item_name', catSysID);
            gr.query();
            var ans = {};

            if (gr.next()) {

                var blueprintSysId = gr.blueprint + '';
                var profileList = gr.application_profile.getDisplayValue();

                ans.profileList = profileList;
                ans.projectList = [];

                ans.projectList.push({
                    'name': gr.project.name + '',
                    'uuid': gr.project.uuid + ''
                });

            }
            return JSON.stringify(ans);
        } catch (e) {
            this.logger.debug("Nutanix_CatalogFormScripts.fetchProjectAndProfileList :- Exception caught during fetching projects and profile list. Error :- " + e);
            this.logger.error("Exception caught during fetching projects and profile list. Error :- " + e);
        }
    },

    fetchOrderFormData: function(profile, catSysID) {
        try {
            this.logger.debug("Inside Nutanix_CatalogFormScripts.fetchProjectAndProfileList");
            profile = profile.trim();

            var variableData = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
            //gs.info("Parth profile value: " + profile);
            if (profile != "") {
                variableData.addEncodedQuery('catalog_item=' + catSysID + '^application_profile.name=' + profile + '^ORapplication_profileISEMPTY');
            } else {
                variableData.addQuery('catalog_item', catSysID);
            }
            variableData.query();


            var ans = {};

            while (variableData.next()) {
				gs.info("RV:variabledata"+variableData.variable.mandatory+'');
                if (variableData.variable.question_text + '' == 'Storage') {
                    var diskList = JSON.parse(variableData.default_value + '');

                    var rootDisk = diskList.root_disk;

                    var servicename = variableData.service_name.question_text.toLowerCase().replace(/ /g, '_');

                    if (rootDisk) {
                        ans[servicename + '_device_name'] = {
                            "value": rootDisk.device_name + '',
                            "readOnly": true
                        };
                        ans[servicename + '_size_gb'] = {
                            "value": rootDisk.size_gb + '',
                            "readOnly": true //disable in 1.1(rootDisk.runtime+''=='true')?false:true,
                        };
                        ans[servicename + '_volume_type'] = {
                            "value": rootDisk.volume_type + '',
                            "readOnly": true //disable in 1.1true
                        };
                        ans[servicename + '_delete_on_termination'] = {
                            "value": rootDisk.delete_on_termination + '',
                            "readOnly": true //disable in 1.1true
                        };
                    }


                    var dataList = diskList.data_disk_list;
                    for (var k in dataList) {
                        ans[servicename + '_' + k + '_device_name'] = {
                            "value": dataList[k].device_name + '',
                            "readOnly": true
                        };
                        ans[servicename + '_' + k + '_size_gb'] = {
                            "value": dataList[k].size_gb + '',
                            "readOnly": true //disable in 1.1(dataList[k].runtime+''=='true')?false:true,
                        };
                        ans[servicename + '_' + k + '_volume_type'] = {
                            "value": dataList[k].volume_type + '',
                            "readOnly": true
                        };
                        ans[servicename + '_' + k + '_delete_on_termination'] = {
                            "value": dataList[k].delete_on_termination + '',
                            "readOnly": true
                        };
                    }

                } else if (variableData.variable.question_text + '' == 'Port List') {

                    var portList = JSON.parse(variableData.default_value + '');

                    var servicename = variableData.service_name.question_text.toLowerCase().replace(/ /g, '_');

                    for (var k in portList) {
                        ans[servicename + '_' + k + '_protocol'] = {
                            "value": portList[k].protocol + '',
                            "readOnly": true
                        };
                        ans[servicename + '_' + k + '_target_port'] = {
                            "value": portList[k].target_port + '',
                            "readOnly": true
                        };
                        ans[servicename + '_' + k + '_endpoint_name'] = {
                            "value": portList[k].endpoint_name + '',
                            "readOnly": true
                        };
                    }
                } else if (variableData.variable.question_text + '' == 'Images') {

                    var list = JSON.parse(variableData.default_value + '');

                    var servicename = variableData.service_name.question_text.toLowerCase().replace(/ /g, '_');

                    for (var k in list) {
                        ans[servicename + '_' + k + '_image'] = {
                            "value": (list[k].data_source_reference) ? list[k].data_source_reference.name + '' : '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.data_source_reference &amp;&amp; list[k].runtime.data_source_reference.name &amp;&amp; list[k].runtime.data_source_reference.name+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_device_type'] = {
                            "value": (list[k].device_properties) ? list[k].device_properties.device_type + '' : '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.device_properties &amp;&amp; list[k].runtime.device_properties.device_type &amp;&amp; list[k].runtime.device_properties.device_type+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_device_bus'] = {
                            "value": (list[k].disk_address &amp;&amp; list[k].disk_address.adapter_type) ? list[k].disk_address.adapter_type + '' : '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.disk_address &amp;&amp; list[k].runtime.disk_address.adapter_type &amp;&amp; list[k].runtime.disk_address.adapter_type+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_bootable'] = {
                            "value": list[k].bootable + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.bootable &amp;&amp; list[k].runtime.bootable+''=='true')?false:true
                        };
                    }

                } else if (variableData.variable.question_text + '' == 'Storage Profile Data Disks') {

                    var list = JSON.parse(variableData.default_value + '');

                    var servicename = variableData.service_name.question_text.toLowerCase().replace(/ /g, '_');

                    for (var k in list) {
                        ans[servicename + '_' + k + '_disk_name'] = {
                            "value": list[k].name + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.name &amp;&amp; list[k].runtime.name+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_storage_type'] = {
                            "value": list[k].storage_type + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.storage_type &amp;&amp; list[k].runtime.storage_type+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_disk_caching_type'] = {
                            "value": list[k].caching_type + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.caching_type &amp;&amp; list[k].runtime.caching_type+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_size_gb'] = {
                            "value": list[k].size_in_gb + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.size_in_gb &amp;&amp; list[k].runtime.size_in_gb+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_disk_lun'] = {
                            "value": list[k].lun + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.lun &amp;&amp; list[k].runtime.lun+''=='true')?false:true
                        };
                    }
                } else if (variableData.variable.question_text + '' == 'OS Profile') {

                    var list = JSON.parse(variableData.default_value + '');

                    var servicename = variableData.service_name.question_text.toLowerCase().replace(/ /g, '_');

                    for (var k in list) {
                        ans[servicename + '_' + k + '_valut_id'] = {
                            "value": list[k].source_vault_id + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.source_vault_id &amp;&amp; list[k].runtime.source_vault_id+''=='true')?false:true
                        };

                        if (osProfileList[k] &amp;&amp; osProfileList[k].vault_certificates) {
                            for (var w in osProfileList[k].vault_certificates) {
                                ans[servicename + '_' + k + '_certificate_config_url_' + w] = {
                                    "value": list[k].vault_certificates[w].certificate_url + '',
                                    "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.vault_certificates &amp;&amp; list[k].runtime.vault_certificates[w] &amp;&amp; list[k].runtime.vault_certificates[w].certificate_url &amp;&amp; list[k].runtime.vault_certificates[w].certificate_url+''=='true')?false:true
                                };
                            }
                        }
                    }
                } else if (variableData.variable.question_text + '' == 'Guest Customization DHCP') {

                    var list = JSON.parse(variableData.default_value + '');

                    var servicename = variableData.service_name.question_text.toLowerCase().replace(/ /g, '_');

                    for (var k in list) {
                        ans[servicename + '_' + k + '_use_dhcp'] = {
                            "value": list[k].is_dhcp + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.is_dhcp &amp;&amp; list[k].runtime.is_dhcp+''=='true')?false:true
                        };
                    }
                } else if (variableData.variable.question_text + '' == 'Disks') {

                    var list = JSON.parse(variableData.default_value + '');

                    var servicename = variableData.service_name.question_text.toLowerCase().replace(/ /g, '_');

                    for (var k in list) {
                        ans[servicename + '_' + k + '_use_existing'] = {
                            "value": (list[k].source) ? true : false,
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.source &amp;&amp; list[k].runtime.source+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_storage_type'] = {
                            "value": (list[k].initializeParams) ? list[k].initializeParams.diskType + '' : '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.initializeParams &amp;&amp; list[k].runtime.initializeParams.diskType &amp;&amp; list[k].runtime.initializeParams.diskType+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_source_image'] = {
                            "value": (list[k].initializeParams) ? list[k].initializeParams.sourceImage + '' : '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.initializeParams &amp;&amp; list[k].runtime.initializeParams.sourceImage &amp;&amp; list[k].runtime.initializeParams.sourceImage+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_size_in_gb'] = {
                            "value": (list[k].initializeParams) ? list[k].initializeParams.diskSizeGb + '' : '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.initializeParams &amp;&amp; list[k].runtime.initializeParams.diskSizeGb &amp;&amp; list[k].runtime.initializeParams.diskSizeGb+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_delete_when_instance_is_deleted'] = {
                            "value": list[k].autoDelete + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.autoDelete &amp;&amp; list[k].runtime.autoDelete+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_disk'] = {
                            "value": list[k].source + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.source &amp;&amp; list[k].runtime.source+''=='true')?false:true
                        };
                    }
                } else if (variableData.variable.question_text + '' == 'Blank Disks') {

                    var list = JSON.parse(variableData.default_value + '');

                    var servicename = variableData.service_name.question_text.toLowerCase().replace(/ /g, '_');

                    for (var k in list) {
                        ans[servicename + '_' + k + '_disk_type'] = {
                            "value": list[k].disk_type + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.disk_type &amp;&amp; list[k].runtime.disk_type+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_disk_name'] = {
                            "value": list[k].name + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.name &amp;&amp; list[k].runtime.name+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_size_in_gb'] = {
                            "value": list[k].sizeGb + '',
                            "readOnly": true //disable in 1.1 (list[k].runtime &amp;&amp; list[k].runtime.sizeGb &amp;&amp; list[k].runtime.sizeGb+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_delete_when_instance_is_deleted'] = {
                            "value": list[k].autoDelete + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.autoDelete &amp;&amp; list[k].runtime.autoDelete+''=='true')?false:true
                        };
                    }
                } else if (variableData.variable.question_text + '' == 'Networking') {

                    var list = JSON.parse(variableData.default_value + '');

                    var servicename = variableData.service_name.question_text.toLowerCase().replace(/ /g, '_');

                    for (var k in list) {
                        ans[servicename + '_' + k + '_associate_public_ip_address'] = {
                            "value": list[k].associatePublicIP + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.associatePublicIP &amp;&amp; list[k].runtime.associatePublicIP+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_network'] = {
                            "value": list[k].network + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.network &amp;&amp; list[k].runtime.network+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_subnetwork'] = {
                            "value": list[k].subnetwork + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.subnetwork &amp;&amp; list[k].runtime.subnetwork+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_access_configuration_name'] = {
                            "value": (list[k].accessConfigs &amp;&amp; list[k].accessConfigs[0]) ? list[k].accessConfigs[0].name + '' : '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.accessConfigs &amp;&amp; list[k].runtime.accessConfigs[0] &amp;&amp; list[k].runtime.accessConfigs[0].name &amp;&amp; list[k].runtime.accessConfigs[0].name+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_access_configuration_type'] = {
                            "value": (list[k].accessConfigs &amp;&amp; list[k].accessConfigs[0]) ? list[k].accessConfigs[0].config_type + '' : '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.accessConfigs &amp;&amp; list[k].runtime.accessConfigs[0] &amp;&amp; list[k].runtime.accessConfigs[0].config_type &amp;&amp; list[k].runtime.accessConfigs[0].config_type+''=='true')?false:true
                        };
                    }

                } else if (variableData.variable.question_text + '' == 'VDisks') {

                    var list = JSON.parse(variableData.default_value + '');

                    var servicename = variableData.service_name.question_text.toLowerCase().replace(/ /g, '_');

                    for (var k in list) {
                        ans[servicename + '_' + k + '_adapter_type'] = {
                            "value": list[k].adapter_type + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.adapter_type+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_device_type'] = {
                            "value": (list[k].disk_type) ? list[k].disk_type : (list[k].device_properties) ? list[k].device_properties.device_type + '' : '',
                            "readOnly": true //disable in 1.1 (list[k].runtime &amp;&amp; list[k].runtime.disk_type &amp;&amp; list[k].disk_type+''=='true')?false:(list[k].runtime &amp;&amp; list[k].runtime.device_properties &amp;&amp; list[k].runtime.device_properties.device_type &amp;&amp; list[k].runtime.device_properties.device_type+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_size'] = {
                            "value": (list[k].disk_size_mb) ? list[k].disk_size_mb : list[k].disk_size_mib + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.disk_size_mb)?list[k].runtime.disk_size_mb:(list[k].runtime &amp;&amp; list[k].runtime.disk_size_mib+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_device_bus'] = {
                            "value": (list[k].device_properties &amp;&amp; list[k].device_properties.disk_address) ? list[k].device_properties.disk_address.adapter_type + '' : '',
                            "readOnly": true //disable in 1.1 (list[k].runtime &amp;&amp; list[k].runtime.device_properties &amp;&amp; list[k].runtime.device_properties.disk_address &amp;&amp; list[k].runtime.device_properties.disk_address.adapter_type+''=='true')?false:true
                        };
                    }

                } else if (variableData.variable.question_text + '' == 'Network Adapters') {

                    var list = JSON.parse(variableData.default_value + '');

                    var servicename = variableData.service_name.question_text.toLowerCase().replace(/ /g, '_');

                    var clusterReadOnly = true;

                    for (var k in list) {
                        ans[servicename + '_' + k + '_adapter_type'] = {
                            "value": list[k].nic_type + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.nic_type &amp;&amp; list[k].runtime.nic_type+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_network_type'] = {
                            "value": list[k].net_name + '',
                            //"value": list[k].nic_type+'',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.net_name &amp;&amp; list[k].runtime.net_name+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_nic_' + (parseInt(k) + 1)] = {
                            "value": (list[k].subnet_reference) ? list[k].subnet_reference.uuid + '' : '',
                            "readOnly": (list[k].runtime &amp;&amp; list[k].runtime.subnet_reference &amp;&amp; list[k].runtime.subnet_reference + '' == 'true') ? false : true
                        };
                        if (list[k].runtime &amp;&amp; list[k].runtime.subnet_reference &amp;&amp; list[k].runtime.subnet_reference + '' == 'true')
                            clusterReadOnly = false;
                        var clus_name = '';
                        var gr = new GlideRecord('x_nuta2_nutanix_ca_subnet');
                        gr.addQuery('uuid', (list[k].subnet_reference) ? list[k].subnet_reference.uuid + '' : '');
                        gr.query();
                        if (gr.next()) {
                            clus_name = gr.cluster_name;
                        }
                        ans[servicename + '_cluster_name'] = {
                            "value": clus_name + '',
                            "readOnly": clusterReadOnly
                        };

                    }

                } else if (variableData.variable.question_text + '' == 'Network Profiles') {

                    var list = JSON.parse(variableData.default_value + '');

                    var servicename = variableData.service_name.question_text.toLowerCase().replace(/ /g, '_');

                    for (var k in list) {
                        ans[servicename + '_' + k + '_nic_name'] = {
                            "value": list[k].nic_name + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.nic_name &amp;&amp; list[k].runtime.nic_name+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_security_group'] = {
                            "value": list[k].nsg_name + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.nsg_name &amp;&amp; list[k].runtime.nsg_name+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_virtual_network'] = {
                            "value": list[k].vnet_name + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.vnet_name &amp;&amp; list[k].runtime.vnet_name+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_subnet'] = {
                            "value": list[k].subnet_name + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.subnet_name &amp;&amp; list[k].runtime.subnet_name+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_public_ip_config_name'] = {
                            "value": (list[k] &amp;&amp; list[k].public_ip_info) ? list[k].public_ip_info.ip_name : '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.public_ip_info &amp;&amp; list[k].runtime.public_ip_info.ip_name &amp;&amp; list[k].runtime.public_ip_info.ip_name+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_public_ip_config_adapter_method'] = {
                            "value": (list[k] &amp;&amp; list[k].public_ip_info) ? list[k].public_ip_info.ip_allocation_method : '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.public_ip_info &amp;&amp; list[k].runtime.public_ip_info.ip_allocation_method &amp;&amp; list[k].runtime.public_ip_info.ip_allocation_method+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_public_ip_config_dns_label'] = {
                            "value": (list[k] &amp;&amp; list[k].public_ip_info) ? list[k].public_ip_info.dns_label : '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.public_ip_info &amp;&amp; list[k].runtime.public_ip_info.dns_label &amp;&amp; list[k].runtime.public_ip_info.dns_label+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_private_ip_config_allocation_method'] = {
                            "value": (list[k] &amp;&amp; list[k].public_ip_info) ? list[k].private_ip_info.ip_allocation_method + '' : '',
                            "readOnly": true //disable in 1.1 (list[k].runtime &amp;&amp; list[k].runtime.private_ip_info &amp;&amp; list[k].runtime.private_ip_info.ip_allocation_method &amp;&amp; list[k].runtime.private_ip_info.ip_allocation_method+''=='true')?false:true
                        };
                    }

                } else if (variableData.variable.type + '' == 21) {
                    var listValue = variableData.default_value + '';
                    var gr = new GlideRecord(this.appUtil.configuration.table.dropDownTable + '');
                    //gr.addEncodedQuery('variable='+variableData.variable+'^valueIN'+listValue);
                    gr.addEncodedQuery(variableData.variable.reference_qual + '^valueIN' + listValue);
                    gr.query();

                    var listValSys = '';
                    while (gr.next()) {
                        listValSys += gr.sys_id + ',';

                    }
                    if (listValSys.endsWith(','))
                        listValSys = listValSys.substr(0, listValSys.length - 1);
					gs.info("RV:variableData.variable.mandatory+'' "+variableData.variable.mandatory+'');
                    ans[variableData.variable.name + ''] = {
                        "value": listValSys + '',
                        "readOnly": (variableData.runtime_config + '' == 'true') ? false : true,
						"mandatory":variableData.variable.mandatory+''
                        //"container": variableData.category_name.name+''
                    };
                } else {
                    ans[variableData.variable.name + ''] = {
                        "value": variableData.default_value + '',
                        "readOnly": (variableData.runtime_config + '' == 'true') ? false : true,
						"mandatory":variableData.variable.mandatory+''
                        //"container": variableData.category_name.name+''
                    };
                }
            }
			
            return JSON.stringify(ans);
        } catch (e) {
            this.logger.debug("Nutanix_CatalogFormScripts.fetchProjectAndProfileList :- Exception caught during fetching launch page variables values. Error :- " + e);
            this.logger.error("Exception caught during fetching launch page variables values. Error :- " + e);
        }
    },
    fetchMultipleProjectAndProfileList: function(catSysID) {
        try {
            this.logger.debug("Inside Nutanix_CatalogFormScripts.fetchMultipleProjectAndProfileList");
            var gr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
            gr.addQuery('item_name', catSysID);
            gr.query();

            var ans = {};

            if (gr.next()) {

                var blueprintSysId = gr.blueprint + '';
                var profileList = gr.multiple_application_profile.getDisplayValue();

                ans.profileList = profileList;
                ans.projectList = [];

                var projects = gr.multiple_projects;
                var project = projects.split(',');

                var pro = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
                for (var i in project) {
                    if (pro.get(project[i])) {
                        ans.projectList.push({
                            'name': pro.name + '',
                            'uuid': pro.uuid + ''
                        });
                    }
                }

            }

            return JSON.stringify(ans);
        } catch (e) {
            this.logger.debug("Nutanix_CatalogFormScripts.fetchMultipleProjectAndProfileList :- Exception caught during fetching projects and profile list. Error :- " + e);
            this.logger.error("Exception caught during fetching projects and profile list. Error :- " + e);
        }
    },
    fetchMultipleProjectAndEndpointList: function(catSysID) {
        try {
            this.logger.debug("Inside Nutanix_CatalogFormScripts.fetchMultipleProjectAndProfileList");
            var gr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
            gr.addQuery('item_name', catSysID);
            gr.query();
            var ans = {};
            if (gr.next()) {
                var runbookSysId = gr.blueprint + '';
                var endpointList = gr.endpoint;
                if (endpointList != '') {
                    var endpointLists = endpointList.split(',');
                }
                ans.projectList = [];
                var projects = gr.multiple_projects;
                var project = projects.split(',');

                var pro = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
                for (var i in project) {
                    if (pro.get(project[i])) {
                        ans.projectList.push({
                            'name': pro.name + '',
                            'uuid': pro.uuid + ''
                        });
                    }
                }
                ans.endpointList = [];
                var endpoint = new GlideRecord('x_nuta2_nutanix_ca_endpoints');
                endpoint.query();
                if (endpointList == '') {
                    ans.endpointList.push({
                        'name': '',
                        'uuid': ''
                    });
                    while (endpoint.next()) {
                        if (project.indexOf(endpoint.project.sys_id + '') != -1)
                            ans.endpointList.push({
                                'name': endpoint.name + '',
                                'uuid': endpoint.uuid + ''
                            });
                    }
                } else {
                    for (var j in endpointLists) {
                        if (endpoint.get(endpointLists[j])) {
                            ans.endpointList.push({
                                'name': endpoint.name + '',
                                'uuid': endpoint.uuid + ''
                            });
                        }
                    }
                }

            }
            return JSON.stringify(ans);
        } catch (e) {
            this.logger.debug("Nutanix_CatalogFormScripts.fetchMultipleProjectAndEndpointList :- Exception caught during fetching projects and endpoint list. Error :- " + e);
            this.logger.error("Exception caught during fetching projects and profile list. Error :- " + e);
        }
    },
    fetchSelectedEndpointList: function(catSysID) {
        try {
            this.logger.debug("Inside Nutanix_CatalogFormScripts.fetchSelectedEndpointList");
            var gr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
            gr.addQuery('item_name', catSysID);
            gr.query();
            var ans = {};
            if (gr.next()) {
                var runbookSysId = gr.blueprint + '';
                var endpointList = gr.endpoint;
                if (endpointList != '') {
                    var endpointLists = endpointList.split(',');
                }
                ans.projectList = [];
                var projects = gr.multiple_projects;
                var project = projects.split(',');
                var pro = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
                for (var i in project) {
                    if (pro.get(project[i])) {
                        ans.projectList.push({
                            'name': pro.name + '',
                            'uuid': pro.uuid + ''
                        });
                    }
                }
                ans.endpointList = [];
                var endpoint = new GlideRecord('x_nuta2_nutanix_ca_endpoints');
                endpoint.query();
                if (endpointList == '') {
                    ans.endpointList.push("");
                } else {
                    for (var j in endpointLists) {
                        if (endpoint.get(endpointLists[j])) {
                            ans.endpointList.push({
                                'name': endpoint.name + '',
                                'uuid': endpoint.uuid + ''
                            });
                        }
                    }
                }
            }
            return JSON.stringify(ans);
        } catch (e) {
            this.logger.debug("Nutanix_CatalogFormScripts.fetchSelectedEndpointList :- Exception caught during fetching projects and endpoint list. Error :- " + e);
            this.logger.error("Exception caught during fetching projects and profile list. Error :- " + e);
        }
    },
    fetchEndpointAssociatedToProject: function(projectID, selected_endpoint) {
        try {
            this.logger.debug("Inside Nutanix_CatalogFormScripts.fetchEndpointAssociatedToProject");
            //gs.info("Parth1 project id ::" + projectID);
            //gs.info("Parth1 Selected endpoint ::" + selected_endpoint);
            //gs.info("Parth1 Selected endpoint stringify ::" + selected_endpoint);
            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
            gr.addQuery('uuid', projectID);
            gr.query();
            if (gr.next()) {
                var projectSysID = gr.sys_id;
            }
            var ans = {};
            ans.endpointList = [];
            var all_endpoint_associated_to_project = [];
            //gs.info("Parth1 project sys_id ::" + projectSysID);
            var gr = new GlideRecord('x_nuta2_nutanix_ca_endpoints');
            gr.addQuery('project', projectSysID);
            gr.query();
            while (gr.next()) {
                var endpoint = gr.name;
                //gs.info("Parth1 all endpoint ::" + endpoint);
                ans.endpointList.push({
                    'name': gr.name + '',
                    'uuid': gr.uuid + ''
                });
            }
            var parsed_selected_endpoint = JSON.parse(selected_endpoint);
            var last_selected_name = [];
            var last_all_name = [];

            if (parsed_selected_endpoint[0] != "") {
                //gs.info("Parth1 inside common codition");
                selected_endpoint = JSON.parse(selected_endpoint);
                for (var i in selected_endpoint) {
                    last_selected_name.push(selected_endpoint[i].name);
                }
                gs.info("last_selected_name ::" + last_selected_name);

                for (var i in ans.endpointList) {
                    //gs.info("Parth1 endpoints ::" + JSON.stringify(ans.endpointList[i]));
                    last_all_name.push(ans.endpointList[i].name);
                }
                gs.info("last_all_name ::" + last_all_name);
                var common = [];
                for (var i in last_all_name) {
                    var array_util = new global.ArrayUtil();
                    if (array_util.contains(last_selected_name, last_all_name[i])) {
                        common.push(last_all_name[i]);
                    }
                }
                gs.info("common ::" + common);
                var single_endpoint = {};
                single_endpoint.single = [];

                if (common.length != 0) {
                    for (var i = 0; i &lt; common.length; i++) {
                        var gr = new GlideRecord('x_nuta2_nutanix_ca_endpoints');
                        gr.addQuery('name', common[i]);
                        gr.query();
                        while (gr.next()) {
                            var endpoint_uuid = gr.uuid;
                            gs.info("endpoint_uuid ::" + endpoint_uuid);
                            single_endpoint.single.push({
                                'name': gr.name + '',
                                'uuid': gr.uuid + ''
                            });
                        }
                    }
                } else {
                    gs.info("endpointList1 ::" + ans.endpointList);
                    gs.info("endpointList1 ::" + JSON.stringify(ans.endpointList));
                    single_endpoint.single = ans.endpointList;
                }
                gs.info("Final endpointList ::" + single_endpoint);
                gs.info("Final endpointList ::" + JSON.stringify(single_endpoint));
                return JSON.stringify(single_endpoint);
            } else {
                var single_endpoint = {};
                single_endpoint.single = [];
                //gs.info("Hi there Parth");
                //gs.info("ans.endpointList2 ::" + ans.endpointList);
                //gs.info("ans.endpointList2 ::" + JSON.stringify(ans.endpointList));
                single_endpoint.single = ans.endpointList;
                return JSON.stringify(single_endpoint);
            }

        } catch (e) {
            this.logger.debug("Nutanix_CatalogFormScripts.fetchEndpointAssociatedToProject :- Exception caught during fetching projects and endpoint list. Error :- " + e);
            this.logger.error("Exception caught during fetching projects and profile list. Error :- " + e);
        }
    },
    type: 'Nutanix_CatalogFormScripts'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-11-20 06:58:59&lt;/sys_created_on&gt;&lt;sys_id&gt;eb0201073775a300fdfc097973990eda&lt;/sys_id&gt;&lt;sys_mod_count&gt;162&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_CatalogFormScripts&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;protected&lt;/sys_policy&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_eb0201073775a300fdfc097973990eda&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-12-08 12:49:05&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>-896553141</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>54021aa32fd50110e49924c62799b6d4</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb91895370000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table/>
<target_name>Nutanix_CatalogFormScripts</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>53dd076108544110b1e33d4d92d31314</update_guid>
<update_guid_history>53dd076108544110b1e33d4d92d31314:-896553141,b6a40fe57b1441103131e9678a407bbc:1264874765,7646bae53ed041104fad323db54e16d2:501312243,22e57ea5a4d04110e3a81cd9820e706c:-1181926093,6f84f26596d04110276b72aa5aa73a04:506473436,6404ba25c7d04110fdc24c8cbd5a32db:-1651501540,74437a6174d04110d508759f935922aa:615693250,9c92be6127d04110891d16136417b195:2026192221,39258c4dcd90011086cf54ff2712efb3:1123580853,8039a402edc33010b4b8bd9c5be871b1:1187481301,fd29e402f9c33010d5c238ea3579a246:-107860430,8877e4ce9683301058f66e4467d0c385:1187481301,5d9410824a833010b58c7db149b347a6:-123695871,602b3375a2433010c8b5ca8cd85744f2:-364436852,d6cabb35e14330103855726234e84d3f:208919868,056a7b35fb433010c38c867719ff2945:-1158627732,63f97ff13c4330106f7dd545acd651a0:-745694803,3b09bbf1ba43301090435108a8f88aaa:-741156165,c5b87bf1a8433010ca234949705cb26a:85487411,d027b7b151433010232d6cfbb7c630fa:1146988885,d2a6b7b1de433010744223836e0253ab:204169789,fcdea7bdb1033010676ed7aff6450d70:-1247881144,58fb6b3d020330104bbfb1fa9027ac7c:1390630760,c62aefb96503301069291a348815fc07:390343324,e93763b9510330104a83b8843b4997c0:799005530,ef300be57883301075e21541e6f5d340:-946835377,d272faa1c24330103432ed60769e4282:1646323922,1c703a6180433010e6ed3fd64d3392e2:-764912244,1d4416a15303301010a244cd5aa06253:-1046459777,5e935661bb033010ff14787237fdd153:-1671313889,4ee43e1975473010a446919751db127c:1132939491,ce54f2199c473010e6a30b2871b01556:-198509466,a3837ed54f473010379a3bca9a0814ce:-2048789470,1c02fa95fa4730106f80b2908634f037:-1594501618,b311ba95d147301024096a0393adbba4:1119204150,6f6c6215564730104376197ae99b9732:-1855568515,6eaa22d1b74730101f0c27d3626810c5:1070961698,71a9aa5108473010280d596f18e71b1b:377136284,8c96eedd8e073010358ce967988476fd:206316553,6885221188473010b976b29a505160fb:2073872037,a815e2ddf30730105745ace5bf5b5dc5:-1235938185,5413ea5d06073010323cb64a687f1b59:-1722815537,58a1aa5d5e073010575be988968beba6:-388413706,cc61a25d720730108ed652a8df864752:1826450134,cba0621d49073010447f5d39da907baf:998761685,eb2f5ed96c07301035690bb0f8c59ef1:1137791812,cabe92d9010730101d2bff4df50029c8:277634381,9ebd12d9880730106e5041036b944c17:-775915008,01ec5e5927073010384f5ac98f692ba3:-447586150,ba1b1659aa073010dadaad0854436dbd:-1722600403,a88756d57f073010f2c00f2d4b8ba299:375152352,681792d5000730107c132fe3ba13ac56:10402453,d8035e155e073010219696994380f3fe:2131517962,3352d615fd073010f78e178b6d9ff94b:1664144455,3ece8e51c20730107cfbcfc4a927bba4:-2054291919,ec5ec6519e073010d9b90da7ef1cd265:-91188302,392d421187073010d6590e35c83317fe:2054324933,e9ec4211df0730101b9e877adfddc934:1180410490,d4ab0edd40c330108a88f239bf08aeec:1230449795,2f4a42ddf7c33010032b3182fa79b50a:-288998999,71df29196f433010cb60fd3b7ccf2f91:-1396924233,00afa119f3433010d51311b8322af2b0:-246761018,1a1fa1d5a9433010ce320b557dd77326:-687713861,5efd61d53a433010bed2babc9390f4a4:352319451,746ce195874330107129ba06d2b7e4b1:301335362,b20ced557043301063011907522095e5:-1163405617,b1466d510143301048b145b104094948:1676720069,d065a1519a4330101e3fb9445c0baad4:-191954251,f7d46151344330107e1e6979daec73e8:-2017603245,66646d119543301085d4945e1ca4a7d8:1005833173,bff2eddd1f0330104b0e49d85036611e:1447432160,7c9c1d99c8033010c6605b865fa71051:396781077,497c1dd9240330106e448624df5d8e85:-229240913,c22c5999af03301025e76757e1a6ca27:-1961464641,6c6bbf45383ef010a58f130909da6007:2095028194,a8337a05f7b6f0104ed97dfd9661c801:468160862,f78032819cb6f010032ee36e5d794810:-207351729,0e7fa6cd2476f010431f94ade1a3a58e:1964301743,f00962ee206670109acccdbd1a8d11e1:1874601762,7d80096e532270101aab243ae87c3720:1158520444,2effb82ebb2270106462b4260c67bad4:-1073091073,d65f782e582270108d4b8e630ab74e4f:-904840278,f5ddb8aaeb227010f847c12f9e92e4f7:-646435044,8ecc78aa13227010fe618dbe70f0410c:1051846002,6771759c92a2701081ca5e6acc981f51:-91842813,54e0791c32a27010bde4f0c7937d642a:-532147363,be9fa9d889a27010240efb156016ed30:-958521768,ac2cf480902630103d5587868c8aeae6:843730453,8779f4cc93e2301082a09e907860b396:1773330961,751974cc41e230109a4dc53b553c6c63:-296044244,279d1c3bf31e3010c27296b96d5f60b9:-484192771,8215cc733cda301058916eea84eabee6:-1483582082,b9a83ba7f39a3010c65d8f1120f6d0a1:186198845,e208bb671e9a3010fc84bde21bbc51fe:1578770071,dff1bfaf135a3010596eac8459bd5bd0:-972969112,201ea7ebb95a3010419c5f363426f5ba:-1541962273,51bdefab735a3010961f8583c77927cc:-861624718,a2e82367785a3010541095ba24e614d3:1227271087,e522a3239a5a3010b30fe76b445c1a40:-861624718,d1fc9beb141a301081f3760971f2c800:-1771970918,047c53ebc11a3010fd4be5a2dddbb94b:-107135032,ec479a73870a30100d2b875c4d9be702:-1368994013,15509a97406c7450c2b89b4c646c9566:2074489529,cd634a130de8745071c35d63ab3d150e:-1704875748,c7d6add7c66874502b1169b7303a3091:-2082517453,da04add340687450625650e59ef83882:-1709852938,631e59d364e07450592096c2a57ff4bd:-1177533576,3203ab42ab412c50a9a335be98f15261:1407777480,135cc4cd9204a010e25fe1912b85a73e:-1813562865,ec37f8551b561410e2583b3d98574954:905411811,b0c0fb8ec5b77300d19be98ab54b193e:-999251320,a05baf9ce6973300b20fdc7fddb0c007:-552489831,f568671cf797330099f089a29eb83889:76310828,fb442b94bc973300d6848d050219b714:-355156944,c9c3eb94f2973300989f5baa72a2665a:-377897469,99232b1440973300c3c6e3bec635144f:-306376084,35e1e7d0df9733007cfd36c686fc6065:-1477127476,5e60110c035d3300cbb1d6ebcd5659ef:436289256,d0cec9880f5d3300658465b99792454f:201825225,5647cd5125c53300ca843cde4e0f6f9e:156136167,73c285d5e085330067bad3b9dda09596:-1252833340,4b32c195fa8533006652f0e6ae57d273:927072954,7ed14d55858533003fdcf34a3d33f388:-1195742905,b4d0895528853300ba60be8f17befaa8:1910426473,3da2cb0f2cf43300f1100d77f4efbe6d:877351541,6c09be8b33f43300549efa91e4d7cae6:-2032736725,64a8b20f82f43300b83dfa0bd67eb897:-607805851,a36872cb9cf433007d729d96fd8c3417:1533122211,a4a7320f3cf433006e99506ee7630447:1385279048,2d67fa8b0ef43300df662e66c60dce1e:-1545288925,e0e42d118bbc330015e159b54a22deda:1005886519,91e8423285f223008010316fd687fd7e:232774686,9cc88a7e9fb223005f67bc0f96ca4b4b:-1876066574,3e504efabdb22300922f386cf941d1c2:-1751129580,b0400afa52b2230025a91cb6bd9b5d92:-497889261,df008afa46b2230012959ff40299af43:47140497,5adff9fa23b2230037a50ab92b71208f:159904144,614f35fa8fb223008b06d105e563446d:-1721134862,5b8d7d7a7fb22300dbf82bf6e1f7948e:-2145018029,b75d7d7ae1b22300e3e6aa2310dcfcf0:-374038248,f7baf132bcb2230034a9aa6c92d5736c:-403878985,d2e3f57eaa722300844eabc697f227ed:1003340183,7281b9beb2722300fb9c694dcc1d0e12:1869128132,3797fd37874e2300cbcffc880260f02b:-350586866,ab4e98e93d0623005a4e2457610815ed:2004163924,6e92b791cdc22300e3f1b686dde8f707:850947648,8418dd01b8866b009f35d10855947d74:-467456267,cd069d8d05466b00c5b25eca6b47b958:1642131042,fea59d8ded466b005dc7f306ce346705:-812238363,4075598de7466b00709e57bd723b398b:-1878484485,584059893f466b006727decbfb904160:-847468102,1d8fc58943466b0088cdb60899b43135:513559764,fe30f081c1066b00999ed2d024374e1c:-1126858130,6e9ed018e24ea700640dacbc7669086b:-1739055078,d00d7c937731e30063fc27010e7c0c18:-1210779104,3a501d8f6075a300e6ab8b924800813c:2056691745,1930dd8f2275a3004fa3bc271a205f85:1465355950,23cf018f3975a300ea4bbd6a212cebf6:2127596206,18ee054faf75a300bf699b347dd7f808:-1576035295,1cb8c90bd875a300aeaa8e1c09558910:1363589786,c5e78d0b4375a3002a65c6bb31da776d:1501741722,1b8709c70375a300c2d4da85fe38a25f:-915414740,65a2c9079375a300f2c2658cb1aed596:458013687</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_dictionary_x_nuta2_nutanix_ca_generic_table_for_dropdown_name</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update&gt;&lt;sys_dictionary action="INSERT_OR_UPDATE" element="name" table="x_nuta2_nutanix_ca_generic_table_for_dropdown"&gt;&lt;active&gt;true&lt;/active&gt;&lt;array&gt;false&lt;/array&gt;&lt;array_denormalized&gt;false&lt;/array_denormalized&gt;&lt;attributes/&gt;&lt;audit&gt;false&lt;/audit&gt;&lt;calculation&gt;&lt;![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]&gt;&lt;/calculation&gt;&lt;choice/&gt;&lt;choice_field/&gt;&lt;choice_table/&gt;&lt;column_label&gt;Name&lt;/column_label&gt;&lt;comments/&gt;&lt;create_roles/&gt;&lt;default_value/&gt;&lt;defaultsort/&gt;&lt;delete_roles/&gt;&lt;dependent/&gt;&lt;dependent_on_field/&gt;&lt;display&gt;true&lt;/display&gt;&lt;dynamic_creation&gt;false&lt;/dynamic_creation&gt;&lt;dynamic_creation_script/&gt;&lt;dynamic_default_value/&gt;&lt;dynamic_ref_qual/&gt;&lt;element&gt;name&lt;/element&gt;&lt;element_reference&gt;false&lt;/element_reference&gt;&lt;foreign_database/&gt;&lt;function_definition/&gt;&lt;function_field&gt;false&lt;/function_field&gt;&lt;internal_type display_value="String"&gt;string&lt;/internal_type&gt;&lt;mandatory&gt;false&lt;/mandatory&gt;&lt;max_length&gt;200&lt;/max_length&gt;&lt;name&gt;x_nuta2_nutanix_ca_generic_table_for_dropdown&lt;/name&gt;&lt;next_element/&gt;&lt;primary&gt;false&lt;/primary&gt;&lt;read_only&gt;false&lt;/read_only&gt;&lt;read_roles/&gt;&lt;reference/&gt;&lt;reference_cascade_rule/&gt;&lt;reference_floats&gt;false&lt;/reference_floats&gt;&lt;reference_key/&gt;&lt;reference_qual/&gt;&lt;reference_qual_condition/&gt;&lt;reference_type/&gt;&lt;sizeclass/&gt;&lt;spell_check&gt;false&lt;/spell_check&gt;&lt;staged&gt;false&lt;/staged&gt;&lt;sys_class_name&gt;sys_dictionary&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2019-07-23 10:39:25&lt;/sys_created_on&gt;&lt;sys_id&gt;8cd163b54fb23300d8494ebf9310c732&lt;/sys_id&gt;&lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;&lt;sys_name&gt;Name&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_dictionary_x_nuta2_nutanix_ca_generic_table_for_dropdown_name&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2022-01-24 12:20:04&lt;/sys_updated_on&gt;&lt;table_reference&gt;false&lt;/table_reference&gt;&lt;text_index&gt;false&lt;/text_index&gt;&lt;unique&gt;false&lt;/unique&gt;&lt;use_dependent_field&gt;false&lt;/use_dependent_field&gt;&lt;use_dynamic_default&gt;false&lt;/use_dynamic_default&gt;&lt;use_reference_qualifier&gt;simple&lt;/use_reference_qualifier&gt;&lt;virtual&gt;false&lt;/virtual&gt;&lt;widget/&gt;&lt;write_roles/&gt;&lt;xml_view&gt;false&lt;/xml_view&gt;&lt;/sys_dictionary&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1822391314</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>58021aa32fd50110e49924c62799b6d0</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb91c1ff30000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table>x_nuta2_nutanix_ca_generic_table_for_dropdown</table>
<target_name>Generic Table for Dropdown.Name</target_name>
<type>Dictionary</type>
<update_domain>global</update_domain>
<update_guid>6cf945788c59c1103ba069df6f1d60df</update_guid>
<update_guid_history>6cf945788c59c1103ba069df6f1d60df:-1822391314,7d64c8702a15c1109ee915f3ee7718f1:1595281024,732c92f3fe47770051034d8389c9e3dc:492543356,1f922bb588b233002cf61764efe2ed96:-242516955</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_92e8017f37112300fdfc097973990e33</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Nutanix_FetchConfigureSettingDropdown&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Nutanix_FetchConfigureSettingDropdown&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Nutanix_FetchConfigureSettingDropdown = Class.create();
Nutanix_FetchConfigureSettingDropdown.prototype = {
    initialize: function() {
        this.appUtil = new Nutanix_Calm_Utils();
        this.logger = new Nutanix_Calm_Logger();

        this.disabledFields = gs.getProperty('x_nuta2_nutanix_ca.disabled.fields') + '';
    },
    _insertIntoOptions: function(var_json) {
        try {

            var sys_id = var_json.sys_id + "";
            var grQuestionChoice = new GlideRecord("x_nuta2_nutanix_ca_generic_table_for_dropdown");
            grQuestionChoice.addQuery('variable', sys_id + "");
            grQuestionChoice.query();
            grQuestionChoice.deleteMultiple();

            for (var i = 0; i &lt; var_json.options.length; i++) {
                var grQuestionChoice = new GlideRecord("x_nuta2_nutanix_ca_generic_table_for_dropdown");
                grQuestionChoice.initialize();
                grQuestionChoice.variable = sys_id + "";
                grQuestionChoice.name = var_json.options[i] + "";
                grQuestionChoice.value = var_json.options[i] + "";
                grQuestionChoice.insert();
            }
        } catch (e) {
            gs.info("In _insertIntoOptions:" + e);
        }
    },

    _sysIdToValue: function(values) {
        var sys_id_arr = values.split(",");
        var val_arr = [];
        for (var i = 0; i &lt; sys_id_arr.length; i++) {
            var grQuestionChoice = new GlideRecord("x_nuta2_nutanix_ca_generic_table_for_dropdown");
            grQuestionChoice.get(sys_id_arr[i] + "");
            val_arr.push(grQuestionChoice.value + "");
        }
        return val_arr.toString();
    },

    variableArrayParser: function(type, parent_uuid, var_array, field, profile_name, env_uuid) {
        //this.logger.debug("++++variableArrayParser type" + type + " parent_uuid," + parent_uuid + " var_array" + var_array);	
        try {
            this.logger.debug("Inside Nutanix_ClientServerScriptBridge.variableArrayParser." + profile_name + env_uuid);
            if (field != "onLoad") {
                var grItem = new GlideRecord("item_option_new");
                field = field.replace("IO:", "");
                grItem.get(field);
                field = grItem.name + "";
            }
            var cat_launch = false;
            if (type + "" == 'catalog') {
                cat_launch = true;
                var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
                gr.addQuery("item_name", parent_uuid);
                gr.query();
                if (gr.next()) {
                    parent_uuid = gr.blueprint.uuid + "";
                    type = "blueprints";
                    if ("" + gr.item_name.category.title == "Blueprint") {
                        type = "blueprints";
                    }
                    if ("" + gr.item_name.category.title == "Marketplace Blueprint") {
                        type = "published";
                    }
                    if ("" + gr.item_name.category.title == "Marketplace Runbook" || "" + gr.item_name.category.title == "Runbook") {
                        type = "runbooks";
                    }
                }
            }
            //gs.info("Var array"+var_array);	
            var parsed_var_array = JSON.parse(var_array);
            var pre_map = {};
            var extApiFlag = false;
            var str = [];
            for (var i = 0; i &lt; parsed_var_array.length; i++) {
                var var_data = parsed_var_array[i];
                var hasMacros = (this.appUtil._createMacroArray(var_data.def_val + "").length != 0);
                if (hasMacros)
                    var_data.value = var_data.def_val;
                var depends_on = this.appUtil.getMacroDependencies(JSON.stringify(var_data));
                if (field != "onLoad") {
                    if (depends_on.all_dep.indexOf(field) != -1) {
                        str.push(var_data.name);
                    }
                }
                //Amit Kolkar	
                //if (hasMacros == true) {	
                pre_map[var_data.name] = {
                    "depends_on": depends_on,
                    "value": (hasMacros) ? var_data.def_val + "" : var_data.value + "",
                    "uuid": var_data.uuid,
                    "type": var_data.type,
                    "data_type": var_data.data_type,
                    "name": var_data.name,
                    "sys_id": (var_data.sys_id) ? var_data.sys_id : "",
                    "catalog_launch": cat_launch
                };
                if (var_data.type == 'EXEC_LOCAL' || var_data.type == 'HTTP_LOCAL' || var_data.type == 'EXEC_SECRET' || var_data.type == 'HTTP_SECRET') {
                    pre_map[var_data.name].requiresApiCall = true;
                } else {
                    if (var_data.options &amp;&amp; var_data.options.choices &amp;&amp; var_data.options.choices.length != 0) {
                        pre_map[var_data.name].options = var_data.options.choices;
                        pre_map[var_data.name].data_type = "LIST_SINGLE";
                    }
                    if (var_data.data_type + "" == 'LIST') {
                        if (cat_launch)
                            pre_map[var_data.name].value = this._sysIdToValue(var_data.value);
                        pre_map[var_data.name].data_type = var_data.data_type;
                    }
                }
                //}	
            }
            gs.info("Pre Map" + JSON.stringify(pre_map));
            //this.logger.debug("====variableArrayParser type" + type + " parent_uuid," + parent_uuid + " var_array" + var_array);	
            //var result = this.getHttpValues(type, parent_uuid, JSON.stringify(pre_map), str);
            var result = this.getHttpValues(type, parent_uuid, JSON.stringify(pre_map), str, profile_name, '', env_uuid);
            return result;
        } catch (e) {
            this.logger.error("Exception caught Inside Nutanix_ClientServerScriptBridge.variableArrayParser . Error : - " + e);
        }
    },

    fetchLaunchVars: function(catSysId, profile) {

        var varJSON = {
            "profile": {},
            "service": {}
        };
        var grProfile = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
        grProfile.addQuery('application_profile.name', profile + "");
        grProfile.addQuery('catalog_item', catSysId + "");
        grProfile.addQuery('isprofilevariable', true);
        grProfile.orderBy('variable.name');
        grProfile.query();
        while (grProfile.next())
            varJSON.profile[grProfile.variable.sys_id + ""] = grProfile.field_json + "";
        var grService = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
        grService.addQuery('catalog_item', catSysId);
        grService.addQuery('isservicevariable', true);
        grService.orderBy('variable.name');
        grService.query();
        while (grService.next()) {
            varJSON.service[grService.service_name.question_text + ""] = {};
        }

        grService.query();
        while (grService.next()) {
            varJSON.service[grService.service_name.question_text + ""][grService.variable.sys_id + ""] = grService.field_json + "";
        }

        //[grService.sys_id] = {"field_json": grService.field_json + ""};
        //varJSON["service"][grService.service_name] = {"sys_id": grService.sys_id, "field_json": grService.field_json};
        return JSON.stringify(varJSON);
    },

    fieldValidation: function(catSysId, fieldValueMap) {
        try {
            this.logger.debug("Inside Nutanix_ClientServerScriptBridge.fieldValidation.");
            var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
            gr.addEncodedQuery('catalog_item=' + catSysId + '^isprofilevariable=true^ORisservicevariable=true^ORfield_regexISNOTEMPTY');
            gr.query();

            var fieldValReg = {};
            while (gr.next()) {

                var listRegex = {};
                if (gr.type + '' == 21) {
                    var filter = (gr.variable.reference_qual + '').substr(9, (gr.variable.reference_qual + '').length);
                    var genTable = new GlideRecord('x_nuta2_nutanix_ca_generic_table_for_dropdown');
                    genTable.addQuery('variable', filter);
                    genTable.query();
                    while (genTable.next()) {
                        listRegex[genTable.sys_id + ''] = genTable.value + '';
                    }


                }
                fieldValReg[gr.variable.name + ''] = {
                    "status": false,
                    "regex": gr.field_regex + '',
                    "type": gr.type + '',
                    "data_type": gr.data_type + '',
                    "listRegex": listRegex
                };
            }
            return JSON.stringify(fieldValReg);

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fieldValidation. Error:- " + e);
        }

    },


    hideAccessLocalGroupOption: function() //hide the option
    {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.hideAccessLocalGroupOption.");

            var lg = new GlideRecord('x_nuta2_nutanix_ca_calm_plugin_configuration');
            lg.addQuery();
            lg.query();
            while (lg.next()) {
                return lg.use_local_groups;

            }
        } catch (e) {
            this.logger.error("Error caught in Nutanix_FetchConfigureSettingDropdown.hideAccessLocalGroupOption:" + e);
        }
    },

    supportStatusMPI: function(bpSysID) {
        try {
            //             gs.info(bpSysID);
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.supportStatusMPI.");
            var ss = new GlideRecord('x_nuta2_nutanix_ca_nutanix_marketplaceitems');
            if (ss.get(bpSysID)) {
                return ss.support_status;
            }
        } catch (e) {
            this.logger.error("Error caught in Nutanix_FetchConfigureSettingDropdown.supportStatusMPI: " + e);
        }
    },

    advanceVariableDynamicOptions: function(catSysId, fieldValueMap) {
        try {

            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.advanceVariableDynamicOptions.");
            /*var launch_set_json = {};
            var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties+'');
            gr.addEncodedQuery('catalog_item='+catSysId+'^isprofilevariable=true^ORisservicevariable=true');//^data_typeINEXEC_SECRET,HTTP_SECRET,EXEC_LOCAL,HTTP_LOCAL');

            gr.query();


            var catalog =  new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
            catalog.addQuery('item_name',catSysId);
            catalog.query();

            var profile_json = {};
            var service_json = {};
            while(gr.next()) {
            	var type = gr.data_type + "";
            	var requires_api_call = false;

            	if(type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET')
            		requires_api_call = true;

            	if(gr.isprofilevariable + "" == "true") {
            		profile_json[gr.variable.question_text + ""] = {
            			"sys_id" : gr.sys_id+'',
            			"value" : gr.default_value + "",
            			"depends_on" : JSON.parse(gr.field_json + ""),
            			"uuid": gr.uuid + "",
            			"type": type,
            			"requiresApiCall": requires_api_call,
            			"name": gr.variable.name+'',
            			"question_text": gr.variable.question_text+''
            		};

            	}
            	if(gr.isservicevariable + "" == "true") {
            		service_json[gr.variable.question_text+''] = {
            			"sys_id" : gr.sys_id+'',
            			"value" : gr.default_value + "",
            			"depends_on" : JSON.parse(gr.field_json + ""),
            			"uuid": gr.uuid + "",
            			"type": type,
            			"requiresApiCall": requires_api_call,
            			"name": gr.variable.name+'',
            			"question_text": gr.variable.question_text+''
            		};
            	}
            }
            launch_set_json = {"profile_json": profile_json, "service_json": service_json};
            gs.info("Launch Page:"+JSON.stringify(launch_set_json));

            launch_set_json.profile_json = JSON.parse(this.getHttpValues('blueprints', catalog.blueprint.uuid + "" , JSON.stringify(launch_set_json.profile_json)));
            launch_set_json.service_json = JSON.parse(this.getHttpValues('blueprints', catalog.blueprint.uuid + "" , JSON.stringify(launch_set_json.service_json)));

            gs.info("Result:"+JSON.stringify(launch_set_json));
            return;*/
            var advanceFields = [];
            advanceFields[0] = {};
            advanceFields[1] = JSON.parse(this.fieldValidation(catSysId));
            return JSON.stringify(advanceFields);

        } catch (e) {
            this.logger.error("Error caught in Nutanix_FetchConfigureSettingDropdown.advanceVariableDynamicOptions:" + e);
        }
    },

    _substituteMacroEscript: function(value, all_values) {

        var macro_split = value.split("@@{");
        for (var i = 0; i &lt; macro_split.length; i++) {
            if (macro_split[i].includes("}@@")) { //@@{Prince}@@
                var internal_split = macro_split[i].split("}@@");
                if (!all_values[internal_split[0]])
                    return '';
                internal_split[0] = (all_values[internal_split[0]].value + "").replace(/\n/g, "");
                macro_split[i] = internal_split.join('');
            }
        }
        return macro_split.join('');
    },

    _substituteMacro: function(value, all_values) {

        var macro_split = value.split("@@{");
        for (var i = 0; i &lt; macro_split.length; i++) {
            if (macro_split[i].includes("}@@")) { //@@{Prince}@@
                var internal_split = macro_split[i].split("}@@");
                if (!all_values[internal_split[0]])
                    return '';

                //code changes by Prince ...
                // 				if((all_values[internal_split[0]].value).contains("\n")){
                // 					var res =  all_values[internal_split[0]].split("\n");
                // 					internal_split[0] = res.join();
                // 				}else{
                internal_split[0] = unescape(all_values[internal_split[0]].value + "");
                //}
                macro_split[i] = (internal_split.join('')).replace(/\n/g, "");
            }
        }

        return macro_split.join('');
    },

    _createOverrideVarBody: function(all_values, variable_json) {

        try {
            var type = variable_json.type + "";
            var override_array = [];

            if (type == "EXEC_LOCAL" || type == "EXEC_SECRET") {
                override_array.push({
                    "key": "script",
                    "value": this._substituteMacroEscript(variable_json.depends_on.script.value, all_values)
                });
            }

            if (type == "HTTP_LOCAL" || type == "HTTP_SECRET") {
                var supported_fields = {
                    "content_type": "",
                    "url": "",
                    "request_body": "",
                    "response_paths": ""
                };
                for (var i in supported_fields) {

                    var val = (variable_json.depends_on[i].value) ? variable_json.depends_on[i].value + "" : "";

                    if (i == "response_paths") {
                        val = (variable_json.depends_on[i].value) ? variable_json.depends_on[i].value : {};
                        var var_name = {};
                        for (var k in val)
                            var_name[k] = this._substituteMacro(val[k] + "", all_values);
                        override_array.push({
                            "key": i,
                            "value": var_name
                        });
                    } else {
                        override_array.push({
                            "key": i,
                            "value": this._substituteMacro(val, all_values)
                        });
                    }
                }

            }

            return JSON.stringify(override_array);
        } catch (e) {
            gs.info("override_array er" + e);
        }
    },

    getHttpValues: function(type, parent_uuid, pre_map, str, profile_sysid, env_profile, env_sysid) {
        try {

            gs.info("Pre Value Map :: " + JSON.stringify(pre_map));
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getHttpValues. type : " + type + " parent_uuid : " + parent_uuid + " pre_map : " + pre_map);
            if (type == 'runbook') {
                type = 'runbooks';
                var unpub_runbook = new GlideRecord('x_nuta2_nutanix_ca_runbooks');
                if (unpub_runbook.get(parent_uuid)) {
                    parent_uuid = unpub_runbook.uuid + '';
                }
            }
            if (type == 'published_runbook') {
                type = 'runbooks';
                var pub_runbook = new GlideRecord('x_nuta2_nutanix_ca_nutanix_marketplaceitems');
                if (pub_runbook.get(parent_uuid)) {
                    parent_uuid = pub_runbook.uuid + '';
                }
            }

            var post_value_map = {};
            pre_map = JSON.parse(pre_map);
            var top_pre_map = {};
            for (var i in pre_map) {
                top_pre_map[i] = this.appUtil.createPreMap(pre_map[i].depends_on, pre_map[i].type);
            }

            var top_post_map = this.appUtil.createDependencyMap(top_pre_map);
            var dependency_array = top_post_map.Dep_array;
            var error_array = top_post_map.error_map;
            var mpi_uuid, bp_name, project_uuid, environment_uuid;

            if (type == 'unpublished') {
                var table_name = (type == 'unpublished') ? this.appUtil.configuration.table.Blueprint + '' : 'x_nuta2_nutanix_ca_nutanix_marketplaceitems';
                var grBlueprint = new GlideRecord(table_name);
                if (grBlueprint.get(parent_uuid)) {
                    parent_uuid = grBlueprint.uuid + '';
                    type = 'blueprints';
                }
            }
            if (type == 'published') {

                var table_name = (type == 'unpublished') ? this.appUtil.configuration.table.Blueprint + '' : 'x_nuta2_nutanix_ca_nutanix_marketplaceitems';
                var grBlueprint = new GlideRecord(table_name);
                if (grBlueprint.get(parent_uuid)) {
                    mpi_uuid = grBlueprint.uuid + '';
                    bp_name = grBlueprint.name;
                    if (grBlueprint.bp_type == 'runbook')
                        type = 'runbooks';
                    else
                        type = 'blueprints';


                    var bp_project = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_projects_blueprints_relationship');
                    bp_project.addEncodedQuery('catalog_item.sys_id=' + parent_uuid);
                    bp_project.query();
                    while (bp_project.next()) {
                        project_uuid = bp_project.projects.uuid;
                        environment_uuid = bp_project.projects.environment_uuid;
                    }
                    parent_uuid = this.mpiPatchingBp(mpi_uuid, bp_name, project_uuid, environment_uuid, profile_sysid, env_profile, env_sysid);
                    //parent_uuid = mpi_uuid;
                    gs.info('mpiPatchingBp parent_uuid:: ' + parent_uuid);

                } else {
                    var grBlueprint = new GlideRecord(table_name);
                    grBlueprint.addEncodedQuery('uuidLIKE' + parent_uuid);
                    grBlueprint.query();
                    if (grBlueprint.next()) {
                        mpi_uuid = grBlueprint.uuid + '';
                        bp_name = grBlueprint.name;
                        var bp_project = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_projects_blueprints_relationship');
                        bp_project.addEncodedQuery('catalog_item.sys_id=' + grBlueprint.sys_id);
                        bp_project.query();
                        while (bp_project.next()) {
                            project_uuid = bp_project.projects.uuid;
                            environment_uuid = bp_project.projects.environment_uuid;
                        }
                        parent_uuid = this.mpiPatchingBp(mpi_uuid, bp_name, project_uuid, environment_uuid, profile_sysid, env_profile, env_sysid);
                        //parent_uuid = mpi_uuid;
                        type = 'blueprints';
                        gs.info('mpiPatchingBp parent_uuid:: ' + parent_uuid);

                    }
                }
            }


            for (var pos = 0; pos &lt; dependency_array.length; pos++) {

                var var_json = pre_map[dependency_array[pos]];
                this.logger.debug("!!!!! var_json \n" + JSON.stringify(var_json));
                if (!var_json) {
                    this.logger.error('Dependent variable "' + dependency_array[pos] + '" not found.');
                    continue;
                }


                if (!var_json.requiresApiCall) {
                    if (var_json.data_type + "" == "LIST_SINGLE" || var_json.data_type + "" == 'LIST') {
                        var_json.options = this._substituteMacro(var_json.options.toString(), pre_map).split(',');
                        var_json.value = this._substituteMacro(var_json.value, pre_map); //2,33,44
                    } else
                        var_json.value = this._substituteMacro(var_json.value, pre_map);

                    if (var_json.depends_on.all_dep.length != 0 &amp;&amp; var_json.data_type + "" == "LIST" &amp;&amp; var_json.catalog_launch) {
                        this._insertIntoOptions(var_json);
                    }
                    if (str.length == 0 || ((str.length &gt; 0 &amp;&amp; str.indexOf(var_json.name) != -1) &amp;&amp; var_json.depends_on.all_dep.length != 0))
                        post_value_map[dependency_array[pos]] = var_json;
                    continue;
                }
                //	if(!var_json.value){
                if (str.length == 0 || (str.length &gt; 0 &amp;&amp; str.indexOf(var_json.name) != -1)) {
                    var var_uuid = var_json.uuid;

                    var options = {
                        "state": "",
                        "values": []
                    };

                    var request_body = JSON.stringify({
                        "requestId": "",
                        "overridden_field": this._createOverrideVarBody(pre_map, var_json)
                    });

                    var sendValuesBody = this.appUtil.makeCalmApiCall('POST', '/' + type + '/' + parent_uuid + '/variables/' + var_uuid + '/values', request_body + "");

                    if (!sendValuesBody) {
                        continue;
                    }
                    var parsedSendValueBody = JSON.parse(sendValuesBody.getBody());
                    var valPollBody = {
                        "requestId": parsedSendValueBody.request_id,
                        "trlId": parsedSendValueBody.trl_id
                    };

                    var getValuesBody = this.appUtil.makeCalmApiCall('POST', '/' + type + '/' + parent_uuid + '/variables/' + var_uuid + '/values', JSON.stringify(valPollBody));


                    if (!getValuesBody) {

                        continue;
                    }
                    var parsedValueBody = JSON.parse(getValuesBody.getBody());
                    var execState = parsedValueBody.state + "";


                    while (execState == 'RUNNING' || execState == 'running') {

                        getValuesBody = this.appUtil.makeCalmApiCall('POST', '/' + type + '/' + parent_uuid + '/variables/' + var_uuid + '/values', JSON.stringify(valPollBody));

                        parsedValueBody = JSON.parse(getValuesBody.getBody());
                        execState = parsedValueBody.state + "";
                    }

                    gs.info('API Parameters ::Type: ' + type + ' parent_uuid: ' + parent_uuid + ' var_uuid: ' + var_uuid);

                    if (parsedValueBody.state == 'SUCCESS') {
                        var_json.state = parsedValueBody.state;
                        var_json.default_value = var_json.value + "";
                        var_json.value = [];
                        for (var i in parsedValueBody.values)
                            var_json.value[i] = parsedValueBody.values[i];
                    } else {

                        var_json.state = parsedValueBody.state;

                        var_json.error = [];
                        for (var j in parsedValueBody.message_list)
                            var_json.error[j] = parsedValueBody.message_list[j].message;
                    }

                    //if(str.length == 0 || ( str.length &gt; 0  &amp;&amp; str.indexOf(var_json.name) != -1))
                    post_value_map[dependency_array[pos]] = var_json;
                }
            }

            gs.info("Post Value Map :: " + JSON.stringify(post_value_map));
            return JSON.stringify(post_value_map);

        } catch (e) {
            this.logger.error("Error caught in Nutanix_FetchConfigureSettingDropdown.getHttpValues:" + e);
        }
    },



    getSubnet: function(catalog) {
        try {
            var clusterJson = {};
            var catalogSysid;
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getSubnet");
            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
            gr.addQuery('item_name', catalog);
            gr.query();
            if (gr.next()) {
                var grProject = new GlideRecord(this.appUtil.configuration.table.Project + '');
                grProject.addQuery('sys_id', gr.project + '');
                grProject.query();
                if (grProject.next()) {
                    if (grProject.subnet + '' != '') {
                        var subnetList = grProject.subnet.split(',');
                        for (var x in subnetList) {
                            var grSubnet = new GlideRecord(this.appUtil.configuration.table.subnet + '');
                            grSubnet.addQuery('sys_id', subnetList[x]);
                            grSubnet.query();
                            if (grSubnet.next()) {
                                if (!clusterJson[grSubnet.cluster_name + '']) {
                                    clusterJson[grSubnet.cluster_name + ''] = {};
                                    clusterJson[grSubnet.cluster_name + '']['uuid'] = grSubnet.cluster_uuid + '';
                                    clusterJson[grSubnet.cluster_name + '']['subnet'] = {};
                                }

                                clusterJson[grSubnet.cluster_name + '']['subnet'][grSubnet.uuid + ''] = grSubnet.name + '';
                            }

                        }
                    }
                }

            }
            /*setting session*/
            var grCat = new GlideRecord('x_nuta2_nutanix_ca_nutanix_catalog_items');
            grCat.addQuery('sys_id', catalog);
            grCat.query();
            if (grCat.next()) {
                var gr = new GlideRecord('item_option_new');
                gr.addQuery('cat_item.name', grCat.name + '');
                gr.query();
                var catalog_clusterJSON = {};
                while (gr.next()) {
                    if ((gr.name + '').endsWith('cluster_name') &amp;&amp; gr.question_text == 'Cluster Name') {
                        catalog_clusterJSON[gr.sys_id + ''] = {};
                        catalog_clusterJSON[gr.sys_id + '']['name'] = gr.name + '';
                        catalog_clusterJSON[gr.sys_id + '']['label'] = gr.question_text + '';
                        catalog_clusterJSON[gr.sys_id + '']['value'] = gr.default_value + '';
                    }
                }

                for (var k in catalog_clusterJSON) {
                    var serviceName = (catalog_clusterJSON[k].name + '').slice(0, (catalog_clusterJSON[k].name).length - 12);
                    catalog_clusterJSON[k]['nics'] = {};
                    var gr = new GlideRecord('item_option_new');
                    gr.addQuery('cat_item.name', grCat.name + '');
                    gr.query();
                    while (gr.next()) {
                        if ((gr.name + '').indexOf(serviceName) != -1 &amp;&amp; (gr.name + '').indexOf('_nic_') != -1) {
                            catalog_clusterJSON[k]['nics'][gr.sys_id + ''] = gr.name + '';
                        }
                    }
                }
            }

            /**/


            var catNicJson = {
                "catalog_data": catalog_clusterJSON,
                "cluster_info": clusterJson
            };
            return (JSON.stringify(catNicJson));

        } catch (e) {
            this.logger.error("Inside Nutanix_FetchConfigureSettingDropdown.getSubnet." + e);
        }
    },

    getNutanixSubnetList: function(projects) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getNutanixSubnetList.");
            var subnetListJSON = {};
            var project_array = projects.split(',');
            var project_subnet = [];
            for (var i = 0; i &lt; project_array.length; i++) {
                var projectSubnet = new GlideRecord(this.appUtil.configuration.table.Project);
                if (projectSubnet.get(project_array[i] + '')) {
                    if (projectSubnet.subnet != '') {
                        var subnetList = projectSubnet.subnet.split(',');
                        for (var k in subnetList) {
                            if ((project_subnet.indexOf(subnetList[k])) == -1)
                                project_subnet.push(subnetList[k]);
                        }
                    }
                }
            }

            for (var j in project_subnet) {
                var subnetListGR = new GlideRecord(this.appUtil.configuration.table.subnet);
                subnetListGR.addQuery('sys_id', subnetList[j] + '');
                subnetListGR.query();
                if (subnetListGR.next()) {
                    subnetListJSON[subnetListGR.uuid + ''] = {
                        "name": subnetListGR.name + '',
                        "cluster_name": subnetListGR.cluster_name + '',
                        "cluster_uuid": subnetListGR.cluster_uuid + ''
                    };
                }
            }

            return subnetListJSON;
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getNutanixSubnetList. Error:- " + e);
        }
    },

    getServiceVariableDetails: function(projects, blueprint, profiles, type, bpType) {

        try {
            var subnet_info = this.getNutanixSubnetList(project);
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getServiceVariableDetails.");
            var project_array = projects.split(',');
            var profile_array = profiles.split(',');
            var project = project_array[0];
            var profile = profile_array[0];

            var variables = new GlideRecord(this.appUtil.configuration.table.applicationProfiles + '');
            if (variables.get(profile)) {
                this.logger.info("Fetching variables associated with profile " + variables.name);
            }
            var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
            gr.addQuery('application_profile', profile);
            gr.addQuery('catalog_item', blueprint);
            gr.addQuery('isprofilevariable', false);
            gr.orderBy('variable.order');
            gr.query();

            var answer = {};

            var i = 0;

            while (gr.next()) {

                if (!answer[gr.service_name.name + ''])
                    answer[gr.service_name.name + ''] = {};

                var categoryName = gr.category_name.name + '';

                if (gr.category_name.name + '' == gr.variable.name + '') {

                    if (!answer[gr.service_name.name + ''][gr.category_name.name + ''])
                        answer[gr.service_name.name + ''][gr.category_name.name + ''] = {};

                    if (bpType == "published" &amp;&amp; type == "new") {

                        var ans = (this.getVariablePatchedValue(type + '', gr.default_value + '', gr.sys_id, gr.variable.name + '', gr.category_name.name + '', gr.category_name.question_text + ''));
                        this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getServiceVariableDetails.Patched Value for " + gr.variable.name + " :: " + ans);
                        answer[gr.service_name.name + ''][gr.category_name.name + '']['new_' + gr.sys_id + ''] = (ans) ? JSON.parse(ans) : [];
                        answer[gr.service_name.name + ''][gr.category_name.name + '']['new_' + gr.sys_id + ''].notCmplx = false;


                    } else {
                        answer[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''] = (gr.default_value + '') ? JSON.parse(gr.default_value + '') : {};
                        answer[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].notCmplx = false;
                    }

                } else {

                    /*if (gr.is_hidden == true)
                        continue;*/


                    if (!answer[gr.service_name.name + ''][gr.category_name.name + ''])
                        answer[gr.service_name.name + ''][gr.category_name.name + ''] = {};
                    var catname = (gr.category_name.name + '').substring(((gr.service_name.name + '').length) + 1);
                    var varname = (gr.variable.name + '').substring(((gr.service_name.name + '').length) + 1);
                    var default_value = "";
                    var runtime_config = gr.runtime_config + '';
                    var isdisabled = gr.isdisabled + '';
                    var ans, parsedAns;
                    if (catname == "ssh_keys" &amp;&amp; bpType == "published") {
                        var hasKey;
                        var gr_ssh = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                        gr_ssh.addQuery('application_profile', profile);
                        gr_ssh.addQuery('catalog_item', blueprint);
                        gr_ssh.addQuery('isprofilevariable', false);
                        gr_ssh.addQuery('variable.name', 'CONTAINS', 'key_0');
                        gr_ssh.orderBy('variable.order');
                        gr_ssh.query();
                        if (gr_ssh.next()) {
                            hasKey = "true";
                        }
                        if (hasKey != "true") {
                            ans = this.getVariablePatchedValue(type + '', gr.default_value + '', gr.sys_id, gr.variable.name + '', gr.category_name.name + '', gr.category_name.question_text + '', "true");
                            parsedAns = (ans) ? JSON.parse(ans) : {};
                            answer[gr.service_name.name + ''][gr.category_name.name + ''] = parsedAns;
                        }

                    }
                    if ((!gr.default_value) &amp;&amp; bpType == "published") {
                        ans = this.getVariablePatchedValue(type + '', gr.default_value + '', gr.sys_id, gr.variable.name + '', gr.category_name.name + '', gr.category_name.question_text + '');
                        parsedAns = (ans) ? JSON.parse(ans) : "";
                        this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getServiceVariableDetails.Patched Value for " + gr.variable.name + " :: " + ans);
                        if (parsedAns) {
                            default_value = parsedAns.value + '';
                            var isSupported = (default_value + '' == 'Cloud-init' || default_value + '' == 'Sysprep' || (varname + '').startsWith('key_') || (this.disabledFields.includes(varname) &amp;&amp; varname + '' != 'name' &amp;&amp; varname + '' != 'type')) ? false : true;
                            //runtime_config = (parsedAns.runtime+'') ? parsedAns.runtime+'' : gr.runtime_config+'';
                            runtime_config = ((default_value + '').indexOf('@@') != -1 || isSupported + '' == 'false') ? false : (parsedAns.runtime + '') ? parsedAns.runtime + '' : gr.runtime_config + '';
                            isdisabled = ((default_value + '').indexOf('@@') != -1 || isSupported + '' == 'false') ? true : (runtime_config + '' == 'true') ? false : true; // ((default_value+'').indexOf('@@') != -1 || (this.disabledFields.includes(varname) &amp;&amp; varname+''!='name' &amp;&amp; varname+''!='type')) ? true : (runtime_config+'' == 'true') ? false : true;
                            // 							
                        }
                    }

                    /*Advanced Variable*/
                    var opt = [];
                    if (gr.variable.type + '' == 5 &amp;&amp; gr.isservicevariable == true) {
                        var optionRec = new GlideRecord("question_choice");
                        optionRec.addQuery('question', gr.variable + '');
                        optionRec.query();
                        while (optionRec.next()) {

                            opt.push(optionRec.value + '');

                        }


                    } else if (gr.variable.type + '' == 21 &amp;&amp; gr.isservicevariable == true) {
                        var varRefRec = gr.variable.getRefRecord().reference_qual + '';
                        varRefRec = varRefRec.substr(9, varRefRec.length);
                        var optionRec = new GlideRecord(this.appUtil.configuration.table.dropDownTable + '');
                        optionRec.addQuery('variable', varRefRec);
                        optionRec.query();
                        while (optionRec.next()) {

                            opt.push(optionRec.value + '');
                        }


                    }

                    answer[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''] = {
                        'name': gr.variable.name + '',
                        'question_text': gr.variable.question_text + '',
                        'value': (gr.default_value + '') ? gr.default_value + '' : default_value,
                        'runtime_config': (gr.default_value + '') ? gr.runtime_config + '' : runtime_config,
                        'type': gr.variable.type + '',
                        'isprofilevariable': gr.isprofilevariable + '',
                        'uuid': gr.uuid + '',
                        'isdisabled': (gr.default_value + '') ? gr.isdisabled + '' : isdisabled,

                        'isSupported': gr.issupported + '',
                        'isservicevariable': gr.isservicevariable + '',

                        'notCmplx': true,

                        'val_type': gr.value_type + '',
                        'description': gr.variable.help_text + '',
                        'mandatory': gr.variable.mandatory + '',
                        'regex': gr.field_regex + '',
                        'options': opt,
                        'data_type': gr.data_type + '',
                        'serviceField': (gr.isprofilevariable + '' == 'false' &amp;&amp; gr.isservicevariable + '' == 'false') ? true : false,
                        "field_json": (gr.isservicevariable + '' == 'true') ? this.appUtil.getMacroDependencies(gr.field_json + "") : {},
                        "field": (gr.isservicevariable + '' == 'true') ? gr.field_json + "" : "{}",
                        "isHidden": gr.is_hidden + ""
                    };
                }
                i++;
            }

            this.logger.debug("Final answer" + i + " :: " + JSON.stringify(answer));
            var returnJSON = {};
            returnJSON['service_configuration'] = answer;
            returnJSON['subnet_list'] = subnet_info;
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getServiceVariableDetails. return : " + JSON.stringify(returnJSON));
            return JSON.stringify(returnJSON);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getServiceVariableDetails. Error:- " + e);
        }

    },

    getVariablePatchedValue: function(type, value, grSysid, varname, categoryName, categoryNameText, sshFlag) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getVariablePatchedValue for variable :: " + varname + ",Category Name :: " + categoryNameText + ",SSh flag :: " + sshFlag);
            if ((!value || (varname == categoryName) || categoryNameText == "SSH Keys")) {
                var ans = {
                    "value": "",
                    "runtime": false
                };
                var session = gs.getSession();
                var bpResponse1 = JSON.parse(session.getClientData('Cloned_bp_response'));
                for (var p = 0; p &lt; bpResponse1.length; p++) {
                    var bpResponse = bpResponse1[p];

                    var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                    gr.addQuery("sys_id", grSysid);
                    gr.query();
                    if (gr.next()) {
                        var profileUUID = "";
                        for (var i in bpResponse) {
                            var serviceJSON = bpResponse[i];
                            if (serviceJSON.name.toLowerCase() + '' == gr.service_name.name + '') {

                                for (var k in serviceJSON.profile) {
                                    var profile = serviceJSON.profile[k];
                                    if (profile.name == gr.application_profile.name + '') {
                                        profileUUID = profile.uuid + '';
                                        break;
                                    }
                                }

                                if (serviceJSON.substrate[profileUUID]) {
                                    this.logger.debug("Patching :: Found profile :: " + gr.application_profile.name + '');
                                    var substrateJSON = serviceJSON.substrate[profileUUID];
                                    var categoryJSON = "";
                                    var insideCategoryJSON = "";
                                    switch (gr.category_name.question_text + '') {

                                        case "Connection":
                                            categoryJSON = "readiness_probe";
                                            break;

                                        case "VM Configuration": //categoryJSON = "create_spec";
                                            //break;

                                        case "Storage": //categoryJSON = "create_spec";
                                            //break;
                                        case "Network Adapters":

                                        case "Network Profiles":

                                        case "OS Profile":

                                        case "OS Profile Script":

                                        case "Management Optional":

                                        case "Storage Profile":

                                        case "Disks":

                                        case "Networking":

                                        case "Categories":

                                        case "API ACCESS":

                                        case "Blank Disks":

                                        case "Images":

                                        case "SSH Keys":

                                        case "Storage Profile Data Disks":

                                        case "Guest Customization":

                                        case "VDisks":
                                            categoryJSON = "create_spec";
                                            break;

                                    }
                                    var runtime = "";
                                    var field;
                                    var fieldName;
                                    var editables = substrateJSON.editables[categoryJSON];
                                    for (var l in substrateJSON) {

                                        if (l + '' == categoryJSON) {

                                            //this.logger.debug("Patching :: Category :: "+categoryJSON);

                                            if (categoryJSON == "create_spec") {
                                                fieldName = varname.substring(serviceJSON.name.length + 1);
                                                // 												if((categoryName) &amp;&amp; categoryName == "categories"){
                                                // 													var ansCat = {};var q=1;
                                                // 													var edit = (editables.categories) ? editables.categories : "false";
                                                // 													var disable = (edit == "true") ?  "false" : "true";
                                                // 													for( var b in substrateJSON[l].categories ){

                                                // 														ansCat['category_'+q] =	{
                                                // 																				  "name":  serviceJSON.name+'_'+b,
                                                // 																				  "question_text": b+'',
                                                // 																				  "value": substrateJSON[l].categories[b],
                                                // 																				  "runtime_config": edit,
                                                // 																				  "type": "6",
                                                // 																				  "isprofilevariable": "false",
                                                // 																				  "uuid": "",
                                                // 																				  "isdisabled": disable,
                                                // 																				  "notCmplx": true
                                                // 																				};
                                                // 													}

                                                // 													return JSON.stringify(ansCat);
                                                // 												}
                                                if (categoryNameText == "VM Configuration") {
                                                    for (var b in substrateJSON[l]) {
                                                        if (b == fieldName) {
                                                            ans.value = (substrateJSON[l][b]) ? substrateJSON[l][b] : '';
                                                            if (fieldName != "template" &amp;&amp; fieldName != "datastore" &amp;&amp; fieldName != "host") ans.runtime = (editables[b]) ? (editables[b]) : false;
                                                            return JSON.stringify(ans);
                                                        }
                                                    }
                                                }

                                                for (var s in substrateJSON[l].resources) {

                                                    var varServiceName = serviceJSON.name.toLowerCase() + '_' + s + '';

                                                    if (categoryNameText == "SSH Keys" &amp;&amp; sshFlag == "true" &amp;&amp; s == "sshKeys") {

                                                        var ansSSH = {};
                                                        var q = 0;
                                                        var edit = "false";
                                                        var disable = "true";
                                                        for (var b in substrateJSON[l].resources.sshKeys) {

                                                            for (var w in editables.resources.sshKeys) {
                                                                if (b == w)
                                                                    edit = editables.resources.sshKeys[w] + '';
                                                            }
                                                            ansSSH['new_ssh_key_' + q] = {
                                                                "name": serviceJSON.name + '_key_' + b,
                                                                "question_text": 'key ' + b + '',
                                                                "value": substrateJSON[l].resources.sshKeys[b],
                                                                "runtime_config": edit,
                                                                "type": "6",
                                                                "isprofilevariable": "false",
                                                                "uuid": "",
                                                                "isdisabled": (edit == "true") ? "false" : "true",
                                                                "isSupported": "true",
                                                                "isservicevariable": "false",
                                                                "notCmplx": true
                                                            };
                                                            q++;

                                                        }

                                                        return JSON.stringify(ansSSH);
                                                    } else if (categoryNameText == "Management Optional" &amp;&amp; s == "guestCustomization") {
                                                        if (fieldName == "startup_script") {
                                                            ans.value = (substrateJSON[l].resources[s].startupScript) ? substrateJSON[l].resources[s].startupScript : '';
                                                            ans.runtime = (editables.resources.guestCustomization &amp;&amp; editables.resources.guestCustomization.startupScript) ? editables.resources.guestCustomization.startupScript : false;
                                                            return JSON.stringify(ans);
                                                        } else if (fieldName == "security_groups") {
                                                            var groups = (substrateJSON[l].resources.tags.items &amp;&amp; substrateJSON[l].resources.tags.items[0]) ? substrateJSON[l].resources.tags.items[0] : '';
                                                            for (var p = 1; p &lt; substrateJSON[l].resources.tags.items.length; p++)
                                                                groups = groups + ',' + substrateJSON[l].resources.tags.items[i];
                                                            ans.value = groups;
                                                            ans.runtime = (editables.resources.tags &amp;&amp; editables.resources.tags.items) ? editables.resources.tags.items : false;

                                                            return JSON.stringify(ans);
                                                        }

                                                    } else if (categoryNameText == "API ACCESS" &amp;&amp; s == "serviceAccounts") {
                                                        ans.value = (substrateJSON[l].resources[s][0].email) ? substrateJSON[l].resources[s][0].email : "";
                                                        ans.runtime = (editables.resources.serviceAccounts[0] &amp;&amp; editables.resources.serviceAccounts[0].email) ? editables.resources.serviceAccounts[0].email : false;
                                                        return JSON.stringify(ans);
                                                    } else if (categoryNameText == "Disks" &amp;&amp; s == "disks") {
                                                        for (var j in substrateJSON[l].resources[s]) {
                                                            substrateJSON[l].resources[s][j].runtime = {};
                                                            substrateJSON[l].resources[s][j].disabled = {};
                                                            for (var x in editables.resources.disks)
                                                                if (x == j) {
                                                                    substrateJSON[l].resources[s][j].runtime = (editables.resources.disks[x]) ? (editables.resources.disks[x]) : {};
                                                                    substrateJSON[l].resources[s][j].disabled = substrateJSON[l].resources[s][j].runtime;
                                                                }
                                                        }

                                                        return JSON.stringify(substrateJSON[l].resources[s]);
                                                    } else if (categoryNameText == "Networking" &amp;&amp; s == "networkInterfaces") {
                                                        for (var j in substrateJSON[l].resources[s]) {
                                                            substrateJSON[l].resources[s][j].runtime = {};
                                                            substrateJSON[l].resources[s][j].disabled = {};
                                                            for (var x in editables.resources.networkInterfaces)
                                                                if (x == j) {
                                                                    substrateJSON[l].resources[s][j].runtime = (editables.resources.networkInterfaces[x]) ? (editables.resources.networkInterfaces[x]) : {};
                                                                    substrateJSON[l].resources[s][j].disabled = substrateJSON[l].resources[s][j].runtime;
                                                                }
                                                        }
                                                        return JSON.stringify(substrateJSON[l].resources[s]);
                                                    } else if (categoryNameText == "Blank Disks" &amp;&amp; s == "blankDisks") {
                                                        for (var j in substrateJSON[l].resources[s]) {
                                                            substrateJSON[l].resources[s][j].runtime = {};
                                                            substrateJSON[l].resources[s][j].disabled = {};
                                                            for (var x in editables.resources.blankDisks)
                                                                if (x == j) {
                                                                    substrateJSON[l].resources[s][j].runtime = (editables.resources.blankDisks[x]) ? editables.resources.blankDisks[x] : {};
                                                                    substrateJSON[l].resources[s][j].disabled = substrateJSON[l].resources[s][j].runtime;
                                                                }
                                                        }

                                                        return JSON.stringify(substrateJSON[l].resources[s]);
                                                    } else if (categoryNameText == "Images" &amp;&amp; s == "disk_list") {
                                                        var bootIndex = (substrateJSON[l].resources.boot_config &amp;&amp; substrateJSON[l].resources.boot_config.boot_device &amp;&amp; substrateJSON[l].resources.boot_config.boot_device.disk_address &amp;&amp; substrateJSON[l].resources.boot_config.boot_device.disk_address.device_index + '') ? substrateJSON[l].resources.boot_config.boot_device.disk_address.device_index : -1;
                                                        for (var j in substrateJSON[l].resources[s]) {
                                                            substrateJSON[l].resources[s][j].runtime = {};
                                                            substrateJSON[l].resources[s][j].disabled = {};
                                                            substrateJSON[l].resources[s][j].bootable = (bootIndex == j) ? true : false;
                                                            for (var x in editables.resources.disk_list)
                                                                if (x == j) {
                                                                    substrateJSON[l].resources[s][j].runtime = (editables.resources.disk_list[x]) ? editables.resources.disk_list[x] : {};
                                                                    substrateJSON[l].resources[s][j].disabled = substrateJSON[l].resources[s][j].runtime;
                                                                }
                                                        }

                                                        return JSON.stringify(substrateJSON[l].resources[s]);
                                                    } else if (categoryNameText == "Storage Profile Data Disks" &amp;&amp; s == "storage_profile") {
                                                        for (var j in substrateJSON[l].resources[s].data_disk_list) {
                                                            substrateJSON[l].resources[s].data_disk_list[j].runtime = {};
                                                            substrateJSON[l].resources[s].data_disk_list[j].disabled = {};
                                                            for (var x in editables.resources.storage_profile.data_disk_list)
                                                                if (x == j) {
                                                                    substrateJSON[l].resources[s].data_disk_list[j].runtime = (editables.resources.storage_profile &amp;&amp; editables.resources.storage_profile.data_disk_list[x]) ? editables.resources.storage_profile.data_disk_list[x] : {};
                                                                    substrateJSON[l].resources[s].data_disk_list[j].disabled = substrateJSON[l].resources[s].data_disk_list[j].runtime;
                                                                }
                                                        }

                                                        return JSON.stringify(substrateJSON[l].resources[s].data_disk_list);
                                                    } else if (categoryNameText == "OS Profile" &amp;&amp; s == "os_profile") {
                                                        for (var j in substrateJSON[l].resources[s].secrets) {
                                                            substrateJSON[l].resources[s].secrets[j].runtime = {};
                                                            substrateJSON[l].resources[s].secrets[j].disabled = {};
                                                            for (var x in editables.resources.os_profile.secrets)
                                                                if (x == j) {
                                                                    substrateJSON[l].resources[s].secrets[j].runtime = (editables.resources.os_profile &amp;&amp; editables.resources.os_profile.secrets[x]) ? editables.resources.os_profile.secrets[x] : {};
                                                                    substrateJSON[l].resources[s].secrets[j].disabled = substrateJSON[l].resources[s].secrets[j].runtime;

                                                                }
                                                        }

                                                        return JSON.stringify(substrateJSON[l].resources[s].secrets);
                                                    } else if (categoryNameText == "OS Profile Script" &amp;&amp; s == "os_profile") {

                                                        ans.value = (substrateJSON[l].resources[s].linux_config &amp;&amp; substrateJSON[l].resources[s].linux_config.custom_data + '') ? substrateJSON[l].resources[s].linux_config.custom_data + '' : "";
                                                        ans.runtime = (editables.resources.os_profile &amp;&amp; editables.resources.os_profile.linux_config &amp;&amp; editables.resources.os_profile.linux_config.custom_data) ? editables.resources.os_profile.linux_config.custom_data : false;

                                                        return JSON.stringify(ans);

                                                    } else if (categoryNameText == "Guest Customization" &amp;&amp; s == "guest_customization") {
                                                        varname = varname.substring(serviceJSON.name.length + 1);
                                                        for (var j in substrateJSON[l].resources[s].linux_data) {
                                                            if (varname == "dns_search_path" &amp;&amp; j == varname) {
                                                                ans.value = (substrateJSON[l].resources[s].linux_data.dns_search_path[0] + '') ? substrateJSON[l].resources[s].guest_customization.linux_data.dns_search_path[0] + '' : "";
                                                                ans.runtime = (editables.resources.guest_customization &amp;&amp; editables.resources.guest_customization.linux_data &amp;&amp; editables.resources.guest_customization.linux_data.dns_search_path[0]) ? editables.resources.guest_customization.linux_data.dns_search_path[0] : false;
                                                                return JSON.stringify(ans);
                                                            } else if (j == varname) {
                                                                ans.value = substrateJSON[l].resources[s].linux_data[j] + '';
                                                                for (var x in editables.resources.guest_customization.linux_data) {
                                                                    if (x == varname) {
                                                                        ans.runtime = editables.resources.guest_customization.linux_data[x] + '';
                                                                        return JSON.stringify(ans);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        if (fieldName == "script") {

                                                            ans.value = (substrateJSON[l].resources[s].cloud_init &amp;&amp; substrateJSON[l].resources[s].cloud_init.user_data) ? substrateJSON[l].resources[s].cloud_init.user_data : ((substrateJSON[l].resources[s].sysprep &amp;&amp; substrateJSON[l].resources[s].sysprep.unattend_xml) ? substrateJSON[l].resources[s].sysprep.unattend_xml : (substrateJSON[l].resources[s].cloud_init) ? substrateJSON[l].resources[s].cloud_init : '');
                                                            ans.runtime = (editables.resources.guest_customization &amp;&amp; editables.resources.guest_customization.cloud_init) ? (editables.resources.guest_customization.cloud_init) : false;
                                                            return (JSON.stringify(ans));
                                                        } else if (fieldName == "install_type") {
                                                            ans.value = (substrateJSON[l].resources[s].sysprep &amp;&amp; substrateJSON[l].resources[s].sysprep.install_type) ? substrateJSON[l].resources[s].sysprep.install_type : "";
                                                            ans.runtime = false;
                                                            return (JSON.stringify(ans));
                                                        } else if (fieldName == "type") {
                                                            ans.value = (substrateJSON[l].resources[s].sysprep) ? 'Sysprep' : 'Cloud-init';
                                                            ans.runtime = false;
                                                            return (JSON.stringify(ans));
                                                        }
                                                    } else if (varname == (serviceJSON.name.toLowerCase() + '_' + 'storage') &amp;&amp; s == "block_device_map") {

                                                        substrateJSON[l].resources[s].root_disk.runtime = "";
                                                        substrateJSON[l].resources[s].root_disk.disabled = "";
                                                        substrateJSON[l].resources[s].root_disk.runtime = (editables.resources.block_device_map.root_disk.size_gb) ? editables.resources.block_device_map.root_disk.size_gb + '' : 'false';
                                                        substrateJSON[l].resources[s].root_disk.disabled = substrateJSON[l].resources[s].root_disk.runtime;
                                                        for (var j in substrateJSON[l].resources[s].data_disk_list) {

                                                            substrateJSON[l].resources[s].data_disk_list[j].runtime = 'false';
                                                            substrateJSON[l].resources[s].data_disk_list[j].disabled = 'false';
                                                            if (editables &amp;&amp; editables.resources &amp;&amp; editables.resources.block_device_map &amp;&amp; editables.resources.block_device_map.data_disk_list[j] &amp;&amp; editables.resources.block_device_map.data_disk_list[j].size_gb) {
                                                                var runtime_data = editables.resources.block_device_map.data_disk_list[j].size_gb;
                                                                substrateJSON[l].resources[s].data_disk_list[j].runtime = (runtime_data) ? runtime_data + '' : 'false';
                                                                substrateJSON[l].resources[s].data_disk_list[j].disabled = substrateJSON[l].resources[s].data_disk_list[j].runtime;
                                                            }
                                                        }
                                                        return JSON.stringify(substrateJSON[l].resources[s]);
                                                    } else if (varname == (serviceJSON.name.toLowerCase() + '_vdisks') &amp;&amp; s == "disk_list") {
                                                        for (var j in substrateJSON[l].resources[s]) {
                                                            substrateJSON[l].resources[s][j].runtime = {};
                                                            substrateJSON[l].resources[s][j].disabled = {};
                                                            for (var x in editables.resources.disk_list) {
                                                                if (x == j) {
                                                                    substrateJSON[l].resources[s][j].runtime = editables.resources.disk_list[j];
                                                                    substrateJSON[l].resources[s][j].disabled = substrateJSON[l].resources[s][j].runtime;
                                                                }
                                                            }
                                                        }
                                                        return JSON.stringify(substrateJSON[l].resources[s]);
                                                    } else if (varname == (serviceJSON.name.toLowerCase() + '_network_adapters') &amp;&amp; s == "nic_list") {
                                                        for (var j in substrateJSON[l].resources[s]) {
                                                            substrateJSON[l].resources[s][j].runtime = {};
                                                            substrateJSON[l].resources[s][j].disabled = {};
                                                            for (var x in editables.resources.nic_list)
                                                                if (x == j) {
                                                                    substrateJSON[l].resources[s][j].runtime = (editables.resources.nic_list[j]) ? (editables.resources.nic_list[j]) : {};
                                                                    substrateJSON[l].resources[s][j].disabled = substrateJSON[l].resources[s][j].runtime;
                                                                }
                                                        }
                                                        return JSON.stringify(substrateJSON[l].resources[s]);
                                                    } else if (categoryNameText == "Storage Profile" &amp;&amp; s == "storage_profile") {
                                                        for (var j in substrateJSON[l].resources[s].image_details) {
                                                            varServiceName = serviceJSON.name.toLowerCase() + '_' + j;
                                                            if (varname == varServiceName) {
                                                                ans.value = (substrateJSON[l].resources[s].image_details[j]) ? (substrateJSON[l].resources[s].image_details[j] + '') : "";
                                                                ans.runtime = (editables.resources.storage_profile.image_details &amp;&amp; editables.resources.storage_profile.image_details[j]) ? (editables.resources.storage_profile.image_details[j]) : false;
                                                                if ((varname.indexOf("use_custom_image") != -1) &amp;&amp; !ans.value) ans.value = "false";
                                                                return JSON.stringify(ans);
                                                            }

                                                        }
                                                        for (var j in substrateJSON[l].resources[s].os_disk_details) {
                                                            varServiceName = serviceJSON.name.toLowerCase() + '_' + substrateJSON[l].resources[s].image_details[j];
                                                            if (varname == varServiceName) {
                                                                ans.value = (substrateJSON[l].resources[s].os_disk_details[j]) ? (substrateJSON[l].resources[s].os_disk_details[j]) : "";
                                                                ans.runtime = (editables.resources.storage_profile.os_disk_details[j]) ? (editables.resources.storage_profile.os_disk_details[j]) : false;
                                                                return JSON.stringify(ans);
                                                            }
                                                        }
                                                        if (varname.indexOf("use_managed_disks") != -1) {
                                                            ans.value = (substrateJSON[l].resources[s].is_managed) ? (substrateJSON[l].resources[s].is_managed) : "";
                                                            ans.runtime = (editables.resources.storage_profile.is_managed) ? (editables.resources.storage_profile.is_managed) : false;
                                                            return JSON.stringify(ans);
                                                        }
                                                    } else if (categoryNameText == "Network Profiles" &amp;&amp; s == "nw_profile") {
                                                        for (var j in substrateJSON[l].resources[s].nic_list) {
                                                            substrateJSON[l].resources[s].nic_list[j].runtime = {};
                                                            substrateJSON[l].resources[s].nic_list[j].disabled = {};
                                                            for (var x in editables.resources.nw_profile.nic_list)
                                                                if (x == j) {
                                                                    substrateJSON[l].resources[s].nic_list[j].runtime = (editables.resources.nw_profile.nic_list[j]) ? editables.resources.nw_profile.nic_list[j] : {};
                                                                    substrateJSON[l].resources[s].nic_list[j].disabled = substrateJSON[l].resources[s].nic_list[j].runtime;
                                                                }
                                                        }
                                                        return JSON.stringify(substrateJSON[l].resources[s].nic_list);
                                                    } else if (varname + '' == varServiceName + '') {
                                                        field = substrateJSON[l].resources[s];
                                                        if (!(field.constructor == Object || field.constructor == Array)) {
                                                            ans.value = substrateJSON[l].resources[s] + '';
                                                            ans.runtime = this.checkEditable(editables, varname, categoryJSON, serviceJSON.name.toLowerCase() + '_') + '';
                                                            return JSON.stringify(ans);
                                                        } else if (s == "security_group_list") {
                                                            var sec = field[0].security_group_id + '';
                                                            for (var m = 1; m &lt; field.length; m++) {
                                                                sec += "," + field[m].security_group_id + '';
                                                            }
                                                            ans.value = sec + '';
                                                            ans.runtime = this.checkEditable(editables, varname, categoryJSON, serviceJSON.name.toLowerCase() + '_') + '';
                                                            return JSON.stringify(ans);
                                                        }
                                                    } else if (categoryNameText == "VM Configuration" &amp;&amp; s == "hw_profile" &amp;&amp; varname.indexOf("hardware_profile") != -1) {
                                                        ans.value = (substrateJSON[l].resources[s].vm_size) ? substrateJSON[l].resources[s].vm_size : '';
                                                        ans.runtime = (editables.resources.hw_profile.vm_size) ? (editables.resources.hw_profile.vm_size) : false;
                                                        return JSON.stringify(ans);
                                                    } else if (categoryNameText == "SSH Keys" &amp;&amp; fieldName == "block_project_wide_ssh_key" &amp;&amp; s == "metadata" &amp;&amp; sshFlag != "true") {
                                                        var blockValue = false;
                                                        for (var data in substrateJSON[l].resources[s]) {
                                                            if (substrateJSON[l].resources[s][data].key + '' == 'block-project-ssh-keys') {
                                                                blockValue = substrateJSON[l].resources[s][data].value + '';
                                                                ans.runtime = (editables.resources.metadata.items[data]) ? (editables.resources.metadata.items[data]) : false;
                                                            }
                                                        }
                                                        ans.value = blockValue;
                                                        return JSON.stringify(ans);
                                                    }
                                                }
                                            } else if (categoryJSON == "readiness_probe") {
                                                for (var s in substrateJSON[l]) {
                                                    var varServiceName = serviceJSON.name.toLowerCase() + '_' + s;
                                                    if (varname + '' == varServiceName + '') {
                                                        ans.value = substrateJSON[l][s] + '';
                                                        if (varname.indexOf("disable_readiness_probe") != -1)
                                                            ans.value = (substrateJSON[l][s] == 'true') ? false : true;
                                                        ans.runtime = this.checkEditable(editables, varname, categoryJSON, serviceJSON.name.toLowerCase() + '_') + '';
                                                        return JSON.stringify(ans);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                            }
                        }
                    }
                }
            }
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getVariablePatchedValue. Error:- " + e);
        }
    },
    //Ptaching of MPI
    //Ptaching of MPI
    mpiPatching: function(projects, blueprint) {

        var logger = new Nutanix_Calm_Logger();
        var utils = new Nutanix_Calm_Utils();
        var reqUtils = new Nutanix_RequestUtil();
        var blueprintTemplate = "";
        var catVariableBody = {};
        var bpVariablesJSON = {};
        var parseResp = {};

        try {
            logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.mpiPatching.");

            var project = projects.split(',');
            project = project[0];

            var bp = new GlideRecord('x_nuta2_nutanix_ca_nutanix_marketplaceitems');
            bp.addQuery('sys_id', blueprint);
            bp.query();

            var mpi_uuid = (bp.next()) ? bp.uuid : "";

            var response = utils.makeCalmApiCall('GET', '/calm_marketplace_items/' + mpi_uuid);

            if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                response = JSON.parse(response.getBody());

                var environment_uuid = ' ';
                var project_uuid = '';

                var projectRecord = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
                projectRecord.addQuery('sys_id', project);
                projectRecord.query();

                if (projectRecord.next()) {
                    project_uuid = projectRecord.uuid + '';
                    environment_uuid = projectRecord.environment_uuid + '';
                }

                var name = bp.name + '';
                var app_bp_name = ((name + GlideSecureRandomUtil.getSecureRandomString(8) + mpi_uuid).replaceAll('-', ' ').trim().replaceAll(' ', '_')).substring(0, 64);
                var tmpbody = {
                    "status": response.status.resources.app_blueprint_template.status,
                    "spec": response.spec.resources.app_blueprint_template.spec
                };

                var body = {
                    "api_version": "3.0", //response.api_version,
                    "metadata": {
                        "kind": "blueprint",
                        "project_reference": {
                            "kind": "project",
                            "uuid": project_uuid + ''
                        },
                        "categories": response.metadata.categories //changes
                    },
                    "spec": {
                        "description": response.spec.resources.app_blueprint_template.spec.description, //response.spec.description,
                        "app_blueprint_name": app_bp_name + '',
                        "source_marketplace_version": response.spec.resources.version, //"1.0.0", //changes
                        "source_marketplace_name": name + '',
                        "resources": response.spec.resources.app_blueprint_template.spec.resources

                        //reqUtils.makeResourceBody(tmpbody, tmpbody.status.resources, current)
                        //response.spec.resources.app_blueprint_template.spec.resources
                    }
                };

                body.spec.environment_uuid = environment_uuid + '';

                //gs.error("MPI payload send: "+JSON.stringify(body));
                //	return "MPI Launch Body "+JSON.stringify(body);

                var response = utils.makeCalmApiCall('POST', '/blueprints/marketplace_launch', JSON.stringify(body));
                // 			return "post marketplace launch  call "+response.getStatusCode();
                if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                    var session = gs.getSession();
                    session.putClientData('non_filtered_cloned_bp_response', response.getBody());

                    parseResp = JSON.parse(response.getBody());
                    blueprintTemplate = (parseResp.status.resources) ? parseResp.status.resources : "";
                    var clonedBpUuid = parseResp.metadata.uuid;

                    //gs.error("Patching : "+response.getBody());

                } else {
                    logger.error("API call to '/blueprints/marketplace_launch' failed with name : " + app_bp_name + ":-" + response.getBody());
                    //gs.error("Errorr :: "+(JSON.parseresponse.getBody()).message_list[0].message);
                    return JSON.stringify({
                        "errMess": JSON.parse(response.getBody()).message_list[0].message,
                        "status": false
                    });
                }

                var bpVariables = new Nutanix_CreateCatalogVariables();
                if (bp.template_type == "Single Vm") {

                    var service_body = [{
                        "uuid": "singleVm-default-service-uuid",
                        "name": "single_vm_configuration"
                    }];

                    catVariableBody = {
                        "substrate_definition_list": (blueprintTemplate.substrate_definition_list) ? blueprintTemplate.substrate_definition_list : "",
                        "app_profile_list": (blueprintTemplate.app_profile_list) ? blueprintTemplate.app_profile_list : "",
                        "service_definition_list": service_body,
                        "package_definition_list": (blueprintTemplate.package_definition_list) ? blueprintTemplate.package_definition_list : ""
                    };
                    bpVariablesJSON = bpVariables._filterJSONDatatoService(catVariableBody);
                } else if (blueprintTemplate.package_definition_list &amp;&amp; blueprintTemplate.substrate_definition_list &amp;&amp; blueprintTemplate.app_profile_list &amp;&amp; blueprintTemplate.service_definition_list) {
                    catVariableBody = {
                        "substrate_definition_list": (blueprintTemplate.substrate_definition_list) ? blueprintTemplate.substrate_definition_list : "",
                        "app_profile_list": (blueprintTemplate.app_profile_list) ? blueprintTemplate.app_profile_list : "",
                        "service_definition_list": (blueprintTemplate.service_definition_list) ? blueprintTemplate.service_definition_list : "",
                        "package_definition_list": (blueprintTemplate.package_definition_list) ? blueprintTemplate.package_definition_list : ""
                    };

                    bpVariablesJSON = bpVariables._filterJSONDatatoService(catVariableBody);
                }

                bpVariablesJSON.uuid = parseResp.metadata.uuid + '';
                bpVariablesJSON.name = parseResp.metadata.name + '';

                var session = gs.getSession();
                session.putClientData('Cloned_bp_response', JSON.stringify(bpVariablesJSON));
                var clientData = session.getClientData('Cloned_bp_response');
                logger.debug("MPI cloned Blueprint response ::" + clientData);
                return JSON.stringify({
                    "errMess": "Successfull",
                    "status": true
                }); //JSON.parse(clientData).uuid+'';
            } else {
                logger.error("API call to '/calm_marketplace_items/uuid' failed: " + response.getBody());
                var result = {
                    "errMess": (response.getBody()).message_list[0].message,
                    "status": false
                };
                return JSON.stringify(result);
            }
        } catch (e) {
            logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.mpiPatching. Error:- " + e);
            return "false";
        }
    },

    fetchBlueprints: function(projectUUID, blueprintType) {

        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.fetchBlueprints.");

            var gr = new GlideRecord(this.appUtil.configuration.table.catalogProjectRelation + '');
            gr.addQuery('projects.uuid', projectUUID);

            if (blueprintType == 'unpublished')
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_unpublishedBP_sysId'));
            else
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_category_sysId'));

            gr.orderBy('catalog_item.name');
            gr.query();

            var ans = {};
            var i = 0;

            while (gr.next()) {
                if ((blueprintType == 'unpublished' &amp;&amp; gr.catalog_item.state + '' == 'ACTIVE') || (blueprintType != 'unpublished' &amp;&amp; gr.catalog_item.state + '' == 'active')) {
                    ans[i] = {
                        'sys_id': gr.catalog_item + '',
                        'name': gr.catalog_item.name + '' + " " + gr.version + ''
                    };
                    i++;
                }
            }

            this.logger.debug("Fetched " + i + " blueprints.");

            return JSON.stringify(ans);

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.fetchBlueprints. Error:- " + e);
        }

    },

    fetchApplicationProfiles: function(blueprintSysId) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.fetchApplicationProfiles.");

            var blueprint = new GlideRecord(this.appUtil.configuration.table.Blueprint + '');
            if (blueprint.get(blueprintSysId)) {
                this.logger.info("Fetching profiles associated with blueprint " + blueprint.name);
            }
            var gr = new GlideRecord(this.appUtil.configuration.table.catalogProfileRelation + '');
            gr.addQuery('catalog_item', blueprintSysId);
            gr.addQuery('state', 'active');
            //gr.addEncodedQuery('providersNOT LIKEaws^providersNOT LIKEazure^providersNOT LIKEgcp');
            gr.orderBy('application_profile.name');
            gr.query();

            var ans = {};
            var i = 0;
            while (gr.next()) {
                ans[i] = {
                    'sys_id': gr.application_profile + '',
                    'name': gr.application_profile.name + ''
                };
                i++;
            }

            this.logger.debug("Fetched " + i + " profiles.");

            return JSON.stringify(ans);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.fetchApplicationProfiles. Error:- " + e);
        }
    },

    fetchProviderIcons: function(catSysId) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.fetchProviderIcons.");

            var grBp = new GlideRecord('x_nuta2_nutanix_ca_nutanix_catalog_items');
            if (grBp.get(catSysId)) {
                var bpSysId = grBp.blueprint_name;
            }
            if (bpSysId != '') {
                var gr = new GlideRecord(this.appUtil.configuration.table.catalogProfileRelation + '');
                gr.addQuery('catalog_item', bpSysId);
                gr.addQuery('state', 'active');
                gr.orderBy('application_profile.name');
                gr.query();

                var entities = [];
                var i = 0;
                while (gr.next()) {
                    entities[i] = {
                        'profile': gr.application_profile.name + '',
                        'providers': gr.providers + ''
                    };
                    i++;
                }

                this.logger.debug("Fetched " + i + " profiles.");

                return JSON.stringify(entities);
            } else {
                var grReq = new GlideRecord('sc_req_item');
                grReq.addQuery('sys_id', catSysId);
                grReq.query();
                if (grReq.next()) {
                    var grBp = new GlideRecord('x_nuta2_nutanix_ca_nutanix_catalog_items');
                    if (grBp.get(grReq.cat_item)) {
                        var bpSysId = grBp.blueprint_name;
                    }
                    if (bpSysId != '') {
                        var gr = new GlideRecord(this.appUtil.configuration.table.catalogProfileRelation + '');
                        gr.addQuery('catalog_item', bpSysId);
                        gr.orderBy('application_profile.name');
                        gr.query();

                        var entities = [];
                        var i = 0;
                        while (gr.next()) {
                            entities[i] = {
                                'profile': gr.application_profile.name + '',
                                'providers': gr.providers + ''
                            };
                            i++;
                        }

                        this.logger.debug("Fetched " + i + " profiles.");

                        return JSON.stringify(entities);
                    }
                }
            }
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.fetchProviderIcons. Error:- " + e);
        }
    },

    getProfileVariableDetails: function(project, blueprint, profile) {

        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getProfileVariableDetails.");

            var variables = new GlideRecord(this.appUtil.configuration.table.applicationProfiles + '');
            if (variables.get(profile)) {
                this.logger.info("Fetching variables associated with profile " + variables.name);
            }

            var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
            gr.addQuery('application_profile', profile);
            gr.addQuery('catalog_item', blueprint);
            gr.addQuery('isprofilevariable', true);
            gr.orderBy('variable.name');
            gr.query();

            var answer = {};
            var i = 0;
            while (gr.next()) {

                /*if (gr.is_hidden == true)
                    continue;*/

                var opt = [];
                if (gr.variable.type + '' == 5) {
                    var optionRec = new GlideRecord("question_choice");
                    optionRec.addQuery('question', gr.variable + '');
                    optionRec.query();
                    while (optionRec.next()) {

                        opt.push(optionRec.value + '');

                    }

                } else if (gr.variable.type + '' == 21) {
                    var varRefRec = gr.variable.getRefRecord().reference_qual + ''
                    varRefRec = varRefRec.substr(9, varRefRec.length);
                    var optionRec = new GlideRecord(this.appUtil.configuration.table.dropDownTable + '');
                    optionRec.addQuery('variable', varRefRec);
                    optionRec.query();
                    while (optionRec.next()) {
                        opt.push(optionRec.value + '');
                    }

                }
                // 				else if(gr.variable.type+'' == 10 || gr.variable.type+'' == 9){
                // 					var dtVal = gr.default_value+'';
                // 					if( gr.variable.type+'' == 9 ){
                // 						var gdt = new GlideDate() ;
                // 						gdt.setValue(dtVal);
                // 						gr.default_value = gdt.getByFormat("yyyy-MM-dd");
                // 					}

                // 					else{
                // 						var gdt = new GlideDateTime() ;
                // 						gdt.setValue(dtVal);
                // 						gr.default_value = gdt.getDate().getByFormat("yyyy-MM-dd")+' '+gdt.getTime().getByFormat("HH:mm:ss");
                // 					}

                // 				}

                answer[gr.sys_id + ''] = {
                    'name': gr.variable.name + '',
                    'question_text': gr.variable.question_text + '',
                    'value': gr.default_value + '',
                    'runtime_config': gr.runtime_config + '',
                    'type': gr.variable.type + '',
                    'isprofilevariable': gr.isprofilevariable + '',
                    'uuid': gr.uuid + '',
                    'isdisabled': gr.isdisabled + '',
                    "val_type": gr.value_type + '',
                    "description": gr.variable.help_text + '',
                    "mandatory": gr.variable.mandatory + '',
                    "regex": gr.field_regex + '',
                    "options": opt,
                    "data_type": gr.data_type + '',
                    "field_json": this.appUtil.getMacroDependencies(gr.field_json + ""),
                    "field": gr.field_json + "",
                    "isHidden": gr.is_hidden + ""
                };
                i++;
            }

            this.logger.debug("Fetched " + i + " variables.");

            return JSON.stringify(answer);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getProfileVariableDetails. Error:- " + e);
        }

    },



    checkEditable: function(editables, varname, categoryJSON, serviceJSON) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.checkEditable.");
            if (categoryJSON == "create_spec") {

                for (var i in editables.resources) {
                    var varServiceName = serviceJSON + i;
                    if (varname == varServiceName) {
                        return editables.resources[i] + '';
                    }
                }

            } else if (categoryJSON == "readiness_probe") {
                for (var i in editables) {
                    var varServiceName = serviceJSON + i;
                    if (varname == varServiceName) {
                        return editables[i] + '';
                    }
                }
            }

        } catch (e) {
            this.logger.error("Inside Nutanix_FetchConfigureSettingDropdown.checkEditable. " + e);
        }

    },

    getCrendentialsDetails: function(project, blueprint, profile) {

        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getCrendentialsDetails.");

            var gr = new GlideRecord(this.appUtil.configuration.table.Credentials + '');
            gr.addQuery('catalog_item', blueprint);
            gr.orderBy('name');
            gr.query();

            var answer = {};
            var i = 0;
            gs.info('getRowCount ' + gr.getRowCount());
            while (gr.next()) {
                answer[gr.name + ''] = {};

                answer[gr.name + ''].credential_name = {
                    "name": 'credential_name',
                    "question_text": 'Credential Name',
                    "value": gr.name + ''
                };

                answer[gr.name + ''].username = {
                    "name": 'username',
                    "question_text": 'Username',
                    "value": gr.username + '',
                    "runtime_config": gr.username_editable + ''
                };

                answer[gr.name + ''].secret_type = {
                    "name": 'secret_type',
                    "question_text": 'Secret Type',
                    "value": gr.type + ''
                };

                if (gr.type + '' == 'KEY') {
                    answer[gr.name + ''].ssh_private_key = {
                        "name": 'ssh_private_key',
                        "question_text": 'SSH Private Key',
                        "value": gr.ssh_private_key + '',
                        "runtime_config": gr.secret_editable + ''
                    };

                    answer[gr.name + ''].passphrase = {
                        "name": 'passphrase',
                        "question_text": 'Passphrase',
                        "value": gr.passphrase + '',
                        "runtime_config": gr.passphrase_editable + ''
                    };
                } else {
                    answer[gr.name + ''].password = {
                        "name": 'password',
                        "question_text": 'Password',
                        "value": gr.password + '',
                        "runtime_config": gr.secret_editable + ''
                    };
                }

                answer[gr.name + ''].uuid = gr.uuid + '';
                answer[gr.name + ''].description = gr.description + '';
                answer[gr.name + ''].is_default = gr.is_default + '';
                answer[gr.name + ''].is_secret_modified = gr.is_secret_modified + '';
                answer[gr.name + ''].name = gr.name + '';
                answer[gr.name + ''].state = gr.state + '';

                answer[gr.name + ''].username_isdisabled = gr.username_isdisabled + '';
                answer[gr.name + ''].secret_isdisabled = gr.secret_isdisabled + '';
                answer[gr.name + ''].ssh_private_key_isdisabled = gr.ssh_private_key_isdisabled + '';
                answer[gr.name + ''].passphrase_isdisabled = gr.passphrase_isdisabled + '';

                answer[gr.name + ''].credential_reference = {
                    "value": gr.credential_reference + '',
                    "label": gr.credential_reference.name + ''
                };

                answer[gr.name + ''].runtime = gr.runtime + '';

                i++;
            }

            this.logger.debug("Fetched " + i + " credentials.");

            return JSON.stringify(answer);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getCrendentialsDetails. Error:- " + e);
        }

    },

    /*fetchEnvironmentCredentials: function( credSysId ){
    											try{
    												this.logger.debug("Inside x_nuta2_nutanix_ca_nutanix_runtime_configuration.fetchEnvironmentCredentials.");

    												var gr = new GlideRecord(this.appUtil.configuration.table.Credentials+'');
    												gr.get(credSysId);

    												var answer = {};
    													var i = 0;

    													if(gr){
    														answer[gr.name+''] = {};

    															answer[gr.name+''].credential_name = {
    																"name": 'credential_name',
    																"question_text": 'Credential Name',
    																"value": gr.name+''
    															};

    															answer[gr.name+''].username = {
    																"name": 'username',
    																"question_text": 'Username',
    																"value": gr.username+'',
    																"runtime_config": gr.username_editable+''
    															};

    															answer[gr.name+''].secret_type = {
    																"name": 'secret_type',
    																"question_text": 'Secret Type',
    																"value": gr.type+''
    															};

    															if(gr.type+'' == 'KEY'){
    																answer[gr.name+''].ssh_private_key = {
    																	"name": 'ssh_private_key',
    																	"question_text": 'SSH Private Key',
    																	"value": gr.ssh_private_key+'',
    																	"runtime_config": gr.ssh_private_key_editable+''
    																};

    																if(gr.passphrase+'')
    																	answer[gr.name+''].passphrase = {
    																	"name": 'passphrase',
    																	"question_text": 'Passphrase',
    																	"value": gr.passphrase+'',
    																	"runtime_config": gr.passphrase_editable+''
    																};
    															}else{
    																answer[gr.name+''].password = {
    																	"name": 'password',
    																	"question_text": 'Password',
    																	"value": gr.password+'',
    																	"runtime_config": gr.secret_editable+''
    																};
    															}

    															answer[gr.name+''].uuid = gr.uuid+'';
    															answer[gr.name+''].description = gr.description+'';
    															answer[gr.name+''].is_default = gr.is_default+'';
    															answer[gr.name+''].is_secret_modified = gr.is_secret_modified+'';
    															answer[gr.name+''].name = gr.name+'';
    															answer[gr.name+''].state = gr.state+'';

    															answer[gr.name+''].environment = gr.environment+'';
    															answer[gr.name+''].project = gr.project+'';

    															answer[gr.name+''].username_isdisabled = gr.username_isdisabled+'';
    															answer[gr.name+''].secret_isdisabled = gr.secret_isdisabled+'';
    															answer[gr.name+''].ssh_private_key_isdisabled = gr.ssh_private_key_isdisabled+'';
    															answer[gr.name+''].passphrase_isdisabled = gr.passphrase_isdisabled+'';

    															i++;
    														}

    														this.logger.debug("Fetched " + i + " credentials.");

    														return JSON.stringify(answer);

    													}catch(e){
    														this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.fetchEnvironmentCredentials. Error:- "+e);
    													}

    												},*/

    mappedCredentials: function(projects, bpType, environments) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.mappedCredentials.\n projects " + projects + "\n bpType" + bpType + "\n environment" + environments);
            var project_array = projects.split(',');
            var env_array = environments.split(',');
            var arr = [];

            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_credential');
            if (bpType == 'runbook' || bpType == 'published_runbook') {
                //gr.addQuery('catalog_item', runbook + '');
            } else {
                for (var i = 0; i &lt;= project_array.length; i++) {
                    if (i == 0)
                        var gsr = gr.addQuery('project.sys_id', project_array[i] + '');
                    else
                        gsr.addOrCondition('project.sys_id', project_array[i] + '');
                }


                gr.query();
                this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.mappedCredentials.\n projects " + projects + "\n bpType" + bpType + "\n environment" + environments + " rowcount " + gr.getRowCount());
                while (gr.next()) {
                    if (env_array.indexOf(gr.environment.sys_id + '') != -1)
                        arr.push({
                            'label': gr.name + '',
                            'value': gr.sys_id + '',
                            'type': gr.type + '',
                            'username': gr.username + ''
                        });
                }
            }

            return JSON.stringify(arr);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.mappedCredentials. Error:- " + e);
        }
    },

    getCatalogInfo: function(sysId) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getCatalogInfo.");

            var catalogItem = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
            catalogItem.addQuery('item_name', sysId);
            //catalogItem.get(sysId);
            //this.logger.info("Fetching Catalog Details for "+blueprint.name);
            catalogItem.query();

            if (catalogItem.next()) {
                var rtn = {
                    "itemName": catalogItem.item_name.name + '',
                    "description": catalogItem.item_name.getRefRecord().description_markdown + '',
                    "usersName": catalogItem.user_criteria.user.getDisplayValue() + '',
                    "groupsName": catalogItem.user_criteria.group.getDisplayValue() + '',
                    "usersSysId": catalogItem.user_criteria.user + '',
                    "groupsSysId": catalogItem.user_criteria.group + ''
                };
                return JSON.stringify(rtn);
            }

            return '';

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getCatalogInfo. Error:- " + e);
        }

    },

    getRealtedCatalogItems: function(sysId) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getRealtedCatalogItems.");

            var catalogItem = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
            catalogItem.addQuery('blueprint', sysId);
            //catalogItem.get(sysId);
            //this.logger.info("Fetching Catalog Details for "+blueprint.name);
            catalogItem.query();
            var answer = {};

            var k = 0;

            while (catalogItem.next()) {
                answer[k] = {
                    'name': catalogItem.item_name.name + '',
                    'sys_id': catalogItem.item_name + ''
                };

                k++;
            }

            return JSON.stringify(answer);

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getRealtedCatalogItems. Error:- " + e);
        }

    },

    getBlueprintInfo: function(sysId) {
        try {

            this.logger.debug("Inside x_nuta2_nutanix_ca_nutanix_runtime_configuration.getBlueprintInfo.");

            var catalogItem = new GlideRecord(this.appUtil.configuration.table.catItem + '');
            if (catalogItem.get(sysId)) {
                catalogItem = new GlideRecord(catalogItem.sys_class_name + '');
                if (catalogItem.get(sysId)) {
                    var rtn = {
                        "itemName": catalogItem.name + '',
                        "description": catalogItem.description_markdown + '',
                    }
                    return JSON.stringify(rtn);
                }
            }

            return '';

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getBlueprintInfo. Error:- " + e);
        }

    },

    fetchRuntimeVariablesValue: function(sysId) {
        try {
            this.logger.debug("Inside x_nuta2_nutanix_ca_nutanix_runtime_configuration.fetchRuntimeVariablesValue.");
            var gr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
            if (gr.get(sysId)) {
                var arr = {};
                if (gr) {
                    arr = {
                        "application_profile": {
                            "sys_ids": gr.multiple_application_profile + ''
                        },
                        "environments": {
                            "sys_ids": gr.environments + '',
                        },
                        "endpoint": {
                            "sys_ids": gr.endpoint + '',
                        },
                        "blueprint": {
                            "name": gr.blueprint.name + ' ' + ((gr.blueprint.getRefRecord().version) ? gr.blueprint.getRefRecord().version : ''),
                            "sys_id": gr.blueprint + '',
                            "class": gr.blueprint.sys_class_name + ''
                        },
                        "project": {
                            "sys_ids": gr.multiple_projects + ''
                        },
                        "type_of_blueprint": gr.type_of_blueprint + '',
                        "item_name": gr.item_name + ''
                    };
                    return JSON.stringify(arr);
                }

                return '';
            }
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.fetchRuntimeVariablesValue. Error:- " + e);
        }
    },

    checkDuplicate: function(catName, catSysId) {
        try {
            this.logger.debug("Inside x_nuta2_nutanix_ca_nutanix_runtime_configuration.checkDuplicate.");
            var gr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
            if (catSysId)
                gr.addEncodedQuery('item_name.name=' + catName + '^item_name!=' + catSysId);
            else
                gr.addEncodedQuery('item_name.name=' + catName);
            gr.query();

            if (gr.next())
                return 'yes';

            return 'no';
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.checkDuplicate. Error:- " + e);
        }

    },
    fetchMultipleBlueprints: function(blueprintType) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.fetchMultipleBlueprints." + blueprintType);
            var gr = new GlideRecord(this.appUtil.configuration.table.catalogProjectRelation + '');
            if (blueprintType == 'unpublished') {
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_unpublishedBP_sysId'));
            }
            if (blueprintType == 'runbook') {
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_runbook_sysId'));
            }
            if (blueprintType == 'published_runbook') {
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_published_runbook_sysId'));
            }
            if (blueprintType == 'published') {
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_category_sysId'));
            }
            gr.orderBy('catalog_item.name');
            gr.query();

            var ans = {};
            var i = 0;
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.fetchMultipleBlueprints." + blueprintType + " rowcount" + gr.getRowCount());
            while (gr.next()) {
                if ((blueprintType == 'unpublished' &amp;&amp; gr.catalog_item.state + '' == 'ACTIVE') || (blueprintType != 'unpublished' &amp;&amp; gr.catalog_item.state + '' == 'active') || (blueprintType != 'unpublished' &amp;&amp; gr.catalog_item.state + '' == 'ACTIVE')) {
                    ans[i] = {
                        'sys_id': gr.catalog_item + '',
                        'name': gr.catalog_item.name + '' + " " + gr.version + ''
                    };
                    i++;
                }
            }

            this.logger.debug("Fetched " + i + " blueprints.");
            return JSON.stringify(ans);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.fetchMultipleBlueprints. Error:- " + e);
        }
    },
    fetchMultipleProjects: function(blueprint, blueprintType) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.fetchBlueprints. blueprint ");
            var gr = new GlideRecord(this.appUtil.configuration.table.catalogProjectRelation + '');
            gr.addQuery('catalog_item', blueprint);

            if (blueprintType == 'unpublished') {
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_unpublishedBP_sysId'));
            }
            if (blueprintType == 'runbook') {
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_runbook_sysId'));
            }
            if (blueprintType == 'published_runbook') {
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_published_runbook_sysId'));
            }
            if (blueprintType == 'published') {
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_category_sysId'));
            }

            //             if (blueprintType == 'unpublished')
            //                 gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_unpublishedBP_sysId'));
            //             if (blueprintType == 'runbook')
            //                 gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_runbook_sysId'));
            //             else
            //                 gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_category_sysId'));

            gr.orderBy('catalog_item.name');
            gr.query();
            var ans = {};
            var i = 0;
            while (gr.next()) {
                if ((gr.catalog_item.state + '').toUpperCase() == 'ACTIVE') {
                    ans[i] = {
                        'name': gr.catalog_item.name + '' + " " + gr.version + '',
                        'project_sys_id': gr.projects + ''
                    };
                    i++;
                }
            }
            this.logger.debug("Fetched " + i + " project.");
            return JSON.stringify(ans);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.fetchMultipleProjects. Error:- " + e);
        }
    },
    getMultipleProfileVariableDetails: function(projects, blueprint, profiles, cat_item, delta_profiles, type) {
        try {
            this.logger.debug("####Inside Nutanix_FetchConfigureSettingDropdown.getMultipleProfileVariableDetails.\n projects " + projects + "\n blueprint " + blueprint + "\n profiles " + profiles + "\n cat_item " + cat_item + "\n delta_profiles " + delta_profiles + "\n type " + type);

            var answer = {};
            if (type == "update") {
                answer = this.getProfileVariableData(profiles, cat_item, JSON.stringify(answer));
                if (delta_profiles != '')
                    answer = this.getProfileVariableData(delta_profiles, blueprint, answer);
            } else {
                answer = this.getProfileVariableData(profiles, blueprint, JSON.stringify(answer));
            }

            this.logger.debug("####Inside Nutanix_FetchConfigureSettingDropdown.getMultipleProfileVariableDetails." + answer);
            return answer;
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getMultipleProfileVariableDetails. Error:- " + e);
        }

    },
    getMultipleServiceVariableDetails: function(projects, blueprint, profiles, type, bpType, cat_item, delta_profiles) {
        try {
            this.logger.debug("--Inside Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails.Projects " + projects + " Blueprint " + blueprint + " Profiles " + profiles + " Type " + type + " BpType " + bpType);

            var multipleService = [];
            if (type == 'update') {
                multipleService = this.getServiceVariableData(projects, cat_item, profiles, type, bpType, JSON.stringify(multipleService));
                multipleService = this.getServiceVariableData(projects, blueprint, delta_profiles, type, bpType, multipleService);
            } else {
                multipleService = this.getServiceVariableData(projects, blueprint, profiles, type, bpType, JSON.stringify(multipleService));
            }

            this.logger.debug("Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails final array. return : " + JSON.stringify(multipleService));
            return multipleService;
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.noProfileVariableDetails. Error:- " + e);
        }
    },

    noProfileVariableDetails: function(projects, blueprint, profiles) {
        this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.noProfileVariableDetails.");
        try {
            var project = projects.split(',');
            var profile = profiles.split(',');
            var answer = [];
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.noProfileVariableDetails. project : " + JSON.stringify(project) + " profile " + JSON.stringify(profile) + ' answer ' + JSON.stringify(answer));
            for (var i in profile) {
                var gr = new GlideAggregate(this.appUtil.configuration.table.variablesProperties + '');
                gr.addQuery('catalog_item', blueprint);
                gr.addQuery('isprofilevariable', true);
                gr.addQuery('application_profile', profile[i]);
                gr.query();
                if (gr.getRowCount() == 0 || gr.getRowCount() &lt; 1) {
                    answer.push(profile[i]);
                }
            }
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.noProfileVariableDetails. answer : " + JSON.stringify(answer));
            return JSON.stringify(answer);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.noProfileVariableDetails. Error:- " + e);
        }
    },
    getProjectSubnet: function(catalog, project_uuid) {
        try {
            var clusterJson = {};
            var catalogSysid;
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getProjectSubnet. catalog : " + catalog + " project_uuid : " + project_uuid);
            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
            gr.addQuery('item_name', catalog);
            gr.query();
            if (gr.next()) {
                var grProject = new GlideRecord(this.appUtil.configuration.table.Project + '');
                grProject.addQuery('uuid', project_uuid + '');
                grProject.query();
                if (grProject.next()) {
                    if (grProject.subnet + '' != '') {
                        var subnetList = grProject.subnet.split(',');
                        for (var x in subnetList) {
                            var grSubnet = new GlideRecord(this.appUtil.configuration.table.subnet + '');
                            grSubnet.addQuery('sys_id', subnetList[x]);
                            grSubnet.query();
                            if (grSubnet.next()) {
                                if (!clusterJson[grSubnet.cluster_name + '']) {
                                    clusterJson[grSubnet.cluster_name + ''] = {};
                                    clusterJson[grSubnet.cluster_name + '']['uuid'] = grSubnet.cluster_uuid + '';
                                    clusterJson[grSubnet.cluster_name + '']['subnet'] = {};
                                }

                                clusterJson[grSubnet.cluster_name + '']['subnet'][grSubnet.uuid + ''] = grSubnet.name + '';
                            }

                        }
                    }

                }
            }
            /*setting session*/
            var grCat = new GlideRecord('x_nuta2_nutanix_ca_nutanix_catalog_items');
            grCat.addQuery('sys_id', catalog);
            grCat.query();
            if (grCat.next()) {
                var gr = new GlideRecord('item_option_new');
                gr.addQuery('cat_item.name', grCat.name + '');
                gr.query();
                var catalog_clusterJSON = {};
                while (gr.next()) {
                    if ((gr.name + '').endsWith('cluster_name') &amp;&amp; gr.question_text == 'Cluster Name') {
                        catalog_clusterJSON[gr.sys_id + ''] = {};
                        catalog_clusterJSON[gr.sys_id + '']['name'] = gr.name + '';
                        catalog_clusterJSON[gr.sys_id + '']['label'] = gr.question_text + '';
                        catalog_clusterJSON[gr.sys_id + '']['value'] = gr.default_value + '';
                    }
                }

                for (var k in catalog_clusterJSON) {
                    var serviceName = (catalog_clusterJSON[k].name + '').slice(0, (catalog_clusterJSON[k].name).length - 12);
                    catalog_clusterJSON[k]['nics'] = {};
                    var gr = new GlideRecord('item_option_new');
                    gr.addQuery('cat_item.name', grCat.name + '');
                    gr.query();
                    while (gr.next()) {
                        if ((gr.name + '').indexOf(serviceName) != -1 &amp;&amp; (gr.name + '').indexOf('_nic_') != -1) {
                            catalog_clusterJSON[k]['nics'][gr.sys_id + ''] = gr.name + '';
                        }
                    }
                }
            }

            /**/


            var catNicJson = {
                "catalog_data": catalog_clusterJSON,
                "cluster_info": clusterJson
            };
            this.logger.debug("**Inside Nutanix_FetchConfigureSettingDropdown.getProjectSubnet. final answer : " + JSON.stringify(catNicJson));
            return (JSON.stringify(catNicJson));

        } catch (e) {
            this.logger.error("Inside Nutanix_FetchConfigureSettingDropdown.getProjectSubnet." + e);
        }
    },

    getProfileVariableData: function(profiles, blueprint, answers) {
        gs.info("Profile Var details profiles " + profiles + " blueprint  " + blueprint + " answers " + answers);

        var profile = profiles.split(',');
        var answer = JSON.parse(answers);

        var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
        for (var i in profile) {
            if (i == 0)
                var qc = gr.addQuery('application_profile', profile[i]);
            else
                qc.addOrCondition('application_profile', profile[i]);
        }
        gr.addQuery('catalog_item', blueprint);
        gr.addQuery('isprofilevariable', true);
        gr.orderBy('variable.name');
        gr.query();

        var i = 0;
        while (gr.next()) {
            gs.info("Profile Var details profiles get row count " + gr.getRowCount());

            /*if (gr.is_hidden == true)
            	continue;*/

            var opt = [];
            if (gr.variable.type + '' == 5) {
                var optionRec = new GlideRecord("question_choice");
                optionRec.addQuery('question', gr.variable + '');
                optionRec.query();
                while (optionRec.next()) {

                    opt.push(optionRec.value + '');

                }

            } else if (gr.variable.type + '' == 21) {
                var varRefRec = gr.variable.getRefRecord().reference_qual + '';
                varRefRec = varRefRec.substr(9, varRefRec.length);
                var optionRec = new GlideRecord(this.appUtil.configuration.table.dropDownTable + '');
                optionRec.addQuery('variable', varRefRec);
                optionRec.query();
                while (optionRec.next()) {
                    opt.push(optionRec.value + '');
                }

            }


            answer[gr.sys_id + ''] = {
                'name': gr.variable.name + '',
                'question_text': gr.variable.question_text + '',
                'value': gr.default_value + '',
                'runtime_config': gr.runtime_config + '',
                'type': gr.variable.type + '',
                'isprofilevariable': gr.isprofilevariable + '',
                'uuid': gr.uuid + '',
                'isdisabled': gr.isdisabled + '',
                "val_type": gr.value_type + '',
                "description": gr.variable.help_text + '',
                "mandatory": gr.variable.mandatory + '',
                "regex": gr.field_regex + '',
                "options": opt,
                "data_type": gr.data_type + '',
                "uuid": gr.uuid + '',
                "application_profile": gr.application_profile + '',
                "field_json": this.appUtil.getMacroDependencies(gr.field_json + ""),
                "field": gr.field_json + "",
                "isHidden": gr.is_hidden + ""
            };
            i++;
        }

        return JSON.stringify(answer);
    },
    getServiceVariableData: function(projects, blueprint, profiles, type, bpType, multipleService) {
        var project_array = projects.split(',');
        var profile_array = profiles.split(',');
        var multipleService = JSON.parse(multipleService);
        for (var pro = 0; pro &lt; profile_array.length; pro++) {
            var profile = profile_array[pro];
            var variables = new GlideRecord(this.appUtil.configuration.table.applicationProfiles + '');
            if (variables.get(profile)) {
                this.logger.info("Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails Feach ServiceVariable of " + variables.name + " Profile.");
            }
            var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
            gr.addQuery('application_profile', profile_array[pro]);
            gr.addQuery('catalog_item', blueprint);
            gr.addQuery('isprofilevariable', false);
            gr.orderBy('variable.order');
            gr.query();

            this.logger.info("Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails Feach ServiceVariable of " + variables.name + " Profile. Feached " + gr.getRowCount() + " Count");
            var answer = {};
            var i = 0;
            while (gr.next()) {

                if (!answer[variables.name + '_' + gr.service_name.name + ''])
                    answer[variables.name + '_' + gr.service_name.name + ''] = {};
                var categoryName = gr.category_name.name + '';
                if (gr.category_name.name + '' == gr.variable.name + '') {
                    if (!answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + ''])
                        answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + ''] = {};
                    if (bpType == "published") {
                        var ans = (this.getVariablePatchedValue(type + '', gr.default_value + '', gr.sys_id, gr.variable.name + '', gr.category_name.name + '', gr.category_name.question_text + ''));
                        this.logger.debug("--Inside Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails.Patched Value for " + gr.variable.name + " :: " + ans);
                        answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + '']['new_' + gr.sys_id + ''] = (ans) ? JSON.parse(ans) : [];
                        answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + '']['new_' + gr.sys_id + ''].notCmplx = false;
                    } else {
                        answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + ''][gr.sys_id + ''] = (gr.default_value + '') ? JSON.parse(gr.default_value + '') : {};
                        answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].notCmplx = false;
                    }
                } else {
                    /*if (gr.is_hidden == true)
                    	continue;*/
                    if (!answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + ''])
                        answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + ''] = {};
                    var catname = (gr.category_name.name + '').substring(((gr.service_name.name + '').length) + 1);
                    var varname = (gr.variable.name + '').substring(((gr.service_name.name + '').length) + 1);
                    var default_value = "";
                    var runtime_config = gr.runtime_config + '';
                    var isdisabled = gr.isdisabled + '';
                    var ans, parsedAns;
                    if (catname == "ssh_keys" &amp;&amp; bpType == "published") {
                        var hasKey;
                        var gr_ssh = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                        gr_ssh.addQuery('application_profile', profile);
                        gr_ssh.addQuery('catalog_item', blueprint);
                        gr_ssh.addQuery('isprofilevariable', false);
                        gr_ssh.addQuery('variable.name', 'CONTAINS', 'key_0');
                        gr_ssh.orderBy('variable.order');
                        gr_ssh.query();
                        if (gr_ssh.next()) {
                            hasKey = "true";
                        }
                        if (hasKey != "true") {
                            ans = this.getVariablePatchedValue(type + '', gr.default_value + '', gr.sys_id, gr.variable.name + '', gr.category_name.name + '', gr.category_name.question_text + '', "true");
                            parsedAns = (ans) ? JSON.parse(ans) : {};
                            answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + ''] = parsedAns;
                        }
                    }
                    if ((!gr.default_value) &amp;&amp; bpType == "published") {
                        ans = this.getVariablePatchedValue(type + '', gr.default_value + '', gr.sys_id, gr.variable.name + '', gr.category_name.name + '', gr.category_name.question_text + '');
                        parsedAns = (ans) ? JSON.parse(ans) : "";
                        this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails.Patched Value for " + gr.variable.name + " :: " + ans);
                        if (parsedAns) {
                            default_value = parsedAns.value + '';
                            var isSupported = (default_value + '' == 'Cloud-init' || default_value + '' == 'Sysprep' || (varname + '').startsWith('key_') || (this.disabledFields.includes(varname) &amp;&amp; varname + '' != 'name' &amp;&amp; varname + '' != 'type')) ? false : true;
                            runtime_config = ((default_value + '').indexOf('@@') != -1 || isSupported + '' == 'false') ? false : (parsedAns.runtime + '') ? parsedAns.runtime + '' : gr.runtime_config + '';
                            isdisabled = ((default_value + '').indexOf('@@') != -1 || isSupported + '' == 'false') ? true : (runtime_config + '' == 'true') ? false : true;
                        }
                    }

                    /*Advanced Variable*/
                    var opt = [];
                    if (gr.variable.type + '' == 5 &amp;&amp; gr.isservicevariable == true) {
                        var optionRec = new GlideRecord("question_choice");
                        optionRec.addQuery('question', gr.variable + '');
                        optionRec.query();
                        while (optionRec.next()) {
                            opt.push(optionRec.value + '');
                        }
                    } else if (gr.variable.type + '' == 21 &amp;&amp; gr.isservicevariable == true) {
                        var varRefRec = gr.variable.getRefRecord().reference_qual + '';
                        varRefRec = varRefRec.substr(9, varRefRec.length);
                        var optionRec = new GlideRecord(this.appUtil.configuration.table.dropDownTable + '');
                        optionRec.addQuery('variable', varRefRec);
                        optionRec.query();
                        while (optionRec.next()) {
                            opt.push(optionRec.value + '');
                        }
                    }
                    answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + ''][gr.sys_id + ''] = {
                        'name': gr.variable.name + '',
                        'question_text': gr.variable.question_text + '',
                        'value': (gr.default_value + '') ? gr.default_value + '' : default_value,
                        'runtime_config': (gr.default_value + '') ? gr.runtime_config + '' : runtime_config,
                        'type': gr.variable.type + '',
                        'isprofilevariable': gr.isprofilevariable + '',
                        'uuid': gr.uuid + '',
                        'isdisabled': (gr.default_value + '') ? gr.isdisabled + '' : isdisabled,
                        'isSupported': gr.issupported + '',
                        'isservicevariable': gr.isservicevariable + '',
                        'notCmplx': true,
                        'val_type': gr.value_type + '',
                        'description': gr.variable.help_text + '',
                        'mandatory': gr.variable.mandatory + '',
                        'regex': gr.field_regex + '',
                        'options': opt,
                        'data_type': gr.data_type + '',
                        'serviceField': (gr.isprofilevariable + '' == 'false' &amp;&amp; gr.isservicevariable + '' == 'false') ? true : false,
                        "field_json": (gr.isservicevariable + '' == 'true') ? this.appUtil.getMacroDependencies(gr.field_json + "") : {},
                        "field": (gr.isservicevariable + '' == 'true') ? gr.field_json + "" : "{}",
                        "isHidden": gr.is_hidden + ""
                    };
                }
                i++;
            }

            this.logger.debug("--Inside Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails. all service variable value answer" + variables.name + " :: " + JSON.stringify(answer));
            if (i &gt; 0) {
                var returnJSON = {};
                returnJSON['profile'] = variables.name + '';
                returnJSON['service_configuration'] = answer;
                returnJSON['profile_sys_id'] = variables.sys_id + '';
                if (pro == 0)
                    returnJSON['subnet_list'] = this.getNutanixSubnetList(projects);
                this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails " + JSON.stringify(returnJSON));
                multipleService.push(returnJSON);
            }
        }

        return JSON.stringify(multipleService);
    },
    mpiPatchingBp: function(mpi_uuid, bp_name, project_uuid, environment_uuid, profile_sysid, env_profile, env_sysid) {
        try {
            gs.info("!! mpi_uuid : " + mpi_uuid + " bp_name : " + bp_name + " project_uuid : " + project_uuid + " environment_uuid : " + environment_uuid + " profile_sysid : " + profile_sysid + " env_profile : " + env_profile + " env_sysid : " + env_sysid);
            var logger = new Nutanix_Calm_Logger();
            var utils = new Nutanix_Calm_Utils();
            var reqUtils = new Nutanix_RequestUtil();
            var response = utils.makeCalmApiCall('GET', '/calm_marketplace_items/' + mpi_uuid);
            if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {
                response = JSON.parse(response.getBody());
                var name = bp_name + '';
                var app_bp_name = ((name + GlideSecureRandomUtil.getSecureRandomString(8) + mpi_uuid).replaceAll('-', ' ').trim().replaceAll(' ', '_')).substring(0, 64);
                var tmpbody = {
                    "status": response.status.resources.app_blueprint_template.status,
                    "spec": response.spec.resources.app_blueprint_template.spec
                };
                var body = {
                    "api_version": "3.0", //response.api_version,
                    "metadata": {
                        "kind": "blueprint",
                        "project_reference": {
                            "kind": "project",
                            "uuid": project_uuid + ''
                        },
                        "categories": response.metadata.categories //changes
                    },
                    "spec": {
                        "description": response.spec.resources.app_blueprint_template.spec.description, //response.spec.description,
                        "app_blueprint_name": app_bp_name + '',
                        "source_marketplace_version": response.spec.resources.version, //"1.0.0", //changes
                        "source_marketplace_name": name + '',
                        "resources": response.spec.resources.app_blueprint_template.spec.resources
                    }
                };





                /*var obj = new Object();
                for(var pair in env_profile) {
                	var envuuid = env_profile[pair].key;
                	var environment_id = new GlideRecord('x_nuta2_nutanix_ca_nutanix_environment');
                	if(environment_id.get(envuuid))
                		envuuid = environment_id.getValue('uuid')+'';
                	var all_profile_arr = JSON.parse(env_profile[pair].value);
                	for(var prof in all_profile_arr) {
                		 var profile_name = all_profile_arr[prof];
                		 if(profile_arr.indexOf(all_profile_arr[prof])!=-1) {
                			obj["environment"] = {
                				"uuid": envuuid
                			};
                			obj["app_profile"] = {
                				"name": profile_name
                			};
                			env_template.push(obj);
                		 }

                	}
                }*/
                var env_template = [];
                var env_uuid = [];
                var profile_arr = [];
                if (env_profile != '') {
                    env_profile = JSON.parse(env_profile);
                    var profile_str = profile_sysid.split(',');
                    for (var pro in profile_str) {
                        var profile = new GlideRecord('x_nuta2_nutanix_ca_catalog_item_and_application_profile_relation');
                        profile.addEncodedQuery('application_profile.sys_id=' + profile_str[pro]);
                        profile.query();
                        if (profile.next())
                            profile_arr.push(profile.application_profile.name + '');
                    }
                    var environment_sysid = env_sysid.split(',');
                    gs.info('profile_arr: ' + profile_arr[0] + ' profile_sysid: ' + profile_sysid);


                    for (var env in environment_sysid) {
                        var environment_id = new GlideRecord('x_nuta2_nutanix_ca_nutanix_environment');
                        if (environment_id.get(environment_sysid[env]))
                            env_uuid.push(environment_id.getValue('uuid') + '');
                    }
                    //new code
                    var obj = new Object();
                    var env_check = 0;
                    for (var pair in env_profile) {
                        var envuuid = env_profile[pair].key;
                        var environment_id = new GlideRecord('x_nuta2_nutanix_ca_nutanix_environment');
                        if (environment_id.get(envuuid))
                            envuuid = environment_id.getValue('uuid') + '';
                        if (env_profile[0].value == '')
                            continue;
                        var all_profile_arr = JSON.parse(env_profile[0].value);
                        for (var prof in all_profile_arr) {
                            var profile_name = all_profile_arr[prof];
                            if (profile_arr.indexOf(all_profile_arr[prof]) != -1) {
                                obj["environment"] = {
                                    "uuid": envuuid
                                };
                                obj["app_profile"] = {
                                    "name": profile_name
                                };
                                env_template.push(obj);
                                env_check++;
                                break;
                            }
                        }
                        if (env_check &gt; 0) {
                            break;
                        }
                    }
                } else {
                    env_uuid.push(env_sysid);
                    profile_arr.push(profile_sysid);
                    //new code
                    var obj = new Object();
                    var env_template = [];
                    //	for(var i = 0; i &lt; env_uuid.length; i++) {
                    var envuuid = env_uuid[0] + '';
                    for (var j = 0; j &lt; profile_arr.length; j++) {
                        var profile_name = profile_arr[j] + '';
                        obj["environment"] = {
                            "uuid": envuuid
                        };
                        obj["app_profile"] = {
                            "name": profile_name
                        };
                        env_template.push(obj);
                    }
                    //} 

                }
                /*var obj = new Object();
                var env_template = [];
                for(var i = 0; i &lt; env_uuid.length; i++) {
                	var envuuid = env_uuid[i]+'';
                	for (var j = 0; j &lt; profile_arr.length; j++) {
                		var profile_name = profile_arr[j]+'';
                		obj["environment"] = {
                			"uuid": envuuid
                		};
                		obj["app_profile"] = {
                			"name": profile_name
                		};
                		env_template.push(obj);
                	}
                }*/
                body.spec.environment_profile_pairs = env_template;
                gs.info('makeCalmCall:: ' + JSON.stringify(body));
                var response = utils.makeCalmApiCall('POST', '/blueprints/marketplace_launch', JSON.stringify(body));
                if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {
                    parseResp = JSON.parse(response.getBody());
                    gs.info('mpiPatching_response: ' + JSON.stringify(parseResp));
                    var clonedBpUuid = parseResp.metadata.uuid;
                    return clonedBpUuid + '';
                } else {
                    logger.info('/blueprints/marketplace_launch POST call Error:: ' + JSON.stringify(response.getBody()));
                }

            } else {
                logger.info('/calm_marketplace_items/ POST call Error:: ' + JSON.stringify(response.getBody()));
            }
        } catch (e) {
            logger.error("Exception caught inside mpiPatching. Error:- " + e);
            return "false";
        }
    },

    copyMpiPatching: function(projects, blueprint, profile1, environment) {

        var logger = new Nutanix_Calm_Logger();
        var utils = new Nutanix_Calm_Utils();
        var reqUtils = new Nutanix_RequestUtil();


        try {
            logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.mpiPatching.");
            gs.info("RV mpipatching: " + projects + blueprint + profile1 + environment);
            environment = JSON.parse(environment);
            var output = [];

            for (var i = 0; i &lt; environment.length; i++) {
                var profilesArray = JSON.parse(environment[i].value);
                gs.info("Env ::" + profilesArray.length + " Result" + (profilesArray.length == 0));
                if (profilesArray.length == 0) {
                    continue;
                }

                var blueprintTemplate = "";
                var catVariableBody = {};
                var bpVariablesJSON = {};
                var parseResp = {};
                var envSys = environment[i].key;

                var environment_uuid = ' ';
                var project_uuid = '';

                var grEnv = new GlideRecord("x_nuta2_nutanix_ca_nutanix_environment");
                grEnv.get(envSys);

                environment_uuid = grEnv.uuid + "";
                project_uuid = grEnv.project.uuid + '';

                var bp = new GlideRecord('x_nuta2_nutanix_ca_nutanix_marketplaceitems');
                bp.addQuery('sys_id', blueprint);
                bp.query();

                var mpi_uuid = (bp.next()) ? bp.uuid : "";

                var response = this.appUtil.makeCalmApiCall('GET', '/calm_marketplace_items/' + mpi_uuid);
                if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                    response = JSON.parse(response.getBody());

                    var name = bp.name + '';
                    var app_bp_name = ((name + GlideSecureRandomUtil.getSecureRandomString(8) + mpi_uuid).replaceAll('-', ' ').trim().replaceAll(' ', '_')).substring(0, 64);
                    var tmpbody = {
                        "status": response.status.resources.app_blueprint_template.status,
                        "spec": response.spec.resources.app_blueprint_template.spec
                    };


                    var body = {
                        "api_version": "3.0", //response.api_version,
                        "metadata": {
                            "kind": "blueprint",
                            "project_reference": {
                                "kind": "project",
                                "uuid": project_uuid + ''
                            },
                            "categories": response.metadata.categories //changes
                        },
                        "spec": {
                            "description": response.spec.resources.app_blueprint_template.spec.description, //response.spec.description,
                            "app_blueprint_name": app_bp_name + '',
                            "source_marketplace_version": response.spec.resources.version, //"1.0.0", //changes
                            "source_marketplace_name": name + '',
                            "resources": response.spec.resources.app_blueprint_template.spec.resources

                            //reqUtils.makeResourceBody(tmpbody, tmpbody.status.resources, current)
                            //response.spec.resources.app_blueprint_template.spec.resources
                        }
                    };


                    var env_template = [];
                    for (var j = 0; j &lt; profilesArray.length; j++) {
                        var obj = new Object();
                        obj["environment"] = {
                            "uuid": environment_uuid
                        };
                        obj["app_profile"] = {
                            "name": profilesArray[j]
                        };
                        env_template.push(obj);
                    }

                    body.spec.environment_profile_pairs = env_template;

                    gs.info("CalmMPI call:: " + JSON.stringify(body));
                    var response = utils.makeCalmApiCall('POST', '/blueprints/marketplace_launch', JSON.stringify(body));
                    if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                        var session = gs.getSession();
                        session.putClientData('non_filtered_cloned_bp_response', response.getBody());

                        parseResp = JSON.parse(response.getBody());
                        blueprintTemplate = (parseResp.status.resources) ? parseResp.status.resources : "";
                        var clonedBpUuid = parseResp.metadata.uuid;

                        //gs.error("Patching : "+response.getBody());

                    } else {
                        logger.error("API call to '/blueprints/marketplace_launch' failed with name : " + app_bp_name + ":-" + response.getBody());
                        //gs.error("Errorr :: "+(JSON.parseresponse.getBody()).message_list[0].message);
                        return JSON.stringify({
                            "errMess": JSON.parse(response.getBody()).message_list[0].message,
                            "status": false
                        });
                    }

                    var bpVariables = new Nutanix_CreateCatalogVariables();
                    if (bp.template_type == "Single Vm") {

                        var service_body = [{
                            "uuid": "singleVm-default-service-uuid",
                            "name": "single_vm_configuration"
                        }];

                        catVariableBody = {
                            "substrate_definition_list": (blueprintTemplate.substrate_definition_list) ? blueprintTemplate.substrate_definition_list : "",
                            "app_profile_list": (blueprintTemplate.app_profile_list) ? blueprintTemplate.app_profile_list : "",
                            "service_definition_list": service_body,
                            "package_definition_list": (blueprintTemplate.package_definition_list) ? blueprintTemplate.package_definition_list : ""
                        };
                        bpVariablesJSON = bpVariables._filterJSONDatatoService(catVariableBody);
                    } else if (blueprintTemplate.package_definition_list &amp;&amp; blueprintTemplate.substrate_definition_list &amp;&amp; blueprintTemplate.app_profile_list &amp;&amp; blueprintTemplate.service_definition_list) {
                        catVariableBody = {
                            "substrate_definition_list": (blueprintTemplate.substrate_definition_list) ? blueprintTemplate.substrate_definition_list : "",
                            "app_profile_list": (blueprintTemplate.app_profile_list) ? blueprintTemplate.app_profile_list : "",
                            "service_definition_list": (blueprintTemplate.service_definition_list) ? blueprintTemplate.service_definition_list : "",
                            "package_definition_list": (blueprintTemplate.package_definition_list) ? blueprintTemplate.package_definition_list : ""
                        };

                        bpVariablesJSON = bpVariables._filterJSONDatatoService(catVariableBody);
                    }

                    bpVariablesJSON.uuid = parseResp.metadata.uuid + '';
                    bpVariablesJSON.name = parseResp.metadata.name + '';
                    bpVariablesJSON.envUUID = environment_uuid + "";

                    output.push(bpVariablesJSON);

                    var clientData = session.getClientData('Cloned_bp_response');
                    logger.debug("MPI cloned Blueprint response ::" + clientData);

                } else {
                    logger.error("API call to '/calm_marketplace_items/uuid' failed: " + response.getBody());
                    var result = {
                        "errMess": (response.getBody()).message_list[0].message,
                        "status": false
                    };
                    return JSON.stringify(result);
                }
            }
            var session = gs.getSession();
            session.putClientData('Cloned_bp_response', JSON.stringify(output));
            return JSON.stringify({
                "errMess": "Successful",
                "status": true
            });
        } catch (e) {
            logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.mpiPatching. Error:- " + e);
            return "false";
        }
    },

    variableArrayParser_client_script: function(type, parent_uuid, var_array) {
        //this.logger.debug("++++variableArrayParser type" + type + " parent_uuid," + parent_uuid + " var_array" + var_array);
        var cat_launch = false;
        if (type == 'catalog') {
            cat_launch = true;
            var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
            gr.addQuery("item_name", parent_uuid);
            gr.query();
            if (gr.next()) {
                parent_uuid = gr.blueprint.uuid + "";
                type = "blueprints";
                if ("" + gr.item_name.category.title == "Blueprint") {
                    type = "blueprints";
                }
                if ("" + gr.item_name.category.title == "Marketplace Blueprint") {
                    type = "published";
                }

            }
        }

        var parsed_var_array = JSON.parse(var_array);
        var pre_map = {};
        var extApiFlag = false;
        for (var i = 0; i &lt; parsed_var_array.length; i++) {
            var var_data = parsed_var_array[i];
            var hasMacros = (this.appUtil._createMacroArray(var_data.def_val + "").length != 0);
            var depends_on = this.appUtil.getMacroDependencies(JSON.stringify(var_data));
            pre_map[var_data.name] = {
                "depends_on": depends_on,
                "value": (hasMacros) ? var_data.def_val + "" : var_data.value + "",
                "uuid": var_data.uuid,
                "type": var_data.type,
                "data_type": var_data.data_type,
                "name": var_data.name,
                "sys_id": (var_data.sys_id) ? var_data.sys_id : "",
                "catalog_launch": cat_launch
            };
            if (var_data.type == 'EXEC_LOCAL' || var_data.type == 'HTTP_LOCAL' || var_data.type == 'EXEC_SECRET' || var_data.type == 'HTTP_SECRET') {
                pre_map[var_data.name].requiresApiCall = true;
            } else {
                if (var_data.options &amp;&amp; var_data.options.choices &amp;&amp; var_data.options.choices.length != 0) {
                    pre_map[var_data.name].options = var_data.options.choices;
                    pre_map[var_data.name].data_type = "LIST_SINGLE";
                }
                if (var_data.data_type + "" == 'LIST') {
                    if (cat_launch)
                        pre_map[var_data.name].value = this._sysIdToValue(var_data.value);
                    pre_map[var_data.name].data_type = var_data.data_type;
                }
            }

        }
        //this.logger.debug("====variableArrayParser type" + type + " parent_uuid," + parent_uuid + " var_array" + var_array);
        var result = this.getHttpValues_client_script(type, parent_uuid, JSON.stringify(pre_map));

        return result;
    },
    getHttpValues_client_script: function(type, parent_uuid, pre_map) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getHttpValues. type : " + type + " parent_uuid : " + parent_uuid + " pre_map : " + pre_map);

            var post_value_map = {};
            pre_map = JSON.parse(pre_map);
            var top_pre_map = {};
            for (var i in pre_map) {
                top_pre_map[i] = this.appUtil.createPreMap(pre_map[i].depends_on, pre_map[i].type);
            }

            var top_post_map = this.appUtil.createDependencyMap(top_pre_map);

            var dependency_array = top_post_map.Dep_array;
            var error_array = top_post_map.error_map;
            var mpi_uuid, bp_name, project_uuid, environment_uuid;

            if (type == 'unpublished') {

                var table_name = (type == 'unpublished') ? this.appUtil.configuration.table.Blueprint + '' : 'x_nuta2_nutanix_ca_nutanix_marketplaceitems';
                var grBlueprint = new GlideRecord(table_name);
                if (grBlueprint.get(parent_uuid)) {
                    parent_uuid = grBlueprint.uuid + '';
                    type = 'blueprints';
                }
            }
            if (type + '' == 'published') {

                var table_name = 'x_nuta2_nutanix_ca_nutanix_marketplaceitems';
                var grBlueprint = new GlideRecord(table_name);
                grBlueprint.addEncodedQuery('uuidLIKE' + parent_uuid);
                grBlueprint.query();

                if (grBlueprint.next()) {

                    mpi_uuid = grBlueprint.uuid + '';
                    bp_name = grBlueprint.name;

                    var bp_project = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_projects_blueprints_relationship');
                    bp_project.addEncodedQuery('catalog_item.sys_id=' + grBlueprint.sys_id);
                    bp_project.query();
                    while (bp_project.next()) {
                        project_uuid = bp_project.projects.uuid;
                        environment_uuid = bp_project.projects.environment_uuid;
                    }

                    //parent_uuid = this.mpiPatchingBp(mpi_uuid, bp_name, project_uuid, environment_uuid);
                    parent_uuid = mpi_uuid;
                    type = 'blueprints';
                }
            }
            // 			gs.info("!"+JSON.stringify(dependency_array));
            for (var pos = 0; pos &lt; dependency_array.length; pos++) {

                var var_json = pre_map[dependency_array[pos]];

                this.logger.debug("!!!!! var_json \n" + JSON.stringify(var_json));
                if (!var_json) {
                    this.logger.error('Dependent variable "' + dependency_array[pos] + '" not found.');
                    continue;
                }

                if (!var_json.requiresApiCall) {
                    if (var_json.data_type + "" == "LIST_SINGLE" || var_json.data_type + "" == 'LIST') {
                        //gs.info(JSON.stringify(var_json));
                        var_json.options = this._substituteMacro(var_json.options.toString(), pre_map).split(',');
                        var_json.value = this._substituteMacro(var_json.value, pre_map);
                    } else
                        var_json.value = this._substituteMacro(var_json.value, pre_map);
                    post_value_map[dependency_array[pos]] = var_json;
                    continue;
                }

                var var_uuid = var_json.uuid;
                var options = {
                    "state": "",
                    "values": []
                };

                var request_body = JSON.stringify({
                    "requestId": "",
                    "overridden_field": this._createOverrideVarBody(pre_map, var_json)
                });
                //gs.info("Override body: "+request_body);
                //gs.info("Send val body: "+'POST' + '/' + type + '/' + parent_uuid + '/variables/' + var_uuid + '/values' + request_body + "");
                var sendValuesBody = this.appUtil.makeCalmApiCall('POST', '/' + type + '/' + parent_uuid + '/variables/' + var_uuid + '/values', request_body + "");

                var parsedSendValueBody = JSON.parse(sendValuesBody.getBody());
                // 				gs.info(sendValuesBody.getBody());
                var valPollBody = {
                    "requestId": parsedSendValueBody.request_id,
                    "trlId": parsedSendValueBody.trl_id
                };
                //gs.info("valPollBody "+JSON.stringify(valPollBody));
                var getValuesBody = this.appUtil.makeCalmApiCall('POST', '/' + type + '/' + parent_uuid + '/variables/' + var_uuid + '/values', JSON.stringify(valPollBody));
                var parsedValueBody = JSON.parse(getValuesBody.getBody());
                var execState = parsedValueBody.state + "";
                while (execState == 'RUNNING' || execState == 'running') {
                    getValuesBody = this.appUtil.makeCalmApiCall('POST', '/' + type + '/' + parent_uuid + '/variables/' + var_uuid + '/values', JSON.stringify(valPollBody));
                    parsedValueBody = JSON.parse(getValuesBody.getBody());
                    execState = parsedValueBody.state + "";
                }
                //gs.info("Values:"+getValuesBody.getBody());
                //r parsedValueBody = JSON.parse(getValuesBody.getBody());
                if (parsedValueBody.state == 'SUCCESS') {
                    var_json.state = parsedValueBody.state;
                    var_json.default_value = var_json.value + "";
                    var_json.value = [];
                    for (var i in parsedValueBody.values)
                        var_json.value[i] = parsedValueBody.values[i];
                } else {
                    var_json.state = parsedValueBody.state;
                    var_json.error = [];
                    for (var j in parsedValueBody.message_list)
                        var_json.error[j] = parsedValueBody.message_list[j].message;
                }

                post_value_map[dependency_array[pos]] = var_json;
            }

            //gs.info("!!!Pre map:" + JSON.stringify(pre_map));
            gs.info("post_value_map:" + JSON.stringify(post_value_map));
            return JSON.stringify(post_value_map);

        } catch (e) {
            this.logger.error("Error caught in Nutanix_FetchConfigureSettingDropdown.getHttpValues:" + e);
        }
    },
    fetchEndpoint: function(project) {
        var endpoint = new GlideRecord('x_nuta2_nutanix_ca_endpoints');
        endpoint.addQuery('project', project + '');
        endpoint.query();
        var result = [];

        while (endpoint.next()) {
            result.push(endpoint.sys_id);
        }
        return result;
    },
    type: 'Nutanix_FetchConfigureSettingDropdown'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-28 19:21:56&lt;/sys_created_on&gt;&lt;sys_id&gt;92e8017f37112300fdfc097973990e33&lt;/sys_id&gt;&lt;sys_mod_count&gt;1121&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_FetchConfigureSettingDropdown&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_92e8017f37112300fdfc097973990e33&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-12-10 12:13:47&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1525968271</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>58021aa32fd50110e49924c62799b6d3</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb91895440000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table/>
<target_name>Nutanix_FetchConfigureSettingDropdown</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>21f855521d58c110860fe1829c651188</update_guid>
<update_guid_history>21f855521d58c110860fe1829c651188:-1525968271,8049b85ae294c1100d3f14c1c488a7a1:-1943165444,c6b1a8169d54c110b12e95015c28b274:-1690281315,927405bb40cf14d03be43f5cf741cd34:1253164152,8f01c5f7aecf14d0a60716296ececa97:-1307537833,74aeb4775bcf14d0ab77d48ac7ef8d87:-814162685,2849e43b128f14d0686f4f63bb882b72:-1304879588,b7d728f7838f14d072ee824934f62f0c:-1919529937,409424776a8f14d04542fe48964ecb7c:2040717836,d082e0f39e8f14d0e1139a6a4b1e2106:1166596144,32c436afd54b14d02a5f584888621b60:-939698524,55ef66abd74b14d0927a8850214cae04:828884106,81cda66b3d4b14d057837063dbac9437:-1193165360,bbcbaee7f34b14d032b4c2a017e80c8f:-797765290,ba176e23a34b14d06937a73e3b287662:1855970005,a8185e6b9a0b14d06d6c6dcca1565cc4:1432230451,8347d26b750b14d0ffe8e2fc852a9601:-1177732035,ae45d6e7fe0b14d032387caab8a9c1e7:506188180,574906af3ac714d00ae3e490e7a72a9b:600189882,72b50e6ba3c714d0a5f3bebb75a35f89:111868821,36714aa74ec714d051211abc485dbd81:-455019881,85fbb9ef1c8714d08da8be5e63210891:1801941744,2cc7fd2fa68714d07c6d8b731cf6de46:-1158183517,b3d5b92f768714d092c698ac77ba5110:548831125,6cc375ab608714d07632216e6d3fcd7e:1213772012,e34231abba8714d05ac947e04e49491e:-1849435034,4aa03d2b748714d07a9727fcee94e6de:-1623852957,c10f69e71c8714d02c67be097b5c18a2:1315172489,635955a7344714d03ea516ae899052dd:1032076,cb67a0239fc314d0da924ac758344553:-534418883,cff4e2ddffbad090f23ba249f90b0406:1032076,92f3a61df9bad090d2b458092b174cdb:1030026200,6c0066d9b3bad09099eb9de3b78f531c:1032076,447b0ed9c77ad090feffb27e5ccce497:-646180332,ced7507407721090ba5354f095e7fdfc:1032076,90471c7045321090aabef76e55002443:890772602,726ff36c7bb69c50c54fe7a5c8cddb6a:791098952,352f7f2463b69c50f31505b3a8e9ddb7:-663059362,7938ef205cfa5c5020ccb2ab2c8504ba:1310420952,f5ed536ce57a5c503784b2ce79dac9f1:-738625132,0b7bdfa8bd7a5c5037a568bee581ba3d:1752835752,b424052cb6f25c50c50be9f71eb4f040:916064478,6272c1a040f25c5004b5dd9fd8caa65e:1752835752,c630328c947ed850051c283f26eb07b3:-663059362,fefe3d4c9ebad8508859c9bb65b3dd2d:1991454014,daa1085be72a18500e221c8d649fa07d:892773124,4d5b6f8b3ce61850c90f4b6db5824615:2112763808,b5075b0b14a61850d1f05761ed54e80b:-51532318,0ebec30b0ba61850524a930d8060be6a:375975200,de7e86cfe4e21850e8cf0dd4d9fb02e2:1433662399,78102d8f28221850b586d642e242b301:161289538,1fb462b2606ad450dc55f2d7b16418c7:995294380,ebe5c27eaae6d4504bab5180ab9b883f:1242783893,596aadba51a6d450d0fa58e9a4826f06:-984038265,b808297acaa6d450628e946954c0de86:-1529208654,08e465f671a6d4503e837cfd4c3ea7fe:616294025,b21445761826d450d2dcac6a125f4ff0:2026175691,fe34a934042b70101bf8ae461123928a:-444486626,c4628d78286770109f2ef96df1632065:306113596,a633f31cc26730108af9f071d8169bce:1350158924,4a6fe398366730103dbb0cf051280c59:-2044169201,771d2394026730106b1ce763423adaa8:1533728105,4a312b987527301027be671b0b44eb50:-2012577752,769d9b949e2730109d2cb36f7924b8ae:120492489,1fcc0684cce77010c1a362ec288a8c27:919800152,ee6c927fa9db3010435e5d1df5ec3851:-1947425621,fc39debb95db3010d6f49bdac4d1eec9:337184920,58c55a77acdb301073f74395aea435d4:-1282096335,040116f3bbdb3010b59e933c3fdcd3d5:500119692,8bce4a3353db30105d8d9d59d0592201:-15011104,45138e3ba99b30104590a6625f7b5f33:1322202534,693dedb3485b30109369a854d02778b4:334911136,f64be9b31b5b3010ce199838aa2b3b63:974990394,26d5e57f771b30100bf0bc88fd709459:-891464518,5901653f26d73010724798ebca48b69a:-676594109,adff81fbb4d730109c23e98babb5c879:630546008,9fc490bfcf533010232f080729378ade:-1665791456,d54394fb725330108a5e186eb7918cdb:-135174421,d47190fb8e53301096a56210829eee09:-666200001,04ffccbb76533010676772045478a7b0:-426019459,df6830674f5b3010143a0da8d8825d83:-666200001,2cc1b42f351b3010c9035dc55844e376:-899913196,8d7fa0abe11b30100e6dcb6e065dbada:-2091169942,201aa8270b1b3010c8c25b6ece3a4079:1466036099,65b004a3a9973010b4fe57ba16053cc0:2144379685,739e37934c97301042a0bf546d200594:-1016296333,302df79f46573010a9693f838e7e7d70:1690780373,ece93b5f055730103b09756670599502:819105838,c7d56fd78a933010885014327b45dfe8:-1619415307,7029deba1adbb0109e2b535ee0f9b395:342974133,5545de76bcdbb010482eb8ab44812e9d:-1278286156,c492de360adbb010e16b7bab4055b448:-145616876,5a4112b280dbb01053b68682d25edde3:-615554271,96609a3219dbb0107b30fd5e0d3eccbc:210784659,c91f8a322bdbb0104e3dd9333d57f72a:434569410,8aec86fe389bb0108347eed755a94e35:257011277,739b8e7e9a9bb010643969b3011409b1:1394541738,efc94efad99bb010133201e011022f6d:948938900,88c802fae39bb010546d64106c25544a:1199897254,b3f34e769c9bb010bd7f84981b73b016:-1561321346,cb720a76139bb01084463b2b40d92ed6:1494981099,d3413576215bb010d9dd1e3508647cdb:464835918,434c6172325bb0102caaee1aaf217405:-709113024,eec92172cd5bb010b1051d46a697c2bf:-1829513966,c9d5e53eb11bb01004f58bb83f949fb4:-622768228,fdd3edba1b1bb010cf49fcfcf4cd28cc:3555729,ef03697a721bb010309c11994be46c2b:-1020478525,fcc02d3a351bb010e7640bcfa78c82e7:-323508452,73af19b6881bb01073a4f4a2940e8afb:477201184,165dd576b61bb01042a742e4948dc14f:1939202395,d4ac5936251bb010e884648aea282b3b:-653657669,241c55b2601bb010e6ca5cdff8dd478b:-1739400341,10fa5572641bb0102b44f7a26a8abc14:-1396435955,a6a115be9a17b0100bde55d9fb320ba7:-1338461847,9577857a6f17b0102926e1bcaffa90d0:-1768556915,4c6341366d17b0104401f37dea2758f2:-1557188629,130efc7e4dd3b010b3a6d5c8a0a98d26:-1633425306,33b8747a59d3b010d2e5385d95f73887:581614605,5210a9e2d79b7010dd267e6dcfe9f9c1:-1685501086,7c915da6785b701030a20089651534f4:1372751514,143e05e2345b7010968b88d3ee18d90d:1164748862,6c535c6ee45770103749d2dd346c63d3:-1491062306,371e6bd2d8177010fd065fbf7b7c7414:1168562462,f68ae71e7fd37010fac2a0d0d12791e5:-1370102497,7723e31a5ad370104453da087dd5fea4:228515426,e59b49ca13c73010215d559b17fd1db1:-2105981447,3248050a268730108cf3ac932adbfa08:704567651,97eaf3892f3ef0101da9e1cdb1f7ac47:1151742381,28fc9bcd7dbaf0107f786cd39082d2be:-250966613,a0235eb47a7ab0108d713453e4221411:873704560,805252b46e7ab0108c04c37d26393ff3:-1960630233,d7e15af0e37ab010e772ef70d6101102:-261863267,e82f832446a210505fba885585e4ec8b:-1386638834,bcce0f60caa210504a0ffa6d8dd28754:1503845636,e455715cbb6ab010521108f395946643:1192269135,c0c4bd1c0d6ab010e763d745a39480c5:921288924,2754fdd8ca6ab01098e2420daebf0046:1192269135,e25c2e637fd23010bca0173b7afb567d:462749930,7611a04888a230103001a1fe1a9afc0f:-552488189,519d8c08b66230104c4ef2586965c338:-426664617,a1378000dc62301064ed4c540b0be4a7:-1051784216,9a1d373bdc12301059b8c0735756603e:-1536045497,e36b736b669a30104a5dff6680b4f98d:2113678893,82a73367849a3010dc6f3f32d89b4f5a:-824565588,d0765e7f03c63010572ec63dfff09541:1319787150,f53bec9b07023010b780dcd646754a8f:1537382062,a5ec701e64c2f010774ef12ed99ddd2c:-668342364,946cf01acbc2f010b149571fbdc5dfec:471912611,fdbd7c9f663130108e935930327551cc:-856290892,f97b3c9f79313010322410999bce70ab:-1080327975,63ddbaee47713010a5b40ac8d5fd238b:7783624,acec3eae3671301042381b091b40a384:728680213,1c7cf2ae08713010a9120a1e410d4293:-101488033,c2672aea61313010c16ed530c7712791:994522260,46d6a6ea41313010a7e11be7fa4a45c2:599996975,7d662eaa7c313010d8052e7c56290f40:4674559,e9d5aeaaff313010991a1a1b858ecf2c:-1685073889,3d83a266ec3130101c755659bb7c25a3:-45896996,efc3be1580b93010043e95f3ae70dd39:1325424792,da82fe911cb9301081f9e9e75c12feb5:2146760924,736feadd777930103937d61d620e87b1:-1020287090,0fdcc1b8f4753010bb266ab7991992be:-1666133018,eea5c134287530106209ebc935b2b267:1806406248,788adc746df13010b95df7502ad662ad:1407253902,2b8e1df9294930d0bcb01930a5f0e281:1920179135,5bda98b5768130d0e5f96e0b00357bb7:2136536376,bae81475938130d025e7f0a07a8a0ccb:1459598236,0b5898759c8130d0df18f7202f7f61e7:632485612,3a191c21efc1fc90a480853bfbe55897:28323489,e004986d9581fc90008d2f0ee05a96f2:-1977693839,6d6a1c180785f8900d6db1c80b565464:-304962801,8d136b08c801f890fd6efd7278fd29eb:2136536376,a21846f64bb0b49021a8f49708e2f6e0:127240431,0aa2d8c0337038502317db3ac8f935ae:1239550653,17fe3d87496034503f8fd41d5f457c11:-1673663318,5765b903ad603450bea8a2e54c7c1db7:1183651816,6cc03d0f322034500a026a83dabd090e:1242596767,855521c3342034501cd9f6dc2b211b19:200474495,7d1fe7b6eba8b050582be6827c2594de:-1102105114,0d2eaf36e6a8b05088c5ff2a59dbeb44:-1555336913,a56ba3b26aa8b0500386dfb31d94cb98:301137909,b659ab7279a8b0500e4492d5eaeb5201:-451636723,1ad4f57e9724b0506a629bb97cd3bd5f:1118639926,a3f3793e6224b05055eb7efaca1849a7:2057474883,64a3f53eb124b050f5dcb3fae13136fc:1138314755,1c013d7a6724b05011e81e7d3912badf:-1724230354,ee507d7a4324b050c27e9bb8218e70d0:957503790,ebbf2df6bb24b0503f1638e05eccaf13:867257339,32ae2df65e24b050394791105b9410cb:205662357,b5a59762aee87050dfaff2c4e0b18ff4:167114965,2624936236e8705025bbcb8572661a47:-1183534734,c1221bee81a87050bad97ac500d8a6cb:-1484761285,0d57b212edac30507d92d5525bc3cdf9:-86596639,6056aad607e830508d2fab9a7b7c5c0b:-305047310,210ef79de72cb810feaa73d1c8d3caff:1177603790,d685cb6cf8621050f2d8ee903a91208d:663072604,58c343e8166210501121c91337b01476:-853603779,26fff92c5daedc1038dde426b5eb03ff:-1386638834,48d169a4fc6edc10df9a737dc9f6128a:-158595156,d1fe7420bd2edc1064bc06925ec5f969:1584855737,3c3befb93896d4106249b5e2ed8e2c86:-741850597,68a354f9251a941035e44fc33dc81c6a:-1551584823,10eb277e6611b0102db4385d0f6af765:1675493364,04cf537ee4dd7010674925d8ded9a7c1:-1199078220,0f5f5f3e93dd70100898fc66bdf08d0b:-1380987901,12b91b36199d70100e79546a7fbea103:-1946415153,1ef65ff29c9d7010b8d144a7a8f96acb:-980841248,2562177a485d701065f0e9568d01617b:1194640238,c86097fadf5d701048981ad0f30a6f06:396222681,a94383328d5d7010645b39621d8d19e3:-1911708472,fe6f7e3e641d7010ef82e56f4bc6ec8c:997084937,4eb254b6335570105c319640f4603e3a:1995015182,ea12dc3629557010f5e2c767134d3352:-45263053,2eb09cfea91570100e0a6552222c811b:-942282625,9820987249557010074ef48c6804230b:2098852659,497f00f264557010ba81d84f28cbda6d:1063776097,f13f40f222557010532cd07bd648459e:633925467,fb1f08fe5d15701004884d6ad514c16a:-662182354,24aac8be7e157010eff686c1afa4467b:1603460464,a679843e42157010b918a812a7d8b3c5:23593315,e236043e3c157010099a9770aaf479ef:1937440259,b5b344ba69157010b6ab9c82380c4a11:1603460464,0571f196541130109834a882edf8c4ff:-511336411,da6039d2c7113010da45815274a9c37f:-43316648,ad480e4af2d530108c1db09c2caf3efb:519547409,657b80f4d9553010019e2965966fd8a1:1483817554,7dde3fa0d01530106b060350605a14bd:-1160137940,6281dfac621130103691860b510d4ead:989132657,fc0910a036d970106bdafd417ce3c686:1023004032,d63c80e4f59970109a595263cfd2b36a:-718598289,97b98024f8997010f8afcaccf507c240:-1035101819,c1874c60c3997010d9d8bb70929c38e1:-2061192699,53474ce072997010ace9b960d6a24ecf:-816318310,914b4a48fdd53010bd2902694309b973:-311660899,bf47f97bb785b01092f706a0336bff57:1313449184,ce75f9f7d385b01019d4e3365a5e36cf:-644527820,6b14f937f385b01086c38678d8f3f210:1127657804,f2a1b9f37985b010fadf58bd2fb8238a:1018747068,30c5f43b4a41b010c91b70acd109039a:1971399477,183ef8673409b4105cfe46a265567670:-1813797782,e9fdf0e7aa85b410cf2a60f2e4be97d1:-1214605052,1675bb533345b410207adeaf8fd08a36:1083601298,db0b44923649b0101bc50b24f27dda60:-676139507,63f648de4b09b010a8a40be462b0793e:-570592153,582d7b0e33c5b010f0ae0da5906583b3:254995622,156c374a11c5b01019bed56673c10ed1:-974123011,86087b4218c5b010575e63898216be98:1350026723,c4f9d342a485b010e5c3a4c201165431:843388546,5d569f4ed445b0102b2cfbceea3fa2f2:1647189228,c502d706d745b01077c362e6df4ed1e2:-173643514,da3a5a02ec81b010b383ff37a71b58d3:-770803244,56c35a0af641b0109e5eded5e4a5f68b:-345274263,0ba6bd4ecb8d7010d42847eef6d934e6:904607225,4d970779e9c57010b36263544418d0a8:1960480476,799b7631a7c57010d8b63aeb2ceabae2:-1374403865,5e473a75a1857010ebeb599d48586421:-537143719,cce687c03c48b010589b8aadc48a3a51:38174229,82fa7cbd8ee56010c06959ba5b54798a:-444326630,b344739ba9fc60103034054d3cef72d1:1058007058,da475079f6482010048ae56cd636e105:2135817944,e58d53d4da2c1410cbd018fd1f0f0f78:523837316,f32d17541c2c1410e483122450d923dc:1501222418,52ac5794fc2c141084970804935080eb:197809562,723cd754202c14108f7d37ffd133069f:39746879,588b1794062c1410c193529af737cf9e:1770578955,dc1a1af1626368103071190e0cd3ebbd:-2133271558,171070bd822f2810b1cca3b323b0a61b:-1080478846,ef5f647d0d2f2810cb81dfc716aaf8db:144450568,722da07d3ce320105e933a8675af2bc9:1070972202,55ddeee9aa2368100d8f7d9fec627730:1705771107,25b52225eb236810fdc06fcbabb0df1d:-1047691869,851996e558ef2810650ab08963992a6b:877118339,33f896e596ef281048a1847efe3b3cf7:-574231244,4ad61ea5f1ef2810d7ecce55aeae5915:1309898342,10ae8ae96caf2810274c541eb66f47f2:-1771617287,86e886a94daf2810f5531635c01174b9:1371637024,6f57ce29e9af2810e819b97f969eb823:984609344,1b0e53d53ae72810a947651a23a3cb2c:757898459,d64d935553e72810b820716e21f80e97:-416542344,8d0b1b1533e7281089c726711e6fc451:-637335441,0e58d3912fe72810aa11d312ac04b033:-1746639800,b82987d1e8a72810b4612bad36d6c177:-1962918436,f8c58391b7a7281018b6848d33dd63bb:-1814763041,08a36071f7ebe090585a465ea3f591fe:2082505813,6761e43101ebe090c4108d71b574a8b2:-2064383943,74f3d2a97e27e090ce6d48e3aa28eeb4:-2064383943,72d5d515c5e7a850bd1deb02d4bcc27e:-1540792305,30968f89f9af6850273f69925d5c067e:-1312079952,03b18b052daf685034369103718b7cd6:-1646452344,54b77249a16f685073a6d0c2cd872575:474146935,3b9732491e6f6850fff4364971f0df95:-1991824160,9ef57e45ec6f6850b51a5532166af05a:-604152711,90ef2a01126f685074219b4143e8a359:474146935,9d5ea6c95e2f68504cd29f62995301d8:-618774476,c73baac9572f6850ac723f7566748191:1377109895,92c922499f2f6850fb737c271a15faef:-1185166433,bee72a45a02f6850859e6798595f0869:1504318555,f5056e41572f6850e03dfeb352588ef7:-1650406398,3fd3aa41042f68508b80f769b8b83b70:-2090521745,c7a50649022b6850a9e609265c80415a:1329562538,3ad40649822b68509bda9038a8b109ad:-194577971,c9d20a09272b68502aa4b827e504250a:-1753107273,4fa2c609192b68505c5200d470e782b1:-413972342,a6f14e853a2b685024e5b34a89fbd688:-671454806,f0210a456f2b68508121259f76fd0b88:-1046886297,e00c3dcd3de7685038f3ee1997025a40:-854534071,6519bd0d04e76850e8180d487ba0cdd6:2119584952,3557bd892ae76850a30e070e708b92f6:-693808524,2f35b9c5f8e76850e31850a5037f8dab:187274079,889669c9e3a768505fcf07d57dde6719:1643862647,6985ad4948a768507fab5efbf5e7aff9:-1364513586,878269c586a768509c44ae9bf737727e:796188115,4701694528a768509e57d211b19077fc:-466294781,7dff154503a7685006d5c5c758abed78:493005244,704fdd0573a7685089c283ec1c341bbd:-794443354,c62f1d0537a7685060c15b14f8aac073:521568758,b54e91c1daa768507c841f693d91437f:1798092133,2f3d15013ea7685084459aa0d877a967:342509594,0c795109be676850be9561fdd6b84c57:-2034756840,6a5695cdfc276850ce32994d34b5f8fa:384135430,edef05c1732768503145d5aeebe9169f:-855634196,2deb4d4d1ee3685031c142aabb211087:1321120786,b65609816ee368503bf1c3846759c453:-272459592,1e31450daca36850f549bc6bee81a16a:350307520,b838b0414aa36850021ee4b72c186462:-303892314,4c08fc01b1a36850dbf5d7da942359d7:487693920,c6d5bc8949636850079a17618f989fb8:607648500,20e2c0f03aefe450988e16f546df78a1:1788259448,7740887852afe45005b7e88906cb9491:-1819625407,26adbfe01bafe45007045f08832c549d:-526519413,37927ba4782fe450dea991c6fb669a47:-1872006103,792fa36cdfebe450e925ed33ff9909c8:-1335070983,543ceba4baebe450550277700a518748:1636726073,713fb624be67e450094ab4ec3d5b9e3a:1318226497,d9c9df9873eba45071acc9bad8eb115a:-1995709934,b7f6db142aeba45094640bc03aceea1d:1841716886,551b7654b22ba4504275cae174a0e6bf:-1094026851,ecca3e90fe2ba45048f3c5ccca3ccb39:8664761,6fba3ed0af2ba4508d51d4d43a6f603c:-123638791,7379fa90ee2ba4509752760fbdb558db:-2015188203,e1487e502c2ba45093dd1beb079ee185:-1179735463,72673250882ba4507330fe6d356ce2dd:719242598,3d0576dc90e7a450366f6462e5a970b0:1615842571,96e3f69ce6e7a4506222fa2b69006a2a:-1611958917,f023b25cf1e7a4508f58830dedef5f4a:993271905,c3e276d870e7a450d3a127583546463e:1316048017,90c032d8c8e7a450f3e332018c69153d:483615243,225c5a18d067a45058d5dc928f071b83:1445164021,41fbd2d44567a450bfecb6cc7fccca65:111297173,eb211a9cf027a4506c43dac33004d5cf:-530280571,75809a1c7627a450c2b0cfd8eee4a2fc:1054190313,bd3a69d01faf6450dee1ffdea1e2f3fc:-1128233911,b1400de3e81fe050cb178d9313f4f949:-1077121947,0676702fb9dbe050c458766fcb2bb298:-739628381,de83386b11dbe0509a01b9ea4320eb23:1718495943,0f43fc6bfbdbe0506945d696e8ca95af:1458041447,4b4c206f3d9be05006bf768e0ac7b78e:1381829081,bef660e7cf9be0502176f28906ac8925:2045679626,1ef16467cb9be050093b6ed36fb33c11:1541559164,aff0a0270f9be050936aec18f6682e67:-3333430,819f58a3319be0509d94987e04c72287:1541559164,d13c50af4e5be05087582539c4d26fd1:1080183836,1a9ad0aff85be05004da326d2b6faa40:-339965124,428a90afac5be0508cff7abf30c37a53:1573414172,cd8694e7835be0500ae107e043080392:-1591943620,99a49ce38d5be0502dbb909bbd97441f:715077884,4d6394e3015be0508f601a3f8a01df80:1928003638,ec3054230d5be050227f0873b588a4cf:318739150,eae10063cb1be050b965c2f35a10e9a0:-831315305,4a3a33db4bd7e050d779955cc4b907ec:-487482185,a01afbdb97d7e050760ba45b5332ecdf:-246057875,9959bb5b36d7e050267a9fa34f4c2c85:-1776986255,7bb593538c57e050f6d142f1665906d4:-684688587,12249f13ee57e050873dd23c0e5c1789:1693100809,b146321fa193e05038bf5de036e03108:327449037,b2e956d70f13e05038e2fe58b3d11057:-782348691,21501183c113a0501e6ec8f632be6ca2:-1412488403,1591d176d057605000d6828fb93a1c30:1210687098,a35b053280576050896da340d5efe582:-1677172880,c4dd16cb98df2010cd81a77b9cc98353:-849773821,3fc85ac763df201059217e7f36bc5ee2:-1178056937,a8e943c5e89f2410296b3418212fed20:-1114171696,dd2d2a05541f2410948ed524d35080c1:-1323154125,5edbdef0395fe010d49e1890ccbb8c4e:273485267,d31a9af0f85fe0108d1098efe3ecd16b:-2066618458,14975abcc21fe0101c6c87bd3bbb1c8b:-218448635,64f39e74a31fe010fb448c5ac07a3067:2142962457,a59bbd70719be01031800dfc57c3da03:-888171669,e4d4702cbdd3a010c1796eace1e1a817:-1965299641,8d19e4601bd3a0106c5274b870020b3c:-1499100708,777a509822d360109f2c224034becec9:-2128986425,ba04981007d36010ac7f67352f785b13:-665822521,79b0733a8f076010b626eee0c96b6473:-1273044324,c78faf76e8076010db2bed1668d1fa67:-764342428,242eef3661076010de76ca9cb305ae34:736271278,c59cebf23d076010f879d32afc11f3e8:-2068303040,ddfa6fb22107601063b1b3cfb896db8f:1074701047,4caaaf720b0760107d1d220bdfb36e52:1813185411,7c892b72710760103ed3285b1a402079:-632712190,833a6cc2c8c76450a0c138bd3a2dc6cf:243196515,237524ce248764502e087314db3a613a:-1383661043,0e34208ee8876450b92c24dd96c45726:-570907926,a6a3244ec687645044ec6303c4ac06b5:947890314,6393644e2387645082a9bb57ae821c53:-1569681127,4583a8ca28876450f7afc3bd75da4ac6:947890314,e0d1a8cacb8764507adc271e74bfc18f:-401819533,61df584a5b87645071b77edb3268de13:-286419260,3ccd148638876450a494e14fba02d842:118876019,b6eb5446ef876450ed6f08e9e78d6e65:-1305007381,3f8850829b876450f6b1908dce0e29c3:1559636872,b3275c021f876450d86f536599615f50:1459773054,94079b35bb83645056016e35a22641e6:1106672843,f1d41bb11d836450150131bc6c6d7b76:1034102677,7d29c7e99bc32450ebb63707da2077d4:-1835255290,d7a883e99ac324503822b09d2fd56677:-943906868,8f480b2993c32450d6f50d7306ed2d14:1280603361,c716c36952c3245083aa314faa8448ca:568661675,1605c3e5cec324504b5a0ef3a718d509:541943245,57424fa19fc32450cba5b05277333102:1688356451,bf118f214dc324509d19d0123cb84b46:-426673106,002f36ede9832450ff99242ac871d15b:1304925722,b01e36ad6b832450f6356e8c8ba176da:-899168906,081b76a9ae832450d0855d888147c9d2:286582995,96893a692d832450e88b8b5b2ed3e311:1380236271,30a8b62910832450534a04d93ac17ec1:1322819835,8e88b629c28324504fab4c5a2ae14ea9:-1755342337,fbb7b6296783245045759daec0ef78f9:-1181610533,1b573229fb8324502c902595aa7f1bf6:1431441236,7eb0b661a6832450f7257499d828510d:-1398230621,f82b6acc7a9b245064585a800c161275:1108910192,a266ab3683476050eadde152b8fcb843:-1024680998,b52063fe2907605096977c2fb7c7ef73:-720966255,bef5d73645076050fc6fb5903570a4c3:658312903,af6c91e234432050a05388c2a4313fb7:-1866591858,cc17f0a255076c10a905569b8ceeae86:-1010277402,f463f4eec8c36c1009f5ac0e81bb1909:-1932518251,0f7065dedcc72c1007cc9964a45f74d4:620200321,6328180642c7e810e34a29ddf92505a8:-467113071,0409b2b1aa03e8100d5924705531265d:618693563,ec44b2bd68cfa810725bd808ec1f4160:-131780457,02f05c7d260ba8106072004479f4eda8:167387778,687f48f58b0ba8101215bee297ca29e6:-1396994478,7b1d88bd5bc7a8109f6f0a84e0a9ae1a:-807111898,dfcbc479a3c7a810996cb0f8442810ff:-1230158244,43d57ee8eb4b64104fb9731b0cf4f49f:1606411202,1e232ae87b0b6410202a3567ae3e9c80:563979212,0ec3760031c32410bda627e65f2acaa9:1529239962,ae22b288368324105fbf890307eaa966:1174814038,b6e49e802c432410658408de3e1c2d2b:1529239962,c6bd0e8847032410ef5d72d8b4dcdc8f:34267700,4aacf1c004cfe0106c4b8082a298c7b5:-258853336,74927c77ab3aa010fbba391b69e841a7:174221074,9eade073383aa010eb845c1b1d3f3e45:-1796859055,db62ca059fb2205063ec0b75cb4b56c0:432302469,ec414ac1efb220501b45288243c60ac3:-941920520,7a80424195b22050ebfac05e7d17ff5e:65364857,5f8a5830ccfaac1058af3101ccb3d0c3:-524365420,462710bc99baac10a891904188ca23e7:64148989,5dc0d47889baac10b8b2693b7961be4d:-1886969169,d44ebe7721eee810fe71fa63dd1d15cc:828290468,92b97aff29aee81002f0018f0fa3289c:-13130623,c1d8b27382eee8109a8c8f35948ad751:-1134347770,7a52830b9e2e68105b234f51ddc40228:1146026474,7c79644227c32c10f8ad6e809d847011:1546582747,c5776002acc32c103256a93d42cb0837:195072113,7d74affce7cfe4104c1651e275aa6c1d:1733807973,37f240f46b07e410e1fc64e864d407c4:338378104,5df7b32cb9c3e4107dec0d79be8e264b:-1784177160,2717b7e8c4c3e41067e49427633cacad:1771550945,363d2b24f0c3e410260fdf6b2d20865b:-1564226613,bb65576c8743e410abe916de77cf90e6:1771550945,9c64132c3543e4109b790dba12c7e935:-1146967650,830217a82843e410d6561b4d97b6f7ef:748750657,8a70df280543e41027f7769bba06402b:1125348003,b68f47e4e643e41070260f6dabb904d0:-87357658,e3ce0fe4bf43e410001929c9f18f5ef0:433758649,7d4e83a4cc43e4102d4dc70382a310bd:191019937,4b9dcba46743e410d9e8ac8f17759fd7:2123176618,ce0b4b24b943e4100e262faf4fba6040:-153885106,1761c3680603e410cf696a1db2f723e3:-1751234174,3832a710be87a41084d3be44c33203fa:1022906318,edcfdb5cba47a4104fbc30b59f527aed:21674054,0cc142904f43a410b55e01c05af4925d:1022906318,db5182505c43a41094a4fd617c7caeec:-771489008,8e1e3d1cad03a4107ff12f1782975335:1105681002,1ea8651c18cf6410e136ad0f261d9338:-1535919305,e2f625585fcf6410c67501b24f36f3de:-642506237,0f702118c20f6410e286068acc4f1c5d:268562370,6cebcd90718b6410409e39218cfddc55:-1184001241,79d84d10938b6410f2b261c6f95a93c6:372349735,4fc23b789ae6609054bde04c88b04027:-1741995643,de72777821e66090c341c08d3992fde2:1366428215,6fa0866088a62810a090a8a5e943f489:1810769973,d82f0c83925eec90dd28dbab8ea40c2a:-1276550635,2a9b1f224d1eac9008c76a33d24dccc0:787098235,34aadb22e61eac90f62ee0344c857e52:1149860440,cda897ae07daac9013c7e738354aa30b:-604740172,e7c71b2ebddaac9079d6d475b4433fea:899349867,a7455f6ab8daac9029c575f8dfe61a29:424619257,0b6e07669cdaac903c51c489e84acee5:-480703404,74d033e8a5da68900406c0fa0478d28a:260404975</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>item_option_new_6582cb8ddb00330026eb9b81ca961987</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="item_option_new"><item_option_new action="INSERT_OR_UPDATE"><active>true</active><attributes>glide_list=true</attributes><cat_item display_value="General Settings">d4d3da7f37d12300fdfc097973990e11</cat_item><category/><choice_direction>down</choice_direction><choice_field/><choice_table/><create_roles/><default_html_value/><default_value/><delete_roles/><delivery_plan/><description/><display_title>false</display_title><do_not_select_first>false</do_not_select_first><dynamic_default_value/><dynamic_ref_qual/><enable_also_request_for>false</enable_also_request_for><example_text/><field/><global>false</global><help_tag>More information</help_tag><help_text/><hidden>false</hidden><include_none>false</include_none><instructions/><layout>normal</layout><list_table>sys_user_group</list_table><lookup_label/><lookup_price/><lookup_table/><lookup_unique>false</lookup_unique><lookup_value/><macro/><macroponent/><mandatory>false</mandatory><map_to_field>false</map_to_field><mask_use_confirmation>false</mask_use_confirmation><mask_use_encryption>false</mask_use_encryption><name>assign_groups</name><order>400</order><price_if_checked>0</price_if_checked><pricing_implications>false</pricing_implications><published_ref/><question_text>Assign Groups</question_text><read_only>false</read_only><read_roles/><read_script/><rec_lookup_price/><rec_price_if_checked>0</rec_price_if_checked><record/><record_producer_table/><reference/><reference_qual>javascript:new x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge().getGroups()+"^source!=NULL";</reference_qual><reference_qual_condition/><rich_text/><roles_to_use_also_request_for/><save_script/><scale_max>5</scale_max><scale_min>0</scale_min><show_help>false</show_help><show_help_on_load>false</show_help_on_load><sp_widget/><summary_macro/><sys_class_name>item_option_new</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2019-03-06 07:31:07</sys_created_on><sys_id>6582cb8ddb00330026eb9b81ca961987</sys_id><sys_mod_count>8</sys_mod_count><sys_name>Assign Groups</sys_name><sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>item_option_new_6582cb8ddb00330026eb9b81ca961987</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2022-01-03 12:20:01</sys_updated_on><table/><tooltip/><type>21</type><ui_page/><unique>false</unique><use_dynamic_default>false</use_dynamic_default><use_reference_qualifier>advanced</use_reference_qualifier><validate_regex/><variable_name/><variable_set/><variable_width>50</variable_width><visibility>1</visibility><visible_bundle>true</visible_bundle><visible_guide>true</visible_guide><visible_standalone>true</visible_standalone><visible_summary>true</visible_summary><write_roles/></item_option_new><sys_translated_text action="delete_multiple" query="documentkey=6582cb8ddb00330026eb9b81ca961987"/><fx_price action="delete_multiple" query="id=6582cb8ddb00330026eb9b81ca961987"/><fx_price action="INSERT_OR_UPDATE"><amount>0</amount><currency display_value="USD">USD</currency><field>price_if_checked</field><id>6582cb8ddb00330026eb9b81ca961987</id><parent/><reference_amount>0</reference_amount><reference_currency display_value="USD">USD</reference_currency><sys_created_by>admin</sys_created_by><sys_created_on>2019-03-06 07:31:07</sys_created_on><sys_id>e1820f8ddb00330026eb9b81ca9619b5</sys_id><sys_mod_count>0</sys_mod_count><sys_updated_by>admin</sys_updated_by><sys_updated_on>2019-03-06 07:31:07</sys_updated_on><table>item_option_new</table><type>calculated</type></fx_price><fx_price action="INSERT_OR_UPDATE"><amount>0</amount><currency display_value="USD">USD</currency><field>rec_price_if_checked</field><id>6582cb8ddb00330026eb9b81ca961987</id><parent/><reference_amount>0</reference_amount><reference_currency display_value="USD">USD</reference_currency><sys_created_by>admin</sys_created_by><sys_created_on>2019-03-06 07:31:07</sys_created_on><sys_id>6d820f8ddb00330026eb9b81ca9619b3</sys_id><sys_mod_count>0</sys_mod_count><sys_updated_by>admin</sys_updated_by><sys_updated_on>2019-03-06 07:31:07</sys_updated_on><table>item_option_new</table><type>calculated</type></fx_price></record_update>]]></payload>
<payload_hash>-1286843217</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>5c021aa32fd50110e49924c62799b6cf</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb91896580000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table/>
<target_name>Assign Groups</target_name>
<type>Variable</type>
<update_domain>global</update_domain>
<update_guid>438085c25478011054c5df0c22fa7ece</update_guid>
<update_guid_history>438085c25478011054c5df0c22fa7ece:-1286843217,5a108d82947801102193162f2dc49ce1:1182247280,d49db80230780110f756e52db49cb382:-1286843217,71b7b00e84380110756b66e1e7a22e1b:1602467086,f14581b8388801108625767def9aa8e7:312045672,39940fcd8b00330014d7da8762c96ee8:1317024495,ca638f8d7e0033005f2eeef2a4f211b0:-239727251,d313c3cd590033002b3ed9ec75f0072d:805183597,e5820f8dc30033009885d0f58c1b9eb9:-1367777714</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_2f2b341e37f52300fdfc097973990e10</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Nutanix_CreateCatalogVariables&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Nutanix_CreateCatalogVariables&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Nutanix_CreateCatalogVariables = Class.create();
Nutanix_CreateCatalogVariables.prototype = {
	initialize: function() {
		
		this.start = 110;
		this.end = 500;
		this.order = 111;
		this.subContainerEnd = 160;
		this.fieldLabels = JSON.parse(gs.getProperty('x_nuta2_nutanix_ca.nutanix.fields.labels.mapping'));

		this.exclusionList = gs.getProperty('x_nuta2_nutanix_ca.exclusion.list')+'';
		this.disabledFields = gs.getProperty('x_nuta2_nutanix_ca.disabled.fields')+'';
		
		this.integerValidation = gs.getProperty('x_nuta2_nutanix_ca.integerValidationList')+'';
		this.boolValidation = gs.getProperty('x_nuta2_nutanix_ca.booleanValidationList')+'';
		this.profileUUIDSysIDRel = {};
		this.appUtil = new Nutanix_Calm_Utils();
		this.logger = new Nutanix_Calm_Logger();
		this.diffVar = new Nutanix_ImportApplicationProfiles();
	},
	_invalidateCatalogItem: function(CatSysId) {
		var grCat = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
		grCat.addQuery("blueprint", CatSysId);
		grCat.query();
		while(grCat.next()) {
// 			grCat.state = "inactive";
// 			grCat.update();
		}
	},
	
	
	_checkServiceVarSync: function(cat_sysID, variableList, serviceName, profileUUID, serviceSysId) {
		
		var arr_var_current = {};
		var arr_var_updated = {};
		
		var grCatVar = new GlideRecord(this.appUtil.configuration.table.variablesProperties+'');
		grCatVar.addQuery('service_name', serviceSysId + "");
		grCatVar.addQuery('type', 'Service');
		grCatVar.addQuery('catalog_item', cat_sysID + "");
		grCatVar.query();
		while(grCatVar.next())
			arr_var_current[grCatVar.uuid] = {"variable": grCatVar.variable + "", "var_name": grCatVar.variable.question_text + ""};
		
		for(var i in variableList)
			arr_var_updated[variableList[i].uuid] = {"var_name":((variableList[i].label+'').trim() != "") ? variableList[i].label+''  : variableList[i].name+'', "var_value": variableList[i].value + ""};
		
		for(var uuid in arr_var_current) {
			
			if(!(uuid in arr_var_updated) || (uuid in arr_var_updated &amp;&amp; (arr_var_current[uuid].var_name + "" != arr_var_updated[uuid].var_name + ""))) {
				
// 				this._invalidateCatalogItem(cat_sysID);
				
				var column_fields = {};
				column_fields.cat_item = "";
				var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable(arr_var_current[uuid].variable + "", column_fields, 'update');
				var grCatVarDel = new GlideRecord(this.appUtil.configuration.table.variablesProperties+'');
				grCatVarDel.addQuery('catalog_item', cat_sysID + "");
				grCatVarDel.addQuery('uuid', uuid + "");
				grCatVarDel.query();
				while(grCatVarDel.next())
					grCatVarDel.deleteRecord();
			}
		}
		
	},

	processCatalogVariables: function(current){
		try{
			this.logger.debug("Inside Nutanix_CreateCatalogVariables.processCatalogVariables");
			this.logger.info("Catalog Variable creation started.");
			var cat_sysID = current.parameter+'';

			var profileGR = new GlideRecord(this.appUtil.configuration.table.catalogProfileRelation+'');
			profileGR.addQuery('catalog_item', cat_sysID);
			profileGR.query();
			while(profileGR.next()){
				this.profileUUIDSysIDRel[profileGR.application_profile.uuid+''] = profileGR.application_profile+'';
			}

			this.logger.debug("Mapping for profile uuid and sys_id created. Relation:- "+JSON.stringify(this.profileUUIDSysIDRel));

			var parsed = JSON.parse(current.payload+'');
			this._createDefaultVariables(cat_sysID);

			this.logger.debug("Created default project, appName and profile variables on catalog item.");

			var filterJSON = this._filterJSONDatatoService(parsed);
			this.logger.debug("FilteredJson received for parsing:- "+JSON.stringify(filterJSON));

			
// 			var createSrvcVarScpt = new Nutanix_CreateServiceVariables();
// 			createSrvcVarScpt.createServiceVariables(filterJSON, cat_sysID);

			
			this._createContainerStartandEnd('Service Configuration', cat_sysID, 100, 50000, 'normal');

			this.logger.debug("Created Service Configuration Container.");

			this.start = 110;
			this.end = 500;
			this.order = this.start+1;
			this.subContainerEnd = 160;

			//var projectDetail = parsed.project_list;
			
			for(var i in filterJSON){

				var service = filterJSON[i];
				var serviceSysId = this._createContainerStartandEnd(service.name, cat_sysID, this.start, this.end, 'normal');

				this.logger.debug("Created Container for "+service.name);

				this.start = this.end+10;
				this.end = this.end+500;

				var service_name = service.name.toLowerCase().replace(/ /g, '_'	);

				this._parseSubstrate(service.substrate, cat_sysID, service_name, serviceSysId);
				this._parseProfile(service.profile, cat_sysID, service_name, serviceSysId);
				if(parsed.service_definition_list[0].uuid+"" != "singleVm-default-service-uuid")
					this._parseVariables(service['service'], (service.profile)?Object.keys(service.profile):Object.keys(service.substrate), cat_sysID, service_name, serviceSysId);

				this.order = this.start+1;
				this.subContainerEnd = this.order+50;
			}

			this.logger.info("Variables creatios completed.");
		}catch(e){
			this.logger.error("Nutanix_CreateCatalogVariables.processCatalogVariables :- Exception caught during processing catalog variables. Error :- "+e);
		}
	},

	_parseSubstrate: function(substrateList, cat_sysID, service_name, serviceSysId){

		try{
			this.logger.debug("Inside Nutanix_CreateCatalogVariables._parseSubstrate. Parsing substrate fields.");
			
// 			var tmpOrder = this.order;
			
			for(var k in substrateList){

				var substrate = substrateList[k];

// 				this.order = tmpOrder;
				
				this._createSubstrateFieldCreateSpec(substrate.create_spec, cat_sysID, k, service_name, serviceSysId, substrate.editables.create_spec);

				if(substrate.create_spec &amp;&amp; substrate.create_spec.resources &amp;&amp; substrate.create_spec.resources.block_device_map){
					var edit = (substrate.editables &amp;&amp; substrate.editables.create_spec &amp;&amp; substrate.editables.create_spec.resources &amp;&amp; substrate.editables.create_spec.resources.block_device_map)?substrate.editables.create_spec.resources.block_device_map:'';

					this._createSubstrateFieldStorage(substrate.create_spec.resources.block_device_map, cat_sysID, k, service_name, serviceSysId, edit);
				}
				
				if(substrate.create_spec &amp;&amp; substrate.create_spec.resources &amp;&amp; substrate.create_spec.resources.disks){
					var edit = (substrate.editables &amp;&amp; substrate.editables.create_spec &amp;&amp; substrate.editables.create_spec.resources &amp;&amp; substrate.editables.create_spec.resources.disks)?substrate.editables.create_spec.resources.disks:{};

					this._createSubstrateFieldDisks(substrate.create_spec.resources.disks, cat_sysID, k, service_name, serviceSysId, edit);
				}
				
				if(substrate.create_spec &amp;&amp; substrate.create_spec.resources &amp;&amp; substrate.create_spec.resources.blankDisks){
					var edit = (substrate.editables &amp;&amp; substrate.editables.create_spec &amp;&amp; substrate.editables.create_spec.resources &amp;&amp; substrate.editables.create_spec.resources.blankDisks)?substrate.editables.create_spec.resources.blankDisks:{};

					this._createSubstrateFieldBlankDisks(substrate.create_spec.resources.blankDisks, cat_sysID, k, service_name, serviceSysId, edit);
				}
				
				if(substrate.create_spec &amp;&amp; substrate.create_spec.resources &amp;&amp; substrate.create_spec.resources.networkInterfaces){
					var edit = (substrate.editables &amp;&amp; substrate.editables.create_spec &amp;&amp; substrate.editables.create_spec.resources &amp;&amp; substrate.editables.create_spec.resources.networkInterfaces)?substrate.editables.create_spec.resources.networkInterfaces:{};

					this._createSubstrateFieldNetworkInterfaces(substrate.create_spec.resources.networkInterfaces, cat_sysID, k, service_name, serviceSysId, edit);
				}
				
				if(substrate.create_spec &amp;&amp; substrate.create_spec.resources &amp;&amp; substrate.create_spec.resources.disk_list){
					var edit = (substrate.editables &amp;&amp; substrate.editables.create_spec &amp;&amp; substrate.editables.create_spec.resources &amp;&amp; substrate.editables.create_spec.resources.disk_list)?substrate.editables.create_spec.resources.disk_list:{};

					this._createSubstrateFieldDiskList(substrate.create_spec.resources.disk_list, cat_sysID, k, service_name, serviceSysId, edit);
					
					
					if(substrate.create_spec.resources.disk_list[0] &amp;&amp; Object.keys(substrate.create_spec.resources.disk_list[0]).toString().includes('data_source_reference')){
						var bootIndex = (substrate.create_spec.resources.boot_config &amp;&amp; substrate.create_spec.resources.boot_config.boot_device &amp;&amp; substrate.create_spec.resources.boot_config.boot_device.disk_address &amp;&amp; substrate.create_spec.resources.boot_config.boot_device.disk_address.device_index+'') ? substrate.create_spec.resources.boot_config.boot_device.disk_address.device_index : -1;

						this._createSubstrateCreateImage(substrate.create_spec.resources.disk_list, cat_sysID, k, service_name, serviceSysId, edit, bootIndex);	
					}
				}
				
				if(substrate.create_spec &amp;&amp; substrate.create_spec.resources &amp;&amp; substrate.create_spec.resources.nic_list){
					var edit = (substrate.editables &amp;&amp; substrate.editables.create_spec &amp;&amp; substrate.editables.create_spec.resources &amp;&amp; substrate.editables.create_spec.resources.nic_list)?substrate.editables.create_spec.resources.nic_list:{};

					this._createSubstrateFieldNicList(substrate.create_spec.resources.nic_list, cat_sysID, k, service_name, serviceSysId, edit );
				}
				
				if(substrate.create_spec &amp;&amp; substrate.create_spec.resources &amp;&amp; substrate.create_spec.resources.nw_profile){
					var edit = (substrate.editables &amp;&amp; substrate.editables.create_spec &amp;&amp; substrate.editables.create_spec.resources &amp;&amp; substrate.editables.create_spec.resources.nw_profile)?substrate.editables.create_spec.resources.nw_profile:{};

					this._createSubstrateFieldNwProfile(substrate.create_spec.resources.nw_profile, cat_sysID, k, service_name, serviceSysId, edit);
				}
				
				if(substrate.create_spec &amp;&amp; substrate.create_spec.categories){

				//	var edit = (substrate.editables &amp;&amp; substrate.editables.create_spec &amp;&amp; substrate.editables.create_spec.categories)?substrate.editables.create_spec.categories:{};
					
				//	this._createSubstrateFieldCategories(substrate.create_spec.categories, cat_sysID, k, service_name, serviceSysId, edit);
				}
				
				if(substrate.create_spec &amp;&amp; substrate.create_spec.resources &amp;&amp; (substrate.create_spec.resources.guest_customization || substrate.create_spec.resources.guest_customization+''=='null')){

					var edit = (substrate.editables &amp;&amp; substrate.editables.create_spec &amp;&amp; substrate.editables.create_spec.resources &amp;&amp; substrate.editables.create_spec.resources.guest_customization)?substrate.editables.create_spec.resources.guest_customization:{};
					
					this._createSubstrateFieldGuestCustomization(substrate.create_spec.resources.guest_customization, cat_sysID, k, service_name, serviceSysId, edit, substrate.create_spec.type+'');
				}
				
				if(substrate.create_spec &amp;&amp; substrate.create_spec.resources &amp;&amp; substrate.create_spec.resources.guestCustomization){

					var edit = (substrate.editables &amp;&amp; substrate.editables.create_spec &amp;&amp; substrate.editables.create_spec.resources &amp;&amp; substrate.editables.create_spec.resources.guestCustomization)?substrate.editables.create_spec.resources.guestCustomization:{};
					
					this._createSubstrateFieldGuestCustomizationGCP(substrate.create_spec.resources.guestCustomization, cat_sysID, k, service_name, serviceSysId, edit, substrate.create_spec.type+'', substrate.create_spec.resources.tags);
				}
				
				if(substrate.create_spec &amp;&amp; substrate.create_spec.resources &amp;&amp; substrate.create_spec.resources.os_profile){

					var edit = (substrate.editables &amp;&amp; substrate.editables.create_spec &amp;&amp; substrate.editables.create_spec.resources &amp;&amp; substrate.editables.create_spec.resources.os_profile)?substrate.editables.create_spec.resources.os_profile:{};
					
					this._createSubstrateFieldOsProfile(substrate.create_spec.resources.os_profile, cat_sysID, k, service_name, serviceSysId, edit);
				}
				
				if(substrate.create_spec &amp;&amp; substrate.create_spec.resources &amp;&amp; substrate.create_spec.resources.storage_profile){

					var edit = (substrate.editables &amp;&amp; substrate.editables.create_spec &amp;&amp; substrate.editables.create_spec.resources &amp;&amp; substrate.editables.create_spec.resources.storage_profile)?substrate.editables.create_spec.resources.storage_profile:{};
					
					this._createSubstrateFieldStorageProfile(substrate.create_spec.resources.storage_profile, cat_sysID, k, service_name, serviceSysId, edit);
				}
				
				if(substrate.create_spec &amp;&amp; substrate.create_spec.resources &amp;&amp; substrate.create_spec.resources.sshKeys){	
					
					this.order = this.subContainerEnd+2;
					this.subContainerEnd = this.subContainerEnd + 2 + 5;
					var categorySysId = this._createContainerStartandEnd('SSH Keys', cat_sysID, this.order, this.subContainerEnd, 'normal', service_name);
					this.order = this.order+1;
					
					var metaData = substrate.create_spec.resources.metadata.items;
					var blockValue = false;
					
					
					for(var data in metaData)
						if(metaData[data].key+'' == 'block-project-ssh-keys')
							blockValue = metaData[data].value+'';
					
					this._createField('block_project_wide_ssh_key', blockValue, cat_sysID, this.order, service_name, k, serviceSysId, categorySysId, true);		
					
					
					this.order = this.order+1;
					
					var editable = substrate.editables.create_spec;
					
					var sshKeys = substrate.create_spec.resources.sshKeys;
					
					for(var key in sshKeys)
						this._createField('key_'+key, sshKeys[key], cat_sysID, this.order, service_name, k, serviceSysId, categorySysId, (editable &amp;&amp; editable.resources &amp;&amp; editable.resources.sshKeys)?editable.resources.sshKeys[key]:'');		
				
				}
				
				if(substrate.create_spec &amp;&amp; substrate.create_spec.resources &amp;&amp; substrate.create_spec.resources.serviceAccounts &amp;&amp; substrate.create_spec.resources.serviceAccounts[0]){	

					this.order = this.subContainerEnd+2;
					this.subContainerEnd = this.subContainerEnd + 2 + 5;
					var categorySysId = this._createContainerStartandEnd('API ACCESS', cat_sysID, this.order, this.subContainerEnd, 'normal', service_name);
					this.order = this.order+1;

					var editable = (substrate.editables &amp;&amp; substrate.editables.create_spec)?substrate.editables.create_spec.resources:'';

					this._createField('service_account', substrate.create_spec.resources.serviceAccounts[0].email, cat_sysID, this.order, service_name, k, serviceSysId, categorySysId, (editable &amp;&amp; editable.serviceAccounts &amp;&amp; editable.serviceAccounts[0])?editable.serviceAccounts[0].email:'');
					
					this._createField('scopes', (substrate.create_spec.resources.serviceAccounts[0].scopes.length==10)?'Full Access':'Default Access', cat_sysID, this.order, service_name, k, serviceSysId, categorySysId, '');
				}
	
				
				this._createSubstrateFieldReadinessProbe(substrate.readiness_probe, cat_sysID, k, service_name, serviceSysId, substrate.editables.readiness_probe);
			}
		}catch(e){
			this.logger.error("Nutanix_CreateCatalogVariables._parseSubstrate :- Exception caught during parsing substrate. Error :- "+e);
		}
	},

	_createSubstrateCreateImage: function(diskList, cat_sysID, profileUUID, serviceName, serviceSysId, editables, bootIndex){
		try{
			this.logger.debug("Inside Nutanix_CreateCatalogVariables._createSubstrateCreateImage. Parsing Substrate Field Disk/Storage Data.");
			this.order = this.subContainerEnd+2;
			this.subContainerEnd = this.subContainerEnd + 2 + 50;
			var categorySysId = this._createContainerStartandEnd('Images', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
			this.order = this.order+1;

			var i = 0 ;
			
			for(var k in diskList){
				
				if(diskList[k].data_source_reference){
					
					this.order = this.order+3;

					this._createContainerStartandEnd('Image Device '+i, cat_sysID, this.order, this.order+2, 'normal', serviceName+'_'+k);

					this._createOnlyField('image', diskList[k].data_source_reference.name, cat_sysID, this.order+1, serviceName+'_'+k, 6);
					this._createOnlyField('device_type', diskList[k].device_properties.device_type, cat_sysID, this.order+1, serviceName+'_'+k, 6);
					this._createOnlyField('device_bus', diskList[k].device_properties.disk_address.adapter_type, cat_sysID, this.order+1, serviceName+'_'+k, 6);
					this._createOnlyField('bootable', (diskList[k].device_properties.disk_address.device_index+''==bootIndex+'')+'', cat_sysID, this.order+1, serviceName+'_'+k, 7);

					diskList[k].runtime = (editables[k])?editables[k]:{};	
					diskList[k].disabled = (editables[k])?editables[k]:{};	
					diskList[k].bootable = (diskList[k].device_properties.disk_address.device_index+''==bootIndex+'')+'';

				}
				
				i++;
			}
			
			this._insertCatalogVariableProperties(profileUUID, JSON.stringify(diskList), 'false', categorySysId, cat_sysID, serviceSysId, categorySysId);

		}catch(e){
			this.logger.error("Nutanix_CreateCatalogVariables._createSubstrateCreateImage. Error :- "+e);
		}

	},
	
	_createSubstrateFieldDiskList: function(diskList, cat_sysID, profileUUID, serviceName, serviceSysId, editables){
		try{
			this.logger.debug("Inside Nutanix_CreateCatalogVariables._createSubstrateFieldDiskList. Parsing Substrate Field Disk/Storage Data.");
			this.order = this.subContainerEnd+2;
			this.subContainerEnd = this.subContainerEnd + 2 + 50;
			var categorySysId = this._createContainerStartandEnd('VDisks', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
			this.order = this.order+1;

			for(var k in diskList){
				this.order = this.order+3;

				this._createContainerStartandEnd('vdisk', cat_sysID, this.order, this.order+2, 'normal', serviceName+'_'+k);
				
				if(diskList[k].adapter_type){

					this._createOnlyField('adapter_type', diskList[k].adapter_type, cat_sysID, this.order+1, serviceName+'_'+k, 6);
					this._createOnlyField('device_type', diskList[k].disk_type, cat_sysID, this.order+1, serviceName+'_'+k, 6);
					this._createOnlyField('size', diskList[k].disk_size_mb, cat_sysID, this.order+1, serviceName+'_'+k, 6);	
					
				}else if(diskList[k] &amp;&amp; diskList[k].data_source_reference &amp;&amp; diskList[k].data_source_reference.kind=='image'){
					
					continue;
					
				}else{		
					
					this._createOnlyField('device_type', diskList[k].device_properties.device_type, cat_sysID, this.order+1, serviceName+'_'+k, 6);
					this._createOnlyField('device_bus', diskList[k].device_properties.disk_address.adapter_type, cat_sysID, this.order+1, serviceName+'_'+k, 6);
					this._createOnlyField('size', diskList[k].disk_size_mib, cat_sysID, this.order+1, serviceName+'_'+k, 6);
				}

				if(!diskList[k])
					diskList[k] = {};
				
				diskList[k].runtime = (editables[k])?editables[k]:{};	
				diskList[k].disabled = (editables[k])?editables[k]:{};	
			}

			this._insertCatalogVariableProperties(profileUUID, JSON.stringify(diskList), 'false', categorySysId, cat_sysID, serviceSysId, categorySysId);

		}catch(e){
			this.logger.error("Nutanix_CreateCatalogVariables._createSubstrateFieldDiskList :- Exception caught during creation of Substrate Field Storage. Error :- "+e);
		}

	},
	
	_createSubstrateFieldStorageProfile: function(storageProfileList, cat_sysID, profileUUID, serviceName, serviceSysId, editables){
		try{
			this.logger.debug("Inside Nutanix_CreateCatalogVariables._createSubstrateFieldStorageProfile. Parsing Substrate Field Disk/Storage Data.");
			this.order = this.subContainerEnd+2;
			this.subContainerEnd = this.subContainerEnd + 2 + 50;
			var categorySysId = this._createContainerStartandEnd('Storage Profile', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
			this.order = this.order+1;

			
			this._createField('use_custom_image', (storageProfileList.image_details.use_custom_image+''=='true')?'true':'false', cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editables.image_details)?editables.image_details.use_custom_image:'');
			
			this._createContainerStartandEnd('VM Image Details', cat_sysID, this.order+1, this.order+3, 'normal', serviceName+'_'+k);

			this._createField('publisher', storageProfileList.image_details.publisher, cat_sysID, this.order+2, serviceName, profileUUID, serviceSysId, categorySysId, (editables.image_details)?editables.image_details.publisher:'');
			this._createField('offer', storageProfileList.image_details.offer, cat_sysID, this.order+2, serviceName, profileUUID, serviceSysId, categorySysId, (editables.image_details)?editables.image_details.offer:'');
			this._createField('sku', storageProfileList.image_details.sku, cat_sysID, this.order+2, serviceName, profileUUID, serviceSysId, categorySysId, (editables.image_details)?editables.image_details.sku:'');
			this._createField('version', storageProfileList.image_details.version, cat_sysID, this.order+2, serviceName, profileUUID, serviceSysId, categorySysId, (editables.image_details)?editables.image_details.version:'');
			
			
			
			this._createField('use_managed_disks', storageProfileList.is_managed, cat_sysID, this.order+4, serviceName, profileUUID, serviceSysId, categorySysId, (editables.is_managed)?editables.is_managed:'');
			
			this._createContainerStartandEnd('OS Disk Details', cat_sysID, this.order+5, this.order+7, 'normal', serviceName+'_'+k);

			this._createField('disk_name', storageProfileList.os_disk_details.name, cat_sysID, this.order+6, serviceName, profileUUID, serviceSysId, categorySysId, (editables.os_disk_details)?editables.os_disk_details.name:'');
			this._createField('storage_type', storageProfileList.os_disk_details.storage_type, cat_sysID, this.order+6, serviceName, profileUUID, serviceSysId, categorySysId, (editables.os_disk_details)?editables.os_disk_details.storage_type:'');
			this._createField('disk_caching_type', storageProfileList.os_disk_details.caching_type, cat_sysID, this.order+6, serviceName, profileUUID, serviceSysId, categorySysId, (editables.os_disk_details)?editables.os_disk_details.caching_type:'');
			this._createField('disk_create_options', storageProfileList.os_disk_details.create_option, cat_sysID, this.order+6, serviceName, profileUUID, serviceSysId, categorySysId, (editables.os_disk_details)?editables.os_disk_details.create_option:'');
			
			
			var categorySysId = this._createContainerStartandEnd('Storage Profile Data Disks', cat_sysID, this.order+8, this.order+50, 'normal', serviceName+'');
			
			this.order = this.order+9;
			
			var dataList = storageProfileList.data_disk_list;
			
			for(var k in dataList){
				this.order = this.order+3;
				
				this._createContainerStartandEnd('disk_config_'+k, cat_sysID, this.order, this.order+2, 'normal', serviceName+'_'+k);

				this._createOnlyField('disk_name', dataList[k].name, cat_sysID, this.order+1, serviceName+'_'+k, 6);
				this._createOnlyField('storage_type', dataList[k].storage_type, cat_sysID, this.order+1, serviceName+'_'+k, 6);
				this._createOnlyField('disk_caching_type', dataList[k].caching_type, cat_sysID, this.order+1, serviceName+'_'+k, 6);
				this._createOnlyField('size_gb', dataList[k].size_in_gb, cat_sysID, this.order+1, serviceName+'_'+k, 6);
				this._createOnlyField('disk_lun', dataList[k].lun, cat_sysID, this.order+1, serviceName+'_'+k, 6);
				
				dataList[k].runtime = (editables.data_disk_list)?editables.data_disk_list[k]:{};
				dataList[k].disabled = (editables.data_disk_list)?editables.data_disk_list[k]:{};
			}

			this._insertCatalogVariableProperties(profileUUID, JSON.stringify(dataList), 'false', categorySysId, cat_sysID, serviceSysId, categorySysId);
						
		}catch(e){
			this.logger.error("Nutanix_CreateCatalogVariables._createSubstrateFieldStorageProfile :- Exception caught during creation of Substrate Field Storage. Error :- "+e);
		}
	},
	
	_createSubstrateFieldOsProfile: function(osProfileList, cat_sysID, profileUUID, serviceName, serviceSysId, editables){
		try{
			this.logger.debug("Inside Nutanix_CreateCatalogVariables._createSubstrateFieldOsProfile. Parsing Substrate Field Disk/Storage Data.");
			this.order = this.subContainerEnd+2;
			this.subContainerEnd = this.subContainerEnd + 2 + 50;
			
			if(osProfileList.linux_config){
				var categorySysId = this._createContainerStartandEnd('OS Profile Script', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
				this.order = this.order+1;	
				
				this._createField('cloud_init_script', (osProfileList.linux_config.custom_data)?osProfileList.linux_config.custom_data+'':'', cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, true);
			
			
			
			
			
			}else if(osProfileList.windows_config){
				
				
				var categorySysId = this._createContainerStartandEnd('OS Profiles', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
				this.order = this.order+1;	
				
				this._createField('provision_windows_guest_agent', osProfileList.windows_config.provision_vm_agent, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editables.windows_config)?editables.windows_config.provision_vm_agent:'');
				this._createField('automatic_os_upgrade', osProfileList.windows_config.auto_updates, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editables.windows_config)?editables.windows_config.auto_updates:'');
				
				this._createField('setting_name', (osProfileList.windows_config.additional_unattend_content &amp;&amp; osProfileList.windows_config.additional_unattend_content[0] &amp;&amp; osProfileList.windows_config.additional_unattend_content[0].setting_name)?osProfileList.windows_config.additional_unattend_content[0].setting_name:'', cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editables.windows_config &amp;&amp; editables.windows_config.additional_unattend_content &amp;&amp; editables.windows_config.additional_unattend_content[0] &amp;&amp; editables.windows_config.additional_unattend_content[0].setting_name)?editables.windows_config.additional_unattend_content[0].setting_name:'');
				
				this._createField('xml_content', (osProfileList.windows_config.additional_unattend_content &amp;&amp; osProfileList.windows_config.additional_unattend_content[0] &amp;&amp; osProfileList.windows_config.additional_unattend_content[0].xml_content)?osProfileList.windows_config.additional_unattend_content[0].xml_content:'', cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editables.windows_config &amp;&amp; editables.windows_config.additional_unattend_content &amp;&amp; editables.windows_config.additional_unattend_content[0] &amp;&amp; editables.windows_config.additional_unattend_content[0].xml_content)?editables.windows_config.additional_unattend_content[0].xml_content:'');
				
				var windList = (osProfileList.windows_config.winrm_listeners &amp;&amp; osProfileList.windows_config.winrm_listeners[0])?osProfileList.windows_config.winrm_listeners[0].protocol:'';
				
				for(var win=1; win&lt; osProfileList.windows_config.winrm_listeners.length; win++)
					windList = "," + osProfileList.windows_config.winrm_listeners[win].protocol;
				
				this._createField('protocol', windList, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, '');
				
			}			
			
			
			
			
			
			
			
			var categorySysId = this._createContainerStartandEnd('OS Profile', cat_sysID, this.order+1, this.subContainerEnd, 'normal', serviceName);
			this.order = this.order+2;

			osProfileList = osProfileList.secrets;
			
			for(var k in osProfileList){
				this.order = this.order+4;

				this._createContainerStartandEnd('secrets_'+k, cat_sysID, this.order, this.order+3, 'normal', serviceName+'_'+k);

				this._createOnlyField('valut_id', (osProfileList[k])?osProfileList[k].source_vault_id:'', cat_sysID, this.order+1, serviceName+'_'+k, 6);
				
				if(osProfileList[k] &amp;&amp; osProfileList[k].vault_certificates){
					for(var w in osProfileList[k].vault_certificates){

						this._createOnlyField('certificate_config_url_'+w, osProfileList[k].vault_certificates[w].certificate_url, cat_sysID, this.order+2, serviceName+'_'+k, 6);
					}	
					
					if(!osProfileList[k])
						osProfileList[k] = {};

					osProfileList[k].runtime = (editables[k])?editables[k]:{};
					osProfileList[k].disabled = (editables[k])?editables[k]:{};
					
				}	
			}

			this._insertCatalogVariableProperties(profileUUID, JSON.stringify(osProfileList), 'false', categorySysId, cat_sysID, serviceSysId, categorySysId);

		}catch(e){
			this.logger.error("Nutanix_CreateCatalogVariables._createSubstrateFieldOsProfile :- Exception caught during creation of Substrate Field Storage. Error :- "+e);
		}
	},

	_createSubstrateFieldGuestCustomization: function(guestCustomization, cat_sysID, profileUUID, serviceName, serviceSysId, editables, providerType){
		try{
			this.logger.debug("Inside Nutanix_CreateCatalogVariables._createSubstrateFieldGuestCustomization. Parsing Substrate Field Disk/Storage Data.");
			this.order = this.subContainerEnd+2;
			this.subContainerEnd = this.subContainerEnd + 2 + 50;

			if((providerType+'').includes('vmware') || (providerType+'').includes('VMWARE') ){//} guestCustomization.linux_data){
				
				var categorySysId = this._createContainerStartandEnd('Guest Customization', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
				this.order = this.order+1;

				this.order = this.order+3;
				
				if(guestCustomization.linux_data){
					
					this._createField('hostname', guestCustomization.linux_data.hostname, cat_sysID, this.order+1, serviceName, profileUUID, serviceSysId, categorySysId, (editables.linux_data)?editables.linux_data.hostname:'');
					this._createField('domain', guestCustomization.linux_data.domain, cat_sysID, this.order+1, serviceName, profileUUID, serviceSysId, categorySysId, (editables.linux_data)?editables.linux_data.domain:'');
					this._createField('timezone', guestCustomization.linux_data.timezone, cat_sysID, this.order+1, serviceName, profileUUID, serviceSysId, categorySysId, (editables.linux_data)?editables.linux_data.timezone:'');
					this._createField('hardware_clock_utc', guestCustomization.linux_data.hw_utc_clock, cat_sysID, this.order+1, serviceName, profileUUID, serviceSysId, categorySysId, (editables.linux_data)?editables.linux_data.hw_utc_clock:'');


					this._createField('dns_primary', guestCustomization.linux_data.dns_primary, cat_sysID, this.order+2, serviceName, profileUUID, serviceSysId, categorySysId, (editables.linux_data)?editables.linux_data.dns_primary:'');
					this._createField('dns_secondary', guestCustomization.linux_data.dns_secondary, cat_sysID, this.order+2, serviceName, profileUUID, serviceSysId, categorySysId, (editables.linux_data)?editables.linux_data.dns_secondary:'');
					this._createField('dns_tertiary', guestCustomization.linux_data.dns_tertiary, cat_sysID, this.order+2, serviceName, profileUUID, serviceSysId, categorySysId, (editables.linux_data)?editables.linux_data.dns_tertiary:'');
					this._createField('dns_search_path', guestCustomization.linux_data.dns_search_path[0], cat_sysID, this.order+2, serviceName, profileUUID, serviceSysId, categorySysId, (editables.linux_data &amp;&amp; editables.linux_data.dns_search_path)?editables.linux_data.dns_search_path[0]:'');


					this.order = this.subContainerEnd+2;
					this.subContainerEnd = this.subContainerEnd + 2 + 50;
					var categorySysId = this._createContainerStartandEnd('Guest Customization DHCP', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
					this.order = this.order+1;

					for(var k in guestCustomization.linux_data.network_settings){

						this._createOnlyField('use_dhcp', guestCustomization.linux_data.network_settings[k].is_dhcp, cat_sysID, this.order+1, serviceName+'_'+k, 6);

						guestCustomization.linux_data.network_settings[k].runtime = (editables.linux_data &amp;&amp; editables.linux_data.network_settings &amp;&amp; editables.linux_data.network_settings[k])?editables.linux_data.network_settings[k]:{};
						guestCustomization.linux_data.network_settings[k].disabled = (editables.linux_data &amp;&amp; editables.linux_data.network_settings &amp;&amp; editables.linux_data.network_settings[k])?editables.linux_data.network_settings[k]:{};

					}

					this._insertCatalogVariableProperties(profileUUID, JSON.stringify(guestCustomization.linux_data.network_settings), 'false', categorySysId, cat_sysID, serviceSysId, categorySysId);
				
				}else if(guestCustomization.windows_data){
					
					
					this._createField('predefined_guest_customization', '', cat_sysID, this.order+1, serviceName, profileUUID, serviceSysId, categorySysId, '');
					this._createField('computer_name', guestCustomization.windows_data.computer_name, cat_sysID, this.order+1, serviceName, profileUUID, serviceSysId, categorySysId, (editables.windows_data)?editables.windows_data.computer_name:'');
					this._createField('full_name', guestCustomization.windows_data.full_name, cat_sysID, this.order+1, serviceName, profileUUID, serviceSysId, categorySysId, (editables.windows_data)?editables.windows_data.full_name:'');
					this._createField('organization_name', guestCustomization.windows_data.organization_name, cat_sysID, this.order+1, serviceName, profileUUID, serviceSysId, categorySysId, (editables.windows_data)?editables.windows_data.organization_name:'');
					this._createField('product_id', guestCustomization.windows_data.product_id, cat_sysID, this.order+1, serviceName, profileUUID, serviceSysId, categorySysId, (editables.windows_data)?editables.windows_data.product_id:'');
					this._createField('timezone', guestCustomization.windows_data.timezone, cat_sysID, this.order+1, serviceName, profileUUID, serviceSysId, categorySysId, (editables.windows_data)?editables.windows_data.timezone:'');
					this._createField('admin_password', guestCustomization.windows_data.domain_password, cat_sysID, this.order+1, serviceName, profileUUID, serviceSysId, categorySysId, (editables.windows_data)?editables.windows_data.domain_password:'');
					this._createField('automatically_logon_as_admin', guestCustomization.windows_data.auto_logon, cat_sysID, this.order+1, serviceName, profileUUID, serviceSysId, categorySysId, (editables.windows_data)?editables.windows_data.auto_logon:'');
					this._createField('num_of_times_to_logon_automatically', guestCustomization.windows_data.login_count, cat_sysID, this.order+1, serviceName, profileUUID, serviceSysId, categorySysId, (editables.windows_data)?editables.windows_data.login_count:'');
					this._createField('command_list', guestCustomization.windows_data.command_list[0], cat_sysID, this.order+1, serviceName, profileUUID, serviceSysId, categorySysId, (editables.windows_data &amp;&amp; editables.windows_data.command_list)?editables.windows_data.command_list[0]:'');
					this._createField('join_a_domain', guestCustomization.windows_data.is_domain, cat_sysID, this.order+1, serviceName, profileUUID, serviceSysId, categorySysId, (editables.windows_data)?editables.windows_data.is_domain:'');
					this._createField('workgroup', guestCustomization.windows_data.workgroup, cat_sysID, this.order+1, serviceName, profileUUID, serviceSysId, categorySysId, (editables.windows_data)?editables.windows_data.workgroup:'');
					

					this.order = this.subContainerEnd+2;
					this.subContainerEnd = this.subContainerEnd + 2 + 50;
					var categorySysId = this._createContainerStartandEnd('Guest Customization DHCP', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
					this.order = this.order+1;

					for(var k in guestCustomization.windows_data.network_settings){

						this._createOnlyField('use_dhcp', guestCustomization.windows_data.network_settings[k].is_dhcp, cat_sysID, this.order+1, serviceName+'_'+k, 6);

						guestCustomization.windows_data.network_settings[k].runtime = (editables.windows_data &amp;&amp; editables.windows_data.network_settings &amp;&amp; editables.windows_data.network_settings[k])?editables.windows_data.network_settings[k]:{};
						guestCustomization.windows_data.network_settings[k].disabled = (editables.windows_data &amp;&amp; editables.windows_data.network_settings &amp;&amp; editables.windows_data.network_settings[k])?editables.windows_data.network_settings[k]:{};

					}

					this._insertCatalogVariableProperties(profileUUID, JSON.stringify(guestCustomization.windows_data.network_settings), 'false', categorySysId, cat_sysID, serviceSysId, categorySysId);
				}else{
					
					var guestType = (guestCustomization.cloud_init)?'Cloud-init':'Custom Spec';

					this._createField('type', guestType, cat_sysID, this.order+1, serviceName, profileUUID, serviceSysId, categorySysId, 'false');

					if(guestType == 'Cloud-init'){

						this._createField('predefined_guest_customization', guestCustomization.customization_name, cat_sysID, this.order+1, serviceName, profileUUID, serviceSysId, categorySysId, editables.customization_name);								
						if( !guestCustomization.customization_name)
							this._createField('script', guestCustomization.cloud_init, cat_sysID, this.order+1, serviceName, profileUUID, serviceSysId, categorySysId, editables.cloud_init);							
						
					}
					
				}
				
				

			}else{
				
				var categorySysId = this._createContainerStartandEnd('Guest Customization', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
				this.order = this.order+1;

				this.order = this.order+3;

				if(guestCustomization){
					var guestType = (guestCustomization.sysprep)?'Sysprep':'Cloud-init';

					this._createField('type', guestType, cat_sysID, this.order+1, serviceName, profileUUID, serviceSysId, categorySysId, 'false');

					if(guestType == 'Sysprep'){

						this._createField('install_type', guestCustomization.sysprep.install_type, cat_sysID, this.order+1, serviceName, profileUUID, serviceSysId, categorySysId, 'false');		
						this._createField('script', guestCustomization.sysprep.unattend_xml, cat_sysID, this.order+1, serviceName, profileUUID, serviceSysId, categorySysId, (editables)?editables:'');		

					}else{

						this._createField('script', guestCustomization.cloud_init.user_data, cat_sysID, this.order+1, serviceName, profileUUID, serviceSysId, categorySysId, (editables)?editables:'');		
						
					}	
				}else{
					
					this._createField('type', '', cat_sysID, this.order+1, serviceName, profileUUID, serviceSysId, categorySysId, 'false');
					this._createField('install_type', '', cat_sysID, this.order+1, serviceName, profileUUID, serviceSysId, categorySysId, 'false');		
					this._createField('script', '', cat_sysID, this.order+1, serviceName, profileUUID, serviceSysId, categorySysId, (editables)?editables:'');		
				}
				
				
			}
			
		}catch(e){
			this.logger.error("Nutanix_CreateCatalogVariables._createSubstrateFieldGuestCustomization :- Exception caught during creation of Substrate Field Storage. Error :- "+e);
		}

	},

	_createSubstrateFieldGuestCustomizationGCP: function(guestCustomization, cat_sysID, profileUUID, serviceName, serviceSysId, editables, providerType, tags){
		try{
			this.logger.debug("Inside Nutanix_CreateCatalogVariables._createSubstrateFieldGuestCustomizationGCP. Parsing Substrate Field Disk/Storage Data.");
			this.order = this.subContainerEnd+2;
			this.subContainerEnd = this.subContainerEnd + 2 + 50;

			var categorySysId = this._createContainerStartandEnd('Management Optional', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
			this.order = this.order+1;

			this.order = this.order+3;

			this._createField('startup_script', guestCustomization.startupScript, cat_sysID, this.order+1, serviceName, profileUUID, serviceSysId, categorySysId, (editables.startupScript)?editables.startupScript:'');

			var groups = (tags.items &amp;&amp; tags.items[0])?tags.items[0]:'';

			if(tags.items)
				for(var i=1; i&lt;tags.items.length; i++)
					groups = groups + ',' + tags.items[i];


			this._createField('network_tags', groups, cat_sysID, this.order+1, serviceName, profileUUID, serviceSysId, categorySysId, true);
				
			
		}catch(e){
			this.logger.error("Nutanix_CreateCatalogVariables._createSubstrateFieldGuestCustomizationGCP :- Exception caught during creation of Substrate Field Storage. Error :- "+e);
		}

	},
	
	_createSubstrateFieldCategories: function(categories, cat_sysID, profileUUID, serviceName, serviceSysId, editables){
		try{
			this.logger.debug("Inside Nutanix_CreateCatalogVariables._createSubstrateFieldCategories. Parsing Substrate Field Disk/Storage Data.");
			this.order = this.subContainerEnd+2;
			this.subContainerEnd = this.subContainerEnd + 2 + 50;
			var categorySysId = this._createContainerStartandEnd('Categories', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
			this.order = this.order+1;

			for(var k in categories){

				this._createField((k+'').toLowerCase(), categories[k], cat_sysID, this.order+1, serviceName, profileUUID, serviceSysId, categorySysId, editables);	
				
			//	this._createOnlyField((k+'').toLowerCase(), categories[k], cat_sysID, this.order+1, serviceName+'_'+k, 6);
			}

			//this._insertCatalogVariableProperties(profileUUID, JSON.stringify(categories), 'false', categorySysId, cat_sysID, serviceSysId, categorySysId);

		}catch(e){
			this.logger.error("Nutanix_CreateCatalogVariables._createSubstrateFieldCategories :- Exception caught during creation of Substrate Field Storage. Error :- "+e);
		}

	},
	
	_createSubstrateFieldDisks: function(diskList, cat_sysID, profileUUID, serviceName, serviceSysId, editables){
		try{
			this.logger.debug("Inside Nutanix_CreateCatalogVariables._createSubstrateFieldDisks. Parsing Substrate Field Disk/Storage Data.");
			this.order = this.subContainerEnd+2;
			this.subContainerEnd = this.subContainerEnd + 2 + 50;
			var categorySysId = this._createContainerStartandEnd('Disks', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
			this.order = this.order+1;

			for(var k in diskList){
				this.order = this.order+3;

				this._createContainerStartandEnd('disks_'+k, cat_sysID, this.order, this.order+2, 'normal', serviceName+'_'+k);

				this._createOnlyField('use_existing', (diskList[k].source)?true:false, cat_sysID, this.order+1, serviceName+'_'+k, 7);
				this._createOnlyField('storage_type', diskList[k].initializeParams.diskType, cat_sysID, this.order+1, serviceName+'_'+k, 6);
				this._createOnlyField('source_image', diskList[k].initializeParams.sourceImage, cat_sysID, this.order+1, serviceName+'_'+k, 6);
				this._createOnlyField('size_in_gb', diskList[k].initializeParams.diskSizeGb, cat_sysID, this.order+1, serviceName+'_'+k, 6);
				this._createOnlyField('delete_when_instance_is_deleted', diskList[k].autoDelete, cat_sysID, this.order+1, serviceName+'_'+k, 7);
				this._createOnlyField('disk', diskList[k].source, cat_sysID, this.order+1, serviceName+'_'+k, 6);

				if(!diskList[k])
					diskList[k] = {};
				
				diskList[k].runtime = (editables[k])?editables[k]:{};	
				diskList[k].disabled = (editables[k])?editables[k]:{};	
			}

			this._insertCatalogVariableProperties(profileUUID, JSON.stringify(diskList), 'false', categorySysId, cat_sysID, serviceSysId, categorySysId);

		}catch(e){
			this.logger.error("Nutanix_CreateCatalogVariables._createSubstrateFieldDisks :- Exception caught during creation of Substrate Field Storage. Error :- "+e);
		}

	},
	
	_createSubstrateFieldBlankDisks: function(diskList, cat_sysID, profileUUID, serviceName, serviceSysId, editables){
		try{
			this.logger.debug("Inside Nutanix_CreateCatalogVariables._createSubstrateFieldBlankDisks. Parsing Substrate Field Disk/Storage Data.");
			this.order = this.subContainerEnd+2;
			this.subContainerEnd = this.subContainerEnd + 2 + 50;
			var categorySysId = this._createContainerStartandEnd('Blank Disks', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
			this.order = this.order+1;

			for(var k in diskList){
				this.order = this.order+3;

				this._createContainerStartandEnd('blank_disks_'+k, cat_sysID, this.order, this.order+2, 'normal', serviceName+'_'+k);

				this._createOnlyField('disk_type', diskList[k].disk_type, cat_sysID, this.order+1, serviceName+'_'+k, 6);
				this._createOnlyField('disk_name', diskList[k].name, cat_sysID, this.order+1, serviceName+'_'+k, 6);
				this._createOnlyField('size_in_gb', diskList[k].sizeGb, cat_sysID, this.order+1, serviceName+'_'+k, 6);
				this._createOnlyField('delete_when_instance_is_deleted', diskList[k].autoDelete, cat_sysID, this.order+1, serviceName+'_'+k, 7);

				if(!diskList[k])
					diskList[k] = {};
				
				diskList[k].runtime = (editables[k])?editables[k]:{};	
				diskList[k].disabled = (editables[k])?editables[k]:{};	
			}

			this._insertCatalogVariableProperties(profileUUID, JSON.stringify(diskList), 'false', categorySysId, cat_sysID, serviceSysId, categorySysId);

		}catch(e){
			this.logger.error("Nutanix_CreateCatalogVariables._createSubstrateFieldBlankDisks :- Exception caught during creation of Substrate Field Storage. Error :- "+e);
		}

	},
	
	_createSubstrateFieldNetworkInterfaces: function(nicList, cat_sysID, profileUUID, serviceName, serviceSysId, editables){
		try{
			this.logger.debug("Inside Nutanix_CreateCatalogVariables._createSubstrateFieldNetworkInterfaces.");
			this.order = this.subContainerEnd+2;
			this.subContainerEnd = this.subContainerEnd + 2 + 50;
			var categorySysId = this._createContainerStartandEnd('Networking', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
			this.order = this.order+1;

			for(var k in nicList){
				this.order = this.order+3;

				this._createContainerStartandEnd('network_'+k, cat_sysID, this.order, this.order+2, 'normal', serviceName+'_'+k);

				this._createOnlyField('associate_public_ip_address', nicList[k].associatePublicIP, cat_sysID, this.order+1, serviceName+'_'+k, 7);
				this._createOnlyField('network', nicList[k].network, cat_sysID, this.order+1, serviceName+'_'+k, 6);
				this._createOnlyField('subnetwork', nicList[k].subnetwork, cat_sysID, this.order+1, serviceName+'_'+k, 6);
				this._createOnlyField('access_configuration_name', (nicList[k].accessConfigs &amp;&amp; nicList[k].accessConfigs[0])?nicList[k].accessConfigs[0].name:'', cat_sysID, this.order+1, serviceName+'_'+k, 6);
				this._createOnlyField('access_configuration_type', (nicList[k].accessConfigs &amp;&amp; nicList[k].accessConfigs[0])?nicList[k].accessConfigs[0].config_type:'', cat_sysID, this.order+1, serviceName+'_'+k, 6);

				if(!nicList[k])
					nicList[k] = {};
				
				nicList[k].runtime = (editables[k])?editables[k]:{};	
				nicList[k].disabled = (editables[k])?editables[k]:{};	
			}

			this._insertCatalogVariableProperties(profileUUID, JSON.stringify(nicList), 'false', categorySysId, cat_sysID, serviceSysId, categorySysId);

		}catch(e){
			this.logger.error("Nutanix_CreateCatalogVariables._createSubstrateFieldNetworkInterfaces. Error :- "+e);
		}

	},
	
	_createSubstrateFieldNicList: function(nicList, cat_sysID, profileUUID, serviceName, serviceSysId, editables){
		try{
// 			this.logger.debug("Inside Nutanix_CreateCatalogVariables._createSubstrateFieldNicList.");
			this.order = this.subContainerEnd+2;
			this.subContainerEnd = this.subContainerEnd + 2 + 50;
			var categorySysId = this._createContainerStartandEnd('Network Adapters', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
			this.order = this.order+1;
			var clusterPosition = '';
			var clusterName ='';
			var grSubnet;
			for(var k in nicList){
				this.order = this.order+3;

				if(nicList[k].net_name){
					
					this._createContainerStartandEnd('network_'+k, cat_sysID, this.order, this.order+2, 'normal', serviceName+'_'+k);
					
					this._createOnlyField('adapter_type', nicList[k].nic_type, cat_sysID, this.order+1, serviceName+'_'+k, 6);
					this._createOnlyField('network_type', nicList[k].net_name, cat_sysID, this.order+1, serviceName+'_'+k, 6);
				}else{
					
					if(k==0){
						clusterPosition = this.order+1;
						this.order += 1; 
					}
					if(nicList[k].subnet_reference.uuid){
						grSubnet = new GlideRecord(this.appUtil.configuration.table.subnet+'');
						grSubnet.addQuery('uuid',nicList[k].subnet_reference.uuid);
						grSubnet.query();
						if(grSubnet.next())
							clusterName = grSubnet.cluster_name ; //
						
					}
					var subnetRegex = '@@{.*}@@';
					var reg = new RegExp(subnetRegex);
					var nicVal = (!reg.test(nicList[k].subnet_reference.uuid+'')) ?  nicList[k].subnet_reference.uuid : "";
					this._createOnlyField('nic_'+(parseInt(k)+1), nicVal , cat_sysID, this.order+1, serviceName+'_'+k, 18 );
					if(k == nicList.length-1){
						this._createOnlyField('cluster_name' ,  clusterName , cat_sysID,clusterPosition, serviceName+'', 6);
						
					}
						
				}
					
				
				if(!nicList[k])
					nicList[k] = {};
				
				nicList[k].runtime = (editables[k])?editables[k]:{};	
				nicList[k].disabled = (editables[k])?editables[k]:{};	
			}

			this._insertCatalogVariableProperties(profileUUID, JSON.stringify(nicList), 'false', categorySysId, cat_sysID, serviceSysId, categorySysId);

		}catch(e){
			this.logger.error("Nutanix_CreateCatalogVariables._createSubstrateFieldNicList. Error :- "+e);
		}

	},
	
	_createSubstrateFieldNwProfile: function(nicList, cat_sysID, profileUUID, serviceName, serviceSysId, editables){
		try{
			this.logger.debug("Inside Nutanix_CreateCatalogVariables._createSubstrateFieldNwProfile.");
			this.order = this.subContainerEnd+2;
			this.subContainerEnd = this.subContainerEnd + 2 + 50;
			var categorySysId = this._createContainerStartandEnd('Network Profiles', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
			this.order = this.order+1;

			nicList = nicList.nic_list;
			
			for(var k in nicList){
				this.order = this.order+3;

				this._createContainerStartandEnd('nic_'+k, cat_sysID, this.order, this.order+2, 'normal', serviceName+'_'+k);

				this._createOnlyField('nic_name', nicList[k].nic_name, cat_sysID, this.order+1, serviceName+'_'+k, 6);
				this._createOnlyField('security_group', nicList[k].nsg_name, cat_sysID, this.order+1, serviceName+'_'+k, 6);
				this._createOnlyField('virtual_network', nicList[k].vnet_name, cat_sysID, this.order+1, serviceName+'_'+k, 6);
				this._createOnlyField('subnet', nicList[k].subnet_name, cat_sysID, this.order+1, serviceName+'_'+k, 6);
				this._createOnlyField('public_ip_config_name', (nicList[k] &amp;&amp; nicList[k].public_ip_info)?nicList[k].public_ip_info.ip_name:'', cat_sysID, this.order+1, serviceName+'_'+k, 6);
				this._createOnlyField('public_ip_config_adapter_method', (nicList[k] &amp;&amp; nicList[k].public_ip_info)?nicList[k].public_ip_info.ip_allocation_method:'', cat_sysID, this.order+1, serviceName+'_'+k, 6);
				this._createOnlyField('public_ip_config_dns_label', (nicList[k] &amp;&amp; nicList[k].public_ip_info)?nicList[k].public_ip_info.dns_label:'', cat_sysID, this.order+1, serviceName+'_'+k, 6);
				this._createOnlyField('private_ip_config_allocation_method', (nicList[k] &amp;&amp; nicList[k].public_ip_info)?nicList[k].private_ip_info.ip_allocation_method:'', cat_sysID, this.order+1, serviceName+'_'+k, 6);
				
				if(!nicList[k])
					nicList[k] = {};
				
				nicList[k].runtime = (editables[k])?editables[k]:{};	
				nicList[k].disabled = (editables[k])?editables[k]:{};	
			}

			this._insertCatalogVariableProperties(profileUUID, JSON.stringify(nicList), 'false', categorySysId, cat_sysID, serviceSysId, categorySysId);

		}catch(e){
			this.logger.error("Nutanix_CreateCatalogVariables._createSubstrateFieldNwProfile. Error :- "+e);
		}

	},
	
	_parseProfile: function(profileList, cat_sysID, service_name, serviceSysId){

		try{
			this.logger.debug("Inside Nutanix_CreateCatalogVariables._parseProfile. Parsing profile/deployment varaibles.");
			for(var k in profileList){
				var prof = profileList[k];

				this._createProfileField(prof, cat_sysID, k, service_name, serviceSysId, prof.editables);
			}
		}catch(e){
			this.logger.error("Nutanix_CreateCatalogVariables._parseProfile :- Exception caught during parsing profile. Error :- "+e);
		}
	},

	_parseVariables: function(serviceVar, profilesUUIDArray, cat_sysID, service_name, serviceSysId){

		try{
			this.logger.debug("Inside Nutanix_CreateCatalogVariables._parseVariables");
			for(var k in profilesUUIDArray){
				this._createServiceFieldVariableList(serviceVar.variable_list, cat_sysID, profilesUUIDArray[k], service_name, serviceSysId);
				//this._createServiceFieldPortList(serviceVar.port_list, cat_sysID, profilesUUIDArray[k], service_name, serviceSysId);
			}
		}catch(e){
			this.logger.error("Nutanix_CreateCatalogVariables._parseVariables :- Exception caught during parsing variables. Error :- "+e);
		}
	},

	_createSubstrateFieldCreateSpec: function(specs, cat_sysID, profileUUID, serviceName, serviceSysId, editable){
		try{
			this.logger.debug("Inside Nutanix_CreateCatalogVariables._createSubstrateFieldCreateSpec. Parsing and creating substrate field variables.");
			var categorySysId = this._createContainerStartandEnd('VM Configuration', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
			this.order = this.order+1;

			if(specs){
				
				if(specs.name || (specs.resources &amp;&amp; specs.resources.name) || (specs.resources &amp;&amp; specs.resources.vm_name) ){
					
					var edit = '';
					
					if(editable){
						if(editable.name)
							edit = editable.name;
						else if(editable.resources)
							edit = (editable.resources.name)?editable.resources.name:editable.resources.vm_name;
					}
					
					this._createField('name', (specs.name)?specs.name:(specs.resources.name)?specs.resources.name:specs.resources.vm_name, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, edit);
				}
					
				if(specs.host)
					this._createField('host', specs.host, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.host)?editable.host:'');

				if(specs.template)
					this._createField('template', specs.template, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.template)?editable.template:'');

				if(specs.datastore)
					this._createField('datastore', specs.datastore, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.datastore)?editable.datastore:'');
				
				if(specs.storage_pod)
					this._createField('storage_pod', specs.storage_pod, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.storage_pod)?editable.storage_pod:'');
				
				if(specs.cluster)
					this._createField('cluster', specs.cluster, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.cluster)?editable.cluster:'');

				if(specs.address)
					this._createField('ip_address', specs.address, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.address)?editable.address:'');
				


				
				
// 				if(specs.drs_mode)
// 					this._createField('drs_mode', specs.drs_mode, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.drs_mode)?editable.drs_mode:'');
				
// 				if(/* (specs.drs_mode &amp;&amp; specs.drs_mode+''=='true') || */specs.cluster || specs.storage_pod)
// 					this._createField('drs_mode', true, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.datastore)?editable.datastore:'');
// 				else if(/* (specs.drs_mode &amp;&amp; specs.drs_mode+''=='false') ||*/ specs.datastore || specs.host)
// 					this._createField('drs_mode', false, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.datastore)?editable.datastore:'');
				

				
				if(specs.cluster || specs.storage_pod || specs.datastore || specs.host || specs.template){
					
					var drsVal = (specs.cluster || specs.storage_pod)?true:false;
					
					this._createField('drs_mode', drsVal, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.drs_mode)?editable.drs_mode:'');
// 					this._createField('host', specs.host, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.host)?editable.host:'');
// 					this._createField('template', specs.template, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.template)?editable.template:'');
// 					this._createField('datastore', specs.datastore, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.datastore)?editable.datastore:'');
// 					this._createField('cluster', specs.cluster, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.cluster)?editable.cluster:'');
// 					this._createField('storage_pod', specs.storage_pod, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.storage_pod)?editable.storage_pod:'');
				}
					
				
				
				
				
				
				

				this.order++;

				var resource = specs.resources;

				for(var i in resource){

					if( i == 'security_group_list'){
						var secStr = (resource[i][0])?resource[i][0].security_group_id+'':'';

						for(var k=1; k&lt;resource[i].length; k++)
							secStr = secStr + ',' + resource[i][k].security_group_id+'';

						this._createField(i, secStr, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.resources)?editable.resources[i]:'');
					}else if( i == 'block_device_map' || i == 'guest_customization' || i == 'guestCustomization'){
						continue;
					}else if( i == 'tag_list'){
						
						continue;
						
// 						for(var k in resource[i]){
// 							this._createField(resource[i][k].key+'', resource[i][k].value+'', cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.resources &amp;&amp; editable.resources[i] &amp;&amp; editable.resources[i])?editable.resources[i]:'');
// 						}

					}

					else if(i == 'hw_profile'){

						this._createField('hardware_profile', resource[i].vm_size, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.resources &amp;&amp; editable.resources[i])?editable.resources[i].vm_size:'');

					}

					else if (resource[i] &amp;&amp; (resource[i].constructor === Object || resource[i].constructor === Array)){

						continue;

					}else if(i == 'zone'){
						
						this._createField(i, resource[i], cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.resources)?editable.resources[i]:'');
					}else if(this.exclusionList.includes(i) || i=='vm_name'){
						continue;
						
					}else{
						this._createField(i, resource[i], cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.resources)?editable.resources[i]:'');
					}

				}
			}
			
			
		}catch(e){
			this.logger.error("Nutanix_CreateCatalogVariables._createSubstrateFieldCreateSpec :- Exception caught during creation of Substrate Field Specs. Error :- "+e);
		}

	},

	_createSubstrateFieldStorage: function(diskList, cat_sysID, profileUUID, serviceName, serviceSysId, editables){
		try{
			this.logger.debug("Inside Nutanix_CreateCatalogVariables._createSubstrateFieldStorage. Parsing Substrate Field Disk/Storage Data.");
			this.order = this.subContainerEnd+2;
			this.subContainerEnd = this.subContainerEnd + 2 + 50;
			var categorySysId = this._createContainerStartandEnd('Storage', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
			this.order = this.order+1;

			diskList.root_disk.runtime = (editables &amp;&amp; editables.root_disk &amp;&amp; editables.root_disk.size_gb)?editables.root_disk.size_gb+'':'false';
			diskList.root_disk.disabled = (editables &amp;&amp; editables.root_disk &amp;&amp; editables.root_disk.size_gb)?editables.root_disk.size_gb+'':'false';
			
			this._createContainerStartandEnd('Root Disk', cat_sysID, this.order, this.order+2, 'normal', serviceName);

			this._createOnlyField('device_name', diskList.root_disk.device_name, cat_sysID, this.order+1, serviceName, 6);
			this._createOnlyField('size_gb', diskList.root_disk.size_gb, cat_sysID, this.order+1, serviceName, 6);
			this._createOnlyField('volume_type', diskList.root_disk.volume_type, cat_sysID, this.order+1, serviceName, 6);
			this._createOnlyField('delete_on_termination', diskList.root_disk.delete_on_termination, cat_sysID, this.order+1, serviceName, 7);

			var dataDiskList = diskList.data_disk_list;

			for(var k in dataDiskList){
				this.order = this.order+3;

				this._createContainerStartandEnd('ebs', cat_sysID, this.order, this.order+2, 'normal', serviceName+'_'+k);

				this._createOnlyField('device_name', dataDiskList[k].device_name, cat_sysID, this.order+1, serviceName+'_'+k, 6);
				this._createOnlyField('size_gb', dataDiskList[k].size_gb, cat_sysID, this.order+1, serviceName+'_'+k, 6);
				this._createOnlyField('volume_type', dataDiskList[k].volume_type, cat_sysID, this.order+1, serviceName+'_'+k, 6);
				this._createOnlyField('delete_on_termination', dataDiskList[k].delete_on_termination, cat_sysID, this.order+1, serviceName+'_'+k, 7);

				if(!dataDiskList[k])
					dataDiskList[k] = {};
				
				dataDiskList[k].runtime = (editables &amp;&amp; editables.data_disk_list &amp;&amp; editables.data_disk_list[k] &amp;&amp; editables.data_disk_list[k].size_gb)?editables.data_disk_list[k].size_gb+'':'false';
				dataDiskList[k].disabled = (editables &amp;&amp; editables.data_disk_list &amp;&amp; editables.data_disk_list[k] &amp;&amp; editables.data_disk_list[k].size_gb)?editables.data_disk_list[k].size_gb+'':'false';
			}

			this._insertCatalogVariableProperties(profileUUID, JSON.stringify(diskList), 'false', categorySysId, cat_sysID, serviceSysId, categorySysId);

		}catch(e){
			this.logger.error("Nutanix_CreateCatalogVariables._createSubstrateFieldStorage :- Exception caught during creation of Substrate Field Storage. Error :- "+e);
		}

	},

	_createSubstrateFieldReadinessProbe: function(connectionList, cat_sysID, profileUUID, serviceName, serviceSysId, editable){
		try{

			this.logger.debug("Inside Nutanix_CreateCatalogVariables._createSubstrateFieldReadinessProbe. Parsing Connection Probe variables.");
			this.order = this.subContainerEnd + 2;
			this.subContainerEnd = this.subContainerEnd + 2 + 50;
			var categorySysId = this._createContainerStartandEnd('Connection', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
			this.order = this.order+1;

			for(var i in connectionList){

				var connection = connectionList[i];

				if( i == 'login_credential_local_reference'){

					this._createField('credential', connection.name+'', cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.login_credential_local_reference)?editable.login_credential_local_reference.name:'');

				}else{
					
					if(i == 'disable_readiness_probe'){
						
						this._createField(i, (connection+''=='true')?false:true, cat_sysID, this.order+1, serviceName, profileUUID, serviceSysId, categorySysId, (editable)?editable[i]:'');
					}else{
						
						this._createField(i, connection+'', cat_sysID, this.order+1, serviceName, profileUUID, serviceSysId, categorySysId, (editable)?editable[i]:'');	
					}
					
				}

			}
		}catch(e){
			this.logger.error("Nutanix_CreateCatalogVariables._createSubstrateFieldReadinessProbe :- Exception caught during creation of Substrate Field Readiness Probe. Error :- "+e);
		}
	},

	_createProfileField: function(profile, cat_sysID, profileUUID, serviceName, serviceSysId, editable){
		try{
			this.logger.debug("Inside Nutanix_CreateCatalogVariables._createProfileField. Parsing profile deployment vairables.");
			this.order = this.subContainerEnd+2;
			this.subContainerEnd = this.subContainerEnd + 2 + 50;
			var categorySysId = this._createContainerStartandEnd('Deployment Config', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
			this.order = this.order+1;

			this._createField('min_number_of_replicas', profile.min_replicas, cat_sysID, this.order+1, serviceName, profileUUID, serviceSysId, categorySysId, editable.min_replicas);
			this._createField('max_number_of_replicas', profile.max_replicas, cat_sysID, this.order+2, serviceName, profileUUID, serviceSysId, categorySysId, editable.max_replicas);
		}catch(e){
			this.logger.error("Nutanix_CreateCatalogVariables._createProfileField :- Exception caught during creation of profile field. Error :- "+e);
		}
	},

	_createServiceFieldPortList: function(portList, cat_sysID, profileUUID, serviceName, serviceSysId){
		try{
			this.logger.debug("Inside Nutanix_CreateCatalogVariables._createServiceFieldPortList. Parsing Service Field Configuration variables.");

			this.order = this.subContainerEnd+2;
			this.subContainerEnd = this.subContainerEnd + 2 + 50;
			var categorySysId = this._createContainerStartandEnd('Port List', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);

			for(var i in portList){
				this.order = this.order+1;
				this._createOnlyField('protocol', portList[i].protocol, cat_sysID, this.order+1, serviceName+'_'+i, 6);
				this._createOnlyField('target_port', portList[i].target_port, cat_sysID, this.order+1, serviceName+'_'+i, 6);
				this._createOnlyField('endpoint_name', portList[i].endpoint_name, cat_sysID, this.order+1, serviceName+'_'+i, 6);
			}

			this._insertCatalogVariableProperties(profileUUID, JSON.stringify(portList), 'false', categorySysId, cat_sysID, serviceSysId, categorySysId);

		}catch(e){
			this.logger.error("Nutanix_CreateCatalogVariables._createServiceFieldPortList :- Exception caught during creation of service field port list. Error :- "+e);
		}
	},

	_createOnlyField: function( name, value, catSysID, order, serviceName, type){
		try{
			this.logger.debug("Inside Nutanix_CreateCatalogVariables._createOnlyField");
			var variable = new GlideRecord(this.appUtil.configuration.table.varaiblesTable+'');
			variable.addEncodedQuery('cat_item='+catSysID+'^name='+serviceName+'_'+name+'');
			variable.query();
			var column_fields={};
			if(variable.next()){
				column_fields.variable_width = '50';
				column_fields.type = type+'';
				column_fields.default_value = (value)?value:'';
				if(type+''==18){
					column_fields.lookup_table = 'x_nuta2_nutanix_ca_subnet';
					column_fields.lookup_value = 'uuid';
					column_fields.lookup_label = 'name,cluster_name';
					column_fields.include_none = true;

				}
				column_fields.question_text = (this.fieldLabels[name] &amp;&amp; this.fieldLabels[name].label)?this.fieldLabels[name].label+'':this._toTitleCase(name.replace(/_/g, ' '));//'profile_configuration';
				var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable(variable.sys_id, column_fields, 'update');

			}else{
				column_fields={};
				column_fields.type = type+'';
				if(type+''==18){
					gs.info("RV: type check");
					column_fields.lookup_table = 'x_nuta2_nutanix_ca_subnet';
					column_fields.lookup_value = 'uuid';
					column_fields.lookup_label = 'name,cluster_name';
					column_fields.include_none = true;
					
				}
				column_fields.cat_item = catSysID;
				column_fields.active = true;
				column_fields.question_text = (this.fieldLabels[name] &amp;&amp; this.fieldLabels[name].label)?this.fieldLabels[name].label+'':this._toTitleCase(name.replace(/_/g, ' '));//'profile_configuration';
				column_fields.name = serviceName+'_'+name+'';
				column_fields.default_value = (value)?value:'';
				column_fields.order = order;
				column_fields.variable_width = '50';
				var fieldSysd = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');
				
			}
		}catch(e){
			this.logger.error("Nutanix_CreateCatalogVariables._createOnlyField :- Exception caught while adding field in item_option_new table. Error :- "+e);
		}
	},

	_createServiceFieldVariableList: function(variableList, cat_sysID, profileUUID, serviceName, serviceSysId, editable){
		try{
			this.logger.debug("Inside Nutanix_CreateCatalogVariables._createServiceFieldVariableList. Parsing Service variable list.");
			this.order = this.subContainerEnd+2;
			this.subContainerEnd = this.subContainerEnd + 2 + 50;

			if(variableList.length==0){
				this.order = this.order+1;
				return;
			}

			var categorySysId = this._createContainerStartandEnd('Variables', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
			this.order = this.order+1;
			
			this._checkServiceVarSync(cat_sysID, variableList, serviceName, profileUUID, serviceSysId);
			
			for(var index = 0; index &lt; variableList.length; index++){
				
				var edit = (variableList[index].editables &amp;&amp; variableList[index].editables.value == true &amp;&amp; variableList[index].is_hidden == false) ? true : false;
				this._createField(variableList[index].name, variableList[index].value, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, edit , 'serviceVariables',true,variableList[index]);
				this.order = this.order+1;
			}
		}catch(e){
			this.logger.error("Nutanix_CreateCatalogVariables._createServiceFieldVariableList :- Exception caught during creation of service field variables. Error :- "+e);
		}

	},

	_createField: function( name, value, catSysID, order, serviceName, profileUUID, serviceSysId, categorySysId, editable, isServiceVariable, serviceVar, field){
		try{
			
			this.logger.debug("Inside Nutanix_CreateCatalogVariables._createField");
			var variable = new GlideRecord(this.appUtil.configuration.table.varaiblesTable+'');
			variable.addEncodedQuery('cat_item='+catSysID+'^name='+serviceName+'_'+name+'');
			variable.query();
			
			var fieldSysd = '';
			var varType = (serviceVar) ? this.diffVar._returnVarType(field) : '';
			var column_fields={};
			if(variable.next()){
				column_fields.variable_width = '50';
				
				if(this.boolValidation.includes(','+name+',')) {
					column_fields.type ='7';
				}
				if(name === 'drs_mode' &amp;&amp; variable.question_text != 'DRS mode'){
					column_fields.question_text = 'DRS mode';
				}
				if(serviceVar){
					column_fields.question_text = (serviceVar &amp;&amp; (field.label+'').trim() != "") ? field.label+''  : field.name+'';
					column_fields.show_help = true;
					column_fields.type = varType.type+'';
					column_fields.tooltip = field.description+'';
					column_fields.help_text = (field.description+'') ? field.description+'' : '';
					column_fields.mandatory = (field.is_mandatory+'') ? field.is_mandatory : '';
					if(varType.type == 21){
						column_fields.list_table = this.appUtil.configuration.table.dropDownTable+'';
						column_fields.attributes = "glide_list";
					}
				}
				fieldSysd = new Nutanix_ConfigureSettingScripts().updateVariableTable(variable.sys_id, column_fields, 'update');
				if(serviceVar &amp;&amp; (varType.type+'' == '5' || varType.type+'' == '21')){
					this.diffVar._updateOtions(fieldSysd,varType.opt ,varType.type );
				}
				
			}else {
				var column_fields={};
				column_fields.type = ((serviceVar) ? varType.type+'' : this.boolValidation.includes(','+name+',') ? 7 :  ((name=='user_data' || name=='script' || name=='startup_script' || name=='cloud_init_script' || name=='command_list' || name=='xml_content')?2:6))+''; //
				column_fields.cat_item = catSysID+'';
				column_fields.active = true;
				column_fields.question_text = (serviceVar &amp;&amp; (field.label+'').trim() != "") ? field.label+''  : (this.fieldLabels[name] &amp;&amp; this.fieldLabels[name].label)?this.fieldLabels[name].label+'':this._toTitleCase(name.replace(/_/g, ' '));//'profile_configuration';
				column_fields.name = serviceName+'_'+name+'';
				column_fields.default_value = (value)?value+'':'';
				column_fields.variable_width = '50';
				column_fields.tooltip = (serviceVar) ?  field.description+'' : '';
				column_fields.order = order;
				if(this.boolValidation.includes(','+name+',')) {
					column_fields.type = '7';
				}
				if(name === 'drs_mode' &amp;&amp; variable.question_text != 'DRS mode') {
					column_fields.question_text = 'DRS mode';
				}
				if(serviceVar){
					column_fields.question_text = (serviceVar &amp;&amp; (field.label+'').trim() != "") ? field.label+''  : field.name+'';
					column_fields.show_help = true;
					column_fields.type = varType.type+'';
					column_fields.tooltip = field.description+'';
					column_fields.help_text = (field.description+'') ? field.description+'' : '';
					column_fields.mandatory = (field.is_mandatory+'') ? field.is_mandatory : '';
					if(varType.type == 21){
						column_fields.list_table = this.appUtil.configuration.table.dropDownTable+'';
						column_fields.attributes = "glide_list";
					}
				}
				fieldSysd = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');
				if(serviceVar &amp;&amp; (varType.type+'' == '5' || varType.type+'' == '21')){
					this.diffVar._updateOtions(fieldSysd ,varType.opt ,varType.type );
				}
				
			}

			this._insertCatalogVariableProperties(profileUUID, value, editable, fieldSysd, catSysID, serviceSysId, categorySysId, isServiceVariable, name, field);
		}catch(e){
			this.logger.error("Nutanix_CreateCatalogVariables._createField :- Exception caught wjile adding field in item_option_new table. Error :- "+e);
		}
	},

	_insertCatalogVariableProperties: function(profileUUID, default_value, runtime_config, fieldSysd, catalogSysId, serviceSysId, categorySysId, isServiceVariable, fieldName, field){
		try{
			this.logger.debug("Inside Nutanix_CreateCatalogVariables._insertCatalogVariableProperties");
			var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties+'');
			gr.addQuery('application_profile', this.profileUUIDSysIDRel[profileUUID]+'');
			gr.addQuery('catalog_item', catalogSysId+'');
			gr.addQuery('variable', fieldSysd+'');
			gr.query();

			if(gr.next()){
				
				var notSupported = (default_value+''=='Cloud-init' || default_value+''=='Sysprep' || (default_value+'').indexOf('@@') != -1 ||(fieldName+'').startsWith('key_') || (this.disabledFields.includes(","+fieldName+",") &amp;&amp; fieldName+''!='name')) ? false : true;
				if(isServiceVariable == "serviceVariables" &amp;&amp; field.is_hidden &amp;&amp; (field.is_hidden+'' != gr.is_hidden + "")) {
// 					this._invalidateCatalogItem(catalogSysId);
// 					this.logger.info("Deactivated catalog due to private variable field.is_hidden!");
				}//Check Service Varibale.
				
				if(isServiceVariable == "serviceVariables" &amp;&amp; gr.runtime_config + "" != runtime_config + "") {
// 					this._invalidateCatalogItem(catalogSysId);
// 					this.logger.info("Deactivated catalog due to private variable runtime_config!");
				}
				
				if(isServiceVariable == "serviceVariables" &amp;&amp; field.val_type+"" != gr.value_type + "") {
// 					this._invalidateCatalogItem(catalogSysId);
// 					this.logger.info("Deactivated catalog due to private variable val_type!");
				}

				gr.application_profile = this.profileUUIDSysIDRel[profileUUID]+'';
				gr.catalog_item = catalogSysId+'';
				gr.default_value = (field &amp;&amp; (field.val_type+'' == 'DATE'|| field.val_type+'' == 'DATE_TIME')) ? this.diffVar._formttedDateTime(field.value+'', field.val_type+'') : (default_value)?default_value+'':'';//(this.disabledFields.includes(","+fieldName+","))?'Use Calm to set/edit this field':(default_value)?default_value+'':'';
				gr.runtime_config = ((default_value+'').indexOf('@@') != -1 || notSupported+''=='false') ? false : runtime_config+'';
				gr.variable = fieldSysd+'';
				gr.isprofilevariable = false;
				
				gr.isservicevariable = (isServiceVariable == "serviceVariables") ? true : false;
				
				gr.type = (isServiceVariable == "serviceVariables") ? "Service" : "";
				gr.service_name = serviceSysId+'';
				gr.category_name = categorySysId+'';
				
				gr.isdisabled = ( (default_value+'').indexOf('@@') != -1 || notSupported+''=='false') ? true : (runtime_config+'' == 'true') ? false : true;//(runtime_config+'' == 'true') ? false : true;
				
				gr.issupported = notSupported;
				
				/**advanced var**/
				
				gr.value_type = (field) ? field.val_type+'' : this.integerValidation.includes(','+fieldName+',') ? 'INT': "";
				gr.data_type = (field) ? (field.type+'' == "LOCAL" &amp;&amp; field.options &amp;&amp; field.options.type+'' == "PREDEFINED" &amp;&amp; field.options.choices &amp;&amp; (field.options.choices).length &gt; 0) ? "PREDEFINED" : field.type+'' : '' ;
				
				/*regex validation*/
				
				var validation = (field) ? ((field.regex &amp;&amp; field.regex.should_validate) ? field.regex.value+'' : this.diffVar._fieldRegex(field) ) :  this.integerValidation.includes(','+fieldName+',') ? '^[\\d]*$' : "";
				if(field &amp;&amp; gr.data_type+'' == "LOCAL" &amp;&amp; (field.val_type+'' == "DATE" || field.val_type+'' == "DATE_TIME") )
					validation = this.diffVar._fieldRegex(field);
				gr.field_regex = validation;
				
				/* End regex Validation */
				
				
				//gr.field_regex = (field) ? ((field.regex &amp;&amp; field.regex.should_validate) ? field.regex.value+'' : this.diffVar._fieldRegex(field) ) :  this.integerValidation.includes(','+fieldName+',') ? '^[\\d]*$' : "";
				gr.uuid = (field) ? field.uuid+'' : '' ;
				gr.is_hidden = ((field) &amp;&amp; field.is_hidden+'' == 'true') ? true : false;
				/**advanced var**/
				
				if(isServiceVariable == "serviceVariables") {
					if(field) {
					gr.field_json = JSON.stringify(field);
				}
				}
				
				gr.update();

				this.logger.debug("Updated the entry of variable "+gr.variable.name+" with default value and runtime in "+gr.catalog_item.name);
				
			}else{
				
				var notSupported = (default_value+''=='Cloud-init' || default_value+''=='Sysprep' || (default_value+'').indexOf('@@') != -1 || (fieldName+'').startsWith('key_') || (this.disabledFields.includes(","+fieldName+",") &amp;&amp; fieldName+''!='name')) ? false : true;
				//added (default_value+'').indexOf('@@') != -1 
				gr.initialize();
				gr.application_profile = this.profileUUIDSysIDRel[profileUUID]+'';
				gr.catalog_item = catalogSysId+'';
				gr.default_value =  (field &amp;&amp; (field.val_type+'' == 'DATE'|| field.val_type+'' == 'DATE_TIME')) ? this.diffVar._formttedDateTime(field.value+'', field.val_type+'') : (default_value)?default_value+'':'';//(this.disabledFields.includes(","+fieldName+","))?'Use Calm to set/edit this field':(default_value)?default_value+'':'';
				gr.runtime_config = ((default_value+'').indexOf('@@') != -1 || notSupported+''=='false') ? false : runtime_config+'';
				gr.variable = fieldSysd+'';
				gr.isprofilevariable = false;
				
				gr.isservicevariable = (isServiceVariable == "serviceVariables") ? true : false;
				gr.type = (isServiceVariable == "serviceVariables") ? "Service" : "";
				gr.service_name = serviceSysId+'';
				gr.category_name = categorySysId+'';
				gr.isdisabled = ( (default_value+'').indexOf('@@') != -1 || notSupported+''=='false') ? true : (runtime_config+'' == 'true') ? false : true;//(runtime_config+'' == 'true') ? false : true;
				
				gr.issupported = notSupported;
				
				/**advanced var**/
				
				gr.value_type = (field) ? field.val_type+'' : this.integerValidation.includes(','+fieldName+',') ? 'INT': "" ;
				gr.data_type = (field) ? (field.type+'' == "LOCAL" &amp;&amp; field.options &amp;&amp; field.options.type+'' == "PREDEFINED" &amp;&amp; field.options.choices &amp;&amp; (field.options.choices).length &gt; 0) ? "PREDEFINED" : field.type+'' : '' ;
				
				/*regex validation*/
				
				var validation = (field) ? ((field.regex &amp;&amp; field.regex.should_validate) ? field.regex.value+'' : this.diffVar._fieldRegex(field) ) :  this.integerValidation.includes(','+fieldName+',') ? '^[\\d]*$' : "";
				if(field &amp;&amp; gr.data_type+'' == "LOCAL" &amp;&amp; (field.val_type+'' == "DATE" || field.val_type+'' == "DATE_TIME") )
					validation = this.diffVar._fieldRegex(field);
				gr.field_regex = validation;
				
				/* End regex Validation */
				
				//gr.field_regex = (field) ? ((field.regex &amp;&amp; field.regex.should_validate) ? field.regex.value+'' : this.diffVar._fieldRegex(field) ) : this.integerValidation.includes(','+fieldName+',') ? '^[\\d]*$' : "" ;
				gr.uuid =  (field) ?  field.uuid+'' : '';
				gr.is_hidden = ((field) &amp;&amp; field.is_hidden+'' == 'true') ? true : false;
				/**advanced var**/
				if(isServiceVariable == "serviceVariables") {
					if(field) {
					gr.field_json = JSON.stringify(field);
				}
				}
				
				gr.insert();

				this.logger.debug("Created a entry of variable "+gr.variable.name+" with default value and runtime in "+gr.catalog_item.name);
			}

		}catch(e){
			this.logger.error("Nutanix_CreateCatalogVariables._insertCatalogVariableProperties :- Exception caught while adding field in catalog variables properties table. Error :- "+e);
		}

	},

	_createContainerStartandEnd: function( name, catSysID, start, end, type, serviceName ){
		try{
			this.logger.debug("Inside Nutanix_CreateCatalogVariables._createContainerStartandEnd");
			serviceName = (serviceName)?serviceName+'_':'';

			var startSysId = '';

			var variable = new GlideRecord(this.appUtil.configuration.table.varaiblesTable+'');
			variable.addQuery('name', (serviceName+name).toLowerCase().replace(/ /g, '_'	));
			variable.addQuery('cat_item', catSysID+'');
			//variable.addQuery('order', start);
			variable.query();

			if(variable.next()){
				startSysId = variable.sys_id+'';
			}else{
				var column_fields={};
				column_fields.type = '19';
				column_fields.display_title = 'true';
				column_fields.cat_item = catSysID;
				column_fields.active = 'true';
				column_fields.order = start;
				column_fields.question_text = name;
				column_fields.name = (serviceName+name).toLowerCase().replace(/ /g, '_'	); //(name+((serviceName)?serviceName:'')).toLowerCase().replace(/ /g, '_'	);//'profile_configuration';
				column_fields.layout = (type)?type:'2across';
				startSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');
				column_fields={};
				column_fields.type = '20';
				column_fields.cat_item = catSysID;
				column_fields.active = 'true';
				column_fields.order = end;
				var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');
			}

			return startSysId;

		}catch(e){
			this.logger.error("Nutanix_CreateCatalogVariables._createContainerStartandEnd :- Exception caught while creating start and end containers. Error :- "+e);
		}
	},

	_filterJSONDatatoService: function(parsed){
		try{
			this.logger.debug("Inside Nutanix_CreateCatalogVariables._filterJSONDatatoService");
			var sub_deploy_rel = {};
			var deploy_pack_rel = {};
			var app_profile_list = parsed.app_profile_list;

			for(var i=0; i&lt;app_profile_list.length; i++){
				var appProfile = app_profile_list[i];
				var deployment_create_list = appProfile.deployment_create_list;

				for(var j=0; j&lt;deployment_create_list.length; j++ ){

					var deployemnt = deployment_create_list[j];
					sub_deploy_rel[deployemnt.substrate_local_reference.uuid] = {
						"name": deployemnt.substrate_local_reference.name,
						"deployemnt_uuid": deployemnt.uuid,
						"deployemnt_name": deployemnt.name,
						"profile_uuid": appProfile.uuid
					};

					var package_local_reference_list = deployemnt.package_local_reference_list;
					for(k=0; k&lt;package_local_reference_list.length; k++){
						var pack = package_local_reference_list[k];
						if(!deploy_pack_rel[deployemnt.uuid])
							deploy_pack_rel[deployemnt.uuid] = [];

						deploy_pack_rel[deployemnt.uuid].push({
							"name": deployemnt.name,
							"package_uuid": pack.uuid,
							"package_name": pack.name
						});
					}
				}
			}

			this.logger.debug("Substrate and Deployment mapping created:- "+JSON.stringify(sub_deploy_rel));
			this.logger.debug("Deployment and Package mapping created:- "+JSON.stringify(deploy_pack_rel));

			var packageList = parsed.package_definition_list;
			var pack_serv_rel = {};
			for(var i=0; i&lt;packageList.length; i++){

				var pack = packageList[i];
				var uuid = pack.uuid;
				var serviceList = pack.service_local_reference_list;

				for(var j=0; j&lt;serviceList.length; j++){
					var service = serviceList[j];
					if(!pack_serv_rel[uuid])
						pack_serv_rel[uuid]=[];

					pack_serv_rel[uuid].push({
						"name": pack.name,
						"serv_name": service.name,
						"serv_uuid": service.uuid
					});
				}
			}

			this.logger.debug("Package and Service mapping created:- "+JSON.stringify(pack_serv_rel));

			var variablesJson = {};

			var serviceList = parsed.service_definition_list;
			for(var i=0; i&lt;serviceList.length; i++){

				var service = serviceList[i];

				variablesJson[service.uuid] = {};
				variablesJson[service.uuid].service = {};

				variablesJson[service.uuid].service.port_list = service.port_list;
				variablesJson[service.uuid].service.editables = service.editables;
				variablesJson[service.uuid].service.variable_list = service.variable_list;
				variablesJson[service.uuid].name = service.name;
			}

			var profileList = parsed.app_profile_list;
			for(var i=0; i&lt;profileList.length; i++){
				var profile = profileList[i];
				var deploymentList = profile.deployment_create_list;

				for(var j=0; j&lt;deployment_create_list.length; j++ ){

					var deployment = deploymentList[j];
					var servUUID = "";
					if(parsed.service_definition_list[0].uuid == "singleVm-default-service-uuid"){
						servUUID = "singleVm-default-service-uuid";
					}else{
						var packUUID = deploy_pack_rel[deployment.uuid][0].package_uuid;
						servUUID = pack_serv_rel[packUUID][0].serv_uuid;
					}

					if(!variablesJson[servUUID].profile)
						variablesJson[servUUID].profile = {};

					if(!variablesJson[servUUID].profile[profile.uuid])
						variablesJson[servUUID].profile[profile.uuid]={};


					variablesJson[servUUID].profile[profile.uuid].min_replicas = deployment.min_replicas;
					variablesJson[servUUID].profile[profile.uuid].max_replicas = deployment.max_replicas;
					variablesJson[servUUID].profile[profile.uuid].editables = deployment.editables;
					variablesJson[servUUID].profile[profile.uuid].variable_list = deployment.variable_list;
					variablesJson[servUUID].profile[profile.uuid].uuid = profile.uuid;
					variablesJson[servUUID].profile[profile.uuid].name = profile.name;
				}
			}

			var substrateList = parsed.substrate_definition_list;
			for(var i=0; i&lt;substrateList.length; i++){

				var substrate = substrateList[i];

				var deployUUID = sub_deploy_rel[substrate.uuid].deployemnt_uuid;
				
				var servUUID = "";

				if(parsed.service_definition_list[0].uuid == "singleVm-default-service-uuid"){
					
					servUUID = "singleVm-default-service-uuid";
				}else{
					
					var packUUID = deploy_pack_rel[deployUUID][0].package_uuid;
					servUUID = pack_serv_rel[packUUID][0].serv_uuid;
				}

				if(!variablesJson[servUUID].substrate)
					variablesJson[servUUID].substrate = {};

				if(!variablesJson[servUUID].substrate[sub_deploy_rel[substrate.uuid].profile_uuid])
					variablesJson[servUUID].substrate[sub_deploy_rel[substrate.uuid].profile_uuid]={};

				variablesJson[servUUID].substrate[sub_deploy_rel[substrate.uuid].profile_uuid].readiness_probe = substrate.readiness_probe;
				variablesJson[servUUID].substrate[sub_deploy_rel[substrate.uuid].profile_uuid].editables = substrate.editables;
				variablesJson[servUUID].substrate[sub_deploy_rel[substrate.uuid].profile_uuid].create_spec = substrate.create_spec;
				variablesJson[servUUID].substrate[sub_deploy_rel[substrate.uuid].profile_uuid].variable_list = substrate.variable_list;
				variablesJson[servUUID].substrate[sub_deploy_rel[substrate.uuid].profile_uuid].name = substrate.name;

			}

			return variablesJson;
		}catch(e){
			this.logger.error("Nutanix_CreateCatalogVariables._filterJSONDatatoService :- Exception caught while filtering JSON data for variables creation. Error :- "+e);
		}
	},

	_createDefaultVariables: function(cat_sysID){
		try{
			var settingScript = new Nutanix_ConfigureSettingScripts();
			this.logger.debug("Inside Nutanix_CreateCatalogVariables.proc_createDefaultVariablesessCatalogVariables");
			var target_class_name = '';
			var category='';
			var catalog_item = new GlideRecord('sc_cat_item');
			if(catalog_item.get(cat_sysID)){
				target_class_name = catalog_item.sys_class_name+''; 
				category=catalog_item.getDisplayValue('category')+'';
			}
			
			var variableGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable+'');
			if( parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2") ) {
				variableGR.addEncodedQuery('cat_item=' + cat_sysID + '^nameINdefault_project,default_app_name,default_profile,default_environment');
				
			}
			else{
				variableGR.addEncodedQuery('cat_item=' + cat_sysID + '^nameINdefault_project,default_app_name,default_profile');
			}
			
			
			variableGR.query();
			
			if(!variableGR.hasNext()){
				var column_fields={};
				if(target_class_name == 'x_nuta2_nutanix_ca_runbooks' || category=='Marketplace Runbook'){    
					column_fields={};
					column_fields.type = '5';
					column_fields.cat_item = cat_sysID+'';
					column_fields.active = true;
					column_fields.question_text = 'Endpoint';
					column_fields.name = 'default_endpoint';
					column_fields.order = 3;
					var column_id = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');
				}
				else{
					column_fields={};
					column_fields.type = '15';
					column_fields.cat_item = cat_sysID + '';
					column_fields.active = true;
					column_fields.question_text = 'Providers';
					column_fields.name = 'provider_icons';
					column_fields.ui_page = gs.getProperty('x_nuta2_nutanix_ca.variableGR.ui_page')+'';
					column_fields.order = 0;
					var column_id = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');

					if( parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2")){
						column_fields={};
						column_fields.type = '5';
						column_fields.cat_item = cat_sysID+'';
						column_fields.active = true;
						column_fields.question_text = 'Environment';
						column_fields.name = 'default_environment';
						column_fields.order = 3;
						var column_id = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');
					}
					column_fields={};
					column_fields.type = '6';
					column_fields.cat_item = cat_sysID+'';
					column_fields.active = true;
					column_fields.question_text = 'Name of the Application';
					column_fields.name = 'default_app_name';
					column_fields.mandatory = 'true';
					column_fields.order = 1;
					var column_id = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');
					
					column_fields={};
					column_fields.type = '5';
					column_fields.cat_item = cat_sysID+'';
					column_fields.active = true;
					column_fields.question_text = 'Profile';
					column_fields.name = 'default_profile';
					column_fields.order = 4;
					var column_id = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');
				}
					column_fields={};
					column_fields.type = '5';
					column_fields.cat_item = cat_sysID+'';
					column_fields.active = true;
					column_fields.question_text = 'Project';
					column_fields.name = 'default_project';
					column_fields.order = 2;
					var column_id = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');
			}

		}catch(e){
			this.logger.error("Nutanix_CreateCatalogVariables._createDefaultVariables :- Exception caught while creating default variables of blueprint. Error :- "+e);
		}
	},

	_toTitleCase: function (str) {
		try{
			this.logger.debug("Inside Nutanix_CreateCatalogVariables._toTitleCase");
			str = str.toLowerCase().split(' ');
			for (var i = 0; i &lt; str.length; i++) {
				str[i] = str[i].charAt(0).toUpperCase() + str[i].slice(1);
			}
			return str.join(' ');
			return str;
		}catch(e){
			this.logger.debug("Nutanix_CreateCatalogVariables._toTitleCase :- Exception caught while changing case of string to title case. Error :- "+e);
		}
	},
	type: 'Nutanix_CreateCatalogVariables'
};
]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-11-17 22:31:26&lt;/sys_created_on&gt;&lt;sys_id&gt;2f2b341e37f52300fdfc097973990e10&lt;/sys_id&gt;&lt;sys_mod_count&gt;443&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_CreateCatalogVariables&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_2f2b341e37f52300fdfc097973990e10&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2022-01-14 14:05:18&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>1201899016</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>5c021aa32fd50110e49924c62799b6d2</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb91c1f480000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table/>
<target_name>Nutanix_CreateCatalogVariables</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>20228ee1888101101de15c11f6978c15</update_guid>
<update_guid_history>20228ee1888101101de15c11f6978c15:1201899016,9f1b71e99d410110fbb61e79a1efc1eb:1375599984,a028f92906410110a8c5d3b21ff8a0d5:-1889236364,c2e7f1295f410110a874f2f0545714bc:-834867668,6c077129e8410110ea337495b348e29d:416808247,233b2330aa0d01106b37079f4d08eca5:-935810380,3636637c8dc901102767f3b3acd8870c:762444368,e7b327f8d7c90110acff3710ecce9f16:-1271247109,ad3ed3f497c9011079352e7a211bb4f6:746175865,99ed9bb41ac901101e842fd3d55c8b46:-1094004441,7702977cc24901101e1c0cb637e576d3:1287034407,0881d73c4c4901104fc60d73ba379d08:2095547872,976776f449850110c076789a5cb71975:-884521730,410142b037410110acf94bbf948f40f5:-716593790,997f3dfc1a010110f2d11e6061319f0e:-669081382,7bb07ea872050110d896aa461a7422f4:-1395643755,31977904397c81107b6e3688c17b211d:1710490438,aba635400b78811060d9aaa636516cec:-279460600,0f46a0008fb48110f80b5d58b86ef356:1710490438,90314746b5a001101dbb88333923de9c:-279460600,5956724e4c600110ade414d11be890ae:-508089463,34fb9d1e8d62f01079a72c4ab551f4c4:-1751859196,130db7421ba67010ded6c0d8553ccf99:1199378372,14b04c8e53e630104e03ee23c2c3b373:-497296730,c2e97ff52be630109103d1557e54cfe7:-668022080,111578b9b85e701022919bd440e7663b:197839176,51d4061b34e87450102ad12419daea60:-1080825046,02d551d35be83450a940431947e07036:-1923496502,b43511d32ce834507cfce16af588dff7:-1648404726,3e58d1f91fecf810be8b3e3e3ea15794:1319322639,df471db955ecf810ee77ab755ffb3c5b:-1881201699,188af0fd5ce8f8105ba74bc904c8130d:-929776554,7d87df111be8b8105104e2265515825f:864621987,437657ddbba8b8108b265f86fbee8838:335985101,55261bddc3a8b810501fc931721c7217:-1250497604,3bf4531d6ca8b810108d53f0ef9c5157:-1905729307,5a71531dc7a8b810b7f85a8513b0954e:-929500719,ad3f0f1983a8b8105febb1758ad9df6b:-2110441838,450d471910a8b8103a91c4ce89080998:651880346,afd64f999f68b810413ec8873940f817:1710332330,a9064f997568b8109b3ceddb1983a210:-799191596,82248399d768b81006f2b53bc99ed0e6:-1518492529,49830f198d68b81069affd6dcdd37add:2026421040,7262c719e368b8109b0625d477249ccd:-1514368368,b4124f552268b8103d23cd0783ffe567:-1202998280,84d0c7555768b810889468511f1d5691:-1729432887,7e104b951c68b8100edec0545bfe583a:-2022278103,878eb651f768b81058fd2fef881ffbf5:-47317177,15fb7e917d68b8105a209d7b769ee4f5:91311956,dd2abaddec28b81012fb0303c5d55865:589182181,fa9932110268b810d3e81f149589457e:518865386,95c77e9dd228b810589396842a50eb9b:1505586473,2d277e9db628b810554f1d8688398889:-904353495,335576191528b810a225bee1e24a0de5:-17193924,7da4fa1df728b810d4e24a84f4ab2af6:-413458740,c2e3721d7b28b810fd32011ce3c4e021:287060204,90dfe619c528b8102dd8e34c4aa2afdf:-176892978,a2fea2197928b810ba06567af2c517a6:1099671581,a47b6e157e28b810f126a69b9a74a3b2:-270140386,86f9e2dd94e4b810d4e56a487f74cfe2:-1717302210,f7f3a6d98ae4b81065eedd6ab5d50832:-674487650,1923a6d9a5e4b81019b55a4907ed1085:806897054,1c41861a440f6c1045f09a5bc2ad045b:-1595472172,a9678552c7cb2c107cdfde553ac99ff3:563808280,1fd4c9de018b2c10f96b7886c3447bcb:166394049,8c3a6bedeb4b281074c8f0808a33e070:180485146,9279efe9c44b281004cc3f892331852f:-1058931977,90e327fcedcfe410444b9c88d7e85f5b:374113876,4fa4d9504ecb641085bac843961b725c:1933956211,16c85900ef8be0104715a510907ad35b:-1254233752,39f14c09c6956490331536faf403d6b2:756516883,f8e84c4f83c1ec507009002357537fc4:-1676025091,889b30fa828d6c508163b19f97a74de3:757627196,38589c725f4d6c50b01cb2e4a6455700:-399545352,7a66a7529c8d2c50ab92bd0f294bb421:-2147090540,bd43c0326b052c10d3fdb44c212623a8:-1549357672,d33280beaec12c102a3a8e2fa222d6c1:667937144,c4592865f1cd28506e6cd0a7ac8c3446:-1455871176,b5a5286c06d31c10742ad35620eb56d8:-1312776822,de4639bebdee5450cecf285c0301e298:1678243968,273d6a8216eed0508bda2751704766ea:313034078,6fdca6c250eed05008e2f198662a9691:746607584,3d75c1f96caa90501bc3fbd8446046f7:1628711776,11450db9a0aa9050f951b28054d4baa3:-69022912,cbf867c55aea1050a0e34a0c8c4ad162:-320981770,2114c3c2be58141051d05d9668a09af8:249537967,b1654e0f191f80100e1388cfd2c1c3d5:1860593000,9c2ffd07501f8010d527f37344f91190:-55650950,2f9efd07c81f801075faf09f9fb7aa8a:-1167299967,2d5b710f0bdb8010c8ecb2ad188afb78:-248646205,fa88b187fadb80105018f7eff326dd53:1247398386,96a67547a2db80102b40d78aa522b98e:1360944827,c843398fa09b8010acb68e180a7b6d86:-2055529982,85e27da3a60b0810871c1e7eb1afcf50:1485319167,02303da3960b0810280af53e9fa34b6c:-1354628397,62f6e9a7aac70810d961de0adb313de6:109744573,088565a755c70810e7436e6626b5ac20:124184791,284a3c63c7070810566e0216e64f1d6d:-808262693,49d17463c0c30810fd7130abd53313ce:1266360391,1f0d28a7118308102735a63c64056edc:-1976361752,e2cb2ce716830810b41883c0185f8a24:-1556237187,09c8886b978fc4107205e525315ddfdb:1388761890,5ae6c867cc8fc4104b1f8548b339c0fb:1727062746,bbe58c2b1d8fc41024c26a9ff0ede6dd:-935194465,13b3c0a7488fc41018e9d335ed9de27d:-1570088606,39d28ce3d88fc41028e96fa33aedaa08:-880228356,f2d0c863a08fc410a42a86b1c9abd9ea:203092107,74aff7dbea4fc4107c57d93d6300b2c3:1883816050,37ce7b1ffc4fc410f6bae46f974caeb6:1033952913,6e7c3717d94fc410b45a6dcf489688a2:2044067657,d45b33d3d44fc4109e72d3ddfbb5e391:-1117331717,ecb9b353ea4fc410924a40431e37b701:1593036483,14e6f3dfae0fc41063316c2d4ae2c360:-1508145389,c4f4bf5fc70fc4108d46a4b31bf55793:-426317592,eef2f75b660fc410a62d986c6de424da:-2040145992,02e2bb1b920fc4103a730952b7668540:1002871698,2da13f1ba20fc4101440872969696fb0:-1093912136,49da2f539f0fc41049ab7f10ab20e99a:212694224,db936f57a5cbc4102ae788f67c31a6a9:-1317475934,6ea0a353eacbc410039ce80661ae3c54:1839979819,69f1652ea447441065ee403b3f0d7adf:593775857,d441adaaa0474410d90158bfdc779744:-1274928192,b7702d2672474410288a9a87b30e6910:-2090422090,671f912a4c47441065a9394c41fc164e:1237171595,6f9d9d26764744107d7d13d0f29c0b30:1294412829,3989d12aa407441035a045ea7c8156c1:-507840334,0358d1629347441026776e8c4b7783df:80345685,050bb86e3a83441067d5ade8bb91a3b2:-1748406936,bdb6770a7e470410e0d36806863ddae3:1213799268,a8a2b30ae34704100789669b2f59df92:-1493163526,dae1fb4e16070410d8225ac70bac7bb5:1244932399,3180b782a44704105607432d44aa8558:-1979239442,ac9ea7822f4704107bd5dac3c3ec1c83:418039507,ce24a3cae90704104f935e1f8789a097:325416816,08a2eb0a9e070410a22a27bad9d5bb31:-1059702461,d13d07c6bdc304108cccaee81097f649:699437883,90cb07ce3e830410183f9bc1311f9368:935290312,140837b817cf001012917351e7fa68df:940552476,3e13db70668f0010e0e3947c51198e7c:-1316725787,8fe80b38c04f00104a0342199cce321e:1914071995,043990135dfe4850d6c1a0506691dcf7:-369022853,1874d4ca12b68450bab3d23ac78376a6:-2066996611,cde020b20f1180104f942f62c94e8def:674672493,363b5fba25410410d33ac99ba8481044:-2032387635,d32e04f2fc33f300ff8fc685704277dd:-1644686549,ded8ff8a8bf7730067f4cd6774b275d7:-15774702,c0cc57ca66777300d69b3c60de656f44:-1578549838,bbcb570e0a777300ca52d4818452e6db:-1497867136,7ede7886e1bf3300f9bca113259193ef:-46600300,52afbed9d23733007c7fb13204f33882:-1448961741,9f9a0c9d8d3b3300968529403c2712cf:-1067278893,da5ec64046337300fd807010a51c0d87:1497686986,5b30f2004fff730073806f98d4c5d50b:-647715151,b8bdeac856bf7300fc77f95d3194d475:-1001859175,e30894fbf06f3300e694061d7e52e0ca:624332517,23125c737d6f33004c2009f919e3e46f:-921817607,052766c2a223f300070c58e4c6058cef:-1756341959,6a4d8935cfe3b300e0d3d0ed4c36bf0c:2034910071,6d8b09e11fab7300b1d906a6f33f6a9d:-659092863,ed06d3cd2d2373008cdd01e4a1f9ae13:-28674904,9ce5170d30237300fffda04a46379d9f:-595332612,59b2f58d57eb33007f79de712ef3073a:1310690930,510fe5c1a6eb330011d42ab8e8c60706:-451322510,844dad0d29ab33000113fbea43e93376:-2019305767,748ba50db5ab3300604f79afdb040891:-211786583,e75ab167dd9f33006ebf16b189bf5d67:-1126371746,738726aaf813330002b02da73f17cc70:1272246158,59ae7764ef537300aa33ac6c4b471c9a:-718917716,5f6ffe60051373000a06ee2fb37d12ee:-1800549916,7e5e32a08f137300016c3be9aa102198:-638627137,257cb2a03713730049376be0378eb36b:-1061016966,7f32aeb776477700901df62dcd387100:-478945160,027e06b7b00777008a60493be778f7f3:923603928,bbbc9adf078ff30039dccbb7d1012918:1177106262,132612175e8ff3000650bc62cb255f28:-248146828,802bd30791c7f300ce7c90c2ade3ff48:800291110,5399db839487f3003cc28188d91080f1:32423580,08217ac76b83f300534c5eda61942171:1634133382,6e9dea039d43f30086594137cc4df904:1588255286,6dd726c78303f30051c9f8b9138e9611:-51971455,a48c92cb728fb3008c72cc7aec4570a2:-1610204381,0caab54fcd0fb300f183a729e694bd0a:1443684141,968f49cf124bb30012fe3160922bc828:1325782911,b9ed0183988bb300f312572de7679494:-753487674,43a29af6f283b30032c67145f9bc3ff4:-685547464,414ecaf63d83b3003e740edf63afbcf5:-2004027367,d398c9f6d9cf7300fc077a7f3bd644ac:1826992435,a8e345b22dcf73008d011a682f9f8d7d:1827732143,f9a2c5b21acf7300474f95899d86f4f6:-1144303559,edf32cfa5a4f73003030e1acc9608848:1092351172,ec981f1212cf33005c7f26492e2254a3:-1474359090,d2189f12b3cf3300caff3fcdb9cf9794:-1890638253,d7c9d6c5538f3300d9ced15530f02431:1947959447,294cce782007330097d6d0378f859bfb:583327819,db5b112824873300f7a78c6c59a9edde:1654997300,def591e4ea4733009f94e5fff14a9289:-1838532822,1405916442473300edfb93fd6252a3e5:649427590,f0b45ce4014333002a94758e240f4717:-792922562,73b26b84f78333007d6593cb9e052fec:-511507830,64569f8433433300b39202a544cfc064:-783101979,5886db36567e7300485a598b41f9d071:248968354,7c90cbf290fa73003561df6aa7795559:759515182,e2ce7e36a5fa7300c79375e665fbc729:1094158057,8589faf2f8fa730020f003336f3a5c69:1915723317,d495f63223fa7300955bcd71ecf32406:-968511430,8654727255fa73005376038926256b1a:297574901,4c4332feb8ba730042081802571afb84:-1654952302,d6b08e4c8df23700d62f1f1661116b4b:1464584101,1f5d490cec7237004fbd4efcb4fcee44:1554921448,af1f594b69aa73004ba20b97cbc64ad1:-818725870,07fed903ceea7300045c1c2fe56219b2:2027168081,7c7c6212afa233002b68742609874926:1250510481,f599e29ab8623300b9b7c5fcd279a914:-318469664,5549e2da0b623300e6498995259d506c:-1013072295,26972a9aff6233008acf12d92b003610:-1432248807,12fc4656e02233009efd1287bead6049:-1740063368,eb412a8a27227300905ca2c27a646327:82485929,0a006606d52273005cdb7631d17ad1bc:-565109757,752b82b23c123300d1341dd23097d6e8:-1017446154,511abe35341a3300fbcef412f67cfe33:-526220996,e9d9f2f1b41a3300a3aaf9ad3941ab80:2143219659,9e7532b17d1a33004c9e11e82e7dc322:1628879179,0ff3f27d87d63300d7f8478735a09f0b:95839231,723fa6b565d63300947c0c58abe44cd1:-995715943,36e009034ac23300c7074e7b15278922:694784765,e764fe99ae82b300d64e75ec5f63eb0f:81300591,6a6fa2198982b300a1375feb5ea90605:-1902648625,262f0181624233008cb190a2540bc8d3:-2022745629,4d7fe9fa92b1330005bbbb5b4bf6a406:1064574211,ee54e9fa423133004b1567d356291fb7:682222495,cb6185ba8931330007c736626c8ccbdb:1573300148,86fee2aae9d7b3002aadad6f3081ac1d:-183109857,11bc7770fc1f330078758dcecb9052b3:480412876,35abe9594f697300152a8ebdbbb2e67c:1864499135,b25be51d5669730005352b860e602e18:446087309,dfc6e959c9697300576f782e6dcf30a6:-297147040,ed16ed19f4697300d45a81333556c23d:792894267,04062159c96973004571d9a7bcf5be0a:1489629144,849cea08b925730091b3e24744f88dc8:1672129779,9069f9c4c6a17300cc6d21e9ac67db63:1799896047,1b12744001ed33004bfa1d4ff1620c17:-1382347329,8a8920c475ad33009d64ebe732a7e183:1385076243,dcbf3b9323d573006d0615e02609d92e:1558341906,da7c3fd74f957300a8dcb5900b9f8e10:1796721394,6f893bd74a957300ee2065a0dc41585c:461203270,6411ff9355557300aedb41f681876a8c:-362641508,b6a22f575ad173000b2f9332625fecc6:1317756272,7dd6571f9611730019f2ab7b012474a6:316703778,35697c881f1d3300df99c02aa80ec955:-1174557968,ebe8f488db1d3300f9cf54eb3c81aeb4:70124202,a848b884581d33000b93f3fdfd84f1b1:-1403747481,efd5f884501d3300d74f66a6f9b6cb36:-1879378283,f9737c4ca7d93300bf4813d365abfe4d:-1216986235,ca5227bb19c53300a9c7780f2651f7ea:1585583877,78bf9ff7efc53300411a764ea1102034:-750712504,bf5fd3f735c53300896a2b68a9334e22:-1308217063,b31f17b7dac533008d2b1c782eef1d47:906693158,22ee93772fc533002a100fd9c5247f13:154585901,5e7a13ffdd85330078dc1f2a4e5f7e23:1502757199,f9641b3b4485330085688b94ca3b6a01:-1383371483,035c03ff9a45330047d3757b4661a4e1:599780029,9db0a9efd0053300cfc9a53f7f55f399:606905571,7781647a4bc533006712350adca04612:-1909784081,025bd07a70c53300a39d4b94ea34b9d9:847672115,26833ee1a9c57300caf9f827cec48f3a:1651808006,9d533aa188c57300b998cf2d39eea90e:-127881047,cfcdaa6171857300058286d3506cdd59:1651808006,69adeaedef45730025ca10b8309a09fe:-1133813385,8e8b26e96b457300e1d862c16aa5c7b0:-714227305,b05ab5ed1f817300c8e986f029546cda:62887065,1725e9ad7341730081b3bf39da9ddcef:190375097,969461a9d94173008c072beb4d4d9bba:1826801305,33ea9d65ed4173000455bc1e1aa88923:801149037,0da2cd9512853300dcbc55a13ea456f2:1359836781,73a1cc191dc133002fba7ca8d63e662d:1457211342,920503d34eb0730086a44ddb35028bc8:1300973562,65ecae1bf5307300f1a5625a77170f32:1853418951,57aad6535e3073000fb61022f33a8092:-1018612615,9efe551f117c330023f616849b9f8420:423423026,f6dd159b357c33007fc7a39a070ec5b4:-1038215413,b8b9b64fd6f43300f472852c87f2876e:646474162,3f95350307743300a4873be91637c9fb:1365821127,0e72698b8ff0330000e0c929161f8437:-1277351851,75322d8b74f0330071ebdd4a6642d684:-191464227,c81c510703f0330005bca05e338b93c3:-1864320739,ffe851c3d5f03300d421fa19279c2a41:475898245,470ac1c7b1b0330053549cbdd83468fb:1980234984,31bd8043b5303300d07fd7a35c25e20e:1668930170,016e79f636b833008a150dce168fbef7:-916227237,718b31bad1783300b069e467e9d70296:1733731160,1466b17a867833006a404c0f3e7b7135:75792814,ecb5757afe783300bc864a7ee385ea84:-1709040123,1235793a937833007b59f2771dc6113c:-327716744,37b4fd3adf7833007c0fe2543df487c4:1593078290,1f747d3ab97833006fec64210b4e5e6d:1473845200,1f14b1f6107833001249db60a6ad8812:2013168675,5ad3713a10783300b3059a02d181e3de:9240563,1f93b1f6887833002f2b778c24aadff0:456108736,c142b1f6d7783300c38f5ac39fbf6b08:991181415,6021b976a5783300f318691216124cdd:-986115342,bf1fa176557833006b3d84be3d59875b:886194977,8e71d9725e383300e5e521d30a1bac3c:646474920,193051b22f3833008f5625466e4f06df:-1919543182,a35f01fe9ff433005138c5a6ebdd8e8a:227081092,e8d634f2eef433008ab554c9988cab65:-2087987388,c42570b2fff433006723402c2d7ef725:899571811,1a63687ebc743300cac58b6c5c83be32:1304424216,0040ac727a7433001617253c0575f18d:1941835462,177e18724974330068a9dc91dcc16b8a:-1863367580,7ce284f27ef03300ad71cba4c4385f2f:175095074,adcb376e72b03300b93fb944cadf80ca:-596355144,c6642d11bfbc3300fdbd9b953f7fcbdf:-1261720651,11188745563833008e404330739f4959:1244983755,77ea56cdcb743300d2fd678d874b1cb6:-166661235,3f9d8e85f1743300a27b8b25604f58ab:1128305616,ae2c8e052174330035dd26dde0d9f9f6:1633935052,480c424554743300b4f660d90d2e5410:1764032283,10144a4dd8343300ab0cc3afdfeccc18:1848800031,1629f581d83433007392803e3c715dde:-2022401835,f83e15386a70f3005c593a879279e291:1288664481,fa9d11381e70f300aee6368562007c8f:1195100062,01dc59b4b070f30020543ae155fca1db:-1689842223,fd1c5db4cf70f30073aa42febbf16a18:-1262055311,b1fb5db4ed70f3004bcf088381335913:982825751,9787d9344e30f300c7373ea2bd601e3f:948538085,230a0d785ffcb300e28828c27ff4898c:1245124349,f5bdb870fdfcb300e22baca779c20a25:-2085567940,a53f8834617cb300370033eb3d621bbe:-1820183070,61f96bacc2f8b3006d9dc4adff246105:-2135527418,de9378646434b3008516475491111cd7:-1103384180,8b97a7d0c770b3003fc14041b6811d96:-1887595433,dd2f549c333873001c26d61752a99186:2045996868,6a00ef8cc6347300671532e575c8dbc7:1045586461,2ffed3cc9d347300d92c47a4b843e9fa:-1540737005,6d7953c8983473003586a2079e5df987:-1854365219,3e145f48c93473003472a2fedccfe8fa:-1447708498,4265c30ceff07300bb1308409d3940bb:-2102727131,206ff284c3f07300186e00b9bbc9c34d:1696642819,75d6aa880470730000309642973df73a:-1002004347,af06ea4c8c707300d8ae0d4a929c2fc6:-516821481,39f4a2481a707300083beab6a1a72c9f:778575037,f99d1e04e0707300e14776074e8b69d3:1011058803,90cb164853307300d3e281081fb8f106:497308439,54eada08b23073007aa9d17a0d8dc6c1:689277193,c03a5604a23073003a47586ecf538367:469458611,5b775e4c77fc3300986665b941091bf3:-1383554195,c376528ca0fc33008b6720ab4fd7215a:1235008212,0a36964cbbfc330055d73c8eb24e1d3b:415317186,55851e88affc33002169f62f25f4aa23:-1702446416,11045a0cd1fc330016441398582621da:-1908986280,7dbb0acc85bc330091955d43ae95ce5f:1348083141,ec98c6cc17bc3300a6e388bb63652e39:1511075157,71305dc81dfcb30083d53d22c3eb375a:-554187662,279b414876fcb30091029f0393a27056:-516689868,815bcdc4c0bcb3002418ad3724af384e:1216894669,0c34cdc801bcb3002e5b10cd0c89f183:500379543,3fb5fcc87abcb300be79028a88733e69:1304293644,37b3748c107cb300cb70bb3a9d0523b7:-1551324743,7973bc886278b3006059738aafe67de3:7227247,0231b8448ff8b3000a404e521f2cb2cd:1592483640,898f24c4e33cb30096a8499929d3d36d:2131008149,318dac04f37cb30034effa39a2ed3c28:426201532,8eb2debb7c28b300632ac2ed6b2a4f1a:-637079506,e3fd2223a820b30031b9a3eb59fd4130:-410241832,09d981677c64730027d49e02a3f20e43:1856738640,0d15d3c3b5ac330076bca3123be1ff1b:-2093402587,2d1397476e6c3300a46fb351cef5d307:305833485,abe2d78ba16c3300a5f822b3cb5c1967:319804519,49dccfcb076c3300ff4968c687a92070:-1033478098,882d7a07e86c3300ae7f812a81760a53:-846911904,83dabe833a6c3300bd3070a0aa87b332:876547571,a647d1ff8aa03300f96d01ade4308d26:1796134333,9ee890a3932073004d621ea5a73a769c:1377423975,ff78982fd9ec3300d6f084970674d0f5:536184839,25a3d0eba0ec3300d17d200e8093cfba:1892062005,938190e71dec33003216296892e9a791:993443511,326190e79cec3300c20839e6b02f37e6:1892062005,3f5e046304ec3300a353c05dc599f2cb:-615265483,717140ef316c3300f69111a5512a2b7f:1412560567,70c02222cfe43300cb18fc7cc1fad8ed:496890794,aa12f5c844b72300fe1e45858ef0efc7:1127102654,3e1364c0c03323004119948ecffda9f8:323400285,bee264446c3323009a4d8c91eb7ed313:89401649,0808e096fe532300fb709d02f3941833:-2072060428,92a916be3bf2230029b76e69b0bc0505:265927182,4089ca72c5f22300947666125aa897a9:-572313027,4c5469b6033223001ee5086bce803053:-2053381258,ff04253a3432230073f28f855b5b3a94:1473686336,63716db20932230020ab39aeccc4b546:-1202679959,31dedd32ac322300d030a4c7c940b7a0:-551099879,4734fd6e4c7223007cc7018f48cb015f:226026258,fee4febd5e2223008425120ff520757d:794673558,6833beb97b222300a6f60a006f8339a7:1666898330,b6cb3a90cd222300ccf60ac7183134a8:1843535087,ec9b7e588c22230053d73dd59f418a4d:-515754961,30ea3a90b5222300e3710bbc24ed94a3:-1347621679,4149b250dc222300cdfb23c6391f8634:649888993,fbd335f530522300adb3d3b2001f58ca:773985597,ace955e039de23007667ca8a51e27b79:-1739072355,e98b7b8f1d8a630034191fe3e680e62b:-1301153733,555a7b0f888a6300a673a4ab17404681:-2044766871,99be12cf94826300a4e2cdf199aeba53:2126953709,cbceed25960e2300e844b8f4f4c29d4a:1319455225,450e98e9a1062300eb2983346013eee8:1880179707,f68c1ca96d062300fbdf92c473cfe957:-1497483074,09dbd0a9a20623007e74119f6fbd6ad9:-2013346164,67f2fb9140c22300e8c2957bc05a7852:1922623672,9fa1bfdd7b822300a49f91db8f3b2672:95236082,2ecdafddfa82230038b4b245a626496c:257640257,3a1af98515c66b00212de25f7f2753b2:1312625635,be1e304db1066b0081cc97cc270ae580:-928269639,5f93847cd9822b0092fd66e977ca8959:1244638891,8cf997ac48022b00714d195306c10488:477002571,7ec6dfa816cee700dc60c820ae409199:-1898134736,9bb6dfa8e7cee7008b738252fdfe3a36:-106240368,45761ba882cee7007b43fcb96a1bbe9f:-64198115,4e06536852cee7009b531571f78fb002:-1277104017,ddc3dfe497cee700b17d86a116a59647:1615034840,2b435b28fdcee7003790ffa131ef78c0:-1131960482,8db25fe4bbcee7000b34c2a0b745b363:981602613,ae32dfe425cee700dd8d654625be2250:-1608704555,4c61176084cee7005436ad841429c7d2:-1838081795,1c2b0364258ee7002a85db2a925c34b3:355106723,02683264d98ee700dc7f33b44c62f01d:-1386130621,f83a82501306e700ef76227afd070a56:1358783253,f79942506b06e700e1cb7a57eaf0dbc3:397635509,c65359986b02e7004fc715ef15dfb170:430728857,a7f2d5986c02e70035360563c634789c:1715406225,9872d958ab02e700881cde5813ab4031:-1635387773,39ad0d10b402e7005e247e84e7f2caf4:-1420197883,71ced458bb4ea700532b4a5c5316e0a0:524557453,73bb4c98750ea700ffb6b5d4eb9d2365:70600196,86200c1cb20aa700ed323832daae2cfa:450786057,062ff7c8930aa700a85a09bc2af74a69:-186955407,593ef7c8a30aa7009d9767bb05952e61:156462643,b48d3788080aa700ea6309c087ac00b2:-1699872587,ad2dff48bc0aa7005d767fbd4b505c66:1831597932,7cecb3886b0aa7008b244bdabacb5527:-1616821896,f1eb3348690aa700fb8a4d5250dc7152:1076611168,a849bf44080aa7000ea36fa26a8761d5:-1771794013,9b85bbc0680aa700112379acd4d5b3cf:2034285040,5e42fb0cdfc6a700f767072d30a9b750:1999866589,a491deeb20752700ad72f9b829b5e422:1849162112,715f02abb17527009acf43d4b052ed7b:656849005,21de066b02752700af5f3cc73f9a4293:1408896122,ba9d0e2b8b75270081c950cc06daaba5:-669575119,a3af34eb337de300182c5f549f899f7c:767827567,1678f0a37d7de300f164c8817ee3e71b:1211821957,5cd2f86b163de30010ef97f0ae536142:-429627095,c6a2706bf93de300c2a42d6fb470c58e:-1197846776,06e17c2b173de300f418e7974b90a652:155437480,db91702b973de300eb82b7d303dba865:-168760164,be61302bba3de3006a0a0dea30328d99:930417890,b1a0b02b633de300ecfc46418868d0a0:-1023627941,817030a7f43de300df29a36efa61b556:-1629189631,ee4dec672e3de300d0cd649d55fdf57e:618151139,ae1da067c03de3009fea41bc72bffb74:2145600391,781ca0673d3de30052718e2dca700d6c:-528159349,6babac27e53de3002465716b3561a818:-1740118219,a66be827963de300f3370a8a93134516:685046578,6eda24279b3de3002e0a0bc42234e6d3:1382878634,a1ca60279a3de3002fdb02278b964c7c:-1594294582,bf6a2027dc3de300c20d9a7d72ee7726:-1512654581,3ba9a0a3283de300dd99fead0545af9b:24607798,9e2960a3373de300c77e639220b3b095:-203920203,2ad860a3ce3de3009d1d6cb87d715090:-1384845931,1a0860a3da3de300a8bb1aa48470dc84:-1779530113,f59764afadf9e300f42c5b895d295cdf:-629516899,70e66823f13de3005e68479c670836a3:-1398270156,39b4e4ef98f9e300d18bc0bcd62f53c9:-767960025,2bb1f1030039a300e4c0cac91438c207:1705184675,4840f58f02f5a300d2b51173d3fd920b:395460767,d99ccdcb4e75a300ef328ad6c882b9a0:1623915899,e6bf5db2627d6300d6bda03fcf64a3ae:-461866307,b134d8beec796300e9698f0c7a1917ea:1060944635,6cd56feec3f56300557b533c1c161f62:-1080487538,0602afeebdf56300bb8f5559a4e9ac92:-1659569148,3a6e9b6e9cf5630060455d6922e04dd1:1649624499,36fdd36e8af5630026d56a59f4b37146:-1402374833,d1dd17ea9ef56300685fc6c1d4699b16:1549424178,a06db2ea05b5630052d6c94c0911cba7:1463607696,6ac5faa633b563004a35b57be4145533:1899307330,5e043666a7b563004fad180688e92950:-631829121,a852f2e21eb5630018c41dc491f46794:-556725857,12713aa241b5630079e756f8b32f4183:103598334,87a0b2a293b563004651f222fdd6e99e:-404863281,e020ba6276b563001d87d1ab6346cbfb:-1002654562,ed8fa66208b563004818a4caf2b940a7:306198172,b8cd662258b56300b109c79a5f9d1f74:1523547733,e40d6aeef975630072bed7efc9f18f69:321130654,138ba6ae8b7563006cc6b1fbe63df8fd:337254969,144aaaea1b756300fa4c2d81e9eea222:1802063413,9739a62e0275630095dd140a2df4e158:1919447395,9cf6a1a6d9f16300e1cdc48e130050f0:-1125548035,94966da61bf16300b395d725c52c0f1b:-1643149603,492625a699f163009fc8a0d9055bcf27:1909886919,5d06e5a61cf1630010603c4a44574186:427561805,3033e1e2fff163006943485beed470e0:-33000556,cbb261a28bf16300e1fcb07a58d7a803:1944152781,cd42e9ea71b16300dcfbea102c0a2439:-512018485,2c485d2ee4b16300b13ea9c74f7b2969:1218905259</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>catalog_script_client_4810f9bfdb3ce0505e1985184b96196e</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="catalog_script_client"&gt;&lt;catalog_script_client action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;applies_catalog&gt;true&lt;/applies_catalog&gt;&lt;applies_extended&gt;false&lt;/applies_extended&gt;&lt;applies_req_item&gt;false&lt;/applies_req_item&gt;&lt;applies_sc_task&gt;false&lt;/applies_sc_task&gt;&lt;applies_target_record&gt;false&lt;/applies_target_record&gt;&lt;applies_to&gt;item&lt;/applies_to&gt;&lt;cat_item display_value="Configure Calm Settings"&gt;6ddd772a37112300fdfc097973990e01&lt;/cat_item&gt;&lt;cat_variable&gt;IO:6e6d85c007161010b7bbf1d08c1ed088&lt;/cat_variable&gt;&lt;condition/&gt;&lt;description/&gt;&lt;field/&gt;&lt;global&gt;true&lt;/global&gt;&lt;isolate_script&gt;true&lt;/isolate_script&gt;&lt;messages/&gt;&lt;name&gt;Get Profile JSON&lt;/name&gt;&lt;order/&gt;&lt;script&gt;&lt;![CDATA[function onChange(control, oldValue, newValue, isLoading) {
    if (isLoading || newValue == '') {
        return;
    }
	var performAction = (g_form.getValue('type')) ? g_form.getValue('type') : getParameterValue('performAction') + '';
	var blueprintType = g_form.getValue('type_of_blueprint');
	if( performAction == 'update' &amp;&amp; (blueprintType == 'published' || blueprintType == 'unpublished')){
		var loadingHTML = "&lt;div class='loading-container'&gt;&lt;div class='loading-indicator icon-loading icon-lg'&gt;&lt;/div&gt;&lt;/div&gt;";
		var loadingDialog = new GlideModal("loadertest", true);
		loadingDialog.setTitle('Fetching Validated profiles...'); //Set the loading dialog title here...
		loadingDialog.renderWithContent('' + loadingHTML);
	}
    var ga = new GlideAjax('Nutanix_ClientServerScriptBridge');
    ga.addParam('sysparm_name', 'getProfilesysIdNameJSON');
    ga.addParam('sysparm_profile', newValue);
    ga.getXML(processResponse);

    function processResponse(response) {
        var answer = response.responseXML.documentElement.getAttribute("answer");
        g_form.setValue('profile_name_sys_id', answer);
    }

    var ga = new GlideAjax('Nutanix_ClientServerScriptBridge');
    ga.addParam('sysparm_name', 'getSecretVaraiable');
    ga.addParam('sysparm_profile', newValue);
	ga.addParam('sysparm_blueprint', g_form.getValue('blueprint')!=''?g_form.getValue('blueprint'): g_form.getValue('runbook'));
    ga.getXML(processResponse1);

    function processResponse1(response) {
        var answer1 = response.responseXML.documentElement.getAttribute("answer");
         g_form.setValue('profile_secret_variables', answer1.split(','));
		if( performAction == 'update'){
			new GlideModal().get("loadertest").destroy();
		}
    }
}
]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;catalog_script_client&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-12-07 09:54:40&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;4810f9bfdb3ce0505e1985184b96196e&lt;/sys_id&gt;&lt;sys_mod_count&gt;40&lt;/sys_mod_count&gt;&lt;sys_name&gt;Get Profile JSON&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;catalog_script_client_4810f9bfdb3ce0505e1985184b96196e&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-12-30 06:17:16&lt;/sys_updated_on&gt;&lt;table/&gt;&lt;type&gt;onChange&lt;/type&gt;&lt;ui_type&gt;0&lt;/ui_type&gt;&lt;variable_set/&gt;&lt;view/&gt;&lt;/catalog_script_client&gt;&lt;/record_update&gt;</payload>
<payload_hash>-2107350951</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>88021aa32fd50110e49924c62799b6ce</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb91895f80000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table/>
<target_name>Get Profile JSON</target_name>
<type>Catalog Client Scripts</type>
<update_domain>global</update_domain>
<update_guid>9a2703a4c53805104c4003db2ee3342e</update_guid>
<update_guid_history>9a2703a4c53805104c4003db2ee3342e:-2107350951,086d3aa4e8f40510fba3aab2cf02abb3:759946959,cf4d3a6475f40510fb0036451dfd40c8:167867567,12dcfa6408f405109e30ea155cf1e053:385865233,de2c3a64a4f40510ef681877e9d7916d:-162783304,6bebba24eef40510ebcee0093fb0d26a:-711369261,901a7ae06ff40510b6098e97ec29667b:-1217882509,b667eb90efbcc110e6bcf392460d6f6c:-1439341805,c906a79057bcc110297e608696e87c06:584423273,d862a7dcf07cc1107b788897b4f9c655:1707148088,12f1ef5c7a7cc110972ab015f432a48a:-1239379740,4ab6d714ac7cc110e7323ae2728995d3:-1541117769,d9761bd0fe7cc110ccf82a93e414c24b:481386711,1e65d3d06f7cc11015de43a3ab0eb617:1564142717,462593d0e07cc1103858b9d51640adbf:-660946222,316cfe101a3cc110423912fb850d7e2e:1132086289,520c3edcb9f8c110f866b99087406046:-1080291413,ffbbfadcc5f8c11062d43f15bc8ecf18:-247390997,d0bb3610423cc110948ff3423ef7d32a:-852796418,fd8b7210fa3cc110b6cd732096d438d3:1662206101,32dab6dc3af8c110228327a2857adfa7:-2127426846,d73afa9c33f8c1107d09c2f109c103c5:1662901399,7ee9b6d896f8c110bb190a5672b32981:-772687917,a6b972d861f8c110e1411c3d7651ddf1:-153280218,17f572d83af8c110907daf680ad92747:-1777567834,c8af6a5434f8c11044bcfbf11f971416:1650676202,34ce6e1443f8c110412fc7cdf8a9904c:850757234,d45d4ad0ab78c110a49a7ab3b97799f7:-310543202,31bf6b524289b0d01df38d940ef14fec:-1477827088,e15f6b526789b0d073dd077020ae9785:-1281997197,ca74187c53b0fc508075d51cc4669ef8:-1477827088,072f883edeec70501fff4a7862bc14c3:2004679396,3ac9afa5d001a850916a8a8de500b0bc:845443906,4c10ae65464d68504a83c5ee3ed8738a:-248678885,185dd6e15e4d6850d091738d116f71ab:995982780,d2bc5aa1364d6850bb0b7575ba6ddafc:1217619070,7a9b1e616c4d6850d9768698bac356d3:2132156173,aaba5661854d68508e6c05ddda3bc120:-1134620075,66eef933bafce05047f92ad01990f250:-1721892210,8820b57fd43ce050b7acefec3effe25f:-1727974139,4010f9bfcc3ce0500d8503672aa6e172:1605577560</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_properties_336af7192fc1301038fb55272799b606</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties"><sys_properties action="INSERT_OR_UPDATE"><choices/><description>defines the 1.4.5 migration required?</description><ignore_cache>true</ignore_cache><is_private>false</is_private><name>x_nuta2_nutanix_ca.1_4_5</name><read_roles>x_nuta2_nutanix_ca.calm_admin,x_nuta2_nutanix_ca.user</read_roles><suffix>x_nuta2_nutanix_ca.1_4_5</suffix><sys_class_name>sys_properties</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2021-06-29 08:01:57</sys_created_on><sys_id>336af7192fc1301038fb55272799b606</sys_id><sys_mod_count>30</sys_mod_count><sys_name>x_nuta2_nutanix_ca.1_4_5</sys_name><sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_properties_336af7192fc1301038fb55272799b606</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2022-01-24 12:02:23</sys_updated_on><type>string</type><value>1</value><write_roles>x_nuta2_nutanix_ca.calm_admin</write_roles></sys_properties><sys_translated_text action="delete_multiple" query="documentkey=336af7192fc1301038fb55272799b606"/></record_update>]]></payload>
<payload_hash>1413889344</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>90021aa32fd50110e49924c62799b6d1</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb91c1f6e0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table/>
<target_name>x_nuta2_nutanix_ca.1_4_5</target_name>
<type>System Property</type>
<update_domain>global</update_domain>
<update_guid>e1e549749c59c110560a360127454375</update_guid>
<update_guid_history>e1e549749c59c110560a360127454375:1413889344,7602354d82f13010a59c3b10c3bf677b:-1595189392,dbe78e4aaad530104c656391134bf3e8:-1615526767,74c74e4a3ad530109d6ad4807d4de9d4:-1595189392,33b7424223d53010296f110caa6577ee:-1615526767,aa90525c489170109acc6a9461e30080:-1595189392,feab028891d530107180d62ead37cec8:-1615526767,22e6f088f35130106073a0ed6503e5e4:-1595189392,0e9670480b513010c5a528b8541cef07:-1615526767,241244378b0d701015f35e5e80419eb0:-1595189392,6891487767c970105cdfa8288e689e6d:-1615526767,599f7bafb3c97010b49348f6c0d4804b:-1595189392,d15ff32f92c97010928d9e4531eeff6f:-1615526767,4fa2b3efc4497010f7231a86944824e0:-1595189392,aea6cd6fbc09b4101a8453c5ab81396c:-1615526767,d016896f9b09b410986b4dab711b6123:-1595189392,fad5892ff509b410211778eb7e19d08a:-1615526767,77c345eb6709b410cca1491d72db6706:-1595189392,b9c305abd509b41092db82da4f6e42be:-1615526767,ee9245ab7b09b410b4df833ec42542d8:-1595189392,b78205ab0e09b41019fc4422ce8105e1:-1615526767,1e01416b7709b4100e1139a987275c7d:-1595189392,c501cda7e309b410b0ce1c7e54520376:-1615526767,fc40c52b7809b410d4cbda5bb5f7cf24:-1595189392,21eff8e7eb09b410eb55766c399c4da8:-1615526767,dc82ad7d6601701096a4208430b309bf:-1595189392,09b370adfc893010c8000c1cf8fcc865:-1615526767,bba3fc6534c93010cab830ffd0963829:-1595189392,05837ced44893010b824be61357ec930:-1615526767,f40f982d2c4930100199dd574fba8756:-1595189392,719af719e6c130107f2cfb6473e76213:-1615526767</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_d018c57f37112300fdfc097973990e26</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;public&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;true&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Nutanix_ClientServerScriptBridge&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Nutanix_ClientServerScriptBridge = Class.create();
Nutanix_ClientServerScriptBridge.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

    fetchDataFromRequestedItem: function() {
        var gr = new GlideRecord("sc_req_item");
        if (gr.get(this.getParameter("sysparm_sysID"))) {
            return gr;
        }
    },
	
    fieldValidation: function() {
        var utils = new Nutanix_Calm_Utils();
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fieldValidation.");

            var catSysId = this.getParameter('sysparm_catSysId');
            var fieldValueMap = this.getParameter('sysparm_fieldValueMap');
            var configureScript = new Nutanix_FetchConfigureSettingDropdown();

            return configureScript.fieldValidation(catSysId, fieldValueMap);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fieldValidation. Error:- " + e);
        }
    },

	
    fetchLaunchVars: function() {
        var utils = new Nutanix_Calm_Utils();
        var logger = new Nutanix_Calm_Logger();

        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchLaunchVars.");
            var catSysID = this.getParameter('sysparm_catsysid') + "";
            var profile = this.getParameter('sysparm_profile') + "";
            var configScript = new Nutanix_FetchConfigureSettingDropdown();

            return configScript.fetchLaunchVars(catSysID, profile);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchLaunchVars. Error:- " + e);
        }
    },

    variableArrayParser: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.variableArrayParser");
            var type = this.getParameter('sysparm_type');
            var parent_uuid = this.getParameter('sysparm_parentUuid');
            var var_array = this.getParameter('sysparm_varJson');
			var profile_name = this.getParameter('sysparm_profile_sysid');
			var envuuid = this.getParameter('sysparm_envsysid');
            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.variableArrayParser(type, parent_uuid, var_array, this.getParameter("sysparm_field"), profile_name, envuuid);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.variableArrayParser. Error:- " + e);
        }
    },
    //new environment func

    gettingValidatedProfiles: function() {
        try {

            var logger = new Nutanix_Calm_Logger();
            var pro_sys_ID_arr = [];
            var environmentsArr = this.getParameter("sysparm_Env");

            environmentsArr = environmentsArr.split(",");
            var environments = environmentsArr[(environmentsArr.length - 1)];
            var profile_pairs = [];
            var grPro = new GlideRecord("x_nuta2_nutanix_ca_catalog_item_and_application_profile_relation");
            grPro.addQuery("catalog_item", this.getParameter("sysparm_bpsysID"));
            grPro.query();
            while (grPro.next()) {
                profile_pairs.push({
                    "name": grPro.application_profile.name + "",
                    "sys_id": grPro.application_profile.sys_id
                });
            }
            var blueprintType = this.getParameter("sysparm_bpType");

            var env_uuid;
            var pro_name;
            var pro_uuid;
            var pro_sys_ID;
            var envName;
            var grEnv = new GlideRecord("x_nuta2_nutanix_ca_nutanix_environment");
            if (grEnv.get(environments)) {
                env_uuid = grEnv.uuid + "";
                envName = grEnv.name;
                pro_sys_ID = (grEnv.project);
                pro_name = (grEnv.project).getDisplayValue();
                pro_uuid = grEnv.project.uuid + "";
            }

            var body = new Object();
            var profile = [];
            body["api_version"] = "3.0";
            var metadata = {};
            var api_info;
            var tableBP;
            if (blueprintType == "published") {
                metadata.kind = "marketplace_item";
                api_info = "calm_marketplace_items";
                tableBP = "x_nuta2_nutanix_ca_nutanix_marketplaceitems";
            } else {
                metadata.kind = "blueprint";
                api_info = "blueprints";
                tableBP = "x_nuta2_nutanix_ca_nutanix_blueprint";
            }
            metadata["categories"] = {};
            //sysparm_blueprint
            var project_reference = {};
            project_reference["kind"] = "project";
            project_reference["name"] = pro_name;
            project_reference["uuid"] = pro_uuid;
            metadata["project_reference"] = project_reference;

            body["metadata"] = metadata;
            var specs = {};
            var environment_profile_pairs = [];
            var environment = {};
            environment["uuid"] = env_uuid;
            var profile_obj = {};
            var arr = [];
            //profile_pairs = JSON.parse(profile_pairs);
            for (var p in profile_pairs) {
                profile_obj = {};
                profile_obj.app_profile = {
                    "name": profile_pairs[p].name //"name": profile_pairs[p].name
                };
                profile_obj.environment = environment;
                environment_profile_pairs.push(profile_obj);
                //arr.push(grBP.application_profile.name);
            }
			gs.info('environment_profile_pairs: '+environment_profile_pairs);
            specs["environment_profile_pairs"] = environment_profile_pairs;
            var final_profile = [];
            body["spec"] = specs;
            this.appUtil = new Nutanix_Calm_Utils();
            var valid_profs = [];

            var uuidBP;
            var bpref = new GlideRecord(tableBP);
            if (bpref.get(this.getParameter("sysparm_bpsysID"))) {
                uuidBP = bpref.uuid + "";
            }

            logger.info("Nutanix_ClientServerScriptBridge.fetchProfilesBasisOnEnvironment Body:" + JSON.stringify(body));
            var response = this.appUtil.makeCalmApiCall('POST', '/' + api_info + '/' + uuidBP + "/patch_with_environment/validate", JSON.stringify(body));
            logger.info("Nutanix_ClientServerScriptBridge.fetchProfilesBasisOnEnvironment " + JSON.stringify(response.getBody()) + response.getStatusCode());
            if (response.getStatusCode() + '' == "200" || response.getStatusCode() + '' == "201") {
                response = JSON.parse(response.getBody());
                var environment_profile_pair = response.status.environment_profile_pairs;
                for (var j = 0; j &lt; environment_profile_pair.length; j++) {
                    var name = environment_profile_pair[j].app_profile.name + "";
                    var state = environment_profile_pair[j].state;
                    //   if (profile.indexOf(name) != -1) {

                    if (state == "valid") {
                        if (valid_profs.indexOf(name) == -1)
                            valid_profs.push(name);
                    }

                }
            } else {
                logger.info("error in Nutanix_ClientServerScriptBridge.fetchProfilesBasisOnEnvironment" + response.getStatusCode());
            }
            return JSON.stringify(valid_profs);

        } catch (e) {
            gs.info("Error :::   " + e);
        }
    },

    hideAccessLocalGroupOption: function() {
        var utils = new Nutanix_Calm_Utils();
        var logger = new Nutanix_Calm_Logger();

        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.hideAccessLocalGroupOption.");
            var localGroupOption = new Nutanix_FetchConfigureSettingDropdown();
            return localGroupOption.hideAccessLocalGroupOption(); //returns the value that is present on the form
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.hideAccessLocalGroupOption. Error:- " + e);
        }
    },

    supportStatusMPI: function() {
        var utils = new Nutanix_Calm_Utils();
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.supportStatusMPI.");
            var bpSysID = this.getParameter('sysparm_blueprint') + "";
            var supportStatus = new Nutanix_FetchConfigureSettingDropdown();
            return supportStatus.supportStatusMPI(bpSysID); //returns the value.
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.supportStatusMPI. Error:- " + e);
        }
    },

    advanceVariableDynamicOptions: function() {

        var utils = new Nutanix_Calm_Utils();
        var logger = new Nutanix_Calm_Logger();

        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getHttpValues.");

            var catSysId = this.getParameter('sysparm_catSysID');
            // 			var fieldValueMap = this.getParameter('sysparm_fieldValueMap');
            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.advanceVariableDynamicOptions(catSysId);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getHttpValues. Error:- " + e);
        }

    },

    getHttpValues: function() {

        var utils = new Nutanix_Calm_Utils();
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getHttpValues.");

            var type = this.getParameter('sysparm_type');
            var parent_uuid = this.getParameter('sysparm_parentUuid');
            var pre_map = this.getParameter('sysparm_preMap');
            var str = this.getParameter("sysparm_str");
			var profile_sysid = this.getParameter('sysparm_profile');
            var env_profile = this.getParameter('sysparm_env_profile');
			var env_sysid = this.getParameter('sysparm_env_sysid');
			//var bp_sysid = this.getParameter('sysparm_bp_sysid');
            if (str &amp;&amp; str.length != 0)
                str = str.split(",");
            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.getHttpValues(type, parent_uuid, pre_map, str, profile_sysid, env_profile, env_sysid);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getHttpValues. Error:- " + e);
        }
    },


    mpiPatching: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.mpiPatching.");
            var project = this.getParameter('sysparm_project');
            var blueprint = this.getParameter('sysparm_blueprint');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.mpiPatching(project, blueprint);

        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.mpiPatching. Error:- " + e);
        }
    },

    getSubnet: function() {

        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("***Inside Nutanix_ClientServerScriptBridge.getSubnet. catalog sys_id" + this.getParameter('sysparm_catSysID') + " projectUuid " + projectUuid);
            var catalog = this.getParameter('sysparm_catSysID');
            var projectUuid = this.getParameter('sysparm_ProjectUuid');
            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.getProjectSubnet(catalog, projectUuid);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getSubnet. Error:- " + e);
        }

    },

    checkQueue: function() {
        var logger = new Nutanix_Calm_Logger();
        var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_process_queue');
        //gr.addEncodedQuery('state!=complete^topic!=startInventoryDelete^topic!=processImportedApp^topic!=importApplications');
        gr.addEncodedQuery('state!=complete^state!=error^topic!=startInventoryDelete^topic!=processImportedApp^topic!=importRecoveryPoints^topic!=processRecoveryPoints');
        gr.query();
        if (gr.next()) {
            //gs.addErrorMessage('Inventory is currently being synced. Please wait for this operation to finish.');
            //logger.error("Inside Nutanix_ClientServerScriptBridge.checkQueue: Inventory is being synced.");
            return false;
        } else if (gs.getProperty('x_nuta2_nutanix_ca.Delete_Flag') == '1') {
            //gs.addErrorMessage('Inventory is currently being deleted. Please wait for this operation to finish.');
            //logger.error("Inside Nutanix_ClientServerScriptBridge.checkQueue: Inventory is being deleted.");
            return false;
        } else
            return true;
    },

    deleteFlagState: function() {
        if (gs.getProperty('x_nuta2_nutanix_ca.Delete_Flag') == 1) {
            return 'deleting';
        } else {
            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_process_queue');
            gr.addEncodedQuery('state!=complete^state!=error^topic!=startInventoryDelete^topic!=processImportedApp^topic!=importRecoveryPoints^topic!=processRecoveryPoints');
            gr.query();
            if (gr.next()) {
                return 'syncing';
            }
        }
    },
	
	
    getUsers: function() {
        var query = 'sys_idIN';
        var count = 0;
        var gr = new GlideAggregate('sys_user_has_role');
        gr.addQuery('role.name', 'catalog');
        gr.groupBy('user');
        gr.query();
        while (gr.next()) {
            count = 0;
            var user_id = gr.user.sys_id;
            var gsr = new GlideRecord('sys_user_has_role');
            gsr.addQuery('user.sys_id', user_id);
            gsr.query();
            while (gsr.next()) {
                if (gsr.role.name == 'x_nuta2_nutanix_ca.user') {
                    count++;
                    if (count &gt;= 1) {
                        query += gsr.user.sys_id + ',';
                    }
                }
            }
        }
		return query;
    },
	getGroups: function() {
        var query = 'sys_idIN';
        var count = 0;
        var gr = new GlideAggregate('sys_group_has_role');
        gr.addQuery('role.name', 'catalog');
        gr.groupBy('group');
        gr.query();
        while (gr.next()) {
            count = 0;
            var group_id = gr.group.sys_id;
            var gsr = new GlideRecord('sys_group_has_role');
            gsr.addQuery('group.sys_id', group_id);
            gsr.query();
            while (gsr.next()) {
                if (gsr.role.name == 'x_nuta2_nutanix_ca.user') {
                    count++;
                    if (count &gt;= 1) {
                        query += gsr.group.sys_id + ',';
                    }
                }
            }
        }
		return query;
    },
	
    appFlag: function() {
        var utils = new Nutanix_Calm_Utils();
        var grAction = new GlideRecord(utils.configuration.table.NutanixCalmAction);
        if (grAction.get(this.getParameter('sysparm_actId'))) {
            var appUUID = grAction.parent_uuid;
            var gr = new GlideRecord(utils.configuration.table.NutanixCalmApplication);
            gr.addQuery('uuid', appUUID);
            gr.query();
            gr.next();

            if (gr.action_flag == '1') {
                return '1';
            } else
                return '0';
        }
    },

    getVariablesProperty: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            var varProp = gs.getProperty('x_nuta2_nutanix_ca.aws_display_vars');
            return varProp;
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getVariablesProperty. Error:- " + e);
        }
    },

    cleanInstance: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_process_queue');
            gr.addEncodedQuery('state!=complete^topic!=startInventoryDelete');
            gr.query();
            logger.debug("Inside Nutanix_ClientServerScriptBridge.cleanInstance.");
            if (gr.next() || gs.getProperty('x_nuta2_nutanix_ca.Delete_Flag') == '1') {
                logger.error('A sync or a delete process is currently in progress. Please wait for them to finish');
            } else {
                gs.setProperty('x_nuta2_nutanix_ca.Delete_Flag', '1');
                var grDel = new Nutanix_Calm_Utils();
                grDel.insertIntoQueue('startInventoryDelete', '', '', '', 'Starts Inventory deletion', 'This process deletes the calm snow data.');
                logger.info('Inventory cleanup has started.');
            }
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.cleanInstance. Error:- " + e);
        }
    },

    fetchBlueprints: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchBlueprints.");
            var project = this.getParameter('sysparm_project');
            var blueprintType = this.getParameter('sysparm_blueprintType');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.fetchBlueprints(project, blueprintType);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchBlueprints. Error:- " + e);
        }
    },

    fetchApplicationProfiles: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            var blueprint = this.getParameter('sysparm_blueprint');
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchApplicationProfiles. Blueprint :" + blueprint);

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.fetchApplicationProfiles(blueprint);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchApplicationProfiles. Error:- " + e);
        }
    },

    fetchProviderIcons: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchProviderIcons.");
            var catSysId = this.getParameter('sysparm_catId');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.fetchProviderIcons(catSysId);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchProviderIcons. Error:- " + e);
        }
    },

    fetchActionVariables: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchActionVariables.");
            var JSONstr = '';
            var actSysId = this.getParameter('sysparm_actSysId');
            var grAction = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_action');
            if (grAction.get(actSysId)) {
                var actName = grAction.action_name + '';
                var trueName = grAction.name + '';
                var actionType = grAction.type + '';
                var varStr = grAction.action_variables + '';
            }
            if (varStr != '') {
                JSONstr = {
                    "name": actName,
                    "true_name": trueName,
                    "type": actionType,
                    "vars": varStr
                };
            } else
                JSONstr = {
                    "name": actName,
                    "true_name": trueName,
                    "type": actionType
                };
            return JSON.stringify(JSONstr);

        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchActionVariables. Error:- " + e);
        }
    },

    getProfileVariableDetails: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getProfileVariableDetails.");
            var project = this.getParameter('sysparm_project');
            var blueprint = this.getParameter('sysparm_blueprint');
            var application_profile = this.getParameter('sysparm_application_profile');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            var response = configureScript.getProfileVariableDetails(project, blueprint, application_profile);

            return response;
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getProfileVariableDetails. Error:- " + e);
        }
    },
    getMultipleProfileVariableDetails: function() { //multi-profile- project function
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getMultipleProfileVariableDetails.");
            var project = this.getParameter('sysparm_project');
            var blueprint = this.getParameter('sysparm_blueprint');
            var application_profile = this.getParameter('sysparm_application_profile');
            var cat_item = this.getParameter('sysparm_cat_item');
            var delta_profile = this.getParameter('sysparm_delta_profiles');
            var type = this.getParameter('sysparm_type');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            var response = configureScript.getMultipleProfileVariableDetails(project, blueprint, application_profile, cat_item, delta_profile, type);

            return response;
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getMultipleProfileVariableDetails. Error:- " + e);
        }
    },

    getServiceVariableDetails: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getServiceVariableDetails.");
            var project = this.getParameter('sysparm_project');
            var blueprint = this.getParameter('sysparm_blueprint');
            var application_profile = this.getParameter('sysparm_application_profile');
            var type = this.getParameter('sysparm_type');
            var bpType = this.getParameter('sysparm_bpType');
            var cat_item = this.getParameter('sysparm_cat_item');
            var delta_profiles = this.getParameter('sysparm_delta_profiles');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.getMultipleServiceVariableDetails(project, blueprint, application_profile, type, bpType, cat_item, delta_profiles);

        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getProfileVariableDetails. Error:- " + e);
        }
    },

    getCrendentialsDetails: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getCrendentialsDetails.");
            var project = this.getParameter('sysparm_project');
            var blueprint = this.getParameter('sysparm_blueprint');
            var application_profile = this.getParameter('sysparm_application_profile');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            var response = configureScript.getCrendentialsDetails(project, blueprint, application_profile);

            return response;
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getCrendentialsDetails. Error:- " + e);
        }
    },

    mappedCredentials: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.mappedCredentials.");
            var environment = this.getParameter('sysparm_environment');
            var projects = this.getParameter('sysparm_project');
            var bpType = this.getParameter('sysparam_bpType');

            logger.debug("Inside Nutanix_ClientServerScriptBridge.mappedCredentials.\n projects " + projects + "\n bpType" + bpType + "\n environment" + environment);

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.mappedCredentials(projects, bpType, environment);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.mappedCredentials. Error:- " + e);
        }
    },

    fetchEnvironmentCredentials: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchEnvironmentCredentials.");
            var credSysId = this.getParameter('sysparm_credentialSydID');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.fetchEnvironmentCredentials(credSysId);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchEnvironmentCredentials. Error:- " + e);
        }
    },

    getCatalogInfo: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getCatalogInfo.");
            var catalogItemSysID = this.getParameter('sysparm_catalogItemSysID');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.getCatalogInfo(catalogItemSysID);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getCatalogInfo. Error:- " + e);
        }
    },

    getRealtedCatalogItems: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getRealtedCatalogItems.");
            var blueprint = this.getParameter('sysparm_blueprint');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.getRealtedCatalogItems(blueprint);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getRealtedCatalogItems. Error:- " + e);
        }
    },

    getBlueprintInfo: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getBlueprintInfo.");
            var blueprint = this.getParameter('sysparm_blueprint');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.getBlueprintInfo(blueprint);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getBlueprintInfo. Error:- " + e);
        }
    },

    fetchRuntimeVariablesValue: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchRuntimeVariablesValue.");
            var sysId = this.getParameter('sysparm_sysId');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.fetchRuntimeVariablesValue(sysId);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchRuntimeVariablesValue. Error:- " + e);
        }
    },

    fetchProjectAndProfileList: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchProjectAndProfileList.");
            var catSysID = this.getParameter('sysparm_catSysID');

            var configureScript = new Nutanix_CatalogFormScripts();
            return configureScript.fetchMultipleProjectAndProfileList(catSysID);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchProjectAndProfileList. Error:- " + e);
        }
    },
    fetchMultipleProjectAndEndpointList: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchMultipleProjectAndEndpointList.");
            var catSysID = this.getParameter('sysparm_catSysID');

            var configureScript = new Nutanix_CatalogFormScripts();
            return configureScript.fetchMultipleProjectAndEndpointList(catSysID);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchMultipleProjectAndEndpointList. Error:- " + e);
        }
    },

    fetchOrderFormData: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchOrderFormData.");
            var profile = this.getParameter('sysparm_profile');
            var catSysID = this.getParameter('sysparm_catSysID');

            var configureScript = new Nutanix_CatalogFormScripts();
            return configureScript.fetchOrderFormData(profile, catSysID);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchOrderFormData. Error:- " + e);
        }
    },

    fetchCredentialsList: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchCredentialsList.");
            var catSysID = this.getParameter('sysparm_catSysID');
			var projectUUID = this.getParameter('sysparm_project');
			var envUUID = this.getParameter('sysparm_env');
            var configureScript = new Nutanix_ImportCredentials();
			return configureScript.fetchCredentialsList(catSysID, projectUUID, envUUID);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchCredentialsList. Error:- " + e);
        }
    },

    fetchMappedCredentialsDetails: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchMappedCredentialsDetails.");
            var catSysID = this.getParameter('sysparm_catSysID');

            var configureScript = new Nutanix_ImportCredentials();
            return configureScript.fetchMappedCredentialsDetails(catSysID);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchMappedCredentialsDetails. Error:- " + e);
        }
    },

    checkDuplicate: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.checkDuplicate.");
            var catName = this.getParameter('sysparm_catName');
            var catSysId = this.getParameter('sysparm_catSysId');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.checkDuplicate(catName, catSysId);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.checkDuplicate. Error:- " + e);
        }
    },

    /*checkCatalogValidity: function() {
    	var logger = new Nutanix_Calm_Logger();
    	try {
    		logger.debug("Inside Nutanix_ClientServerScriptBridge.checkCatalogValidity.");
    		var blueprintData=[];
    		var blueprintType = this.getParameter('blueprintType');
    		var blueprintUUID = this.getParameter('blueprintUUID');
    		var projectSysId = this.getParameter('projectUUID');
    		blueprintData.push("projectSysId",projectSysId);
    		var profileSysID = '';
    		if(blueprintType == 'x_nuta2_nutanix_ca_nutanix_blueprint') {
    			var profileSysIds = this.getParameter('profileSysId').split(',');
    			var profileName = this.getParameter('profileName');
    			var envUUID = this.getParameter('envUUID');
    			for (var i = 0; i &lt; profileSysIds.length; i++) {
    				var profile = new GlideRecord('x_nuta2_nutanix_ca_application_profile');
    				profile.get(profileSysIds[i]);
    				logger.debug("***True/false: profile_name : " + profile.name + ' profileName : ' + profileName + '');
    				if (profile.name + '' == profileName + '') {
    					profileSysID = profileSysIds[i] + '';
    					break;
    				} else {
    					continue;
    				}
    			}
    			blueprintData.push("envUUID",envUUID);
    			blueprintData.push("profileSysID",profileSysID);
    		}
    		if(blueprintType == 'x_nuta2_nutanix_ca_runbooks') {
    			var endpoint = this.getParamter('endpoint');
    			blueprintData.push("endpoint",endpoint);
    		}
    		this.logger.info(profileSysIds+"profileSysId"+profileSysID);
    		var configureScript = new Nutanix_CheckCatalogItemValidity();
    		return configureScript.checkCatalogValidity2(blueprintType, blueprintUUID, blueprintData);
    	} catch (e) {
    		logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.checkCatalogValidity. Error:- " + e);
    	}
    },*/
    checkCatalogValidity: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.checkCatalogValidity.");
            var ans = {};
            var onChangeType = this.getParameter('onChangeType');
            var projectSysId = '';
            var blueprintType = '';
            var blueprintUUID = '';
            var profileSysIds = '';
            var profileName = '';
            var envUUID = '';

            if (onChangeType == 'project') {
                projectSysId = this.getParameter('sysparm_projectUUID');
            } else if (onChangeType == 'profile') {
                blueprintType = this.getParameter('sysparm_blueprintType');
                blueprintUUID = this.getParameter('sysparm_blueprintUUID');
                profileSysIds = this.getParameter('sysparm_profileSysId').split(',');
                profileName = this.getParameter('sysparm_profileName');
                envUUID = this.getParameter('sysparm_envUUID');
            }
            var configureScript = new Nutanix_CheckCatalogItemValidity();
            if (projectSysId != '') {
                var state = configureScript.checkCatalogValidity('', '', projectSysId, 'Project');
                ans[projectSysId] = {
                    "state": state,
                    "name": "Project"
                };
            }

            if (envUUID != '') {
                var state = configureScript.checkCatalogValidity(blueprintType, blueprintUUID, envUUID, 'Environment');
                ans[envUUID] = {
                    "state": state,
                    "name": "Environment"
                };
            }
            var profileSysId = '';

            for (var i = 0; i &lt; profileSysIds.length; i++) {
                var profile = new GlideRecord('x_nuta2_nutanix_ca_application_profile');
                profile.get(profileSysIds[i]);
                if (profile.name + '' == profileName + '') {
                    profileSysId = profileSysIds[i] + '';
                    break;
                } else {
                    continue;
                }
            }
            if (profileSysId != '') {
                var state = configureScript.checkCatalogValidity(blueprintType, blueprintUUID, profileSysId, 'BlueprintProfile');
                ans[profileName] = {
                    "state": state,
                    "name": "Blueprint/Profile"
                };
            }

            return JSON.stringify(ans);

        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.checkCatalogValidity. Error:- " + e);
        }
    },

    getUserEmail: function() {
        var gr = new GlideRecord('sys_user');

        if (gr.get(gs.getUserID())) {
            return gr.email + '';
        }
    },
    fetchMultipleBlueprints: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            var blueprintType = this.getParameter('sysparm_blueprintType');
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchMultipleBlueprints. blueprintType " + blueprintType);

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.fetchMultipleBlueprints(blueprintType);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchMultipleBlueprints. Error:- " + e);
        }
    },
    fetchMultipleProjects: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            var blueprint = this.getParameter('sysparm_blueprint');
            var blueprintType = this.getParameter('sysparm_blueprintType');
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchMultipleProjects. Blueprint " + blueprint + " BlueprintType " + blueprintType);

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.fetchMultipleProjects(blueprint, blueprintType);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchMultipleProjects. Error:- " + e);
        }
    },
    getMultipleServiceVariableDetails: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getMultipleServiceVariableDetails.");
            var project = this.getParameter('sysparm_project');
            var blueprint = this.getParameter('sysparm_blueprint');
            var application_profile = this.getParameter('sysparm_application_profile');;
            var type = this.getParameter('sysparm_type');
            var bpType = this.getParameter('sysparm_bpType');
            var project1 = project.split(',');
            var profile1 = application_profile.split(',');
            var answer = [];
            for (var i in profile1) {
                var configureScript = new Nutanix_FetchConfigureSettingDropdown();
                var response = JSON.parse(configureScript.getServiceVariableDetails(project1[0], blueprint, profile1[i], type, bpType));
                var res = {
                    "profile": profile1[i],
                    "response": response.service_configuration
                };
                answer.push(res);
            }
            logger.debug("End Nutanix_ClientServerScriptBridge.getMultipleServiceVariableDetails." + JSON.stringify(answer));
            return JSON.stringify(answer);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.toyota1_getServiceVariableDetails. Error:- " + e);
        }
    },

    getProject: function(blueprint, blueprintType) {
        var logger = new Nutanix_Calm_Logger();
        logger.debug("Inside Nutanix_ClientServerScriptBridge.getProject.");
        try {
            logger.debug("Inside global Business Rule.getProject.blueprint : " + blueprint + 'blueprintType : ' + blueprintType);

            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_projects_blueprints_relationship');
            gr.addQuery('catalog_item', blueprint);
            if (blueprintType == 'unpublished') {
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_unpublishedBP_sysId'));
            }
            if (blueprintType == 'runbook') {
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_runbook_sysId'));
            }
            if (blueprintType == 'published_runbook') {
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_published_runbook_sysId'));
            }
            if (blueprintType == 'published') {
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_category_sysId'));
            }
            gr.orderBy('catalog_item.name');
            gr.query();
            var query = 'state=COMPLETE^sys_idIN';
            var pro = [];
            while (gr.next()) {
                if ((gr.catalog_item.state + '').toUpperCase() == 'ACTIVE')
                    query += gr.projects + ',';
            }
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getProject. Query return " + query);

            return query;
        } catch (e) {
            logger.debug("Exception Nutanix_ClientServerScriptBridge.getProject. Error:- " + e);
        }
    },
    getProfile: function(blueprintSysId, selectedProfiles) {
        var logger = new Nutanix_Calm_Logger();
        logger.debug("Inside Nutanix_ClientServerScriptBridge.getProfile.");
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getProfile." + blueprintSysId + " " + selectedProfiles);

            selectedProfiles = selectedProfiles.split(",");
            var blueprint = new GlideRecord('x_nuta2_nutanix_ca_nutanix_blueprint');
            blueprint.get(blueprintSysId);
            var gr = new GlideRecord('x_nuta2_nutanix_ca_catalog_item_and_application_profile_relation');
            gr.addQuery('catalog_item', blueprintSysId);
            gr.addQuery('state', 'active');
            gr.orderBy('application_profile.name');
            gr.query();
            var query = 'sys_idIN';

            while (gr.next()) {
                logger.debug("gr.application_profile.name :" + gr.application_profile.name);
                if (selectedProfiles.indexOf(gr.application_profile.name + "") != -1) {
                    query += gr.application_profile + ',';
                }
            }
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getProfile. Query return " + query);
            return query;
        } catch (e) {
            logger.debug("Exception Nutanix_ClientServerScriptBridge.getProfile. Error:- " + e);
        }
    },
    noProfileVariableDetails: function() { //multi-profile- project function
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.noProfileVariableDetails.");
            var project = this.getParameter('sysparm_project');
            var blueprint = this.getParameter('sysparm_blueprint');
            var application_profile = this.getParameter('sysparm_application_profile');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            var response = configureScript.noProfileVariableDetails(project, blueprint, application_profile);

            return response;
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.noProfileVariableDetails. Error:- " + e);
        }
    },


    getSubnetDetails: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getServiceVariableDetails.");
            var project = this.getParameter('sysparm_project');
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getSubnetDetails. Project : " + project);

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.getNutanixSubnetList(project);

        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getProfileVariableDetails. Error:- " + e);
        }
    },

    getDeltaProject: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getDeltaProject.");
            var project_sysId = this.getParameter('sysparm_project').split(',');
            var catalog_sysId = this.getParameter('sysparm_catItem');
            var deltaProject = [];

            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
            gr.addEncodedQuery('item_name.sys_id=' + catalog_sysId);
            gr.query();

            while (gr.next()) {
                var projects = gr.getValue('multiple_projects') + '';
                for (var i in project_sysId) {
                    if (projects.includes(project_sysId[i]))
                        continue;
                    else
                        deltaProject.push(project_sysId[i]);
                }
            }

            return JSON.stringify(deltaProject);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getDeltaProject. Error:- " + e);
        }
    },

    getDeltaProfile: function() {
        var logger = new Nutanix_Calm_Logger();
        var utils = new Nutanix_Calm_Utils();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getDeltaProject.");
            var profile_sysId = this.getParameter('sysparm_profile').split(',');
            var catalog_sysId = this.getParameter('sysparm_catItem');
            var deltaProfile = [];


            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
            gr.addEncodedQuery('item_name.sys_id=' + catalog_sysId);
            gr.query();

            while (gr.next()) {
                var profile = gr.getValue('multiple_application_profile') + '';
                for (var i in profile_sysId) {
                    if (profile.includes(profile_sysId[i])) {
                        continue;
                    } else {
                        var gr1 = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
                        gr1.addQuery('application_profile', profile_sysId[i]);
                        gr1.addQuery('catalog_item', catalog_sysId);
                        //			gr1.addQuery('isprofilevariable', false);
                        gr1.query();
                        if (gr1.next()) {
                            continue;
                        } else {
                            deltaProfile.push(profile_sysId[i]);
                        }
                    }
                }
            }

            return JSON.stringify(deltaProfile);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getDeltaProject. Error:- " + e);
        }
    },
    fetchBlueprintName: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchBlueprintName.");
            var BlueprintsysId = this.getParameter('sysparm_BlueprintsysId');

            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_projects_blueprints_relationship');
            gr.addQuery('catalog_item', BlueprintsysId);
            gr.query();
            if (gr.next())
                return gr.catalog_item.name + '' + " " + gr.version + '';
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchBlueprintName. Error:- " + e);
        }
    },
    getProjectCount: function() {
        var blueprint = this.getParameter('sysparm_blueprint');
        var gr = new GlideAggregate('x_nuta2_nutanix_ca_nutanix_calm_projects_blueprints_relationship');
        gr.addQuery('catalog_item', blueprint);
        gr.addAggregate('COUNT');
        gr.query();
        var count = 0;
        if (gr.next()) {
            count = gr.getAggregate('COUNT');
        }
        return count;
    },
    getProfileCount: function() {
        var blueprint = this.getParameter('sysparm_blueprint');
        var profile = new GlideAggregate('x_nuta2_nutanix_ca_catalog_item_and_application_profile_relation');
        profile.addQuery('catalog_item', blueprint);
        profile.addQuery('state', 'active');
        profile.addAggregate('COUNT');
        profile.query();
        var count = 0;
        if (profile.next()) {
            count = profile.getAggregate('COUNT');
        }
        return count;
    },
    getProfilesysIdNameJSON: function() {
        var profile = this.getParameter('sysparm_profile');
        var array_profile = profile.split(',');
        var profile_JSON = {};
        for (var n = 0; n &lt; array_profile.length; n++) {
            var profile_gr = new GlideRecord('x_nuta2_nutanix_ca_application_profile');
            profile_gr.get(array_profile[n]);
            profile_JSON[profile_gr.sys_id] = {
                "name": profile_gr.name + ''
            };
        }
        return JSON.stringify(profile_JSON);
    },
    getSecretVaraiable: function() {
        var profile = this.getParameter('sysparm_profile');
        var array_profile = profile.split(',');
        var blueprint = this.getParameter('sysparm_blueprint');
        var answer = [];
        for (var n = 0; n &lt; array_profile.length; n++) {
            var gr_variable = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
            gr_variable.addEncodedQuery('isprofilevariable=true^data_type=SECRET^catalog_item=' + blueprint + '^application_profile=' + array_profile[n]);
            gr_variable.query();
            while (gr_variable.next()) {
                answer.push(gr_variable.variable.name);
            }
        }
        return answer.toString();
    },
    /*	migration_1_4 : function(){
    		var answer = '';
    		if(gs.getProperty('x_nuta2_nutanix_ca.Version1_4_3_migration_needed') == '0')
    		{
    		    var utils = new Nutanix_Calm_Utils();

    			var blueprint = new GlideRecord('x_nuta2_nutanix_ca_nutanix_blueprint');
    			blueprint.addQuery('state', 'ACTIVE');
    			blueprint.query();
    			while(blueprint.next()){
    				var final_var_list = [];
    				var response = utils.makeCalmApiCall("get", '/blueprints/'+blueprint.uuid, "");
    				if(response.getStatusCode() == '200' || response.getStatusCode() == '201'){
    				   var app_profile_list = JSON.parse(response.getBody()).spec.resources.app_profile_list;
    					if(app_profile_list.length &lt;1)
    						   continue;

    				   for(var i  in app_profile_list){

    					   var variable_list =  app_profile_list[i].variable_list;
    						 if(variable_list.length &lt;1)
    								 continue;
    						  for(var j in variable_list){						  
    	// 						var var_index = final_var_list.indexOf(variable_list[j].name);
    	// 				        var_index === -1 ? final_var_list.push(variable_list[j].name) :( answer.inludes(blueprint.name)? '' : answer += " "+blueprint.name);
    							var variable_prop = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
    							variable_prop.addQuery('uuid', variable_list[j].uuid);
    							variable_prop.query();
    							if(variable_prop.next()){
    								continue;
    							}
    							else{ 
    							  answer += " "+blueprint.name;	
    							}
    					   }
    				   }
    				}
    			}
    		}
    		if(blueprint.getRowCount() == 0 || answer == ''){
    			gs.setProperty('x_nuta2_nutanix_ca.Version1_4_3_migration_needed', '1');
    		}

    		return answer+"";
    	},*/
    credentialList: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchOrderFormData.");
            var catSysID = this.getParameter('sysparm_catSysID');

            var configureScript = new Nutanix_CatalogFormScripts();
            return configureScript.credentialList(catSysID);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchOrderFormData. Error:- " + e);
        }
    },

    fetchProfilesBasisOnEnvironment: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            if (gs.getProperty('x_nuta2_nutanix_ca.Nutanix_Calm_Select_Service_Portal') == 'true') {
                /*get project Name */
                var project_name;
				var type;
                var project_def = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
                project_def.addQuery('uuid', this.getParameter('sysparm_proValue'));
                project_def.query();
                if (project_def.next())
                    project_name = project_def.name + '';
                gs.info('sysparm_sysid: ' + this.getParameter('sysparm_sysID'));
                var ga = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
                ga.addQuery('item_name', this.getParameter('sysparm_sysID'));
                ga.query();
                var profile1;
                var blueprint;
                if (ga.next()) {
                    profile1 = ga.multiple_application_profile + "";
                    //gs.info("profile1: "+profile1);	
                    blueprint = (ga.blueprint).uuid + "";
                    type = ((ga.item_name.category).getDisplayValue());
                }
            }
            var body = new Object();
            var profile = [];
            body["api_version"] = "3.0";
            var metadata = {};
            var api_info;
			if (gs.getProperty('x_nuta2_nutanix_ca.Nutanix_Calm_Select_Service_Portal') == 'false') {
				if (this.getParameter('sysparm_type') + "" == "x_nuta2_nutanix_ca_nutanix_marketplaceitems") {
					metadata.kind = "marketplace_item";
					api_info = "calm_marketplace_items";
				} 
				else {
					metadata.kind = "blueprint";
					api_info = "blueprints";
				}
			}
			else {
				if(type == 'Marketplace Blueprint'){
					metadata.kind = "marketplace_item";
					api_info = "calm_marketplace_items";
				}
				else{
					metadata.kind = "blueprint";
					api_info = "blueprints";
				}
			}
            metadata["categories"] = {};
            //sysparm_blueprint	
            var project_reference = {};
            project_reference["kind"] = "project";
            if (gs.getProperty('x_nuta2_nutanix_ca.Nutanix_Calm_Select_Service_Portal') == 'false')
                project_reference["name"] = this.getParameter("sysparm_pro") + "";
            else
                project_reference["name"] = project_name + '';
            project_reference["uuid"] = this.getParameter("sysparm_proValue") + "";
            gs.info('project_ref_name: ' + project_reference["name"]);
            gs.info(' project_ref_uuid: ' + project_reference["uuid"]);
            metadata["project_reference"] = project_reference;
            body["metadata"] = metadata;
            var specs = {};
            var environment_profile_pairs = [];
            var environment = {};
            environment["uuid"] = this.getParameter("sysparm_env") + "";
            if (gs.getProperty('x_nuta2_nutanix_ca.Nutanix_Calm_Select_Service_Portal') == 'false')
                var app_profile = this.getParameter("sysparm_profile");
            else
                app_profile = profile1;
            gs.info('app_profile: ' + app_profile);
            app_profile = app_profile.split(",");
            for (var i = 0; i &lt; app_profile.length; i++) {
                var profile_obj = {};
                var gr = new GlideRecord("x_nuta2_nutanix_ca_application_profile");
                if (gr.get(app_profile[i])) {
                    profile_obj.app_profile = {
                        "name": gr.name + ""
                    };
                    profile.push(gr.name + "");
                }
                gs.info('profile_obj: ' + profile);
                profile_obj.environment = environment;
                environment_profile_pairs.push(profile_obj);
            }
            specs["environment_profile_pairs"] = environment_profile_pairs;
            var final_profile = [];
            body["spec"] = specs;
            this.appUtil = new Nutanix_Calm_Utils();
            logger.info("Nutanix_ClientServerScriptBridge.fetchProfilesBasisOnEnvironment Body:" + JSON.stringify(body));
            if (gs.getProperty('x_nuta2_nutanix_ca.Nutanix_Calm_Select_Service_Portal') == 'false')
                var response = this.appUtil.makeCalmApiCall('POST', '/' + api_info + '/' + this.getParameter("sysparm_blueprint") + "/patch_with_environment/validate", JSON.stringify(body));
            else
                response = this.appUtil.makeCalmApiCall('POST', '/' + api_info + '/' + blueprint + "/patch_with_environment/validate", JSON.stringify(body));

            logger.info("Nutanix_ClientServerScriptBridge.fetchProfilesBasisOnEnvironment " + JSON.stringify(response.getBody()) + response.getStatusCode());

            if (response.getStatusCode() + '' == "200" || response.getStatusCode() + '' == "201") {
                response = JSON.parse(response.getBody());
                var environment_profile_pair = response.status.environment_profile_pairs;
                for (var i = 0; i &lt; environment_profile_pair.length; i++) {
                    var name = environment_profile_pair[i].app_profile.name + "";
                    var state = environment_profile_pair[i].state;
                    if (profile.indexOf(name) != -1) {
                        if (state == "valid") {
                            final_profile.push(name);
                        }
                    }
                }
            } else {
                logger.info("error in Nutanix_ClientServerScriptBridge.fetchProfilesBasisOnEnvironment");
            }
            return JSON.stringify(final_profile);


        } catch (e) {
            logger.error("error in Nutanix_ClientServerScriptBridge.fetchProfilesBasisOnEnvironment" + e);
        }

    },
    fetchEnvironments: function() {
        var cat_sys_id = this.getParameter("sysparm_cat_sys_id");
        var project_id = this.getParameter("sysparm_project_id");
        var project_sys_id = "";
        var get_project_sys_id = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
        get_project_sys_id.addQuery('uuid', project_id);
        get_project_sys_id.query();
        if (get_project_sys_id.next()) {
            project_sys_id = get_project_sys_id.sys_id;
        }
        var env = "";
        var runtime_config = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        runtime_config.addQuery('item_name', cat_sys_id);
        runtime_config.query();
        if (runtime_config.next()) {
            env = runtime_config.environments;
        }
        var arr = [];
        if (env != "") {
            env = env.split(',');
            for (var i in env) {
                var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_environment");
                gr.addQuery("sys_id", env[i]);
                gr.addQuery("project", project_sys_id);
                gr.query();
                while (gr.next()) {
                    var obj = {};
                    obj["Name"] = (gr.name + "");
                    obj["UUID"] = (gr.uuid + "");
                    arr.push(obj);
                }
			}
            return (JSON.stringify(arr));
        } else {
            var env_associated_to_project = [];
            var project = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
            project.addQuery("sys_id", project_sys_id);
            project.query();
            if (project.next()) {
                env_associated_to_project = project.environment_uuid + '';
            }
            env_associated_to_project = env_associated_to_project.split(',');
            for (var i in env_associated_to_project) {
                var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_environment");
                gr.addQuery("uuid", env_associated_to_project[i]);
                gr.addQuery("project", project_sys_id);
                gr.query();
                while (gr.next()) {
                    var obj = {};
                    obj["Name"] = (gr.name + "");
                    obj["UUID"] = (gr.uuid + "");
                    arr.push(obj);
                }
            }
            return (JSON.stringify(arr));
        }
    },
    copyMpiPatching: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            var project = this.getParameter('sysparm_project');
            var blueprint = this.getParameter('sysparm_blueprint');
            if ((parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2"))) {
                logger.debug("Inside Nutanix_ClientServerScriptBridge.mpiPatching.");


                var profile = (this.getParameter('sysparm_profile'));
                // 			var profile_name ='';
                // 			var profileGr = new GlideRecord('x_nuta2_nutanix_ca_application_profile');
                // 			if(profileGr.get(profile[0])){
                // 				 profile_name = profileGr.name+'';
                // 			}
                var configureScript = new Nutanix_FetchConfigureSettingDropdown();
                return configureScript.copyMpiPatching(project, blueprint, profile, this.getParameter("sysparm_env_prof_pairs"));
            } else {
                var configureScript = new Nutanix_FetchConfigureSettingDropdown();
                return configureScript.mpiPatching(project, blueprint);
            }


        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.mpiPatching. Error:- " + e);
        }
    },
    variableArrayParser_client_script: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.variableArrayParser");

            var type = this.getParameter('sysparm_type');
            var parent_uuid = this.getParameter('sysparm_parentUuid');
            var var_array = this.getParameter('sysparm_varJson');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.variableArrayParser_client_script(type, parent_uuid, var_array);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.variableArrayParser. Error:- " + e);
        }
    },
    getPortalCompatibility: function() {

        var select_portal = gs.getProperty('x_nuta2_nutanix_ca.Nutanix_Calm_Select_Service_Portal') + '';
        gs.info('select_portal::' + select_portal);
        return select_portal;
    },

    // Service Portal script 
    getFieldDetails: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getFieldDetails.");
            var fieldNames = this.getParameter('fieldNameArray');
            var cat_item_sys_id = this.getParameter('cat_item_sys_id');
            var portalScript = new Nutanix_ServicePortalConfiguration();
            return portalScript.getFieldDetails(fieldNames, cat_item_sys_id);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.checkDuplicate. Error:- " + e);
        }

    },
    variable_info: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getFieldDetails.");
            var cat_item_sys_id = this.getParameter('sysparm_catSysID');
            var fieldNames = this.getParameter('sysparm_fieldNames');

            var portalScript = new Nutanix_ServicePortalConfiguration();
            if (gs.getProperty('x_nuta2_nutanix_ca.Nutanix_Calm_Select_Service_Portal') == 'true')
                return portalScript.extraFields(fieldNames, cat_item_sys_id);
            else
                return portalScript.extraFields(fieldNames, cat_item_sys_id, profile);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.variable_info. Error:- " + e);
        }
    },
    extraFields: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getFieldDetails.");
            var cat_item_sys_id = this.getParameter('sysparm_catSysID');
            var fieldNames = this.getParameter('sysparm_fieldNames');
            var profile = this.getParameter('sysparm_profile');

            var portalScript = new Nutanix_ServicePortalConfiguration();
            return portalScript.extraFields(fieldNames, cat_item_sys_id, profile);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.variable_info. Error:- " + e);
        }
    },
    privateField: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.privateField.");
            var cat_item_sys_id = this.getParameter('sysparm_catSysID');
            var fieldNames = this.getParameter('sysparm_fieldNames');

            var portalScript = new Nutanix_ServicePortalConfiguration();
            return portalScript.privateField(cat_item_sys_id);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.privateField. Error:- " + e);
        }
    },
    showRuntimeVariable: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.privateField.");
            var cat_item_sys_id = this.getParameter('sysparm_catSysID');

            var portalScript = new Nutanix_ServicePortalConfiguration();
            return portalScript.showRuntimeVariable(cat_item_sys_id);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.privateField. Error:- " + e);
        }
    },
    secretVariables: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.secretVariables.");
            var cat_item_sys_id = this.getParameter('sysparm_catSysID');

            var portalScript = new Nutanix_ServicePortalConfiguration();
            return portalScript.secretVariables(cat_item_sys_id);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.secretVariables. Error:- " + e);
        }
    },
    setSubnet: function() {
        try {
            var catalog = this.getParameter('sysparm_catSysID');
            var catNic = JSON.parse(this.getParameter('sysparm_catNicJson'));
            var variable_name = catNic.nic;
            var nic_list = catNic.nicList;
            var ans = '';
            for (var i in variable_name) {
                var variable = new GlideRecord('item_option_new');
                variable.addQuery('cat_item', catalog + '');
                variable.addQuery('name', variable_name[i]);
                variable.query();
                var query = '';
                while (variable.next()) {
					var column_fields = {}; 
                    for (var i in nic_list) {
                        for (var key in nic_list[i]) {
                            if (query == '')
                                query = 'uuid=' + key;
                            else
                                query += '^ORuuid=' + key;
                        }
                    }
					column_fields.reference_qual = query;
                    column_fields.default_value = '';
                    ans = column_fields.reference_qual + '';
					var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable(variable.sys_id, column_fields, 'update');
                }
            }
            return JSON.stringify(ans);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.setSubnet. Error:- " + e);
        }
    },
    setProfileOnChangeOfEnv: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.setProfileOnChangeOfEnv.");
            var blueprint = this.getParameter('sysparm_blueprint');
            var profileName = this.getParameter('sysparm_profileName');
            return this.getProfile(blueprint, profileName);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.setProfileOnChangeOfEnv. Error:- " + e);
        }
    },
    // 	returnBPType : function() {
    // 		gs.info('bp_uuid:');
    // 		var logger = new Nutanix_Calm_Logger();
    // 		try {
    // 			var BP_uuid = this.getParameter('sysparm_uuid')+'';
    // 			gs.info('bp_uuid: '+BP_uuid);
    // 			var mpi_gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_marketplaceitems');
    // 			mpi_gr.addQuery('uuid' , BP_uuid+'');
    // 			mpi_gr.query();
    // 			if(mpi_gr.next()) {
    // 				gs.info('bp_uuid: '+mpi_gr.getValue('bp_type')+'');
    // 				return mpi_gr.getValue('bp_type')+'';
    // 			}
    // 		} catch (e) {
    // 			logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.returnBPType. Error:- " + e);
    // 		}

    // 	},
    fetchBlueprintType: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchBlueprintType");
            var item_sys_id = this.getParameter('sysparm_item_sys_id');
            var glideTable = new GlideRecord('sc_cat_item_category');
            glideTable.addQuery('sc_cat_item', item_sys_id + '');
            glideTable.query();
            if (glideTable.next()) {
                var category = glideTable.getDisplayValue("sc_category");
                //gs.info("Parth blueprint :" + category);
                return category;
            }
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchBlueprintType. Error:- " + e);
        }
    },
    fetchSelectedEndpointList: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchSelectedEndpointList.");
            var catSysID = this.getParameter('sysparm_catSysID');
            var configureScript = new Nutanix_CatalogFormScripts();
            return configureScript.fetchSelectedEndpointList(catSysID);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchSelectedEndpointList. Error:- " + e);
        }
    },
    fetchEndpointAssociatedToProject: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchEndpointAssociatedToProject.");
            var projectID = this.getParameter('sysparm_projectID');
            var selected_endpoint = this.getParameter('sysparm_selected_endpoint');
            var configureScript = new Nutanix_CatalogFormScripts();
            return configureScript.fetchEndpointAssociatedToProject(projectID, selected_endpoint);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchEndpointAssociatedToProject. Error:- " + e);
        }
    },
    type: 'Nutanix_ClientServerScriptBridge'
});]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-28 19:13:04&lt;/sys_created_on&gt;&lt;sys_id&gt;d018c57f37112300fdfc097973990e26&lt;/sys_id&gt;&lt;sys_mod_count&gt;430&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_ClientServerScriptBridge&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_d018c57f37112300fdfc097973990e26&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2022-01-14 14:04:16&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>578788455</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>90021aa32fd50110e49924c62799b6d4</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb91c1ef00000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table/>
<target_name>Nutanix_ClientServerScriptBridge</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>59e142e16b8101105d1ed8d2623dd1ac</update_guid>
<update_guid_history>59e142e16b8101105d1ed8d2623dd1ac:578788455,df7efdedb7410110f7845fdd7ef720fc:-179891258,f6aa6b30100d01109dcc18c6be9c25d4:1607031992,641a2bfc0ec90110c30b57d8b9ee6039:-2128734142,267bb6b857850110892d9d76075d6755:-1749354030,c72bb678a7850110045c23316900a56f:-1262382640,e9ea72b840850110589a5d2a392ac7b2:-2054653949,3cf53e74508501101c5190fcb792c86b:237200441,3248a2b8ff450110a5c72360979eebac:-1219130827,1d554c4d559001103f1c23acb5219b74:375354957,152284f778cc8110bfb3bf135c5eed8d:-1292510419,4a1b3fab164c81100a22133c5a5c138f:-639987239,3f4ce99fcbc80110cc9dc17313345dcc:-498889385,37da9bb095212300ab2488cb274b5788:-2142886880,169918b8a9e5230049b34608d4c84d0d:-171081800,bf79aa6c17a12300e8beee32ee6951a0:1145764236,28856ea42ea12300fb5dd7ec6dd873ae:770636087,4f42ee20e4a1230065cb815a5893f72d:-1333210511,84326e604aa12300e7dcf34ddd869739:657952991,6188951cf1e5630036e3aaa71aace676:-1860823237,10159d18a2e563005a96007e408f0c64:688998715,a064911875e56300c9c0f6c4cb20b8bf:231740739,cb231d9490e5630026b0ca34e99b3458:1274530003,6af7ed33a391230086d4e63524af7e22:187149776,1e1e4dffdc1123000c2b58f6673277bc:-755183496,0db19c4d867323003222b8dabdf8421a:13923263,1bb094c166b32300e4a8ed73ca2a4c98:155818461,e288444d0b732300c57f408658f19512:1859269087,d6d70c0d7e7323001ab168acc7c4f448:-2019175556,a897044dcb732300ac1330623d2f15f2:-1430529820,b0d6c00dfb732300eb0f27a6bd27aba2:-878062264,da164809c97323002a55c6be5e53192d:1947595948,0854844902732300a9b82b3b23c9fc64:-6698668,2dd0eb20b9336300d308a45b4821b241:599934240,ba2b4b20d4ff23006f43234222ba0e17:241717613,601f3ee466bf2300083546a7519fa9ff:599934240,0cde3e2872bf2300e78fc6ddbbd69f9b:-784709088,7b2d322814bf2300e23ae2342d7cef38:-2060232275,d8e011b076c8011093674097f5470e18:756947894,db809570f0c8011035420abfbd959459:-1493058898,a4109570f8c8011051a5338ff240b953:1397111471,6ea2c5f4a38801104749742b4848f05a:1319318900,64a46534812b7010ee633b5a58a490c9:898571728,37cc0684bee770100c73917781b427fd:-828136452,9bee82f3eddb301078599fdbced01f60:1516659666,8712423b1d9b30104e19243688d26325:-1407643599,62cba1f36f5b30104ca18b3f29e2b326:420324625,3b956573a71b3010ac4a68b05cbd927b:1463361823,27ad463264dbb010306c2c3b6884829a:-1072832412,49ccc2be669bb01059dba5b15dbfd719:1888670229,10abc2fa699bb010e9b107710ea40330:-604389841,0b6ef5720c9bb010a782052451a7356c:1676061330,5dcd3d72559bb010eeb2f3aa2a928e12:-1898586613,b65db572019bb0101c295c4191b96000:-1070155390,1a002522b59b7010270d79672f80c36a:-308621017,32fdf38640973010062ec9a4f40158ab:223362859,176cf2c609533010b2b92247cc67a054:1536491080,95783ac2395330100b46cdc4abebcaff:945986308,c91306282d1330101afc3fef7bb7d81a:1819306214,7cb24ee4e713301088a96e39b4715bb4:152308510,56d9346c4713301022ff2614971ea93e:-795440386,cf69f06ce4133010955cee1f8eaf221b:168586718,ef88382c6a133010b866e7036a06a477:1492310678,b7a77ce80a13301062d49897d87db87d:1752310036,61d6b8a8031330109fd3d98c1fc0669b:-1524322616,82b6f4a828133010103b0fa5030118ca:-111154423,efc57828051330105c330753b9d148f7:-21456700,584230e4371330106ca96055ce964d4f:-903538587,6f234cdc96d3b010f52b7146cfa0ac5f:-1699145338,59e248dcb6d3b010a3da9804b3e785c8:-1257374104,5982489c83d3b010c07dd0ccd773c92f:1574920774,c3f8640287c3301078418d037ea8f162:-1092755655,54f8640243c33010527b9019dc67afe5:-1829005818,89c660cefc833010e1efdf4f630b86ca:-1092755655,2003108202833010a13f0736f9b93abc:1135659335,e0b6b7b1a44330101cd6ea4a1685a6b2:-1440492486,7c9092d1a507301057f5dd4febc0eda4:-529136509,a83bc2ddb5c33010e14f7eb6cbc8c7c0:1439796642,5df98ed908c33010b7b6888e8db06f11:683019751,8a3dd11db70330109778b7e8296d57da:2041827043,1c6abb49833ef0104a69e875420b0ea1:-128360622,6a0fc6f0b17ab010ef629262282e9eec:-2031035664,ab78f1f898f6b010aa9ed1e1cd4c5033:417706137,2b47fd38b4f6b01034dc3b6cb689ac04:-1697339900,f3556df09236b0104490e62052796700:1108865416,42a1457c5b72b0103db71e88c8c34ee5:1978458313,ea190c6c0db270106c61fb69bbb7535e:2100506055,df17cc2cacb27010eb0ca685685febc3:1646021288,e5d6406c9cb270109db49da6afec21a0:1942332308,6c144ce4a0b27010ef404d5972f6b648:2122852277,d235bf14f6727010974d5bf124542fbc:-1481649901,9d57acd0f33a30109f5694310b3b2aac:-735139069,bcb6ec502a3a3010b4963bf16fddbbf4:-469637787,96d2785c50fa3010f8483df041c01852:609175144,bc21ec5ca0ba30105acec1d1eeb28b80:2078112843,155f141c6cba301022a4b93f0928aade:257341964,279d1c98deba30105c91dd6285c70c2a:-540670285,c9aa5c184fba301093cb5a24f9e6d9ee:-741020604,e5be0cd82f7a3010ba9030d60bbf9b0e:609175144,af9e0cd8b07a30107c152560617d9607:1204665161,fcfac0dc473a3010c871b8ffd6f9c6a5:609175144,b467bb88f13a301092764e50d53fe404:-999583335,3047fb48123a3010a32607330908995a:1810696679,868077043d3a3010d95b72a42515e59c:1571743639,ea0fe304523a301029fb235fe50b4283:1386541866,8f67ea6e5b667010caa0eff34a3bb90a:-337004886,6e3bb09a9566301010e431a958401cc0:-1432732839,4bca7c5a1266301040e158f4a4c6aeb5:-1693472824,6f3f2812f866301081c4f4e04cbffac7:-1961699686,986b951ef162f010afedd87295f3d9e2:-1657651647,1ce08056efa6701055317a038cb1bb1c:-753912480,ae60081681a6701076035be5ba58bc64:879956044,71abbfce9b667010b329925ad4fa5492:-753912480,6a30848e67e6301023d7bad6fccd21e6:1357902510,7fbf77753ae63010b05c2f4443b39d90:-106127666,73f68fb1f4a23010f17a74b39347d71b:-1192838577,e9ed98b06aeab010f2d376a5e7eb26fc:-1741289099,5c9494b8caaab010ae336c27ef2bd174:-1428858726,28f3d4f8f1aab0102d5e3a0124905961:1597372647,289294f4d6aab0104831b045a34de61a:-1885965673,96f800b066aab010120ba4edbefbb3fc:-1306340945,0696ccfc6f6ab010a2a60ac42dce78e4:909551955,86e440bc5e6ab010289c2d05bb2cb257:1831386267,4544047c096ab01010cf810c2053fe49:1955700795,c8b000b8ed6ab010efede6eab0700130:196342581,779cbf64fd6ab010a74daaf66847ffa8:-909264573,3b642fa02d2ab0108ae5ed00143eb5b8:831465539,2a616320702ab0108f9e0c1bfd1c4cb8:908832395,902f17ac8be6b0100a1f98d3e5cb96fd:2103617842,038e9b2c46e6b01068f6f77a305d048d:820341603,f6ed1f2cc2e6b01084ea258c460b73b8:-1053660763,7e5d932c5ae6b010787b6c4aa041d448:1503083912,26ec97e897e6b01042e89a51b778e5d4:-1680039937,bd3cd3e8c7e6b010e80acaec246282e2:1479628443,82cbdfa84ce6b010f30194b0c5a6e234:140831669,503b13683fe6b0105021760502891cd5:1218422012,e59a936807e6b010b83a28e09539d521:-1970176606,cde95fa440e6b0100164bc0822dfc39b:291405238,746857a4a1e6b0101e86b44fe9ce8c21:-1096180481,74465be01be6b01073ac123499fccfa7:-1149117798,bff8e6a010a2b010897dd03102d5be3e:1760433912,dd18ea9438a67010a00df00b35d28726:-1113892285,ca47a65400a67010e0b51002a31c211e:-1731812242,aa15a2d0b6a670100f9491b5a511b512:-1113892285,20e32690eda67010a913129c55013a25:-259256387,34c2aa500da67010b7fcf88369f0697e:-1088867964,1e8dda1c3e667010164612216b065794:182193132,22d06448c4a23010c9de5c082b10b1dd:1629177159,41ffecb9efd67010d36d08dafaea7124:-189964459,85c17e9d42123010a702912556fbb28a:-515308416,6f11b29df9123010bd55eb13a540cbd6:943193310,04df6a1d91123010f31c210dcbe1d0c4:1347981817,280fead99e12301051874ee9acfb8f52:1846283563,c54c2a59da12301003d6ec47002900e1:697707316,d52aee19c4123010fa7f37cd8abe7df7:744489361,e6dd0af77ec630109b3e8b7ccdc1f655:1972066715,51cda01f3d023010d0f6f7975544d30a:755052498,e9ec549fca86301030fc8d6bc62fefcb:-1601505590,fc6e51c02e4eb01081816303f4f5b35f:-485817654,484b1980704eb010025502f0b4f24a3f:-637446528,13a99d00214eb010727d05313d0a6bee:-926565806,aee89d00f14eb0104df7b563da17512d:1199763336,692795cc6f0eb01076603aea12530d16:-722640811,1116194ca50eb010760323cb1768b046:1445202241,9ec49588580eb0104515280f28bc3396:-676278436,c6f3d50c5f0eb010d46475a5d0bdd237:-428046086,5e8351c8320eb0109b98e8c14a767545:-676278436,fabd81c4280eb0107eb88f8bcca6abc1:92481272,a21d4184420eb010312b3f25f564ca0d:1641588777,740ef813c071301040b9d5a19c2a5778:965154148,8919385b02313010e6617960568b74b0:-656242568,043cb8bcf33530101795902dd431130e:-37125417,6a41a83c20f13010d4390b25d4362f45:1882565586,04d66a826b8970d037a50e2af53e4f63:-263418346,287f4daf52fc38904c0ce58bd8d6db31:-1972492267,fd8f55df60ec3450be9e0670b17dea6f:-1089784280,cb657d4f83203450a39ecbbebfb6545d:1855889029,39ffa50fbe2034500183a69cfc9f3d38:675865780,eb4fad4bdc203450d32ab066b8f414d6:-145320,ca9e40cbb0e8b050a91c6bb870133aa1:-1564505109,819880cb4fe8b0506a36ab3d03a45012:-980227924,0808cc8bbfe8b05058f8be3935c6e21e:-107280755,b354c4c793e8b050261674f2e7436b06:-1280030095,82d7fb7e03a8b05061b7a8d7ddcccb1e:971006014,75bb2c768160b050337d0be2e0336346:-416246454,663be8769a60b0509265658265e2d29f:-631126268,21a4043667ec7050ec9cbcd0614357ac:971006014,70b24cb203ec7050273cb5d21912cfaf:2087361470,7e7e23a6cf2c7050289d86599b32489b:-58143771,63ebabe22f2c70504e57051d3f220424:1926235155,4dce176a3ce8705049ec9e5f440516f6:117118160,0a8c5be6d0e87050b2a476fc1b889060:764453364,8f8bd7a205e8705077e16fc1506a1922:246420286,d32b97e28ee87050f693c441d90267c8:1553923556,9267f21246ac305003d78f2f77450677:1926235155,a6fe72525d15301094c70dc3494bd55c:-464631680,dbdcbe5e87d130106000776b7b230013:-1226051487,ae5cf69ebfd13010b8b1d1be23880752:-1992266383,2a79beda97d13010c7ff92236c222007:-873113727,8948be1a4ed1301041eafa1536ac041d:-103414810,2fa9391eff11301033caf61da0da799e:-894058496,95a839dae51130108764f203389908b6:2054890175,737335967f1130108971cafcb57e2b44:-894058496,56c23d56ce113010d502ac04adfe74e1:1633662140,5c72b5160c113010084336b761ce4756:643345150,d068c28aa8d530101db948af7ba8239a:-23925033,4b6ac60887d53010d667ab54e1e40a96:1496936310,692e38a7cd09b410a4c27ea2d40c3de0:758876471,6316b3934345b4105b52e021b3d1ef2d:1145551830,e1acf69f4b41b4103bc2faadeb69c5aa:-1218594379,cb44f10ee08d70101e6b9bc11086b740:1937060360,5bb179862c8d7010de1f28345a1ad954:886223797,0b653af957857010e1340cd33a0c7f07:139813638,0894c9f67cc4bc100c567c80812c550b:2001098178,c36830ba1984bc10a2e89675cdd685cd:625685149,bdcc207e3944bc1055b912004ca727c2:1515882983,dea9e8faf944bc102fcd3b1e682ee004:1956979772,9d19e0ba5044bc10f0eb46660fe47b93:44367547,3c10e8b24744bc104400af6037f3bfdc:-1683341727,db7dd432b844bc10c256b67aa91cf523:159223957,ba7c1cfedb04bc109b18fd915ea367b9:-1404471217,064c5cbd16487810fea4a5d0d1041a08:-2114543901,dc303e217ec8f410afe416bc96f7b8d6:-1236778302,ffa0b46d0180f410ec2379171006ae71:-975717981,8662f65d9844b4108fded3b991fdefdf:-1597550291,9e90bed57a44b4109e6823219f6f726b:1764619231,2ec06d118200b410452175fb89dc741c:777528748,09d92bd01cc4f010c858d6fa0dfb8538:-1597550291,76692bd01ac4f010f29568d608ae035e:1123052255,da19e7d0d5c4f0108b1e2af6a63dbda8:1748350576,dc38679096c4f010de5d33002885e038:-2067220712,b23053907e84f010ba3e475cfe3916c6:1742030629,e12336d074c0f010e28317d64725e4db:404209682,9fc28b008c48b010b5f44da85302373f:2093836496,809abdc4aec0b0109314c438c9445c72:1828814501,b426890f16ed24104eb06bd3707f620d:978129698,1f2012869529a010c9ac335fc0212fa2:1863126050,a195fd71462d601042a70b3ed7505b0c:-1094513268,02d145bd1ee56010187d897cc069d50c:-2049120407,aa95abf573716010a7e6596e0aa51eb8:-1119275197,7133335b1bfc60108b68bcd029c486cd:-1248349667,ad066d6a8b40e01070b9868faf802310:414613121,ce9d7546fe0c60103bb117bb05cd58e8:-900399123,583bcc31cb482010cb51f10585932351:-253188850,d8bbfa5857a81410885fe2702decad69:-222451069,6d3836586fa81410b64135110f07845a:1426417438,7f4ea61008a814105bb0623112681f34:-1697781262,5504e7fc67cfe410908e53ec7671373b:1052121482,faf3a7fc0fcfe410fb68e9375f530646:-1572742019,424d66fcbf0fe410461804059ea9b613:1275560152,93d990b4a087e410333a6301e0fce64b:-1053060227,8e89d8740487e410e75a976860acdd1a:1352115786,53c79834a087e4104562b63e9d3b54d1:75220655,c4c61cb0a187e4100e282756ec930771:-532925700,28773f2862c3e410db7742d5f68b0d27:-38544222,a6ecc7641d43e4100c4cfea8b606a5b0:-704917293,522b4720d543e4107bf2ad9dbf5f18e3:1761178894,7df44ad05543a410d97f9cf28b7ce1c4:-671711741,8d8f7910ed43a410371c600297fdd3ef:640932867,542e319c7003a4106e1ecd7d2e2ce8b6:413881848,9c21b114bf03a410066f73f0e0348cb1:-1975784582,f18da98cc4cbe010a2aeaba055114e2e:-1182076052,c3d79dcc8d4be010f518a27f02b38c22:286628835,c65ef52b6f7e6010569c1d2595e62017:1574671229,671284c95395649021e9bf86ae95c6a2:-1798525142,96f7c04f2dc1ec50fc3a3363b63e67ed:-924820790,ee5b0e9271492c500f2ff7042b3798eb:-1072175383,43f7cad242492c507a50cf363869e76b:158209914,544e3b869c812c5049e311e5e78771c5:880644709,ea3b3b06c1812c50c17446a439ecee80:543152726,16b3fb8a0b412c50c6b9c8333d70289c:799518062,23c768c2df41e850105d13d6636dad71:1273575756,6644e80e3201e850241dda3c6626b030:1893419777,a872a40ed901e8505bccf5e575fdc2fe:124208414,fec95846ae01e8506bbc7be81e34d8f4:-1259745400,0ba8900adbcda850a5421575ae395dca:-1411773714,479550863ccda850b4ba436bacf50854:495795212,3bd048c69a8da850bd3c51cf2e80fae9:2127393807,51cb3f71348da850d38e606e29c29d8e:960917161,553ab771618da85013a673b586cf1aaf:1691952765,5c79f731fa8da850c751e360ac5a457a:546903797,7b8877fd144da850dfd5b76b8bba1be5:-1475075701,40567b3dba4da8508faa9532d8f93fea:-2070185505,ffc3bbf9ec4da850bab7e2a06d0d2655:-1186210127,5a723779524da850115e530226b84a21:-1534487010,1a61ff79744da8506413aee9b8c413fe:-776330007,76e866b98189a85052c60df4e09d3703:225862160,0528a2f9fc89a850a011d6d6d973b642:-1653642524,48a923a5a901a8507278819238f09d0a:1107152166,f0e8afa5dc01a85004861d9d2c8ded25:170806457,2b08ef65b501a850815b8a8b099bcdb4:-2007732508,a396e365b301a85076fb5bb21cc1eac4:604286959,321caeed7c4d68502fbe7bc62e60278a:-986715070,ef2baaad944d68500dec54f3cf04dfdd:300070527,bf6a2aad274d6850db439ad45fb558c2:-1303157774,5b79ee2d694d6850acf2b515f99ed9dc:1717411726,a9d8ee2d4b4d685061c0c372939474d4:2042682380,6a57eae9dd4d68500d029c5e05a5aca3:-420916568,b9a66ea9784d6850cae34be1efaa806b:469150966,1c5266e5614d6850aefcdf0a369685d2:-420916568,0f9f1665194d685079511da596dcbadc:-780693086,b4be1a250e4d6850d3e2d17bbfd77e7d:1684617682,324a9a21fe4d6850677892f422253bb1:1004709379,b83cfdfb77bce05069bbbedd0b84aeb6:1202956061,949b3d7f4dbce0501b373fd86ca609bc:-80064605,5d89bdfb65bce0508d30bce0fb6569d2:1329650593,8248f5fb6ebce050555ffefb335dafec:-1404821254,5067f1bbe3bce0506f71c34994c98f2d:-136706052,33467d7bb6bce05014169e39e8b2f93e:1244217713,d83075f3a47ce0500c2cbd975db5e8f2:-136706052,8cbf2dffc63ce05026ac1f6e8803adaf:1949032831,7cb99fb947d4a01025ded59556122db0:1956392330,71786959f29c20100afbad5cf0519894:1749880423,600fdbf54c1ca41014a39381a5569db5:1825285262,0dae74919650641046abe9cc1d934b0a:818346226,e5b9fc9996106410750f9824d39c42cf:-1802695986,01e1f8991c106410f4661de937907bcf:818346226,6b44581520dc241099f5845d41bc253d:-1802695986,04f05c11ffdc2410155ecb261246f57c:818346226,4e390c99999c241036cc8fd5181b9b00:1197657154,4c4740593e9c241005c36088d9c5140e:-652669506,45658c95fb9c24108da15da51d93fcec:1456791420,ce13f455471c20109b52d77a08b63023:1931544952,ce3b738d53582010f38417e9c37e8b45:-343746566,0ed377491958201096074dee92bfd72c:-1889014731,289ea745d45820105735f8d878931067:-752772320,f2bda345b6582010afc35260f6bd0a9b:1931544952,815f5b8589182010f85c7f11e67d4633:896029596,a2959b8d9ed42010547d1078923946e3:1974254498,c3d117c194d42010316e7d239621d3f8:1718431264,1a9b4bc5dc9420108160c0ba16ce1d42:1154873632,158efa4d22542010d706447b6d25f06e:1931544952,1ceac6b0d9dce0106130705a3526bb47:818346226,261e0c011e44a010329ea89750c70bb6:-297495146,f88e8c3ee6279010defe4cb88347daff:-2114596452,d40a40fa0f279010937fd846e9ae02aa:-1072684777,67f7c47ad5279010c1f6061079839670:-1508815645,3a1688f6f12790104a87999160c3551e:-506495686,44917eae4e239010ace87b3881e4b52e:-453292565,9c74216a3c6f50100017cbecab6756ec:1704120742,79b1c59619a3541081ce707d6a8078b9:-757777704,3ef6f7c652af1410037984966db2582b:-1353144863,cc45b3861eaf14105b1407d8790a934e:1691174747,93d0b3c2fcaf14107b0747ec2d9b7728:1994049734,0ccb2b8ecf6f141090370f558d2d9e32:1319516589,80ccf4548fef901004909406734c9e9b:-1419446835,c544a8c89ee3901010c73694e96bd814:-1611725051,2f1b0423b15f945026adc75892cffbcd:-973350525,540bc0ef9d1f9450698d530f74f020d0:1768524489,052dea1e0fdf5410dd3eb285b864e31a:2082993841,80cc7b4aeed754100ae7fba1da99c958:133374141,118cf43988571410f0d775410cbad636:-311151564,647183957f97d010de0799a0c9c09353:-1464483874,59fd7e914197d010b9c80246b5381591:505985574,9ef53e1d3457d010745e68050a3a361b:-1835021188,7e9234787c135c10a29ac76dd12c0c1b:-886866650,443a54a449d31c1026a8889019665367:-972003283,a8f72cf408db5010ce85dd14aed34300:-265393012,94942434e5db501098287674fd1b11ea:390189069,305a0f101b1f10103e76b55d36432238:-803966239,cd37e2273a4b14d00e00c8ea4fc368c8:2083481506,0e49426f4ec714d0599183b88f710c67:-1853716016,0e5206e731c714d0033d11b6f766506f:-1191682670,43b77d2f078714d0c38db37eef69b93b:-1458451042,176e992f934714d07919ef26a5f6c826:-1835565315,ca4959a7b04714d0c7ea4d866703c363:-21776464,373da82b0fc314d056ec0fb088fdef10:-1189115584,2701ee95bc0b9c90334b8a3e82595306:-21776464,a9406e954a0b9c90ee9d9fa6b60c8f99:-487855012,c03f52950e0b9c90cbc28f1913741e43:-2002468985,8bfd9255e80b9c90c66269795ae07b98:-1781373952,51fc1e91a40b9c90cc46074347625f9d:940757277,65ba1e91410b9c9001c6b95a8858465f:430781602,bbff0299b1c79c90c52f4ca2949e3496:1930685275,c7cd136c287a5c5004fbbb5347b2893e:-978672403,1b68ca087bfad85095d4b515071460f9:1412890268,d8020cd7f32a18501542e492c89227b4:-1784815411,5c4ef3c70e2a18505023d691b958d135:1084107214,ad3b7347f92a18509aa3e286a0786cf2:-111277951,509eca4fede21850189cfd7f365949c3:664959234,ee95067ea3e6d450ebddf0996486c44a:1899846916,705ce53eb6a6d450467e419c8b937ace:-752552378,5e5ba9fa7da6d45061474e110d462b9d:-213033077,dff7e57ab8a6d45002fc5c5e962988c4:1416951758,49f68e62fe6e9450993595f852f20a4d:1318241134,db9f851db0229050d0538ad782511dd2:706123116,d888f899a0ee50508293a6650ba4fef6:327350398,93283c9965ee50507449f5431874b406:-1821556684,54c51cd9456e505023eea5b728f8dece:-1966536315,fdf1e964776edc1089104a23e244ead9:1459432044,276fb820f42edc10227a58f6a959e1db:-1629811561,96df1868f4aadc1086ce8de40a40874d:-975929926,c8acd8a43daadc102b0bd772c46503ff:1937685308,6ae654a0aaaadc1029e9c7faea41cdbf:-1094669477,d6bba1d053e2dc10e1ecb17018d740a6:2008385925,397b29d005e2dc10168eac126eaab390:-2100419,2f63615cfca2dc102eb25a7daaaf2a0a:1669130703,a2d22d1cefa2dc1096c21bfeaeb5171e:-840613039,15c1e1d897a2dc107c779fe741c246e8:1386909292,08ceb32dc61e54109ed8c3c85726f0c0:808682612,0332022d149254105dde4f93ab966bf8:1653264036,7e551fdd56da141085e9207e2a9b87ae:1324719197,ea73df1da0da1410b7ebe4e1a9c401bc:544689539,4d6ecfd928da1410d51c2dcc4756c67b:-522283268,67dd4b19bbda14100118806d4251dc56:-668770748,ef0887dd8c9a1410654461fc906f4215:-1490220843,82e8ba154e5a1410f589a1f824fc6aef:423898695,f2ce4ed1da5a1410190b0c8e8e660b4b:-1383971186,1f914e994f1a14104bae255f59bbc4ca:-1770010683,6327b055a956141053d2d8565f66a72c:1653264036,34558405751ad01003b3dfdee4d0df15:-1589461900,788f6f3401d6d0100852af66f704f761:918778182,181eda98761e5010b2c337b2ae57cb3b:1857624514,f0d92e003fde1010c6abde10f5f07e43:1996722411,82a5e984dd1e10107d82d965b18f1eae:-1143426329,223431d89db19010a4222adb0e2b9e67:-786280282,cdde615474b1901046e194a50f5c2c58:-1381902805,665fcd103cbd501055880a66e20c36e5:-20109215,64810b42ef5814109ea4d7cc4b94bfb8:634624677,2414b7413fd340100ab96503ad3b9043:1243306487,f90b4665057e0010f82f440f315e14d6:895557797,7e9a8a25ac7e0010108dbe64c495c61c:-240350596,091b78b66e2a08101d6d7b394bcc3c23:962085174,7ace8a2566f944108f2fbe7b6b4a8f47:-619924775,488d02e110f944100e0c10f37707451d:1436885151,25e698323c26c4102bee78fcb4ad32ef:-489282716,b6d69832c626c410e399918034141070:1489889436,e8fa48f6fde2c4100fdcd326b7c50319:-188913381,f4a7cb39f2da4c90535f3e4b459355d7:1489889436,8027cb3dadda4c90f05ddab210c7dbff:1400837256,d55c4ff0c6de8890dd45017934b5a404:98391846,845817a6df86c0904d3fc8f65e7e68b2:-1490974487,dd3e0bd12ececc506edc475b09c5a304:234685501,0d6d0391a7cecc505d9ec6630f0b9bbf:-187821833,e99b275b75d10010d9ac45e21dde275f:-773442937,737e74ee38dd4c100a3e164153202439:-773442937,4d8cc49d4d3b3300642ae47270967437:-196710761,66d1b049bf673300a2a00b6ac7858c8f:-606098479,f8ff1ef87ea33300a621c627b365b32a:-23074358,29cf8630f5a333004ebcedf484ef7da7:160107851,226745c109df3300058004ef4329662a:1287672369,4f1bceb73f723300fa88fd5f6fb3009b:1350944049,394b9eb2b5323300623f55faa66c4c4b:164513330,71995e32ea323300f11b8f37500d71f6:2003884812,a285315819b23300cc8d214fbbea6a85:1057742611,04a9a1506bb23300d1b4f99cd9f9aebc:-341199199,cf7e3d219ed2330016dbf489fd36512a:364011551,26daf3d0115b3300d7df0a1b6b499550:2100539652,c4b62a8e45833300c16c80827a0bddb5:-2106673940,51f5354e210333007d826a13b7233bae:-1660207223,188d8124770733002b1ce730932fd34c:-585697185,921b85a09807330016a904b0d3082cc6:-1717599105,27c341ac42c33300c1878076156cba9c:-1848319183,afd8ec28ac8333005317535b27652df6:-1862363404,a050073389f23300bc9bc30da69d915d:116100837,44b33a3734b23300bf5c3983878d35bb:-1901038290,4152f6dc851b33006c373ac56a3c2e79:-105921103,13f989f3a8763300c399af02bc036190:922083935,e3a38dbff8363300e9f74f2bcec3ef75:1049050207,8dbeb50cf4f237006308a5ee1e3576d7:837693920,a3a9414732aa7300517a6cfbe4d0f443:-1694841871,736841476daa7300df223627e81a422d:-455925086,7a28a8cf332a73007a7b0909479ac499:-1642389155,0fd6a08b872a7300f9e52681d837360d:1608356289,45bc1b5293263300aae802582ec50c42:1288712297,8cbd17d81402b30094b6c16e215cfb6f:671347422,95ad93d85c02b3009d7da25f84f6fd80:2079983789,ea7d57984f02b300eaf8cf0faafe94a7:-1913613458,0d2d9f589902b300ec0e2937e4a3e889:-613689569,f8e5be387db133009d0b755c13ad734c:1431244435,5fa5b27888b13300720322b21882f59f:1997697946,e515beb4bdb13300829f33cbc4048368:1431244435,d5053e38b8b13300bab751260a671e8f:-657735429,ecf4beb473b133002bcf5c564434c862:-79630822,179476b4fdb133000d731b614db85fbf:-1192774096,6ad1f6b4b2b13300d7c8c0ee6ea63cbe:485210149,ba0a6e27928933000a4e2fe32d914015:-2137698367,68e9e227a889330092302a8490680237:146338070,0889a227788933000c5cabc625e76f08:-956749601,8b39e2273f89330032cd047a57299611:-930249815,8aa8eae3a58933003eae4bb76ee97178:-368883869,50882ee361893300181f09206ae7b196:224801338,9138a6a33c89330056496dc125c69000:-930249815,42c4a623d489330063dbdf788883b81a:224801338,51c3e223d48933008dc6c5ffabc95687:-1249303010,d5a32a2320893300fe5a564075394510:-563858118,5fe75fd5e7f8f3006e0f24eb7a5c330b:1940707134,0b741b55abf8f30050d7f7f0108e4431:-916866881,b9245315c4f8f3000c0b0636bc813459:1940707134,286260248f347300b0cb116f22d5d9c0:-340599730,cbd5660089b033009ca9fbdb3f981550:242071225,38c4220025b03300549412e860594238:1248019066,b2f78345d938330022e8163616318bfb:-916866881,574e22c114f43300474f50d862c2e80f:740336665,430beca61560330049573282a2151f4a:1045069710,33c018ea0e20330036d2c9aa0c6c6eb1:-449477038,2a7516f516ac330007929f7f4e7b4cbf:-1728002532,4d9695a59da03300454632bd250dbe0e:-686833060,17afcd21cba0330007eeeb0c05a3bdf9:-5734586,3f9e3ce124603300ed9e2fe5bfafda18:580628307,9d9dc1a45c203300148ae094fbecbf95:1105464653</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_dictionary_x_nuta2_nutanix_ca_calm_plugin_configuration_select_service_portal</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update&gt;&lt;sys_dictionary action="INSERT_OR_UPDATE" element="select_service_portal" table="x_nuta2_nutanix_ca_calm_plugin_configuration"&gt;&lt;active&gt;true&lt;/active&gt;&lt;array&gt;false&lt;/array&gt;&lt;array_denormalized&gt;false&lt;/array_denormalized&gt;&lt;attributes/&gt;&lt;audit&gt;false&lt;/audit&gt;&lt;calculation&gt;&lt;![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]&gt;&lt;/calculation&gt;&lt;choice/&gt;&lt;choice_field/&gt;&lt;choice_table/&gt;&lt;column_label&gt;Enable Service Portal&lt;/column_label&gt;&lt;comments/&gt;&lt;create_roles/&gt;&lt;default_value/&gt;&lt;defaultsort/&gt;&lt;delete_roles/&gt;&lt;dependent/&gt;&lt;dependent_on_field/&gt;&lt;display&gt;false&lt;/display&gt;&lt;dynamic_creation&gt;false&lt;/dynamic_creation&gt;&lt;dynamic_creation_script/&gt;&lt;dynamic_default_value/&gt;&lt;dynamic_ref_qual/&gt;&lt;element&gt;select_service_portal&lt;/element&gt;&lt;element_reference&gt;false&lt;/element_reference&gt;&lt;foreign_database/&gt;&lt;function_definition/&gt;&lt;function_field&gt;false&lt;/function_field&gt;&lt;internal_type display_value=""&gt;boolean&lt;/internal_type&gt;&lt;mandatory&gt;false&lt;/mandatory&gt;&lt;max_length&gt;40&lt;/max_length&gt;&lt;name&gt;x_nuta2_nutanix_ca_calm_plugin_configuration&lt;/name&gt;&lt;next_element/&gt;&lt;primary&gt;false&lt;/primary&gt;&lt;read_only&gt;false&lt;/read_only&gt;&lt;read_roles/&gt;&lt;reference/&gt;&lt;reference_cascade_rule/&gt;&lt;reference_floats&gt;false&lt;/reference_floats&gt;&lt;reference_key/&gt;&lt;reference_qual/&gt;&lt;reference_qual_condition/&gt;&lt;reference_type/&gt;&lt;sizeclass/&gt;&lt;spell_check&gt;false&lt;/spell_check&gt;&lt;staged&gt;false&lt;/staged&gt;&lt;sys_class_name&gt;sys_dictionary&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2021-08-11 11:59:53&lt;/sys_created_on&gt;&lt;sys_id&gt;c74d42931bb1301098a61f4a234bcb4f&lt;/sys_id&gt;&lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;&lt;sys_name&gt;Enable Service Portal&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_dictionary_x_nuta2_nutanix_ca_calm_plugin_configuration_select_service_portal&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2022-01-24 12:04:25&lt;/sys_updated_on&gt;&lt;table_reference&gt;false&lt;/table_reference&gt;&lt;text_index&gt;false&lt;/text_index&gt;&lt;unique&gt;false&lt;/unique&gt;&lt;use_dependent_field&gt;false&lt;/use_dependent_field&gt;&lt;use_dynamic_default&gt;false&lt;/use_dynamic_default&gt;&lt;use_reference_qualifier&gt;simple&lt;/use_reference_qualifier&gt;&lt;virtual&gt;false&lt;/virtual&gt;&lt;widget/&gt;&lt;write_roles/&gt;&lt;xml_view&gt;false&lt;/xml_view&gt;&lt;/sys_dictionary&gt;&lt;/record_update&gt;</payload>
<payload_hash>1973402299</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>94021aa32fd50110e49924c62799b6d0</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb91c1f890000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table>x_nuta2_nutanix_ca_calm_plugin_configuration</table>
<target_name>Plugin Configuration.Enable Service Portal</target_name>
<type>Dictionary</type>
<update_domain>global</update_domain>
<update_guid>535641b49e59c1109533104994933930</update_guid>
<update_guid_history>535641b49e59c1109533104994933930:1973402299,a26d46932cb13010f1c89c7df8088bdb:-488881491,666d4693e0b13010d82f642bab3adbc0:-488881491</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_7c3789f137f1e300fdfc097973990e32</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Nutanix_ImportCredentials&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Nutanix_ImportCredentials&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Nutanix_ImportCredentials = Class.create();
Nutanix_ImportCredentials.prototype = {
    initialize: function() {
		this.appUtil = new Nutanix_Calm_Utils();
		this.logger = new Nutanix_Calm_Logger();
		this.start = 51000;
		this.end = 70000;
		this.order = 51001;
    },	
	
	
	ProcessingCredentials : function(current){
		try{	
			var parseJson;
			var isDefaultUUID;
			var catSysId;
			var credentialJSON;
			if(current.payload){
				 credentialJSON = this.appUtil.parse(current.payload+'');
			}else
				return;
			if(current.parameter+''){
				parseJson = this.appUtil.parse(current.parameter+'');
				if(parseJson.type == "blueprint"){
					isDefaultUUID = parseJson.default_credential_local_reference.uuid+"";
			}
				catSysId = parseJson.sys_id+'';
			}
			this.logger.debug("Inside Nutanix_ImportCredentials.ProcessingCredentials"+parseJson.type);
			this._createContainerStartandEnd( 'Credentials', catSysId, this.start, this.end, 'normal' );
			if(parseJson.type == "blueprint")
				this._createField('credential_mapping', false, catSysId, '51001', '', 7); //Credential Name
			
			this.order = this.start + 2;
			
			for (var i in credentialJSON){
				
				var credential = credentialJSON[i];
				
				var insertData = new GlideRecord(this.appUtil.configuration.table.Credentials+'');
				insertData.addEncodedQuery('catalog_item=' + catSysId + '^uuid=' + credential.uuid);
				insertData.query();
				
				if(insertData.next()){

					insertData.catalog_item = catSysId;
					insertData.username = credential.username+'';
					insertData.description = credential.description+'';
					insertData.state = credential.state+'';
					insertData.uuid = credential.uuid+'';
					insertData.is_secret_modified = (credential.secret &amp;&amp; credential.secret.attrs &amp;&amp; credential.secret.attrs.is_secret_modified) ? credential.secret.attrs.is_secret_modified+'' : "";
					insertData.username_editable = (credential.editables &amp;&amp; credential.editables.username) ? credential.editables.username+'':false;
					insertData.secret_editable = (credential.editables &amp;&amp; credential.editables.secret) ? credential.editables.secret+'':false;
					insertData.passphrase_editable = (credential.editables &amp;&amp; credential.editables.passphrase) ? credential.editables.passphrase+'':false;
					insertData.type = credential.type+'';
					insertData.name = credential.name+'';
					
					insertData.username_isdisabled = (credential.editables &amp;&amp; credential.editables.username &amp;&amp; credential.editables.username+'' == 'true') ? false : true;
					insertData.secret_isdisabled = false;
					insertData.ssh_private_key_isdisabled = false;
					insertData.passphrase_isdisabled = false;
					if(parseJson.type == "blueprint")
						insertData.is_default = (credential.uuid == isDefaultUUID)?true:false;

					insertData.update();
					
				}else{
					insertData.initialize();
					insertData.catalog_item = catSysId;
					insertData.username = credential.username+'';
					insertData.description = credential.description+'';
					insertData.state = credential.state+'';
					insertData.uuid = credential.uuid+'';
					insertData.is_secret_modified = (credential.secret &amp;&amp; credential.secret.attrs &amp;&amp; credential.secret.attrs.is_secret_modified) ? credential.secret.attrs.is_secret_modified+'' : "";
					insertData.username_editable = (credential.editables &amp;&amp; credential.editables.username) ? credential.editables.username+'':false;
					insertData.secret_editable = (credential.editables &amp;&amp; credential.editables.secret) ? credential.editables.secret+'':false;
					insertData.passphrase_editable = (credential.editables &amp;&amp; credential.editables.passphrase) ? credential.editables.passphrase+'':false;
					insertData.type = credential.type+'';
					insertData.name = credential.name+'';
					
					insertData.username_isdisabled = (credential.editables &amp;&amp; credential.editables.username &amp;&amp; credential.editables.username+'' == 'true') ? false : true;
					insertData.secret_isdisabled = false;
					insertData.ssh_private_key_isdisabled = false;
					insertData.passphrase_isdisabled = false;
					if(parseJson.type == "blueprint")
						insertData.is_default = (credential.uuid == isDefaultUUID)?true:false;

					insertData.insert();	
					
					this._createCredentialsField(credential, catSysId);
					
				}
				
			}
			
		} catch(e) {
			this.logger.error("Nutanix_ImportCredentials.ProcessingCredentials :- Exception caught during processing of Credentials. Error :- "+e);
		}
	},
	
	processEnvCredentials : function(current){
		try{			
			this.logger.debug("Inside Nutanix_ImportCredentials.processEnvCredentials");
			
			var credentialJSON = this.appUtil.parse(current.payload+'');
			var relatedJSON = this.appUtil.parse(current.parameter+'');
			
			var projectSysId = relatedJSON.projectSysId+'';
			var envSysId = relatedJSON.envSysId+"";
			
			//this._createContainerStartandEnd( 'Credentials', catSysId, this.start, this.end, 'normal' );
			
// 			this.order = this.start + 2;
			
			for (var i in credentialJSON){
				
				var credential = credentialJSON[i];
				
				var insertData = new GlideRecord(this.appUtil.configuration.table.Credentials+'');
				//insertData.addEncodedQuery('catalog_item=' + catSysId + '^uuid=' + credential.uuid);
				insertData.addQuery('uuid',credential.uuid);
				insertData.addEncodedQuery('project=' + projectSysId +'^environment='+ envSysId +'^uuid=' + credential.uuid);
				insertData.query();
				
				if(insertData.next()){

					insertData.project = projectSysId;
					insertData.environment = envSysId;
					insertData.username = credential.username+'';
					insertData.description = credential.description+'';
					insertData.state = credential.state+'';
					insertData.uuid = credential.uuid+'';
					insertData.is_secret_modified = (credential.secret &amp;&amp; credential.secret.attrs &amp;&amp; credential.secret.attrs.is_secret_modified) ? credential.secret.attrs.is_secret_modified+'' : "";
					insertData.username_editable = (credential.editables &amp;&amp; credential.editables.username) ? credential.editables.username+'':false;
					insertData.secret_editable = (credential.editables &amp;&amp; credential.editables.secret) ? credential.editables.secret+'':false;
					insertData.passphrase_editable = (credential.editables &amp;&amp; credential.editables.passphrase) ? credential.editables.passphrase+'':false;
					insertData.type = credential.type+'';
					insertData.name = credential.name+'';
					
					insertData.username_isdisabled = (credential.editables &amp;&amp; credential.editables.username &amp;&amp; credential.editables.username+'' == 'true') ? false : true;
					insertData.secret_isdisabled = false;
					insertData.ssh_private_key_isdisabled = false;
					insertData.passphrase_isdisabled = false;

					//insertData.is_default = (credential.uuid == isDefaultUUID)?true:false;

					insertData.update();
					
				}else{
					insertData.initialize();
					insertData.project = projectSysId;
					insertData.environment = envSysId;
					insertData.username = credential.username+'';
					insertData.description = credential.description+'';
					insertData.state = credential.state+'';
					insertData.uuid = credential.uuid+'';
					insertData.is_secret_modified = (credential.secret &amp;&amp; credential.secret.attrs &amp;&amp; credential.secret.attrs.is_secret_modified) ? credential.secret.attrs.is_secret_modified+'' : "";
					insertData.username_editable = (credential.editables &amp;&amp; credential.editables.username)?credential.editables.username+'':false;
					insertData.secret_editable = (credential.editables &amp;&amp; credential.editables.secret)?credential.editables.secret+'':false;
					insertData.passphrase_editable = (credential.editables &amp;&amp; credential.editables.passphrase) ? credential.editables.passphrase+'':false;
					insertData.type = credential.type+'';
					insertData.name = credential.name+'';

					insertData.username_isdisabled = (credential.editables &amp;&amp; credential.editables.username &amp;&amp; credential.editables.username+'' == 'true') ? false : true;
					insertData.secret_isdisabled = false;
					insertData.ssh_private_key_isdisabled = false;
					insertData.passphrase_isdisabled = false;
					
					//insertData.is_default = (credential.uuid == isDefaultUUID)?true:false;

					insertData.insert();	
					
					//this._createCredentialsField(credential, catSysId);
					
				}
				
			}
			
		} catch(e) {
			this.logger.error("Nutanix_ImportCredentials.ProcessingCredentials :- Exception caught during processing of Environment Credentials. Error :- "+e);
		}
	},
	
	_createCredentialsField: function(credential, catSysID){
		try{
			this.logger.debug("Inside Nutanix_ImportCredentials._createCredentialsField");
			this._createContainerStartandEnd( credential.name, catSysID, this.order+1, this.order+10, 'normal', credential.name );

			this._createField('credential_name', credential.name, catSysID, this.order+3, credential.name+''); //Credential Name
			this._createField('credential_reference', '', catSysID, this.order+4, credential.name+'', 5); //Credential Reference
			this._createField('username', credential.username, catSysID, this.order+5, credential.name+''); //Username

			var typeValue = '';

			if(credential.type+'' == 'KEY'){
				typeValue = 'SSH Private Key';
			} else{
				typeValue = 'Password';
			}

			this._createField('secret_type', typeValue, catSysID, this.order+6, credential.name+''); //Secret Type
			this._createField('ssh_private_key', '', catSysID, this.order+7, credential.name+'', 2); //SSH Private Key
			this._createField('passphrase', '', catSysID, this.order+8, credential.name+'', 25); //Passphrase
			this._createField('password', '', catSysID, this.order+9, credential.name+'', 25); //password

			//this._createField('is_Default', , cat_sycatSysIDsID, this.order+8, credential.name+''); //password

			this.order = this.order + 11;
		} catch(e) {
			this.logger.error("Nutanix_ImportCredentials._createCredentialsField :- Exception caught while creating Credential fields. Error :- "+e);
		}
	},
	
	_createField: function( name, value, catSysID, order, serviceName, type){//, profileUUID, serviceSysId, categorySysId, editable){
		
		try{
			this.logger.debug("Inside Nutanix_ImportCredentials._createField");
			var variable = new GlideRecord(this.appUtil.configuration.table.varaiblesTable+'');
			variable.addQuery('name', serviceName+'_'+name+'');
			variable.addQuery('cat_item', catSysID+'');
			variable.query();
			var column_fields={};
			if(variable.next()){
				column_fields.variable_width = '50';
				var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable(variable.sys_id, column_fields, 'update');
			} else {
				column_fields={};
				column_fields.type = (type)?type+'':'6';
				column_fields.cat_item = catSysID;
				column_fields.active = true;
				column_fields.question_text = this._toTitleCase(name.replace(/_/g, ' '));//'profile_configuration';
				column_fields.name = (serviceName+'_'+name+'').toLowerCase().replace(/ /g, '_'	);
				column_fields.default_value = value;
				column_fields.variable_width = '50';
				column_fields.order = order;
				var fieldSysd =new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');
				//this._insertCatalogVariableProperties(profileUUID, value, editable, fieldSysd, catSysID, serviceSysId, categorySysId);			
			}
		} catch(e) {
			this.logger.error("Nutanix_ImportCredentials._createField :- Exception caught during field creation in item_option_new table. Error :- "+e);
		}
	},
	
	_createContainerStartandEnd: function( name, catSysID, start, end, type, serviceName ){
		try{
			
			this.logger.debug("Inside Nutanix_CreateCatalogVariables._createContainerStartandEnd");
			
			serviceName = (serviceName)?serviceName+'_':'';
			
			var startSysId = '';
			
			var variable = new GlideRecord(this.appUtil.configuration.table.varaiblesTable+'');
			variable.addQuery('name', (serviceName+name+'').toLowerCase().replace(/ /g, '_'	));
			variable.addQuery('cat_item', catSysID+'');
			variable.addQuery('order', start);
			variable.query();
			var column_fields={};
			if(variable.next()){
				
				startSysId = variable.sys_id;
				column_fields.layout = (type)?type:'2across';
				var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable(variable.sys_id, column_fields, 'update');
			} else {
				column_fields={};
				column_fields.type = '19';
				column_fields.display_title = 'true';
				column_fields.cat_item = catSysID;
				column_fields.active = 'true';
				column_fields.order = start;
				column_fields.question_text = name;
				column_fields.name = (serviceName+name+'').toLowerCase().replace(/ /g, '_'	); //(name+((serviceName)?serviceName:'')).toLowerCase().replace(/ /g, '_'	);//'profile_configuration';
				column_fields.layout = (type)?type:'2across';
				var startSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');
				
				column_fields={};
				column_fields.type = '20';
				column_fields.cat_item = catSysID;
				column_fields.active = 'true';
				column_fields.order = end;
				var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');
			}
			
			return startSysId;
			
		}catch(e){
			this.logger.error("Error Nutanix_CreateCatalogVariables._createContainerStartandEnd: Error:- "+e);
		}
	},
	
	/*fetchCredentialsList: function(catSysID){
		try{
			this.logger.debug("Inside Nutanix_ImportCredentials.fetchCredentialsList");
			var gr = new GlideRecord(this.appUtil.configuration.table.Credentials+'');
			gr.addEncodedQuery('catalog_item='+catSysID+'^environmentISEMPTY^projectISEMPTY');
			gr.query();

			var ans = {};

			var i =0;

			while(gr.next()){

				ans[i] = {};

				ans[i].name = gr.name+'';
				ans[i].type = gr.type+'';
				ans[i].actual_name = gr.actual_name+'';

				ans[i].username = {
					'value': gr.username+'',
					'readOnly': (gr.username_editable+''+''=='true')?false:true
				};

				if(gr.type+'' == 'KEY'){
					ans[i].ssh_private_key = {
						'value': gr.ssh_private_key+'',
						'readOnly': (gr.secret_editable+''=='true')?false:true
					};
					ans[i].passphrase = {
						'value': gr.passphrase+'',
						'readOnly': (gr.passphrase_editable+''=='true')?false:true
					};
				}else{
					ans[i].password = {
						'value': gr.password+'',
						'readOnly': (gr.secret_editable+''=='true')?false:true
					};
				}		
				
				ans[i].credential_reference = {
					"name": gr.credential_reference.name+'',
					"uuid": gr.credential_reference.uuid+'',
					"readOnly": (gr.runtime+''=='true')?false:true
				};
				
				i++;
			}
			
			

			return JSON.stringify(ans);
		} catch(e) {
			this.logger.debug("Nutanix_ImportCredentials.fetchCredentialsList :- Exception caught while fetching the the list of credentials. Error :- "+e);
			this.logger.error("Exception caught while fetching the the list of credentials. Error :- "+e);
		}
	},*/
	fetchCredentialsList: function(catSysID, projectUUID, envUUID){
		try{
			this.logger.debug("Inside Nutanix_ImportCredentials.fetchCredentialsList"+projectUUID+envUUID);
			var gr = new GlideRecord(this.appUtil.configuration.table.Credentials+'');
			gr.addEncodedQuery('catalog_item='+catSysID+'^environmentISEMPTY^projectISEMPTY');
			gr.query();
			var ans = {};
			var i =0;
			while(gr.next()){

				ans[i] = {};

				ans[i].name = gr.name+'';
				ans[i].type = gr.type+'';
				ans[i].actual_name = gr.actual_name+'';

				ans[i].username = {
					'value': gr.username+'',
					'readOnly': (gr.username_editable+''+''=='true')?false:true
				};

				if(gr.type+'' == 'KEY'){
					ans[i].ssh_private_key = {
						'value': gr.ssh_private_key+'',
						'readOnly': (gr.secret_editable+''=='true')?false:true
					};
					ans[i].passphrase = {
						'value': gr.passphrase+'',
						'readOnly': (gr.passphrase_editable+''=='true')?false:true
					};
				}else{
					ans[i].password = {
						'value': gr.password+'',
						'readOnly': (gr.secret_editable+''=='true')?false:true
					};
				}
				var arr = [];
				if(gr.runtime+''=='false') {
					arr.push({
						"name": gr.credential_reference.name+'',
						"uuid": gr.credential_reference.uuid+'',
						"readOnly": false
					});
					ans[i].credential_reference = arr;
				}
			
				else if(gr.runtime+''=='true') {
					var project_array = projectUUID.split(',');
					var env_array = envUUID.split(',');
					var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_credential');
					for (var j = 0; j &lt;= project_array.length; j++) {
						if (j == 0)
							var gsr = gr.addQuery('project.uuid', project_array[j] + '');
						else
							gsr.addOrCondition('project.uuid', project_array[j] + '');
					}
					gr.query();
					while (gr.next()) {
						if(env_array.indexOf(gr.environment.uuid + '')!=-1)
							arr.push({
								"name": gr.name + '',
								"uuid": gr.uuid + '',
								"readOnly": true
							});
					}
					ans[i].credential_reference = arr;
				}
				i++;
			}

			return JSON.stringify(ans);
		} catch(e) {
			this.logger.error("Nutanix_ImportCredentials.fetchCredentialsList :- Exception caught while fetching the the list of credentials. Error :- "+e);
		}
	},

	
	fetchMappedCredentialsDetails: function(catSysID){
		try{
			this.logger.debug("Inside Nutanix_ImportCredentials.fetchMappedCredentialsDetails");
			var gr = new GlideRecord(this.appUtil.configuration.table.Credentials+'');
			gr.addEncodedQuery('catalog_item='+catSysID+'^environmentISNOTEMPTY^projectISNOTEMPTY');
			gr.query();

			var ans = {
				'show': false,
				'values': {},
				'hide':[]
			};

			var i =0;

			while(gr.next()){

				ans.values.name = gr.name+'';
				ans.values.type = gr.type+'';
				ans.values.actual_name = gr.actual_name+'';
				
				ans.values.username = {
					'value': gr.username+'',
					'readOnly': (gr.username_editable+''+''=='true')?false:true
				};

				if(gr.type+'' == 'KEY'){
					ans.values.ssh_private_key = {
						'value': gr.ssh_private_key+'',
						'readOnly': (gr.ssh_private_key_editable+''=='true')?false:true
					};
					ans.values.passphrase = {
						'value': gr.passphrase+'',
						'readOnly': (gr.passphrase_editable+''=='true')?false:true
					};
				}else{
					ans.values.password = {
						'value': gr.password+'',
						'readOnly': (gr.secret_editable+''=='true')?false:true
					};
				}													
				i++;
			}
			
			var gr = new GlideRecord(this.appUtil.configuration.table.Credentials+'');
			gr.addEncodedQuery('catalog_item='+catSysID+'^environmentISEMPTY^projectISEMPTY');
			gr.query();
			while(gr.next()){
				ans.hide.push(gr.actual_name+'');
			}
			
			var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties+'');
			gr.addQuery('variable', gs.getProperty('x_nuta2_nutanix_ca.credentials.mapping.variable.sys.id')+'');
			gr.addQuery('catalog_item', catSysID+'');
			gr.query();

			if(gr.next()){
				ans.show = gr.default_value+'';
			}

			return JSON.stringify(ans);
		} catch(e) {
			this.logger.error("Nutanix_ImportCredentials.fetchMappedCredentialsDetails :- Exception caught while fetching the the list of credentials. Error :- "+e);
		}
	},
	
	_toTitleCase: function (str) {
		try{
			this.logger.debug("Inside Nutanix_ImportCredentials._toTitleCase");
			/*str = str.toLowerCase().split(' ');
			for (var i = 0; i &lt; str.length; i++) {
				str[i] = str[i].charAt(0).toUpperCase() + str[i].slice(1);
			}
			return str.join(' ');*/
			return str;
		} catch(e) {
			this.logger.error("Nutanix_ImportCredentials._toTitleCase :- Exception caught while changing case of string to title case. Error :- "+e);
		}
	},
	
	
    type: 'Nutanix_ImportCredentials'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;nikita.kumari&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-11-16 10:06:53&lt;/sys_created_on&gt;&lt;sys_id&gt;7c3789f137f1e300fdfc097973990e32&lt;/sys_id&gt;&lt;sys_mod_count&gt;79&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_ImportCredentials&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;protected&lt;/sys_policy&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_7c3789f137f1e300fdfc097973990e32&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2022-01-18 12:04:56&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>-663326276</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>94021aa32fd50110e49924c62799b6d3</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb91c1f600000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table/>
<target_name>Nutanix_ImportCredentials</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>d0fc4236eacd0510eb471743da3bb254</update_guid>
<update_guid_history>d0fc4236eacd0510eb471743da3bb254:-663326276,a15d2d721b490510df5ba32905f07e5d:-260297264,42a0657a57450510726518a00e3b9346:693283347,523e1df678050510046e9a8085625d17:-103853630,28ba80a6248d81101c65fcd963becc1a:-621021013,e153cce229c981108749e286e6ce5782:1208455063,aaf102e1038101101b17458a3549a50f:-192051851,c9ad756de7410110161b81107a38fb13:-614211628,ba99fd692741011067d55ce55ef849e5:-326347366,92ba6b30d50d011085d344999e42b721:719399662,53d823fc7fc901106736b39abad4ca09:-569927312,d014efb8ebc90110cf5b079307da4001:874411874,9ee0173cb0490110c5a0e46ffcbba4b2:1228870823,686b0b38344901106f60bd1c92fcb7cf:-42314796,fda7faf4738501105ad11c211eb30fd5:1851389940,528aea7c1a450110b0e67922ac493eb4:1730401557,1b228eb0f9410110bcb4c021be2fc3d3:-1342193033,0751c2b0f4410110c01d3010a36f3764:-1343836801,f30e3b866a9730105500fac14b4898d5:732870552,a90733ceb3573010ee66d613d73a65ba:1834944930,d5a1fb0ad157301037b3fea574443f02:2064104054,cb8a72469c53301089c17d85829d617c:-1436776324,36787ac2fc533010c6ff293eb2a47c84:-88660865,baa9ee8110a87810efc3210403cfeddd:1828672249,3928ae01d1a878102dd2f94353572452:-1394375969,d98ad1ec0ca8f410205f93965e3505b7:2100392568,923a15ac63a8f410cf53f62e97d25158:-164567282,3ef959acd8a8f41077dd9bef15496a87:-753724690,9b32bca02368b410a6fad91e25b47d26:491373678,86af91877e5b8010ba4bb74c9dffcf67:1887421635,65d155cf48d7801060ff16fb507a6974:448130511,597ec583a01b80106c2a4efb71751c39:-1454883937,496c058f53d780107619344570d39693:200235083,91c29e6c7b3f2300b45b0aa1d53236a5:1611575751,c1af4bc3ea726300918da46556e1c72c:1665534658,8b5ec7cfd9326300dceeaed2ef8ca60b:-153673948,a68a5e3fa54663001bd0055cab622515:1719150869,7d40967394c26300554b845e22c523ae:-2101138540,90df4a33d6c26300fe17cbefdacef4d8:-1821856176,a60c79f7294e2300aec68245329e94f6:-989166199,21d4fd33ca4e23008f75dda5888eded3:212334714,a5c3b973c54e230046d1844a30563c86:1985480257,187bbf4f878a630043e7a0e82e95c4bd:40710256,e54b330f648a6300ad075b174a41d9c9:1147183420,33b2ea4357c26300d394cc52215c5a25:-137301344,c812aacf9f82630022a9ba2ce601c606:-811184800,43e7ce037c82630063eaa5f213657199:71969456,12e6c203688263004fdc09be34888f11:-2004000179,47d24acb8b426300a46a23319ae69d7f:783358471,a5a2ec6d480623005b2e6b1351b6b512:-1432264470,b92a1201664a6b008d805496136f8e41:1192528382,bb1d1d0541866b000830aeafe3da7048:-40095900,8b0cdd8132866b004e19cbb363f89e2a:852999591,5e0c54f4554a2b006f01564dc2aba264:-1699863733,9af262e70db92700019cbc16b197e0de:-126691,afcd9667063927006b20c84e3a64dee6:-1743571482,067b1aa340392700e15cd2bd79414e9e:-1897720102,26a4522337b527006b1bb8dfbd498eab:-1503851943,5b5416af73752700533044341019d913:1218794341,d63d151b3071e30083a996cdeda7dd03:2017006357,cc7b9d971471e3004c2cfc934519d16f:-1367932725,4a5fb417b231e300746ab61190f5feb9:-550091881,7ebb38533f31e3002122c0133155e034:1046892868,ad8b74537731e30029574ff3415256ae:-1653815452,d447745f9efda300e4cb819269961120:-1584867167,8d35f41f6dfda300bc73f0542f25ca91:2060959325,3a133cdb9dfda300d1c36d77411d8549:1239479302,1082b89b4dfda30053a592556ee4034d:1681727693,ad32789b1cfda300cc1244621afa4b42:-1620795063,9051389b9afda300e4079ca4b974f952:846877922,d111b09bb1fda30009e998039dad152d:-1985285915,30d0705b78fda300e04a1307d5b49dac:-2080292511,d4afac170bfda30056d0005a784d106e:-1895579327,089ba897d4fda3005f9c4afcc0181c14:801042271,6a1531f13775e300599c0f635cf2ea17:640064105,8414b1f1a575e3008b0e8fdd4f0db940:-1890533768,f4d33db1bd75e300e63ffc364ed73cfa:-348467348,4b433d71dc75e300978bd3df59107d07:-1226806504,8654edf5c035e3004dbebfea6524d8a7:1227558081,c4c321f5dd35e300d289d34e938178a6:-1203808461,2a0265b5a135e3002af3e2b4b81e22e8:669211403,843f0d79e3f1e30098ea661922731517:153637186,9b8c4d7566f1e3006b009018200f210b:-869970091,36470d3587f1e30018a2406f263b018e:1173152266</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_ui_script_db9441c237212300fdfc097973990e67</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ui_script"&gt;&lt;sys_ui_script action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;description/&gt;&lt;global&gt;false&lt;/global&gt;&lt;name&gt;x_nuta2_nutanix_ca.Calm_Catalog_Service_&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var $j = jQuery.noConflict();
var loader_count = 0;
var trigger_json = {};

function triggerChange(id, value) {
	var service_field = g_form.getValue('service_data') + '';
	var service_json_full= (service_field != '') ? JSON.parse(service_field) : [];
	for(var prof = 0; prof &lt; service_json_full.length; prof++) {
		var service_data = service_json_full[prof].service_configuration;
	for(var i in service_data) {
		for(var j in service_data[i]) {
			for(var k in service_data[i][j]) {
				if(k == id) {
					service_data[i][j][k].value = value + '';
				//	console.log(i + j + id + value);
				}
			}
		}
	}
	}
	g_form.setValue('service_data', JSON.stringify(service_json_full));
}
//---------diskApp module----------------
// Created an angular application with the name 'diskApp' to be used in HTML rendering


var app = angular.module('configApp', []);

app.filter('capitalize', function(){
	return function(category, title) {
		if(title)
			category = category.replace(title,'');
		category = category.toLowerCase().split('_');
		for (var i = 0; i &lt; category.length; i++) {
			category[i] = category[i].charAt(0).toUpperCase() + category[i].slice(1);
		}
		return category.join(' ').replace(/(os|vm|ssh|api|gcp|aws)/igm, function(match) {
				return match.toUpperCase();
			}).replace(/Vdisks/igm, 'vDisks').replace(/Management Optional/igm, 'Management (Optional)');
		//"$1".toUpperCase());
	};
});

// renderConfiguration = function(JSONString) {
// // 	$scope.JSONdata = JSON.parse(JSONString);

// };

app.controller('configController', function($scope) {

	$scope.togglePassword =  function(sysid) {
		var input = $j('#' + sysid);

		if (input.attr("type") == "password") {
			input.attr("type", "text");
		} else {
			input.attr("type", "password");
		}
	};

	$scope.selectCategory = function(category) {
		$scope.selectedCategory = category;
	};

	$scope.checkUiPage = function(category, type, title) {

		if(type &amp;&amp; type+''=='2')
			return false;
		
		var keys = Object.keys(category);

		if(category[keys[0]].name)	
			return true;	
		
		return false;

		//return (category.includes("storage") != true) &amp;&amp; (category.includes('port') != true);
	};
	
	
	
	
	
	
	
	$scope.checkGuestType = function(category, title, questionText){
		
		if((category+'').includes('guest_customization') &amp;&amp; questionText+''=='Install Type'){
			for(var i in $scope.JSONdata) {
				var temp = JSON.stringify($scope.JSONdata[i]);
				if(temp.includes(title)) {
					var guest = $scope.JSONdata[i]['service_configuration'][title][category];
					for(var i in guest)
						if(guest[i].question_text+'' == 'Type' &amp;&amp; guest[i].value+'' == 'Cloud-init')
							return false;	
					break;
				}
			}			
		}
		
		return true;
	};
	
	$scope.disableRuntimeConfig = function(innerJSON) {
					if(innerJSON.data_type == 'EXEC_LOCAL' || innerJSON.data_type == 'HTTP_LOCAL' || innerJSON.data_type == 'EXEC_SECRET' || innerJSON.data_type == 'HTTP_SECRET') {
						return true;
					}
					else {
						return (innerJSON.isdisabled+'' == 'true');
					}
	};
	
	
	$scope.drsCheck = function(name, service) {
		
// 		var tmpJson = JSON.parse(g_form.getValue('service_data'))[service][service+'_vm_configuration'];
		
// 		var val = true;
		
// 		for(var i in tmpJson)
// 			if(tmpJson[i].name+'' == service+'_drs_mode'){
// 				val = (tmpJson[i].value)?tmpJson[i].value:false;
// 				break;
// 			}
				
		
// 		if((name+'' == service+'_host' || name+'' == service+'_datastore') &amp;&amp; val+'' == 'true'){
// 			return false;
// 		}else if((name+'' == service+'_cluster' || name+'' == service+'_storage_pod') &amp;&amp; val+'' == 'false'){
// 			return false;
// 		}
				
		return true;	
	};
	
	$scope.createTriggerArray = function() {
		var service_json_full = $scope.JSONdata;
		var var_json = {};
        for(var prof = 0; prof &lt; service_json_full.length; prof++) {
			var service_json = service_json_full[prof].service_configuration;
			var profile = service_json_full[prof].profile + "";
			
			for (var i in service_json) {
				if(service_json[i][i+"_variables"]) {
					var variables_json = service_json[i][i+"_variables"];
					var dep_array = [];
					for(var j in variables_json)
						dep_array = dep_array.concat(variables_json[j].field_json.all_dep);
					var_json[i] = dep_array;
				}
			}
		}
		trigger_json = var_json;
	};
	
	
	$scope.triggerEscript = function(profile, titleKey, name) {
		
		//console.log(JSON.stringify(trigger_json));
		var var_name = name.replace(titleKey.replace(profile+"_","")+"_","");
		
		if(trigger_json[titleKey].indexOf(var_name) != -1)
			$scope.fetchEscriptHttp(titleKey);
	};
	
	$scope.fetchEscriptHttp = function(titleKey) {
		var service_json_full = $scope.JSONdata;
		var continue_flag = false;
		
		if(service_json_full.length == 0)
			return;
		
        for(var prof = 0; prof &lt; service_json_full.length; prof++) {
			
			if(continue_flag)
				continue;
			
			var var_json = {};
			var service_json = service_json_full[prof].service_configuration;
			var profile = service_json_full[prof].profile + "";
			for (var i in service_json) {
				if(titleKey != "" &amp;&amp; i == titleKey) {
					if(service_json[i][i+"_variables"])
						var_json[i] = service_json[i][i+"_variables"];
					continue_flag = true;
					break;
				}
				else if(titleKey == "")
					if(service_json[i][i+"_variables"])
						var_json[i] = service_json[i][i+"_variables"];
			}
        for (var j in var_json) {
			var str = [];
			if(j != titleKey &amp;&amp; var_json != "onLoad")
				continue;
			var service_name = j.replace(profile+"_", "");
            var pre_map = _createDependencyJSON(var_json[j], service_name);

			/*if (!pre_map)
                return;*/
            var options = "";
            var type = g_form.getValue('type_of_blueprint');
            var blueprintSysId = g_form.getValue('blueprint');

            //		var loadingDialog = new GlideModal('loader', true);

			
            var loadingDialog1 = new GlideModal('variables_loader', true);
            loadingDialog1.setTitle('Fetching variable values....');
            loadingDialog1.renderWithContent('&lt;div class="loading-container"&gt;&lt;div class="loading-indicator icon-loading icon-lg"&gt;&lt;/div&gt;&lt;/div&gt;');
			loader_count++;
            var gajax = new GlideAjax('Nutanix_ClientServerScriptBridge');
            gajax.addParam('sysparm_name', 'getHttpValues');
            gajax.addParam('sysparm_type', type);
		    gajax.addParam('sysparm_str', str);
            gajax.addParam('sysparm_parentUuid', blueprintSysId + '');
            gajax.addParam('sysparm_preMap', JSON.stringify(pre_map) + '');
			gajax.addParam('sysparm_env_profile',g_form.getValue('environment_profile_pairs'));
	        gajax.addParam('sysparm_env_sysid',g_form.getValue('environments'));
            gajax.getXML(setOptions);
        }
		}


        function _createDependencyJSON(var_data, j) {

            var pre_map = {};
            var extApiFlag;
            for (var i in var_data) {
				
			
				//console.log("Var data:"+JSON.stringify(var_data[i]));
				var var_name = (var_data[i].name + "").replace(j+'_','');
				var field = JSON.parse(var_data[i].field);
				var type = field.type + "";
				var value = (var_data[i].field_json.all_dep.length != 0) ? field.value + "" : var_data[i].value + "";
				
                pre_map[var_name + ""] = {
                    "depends_on": var_data[i].field_json,
                    "value": value, //var_data[i].value + "",
                    "uuid": var_data[i].uuid,
                    "type": field.type,
					"name": var_name + "",
					"data_type": field.data_type
                };
				
				if(type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') {
					pre_map[var_name + ""].requiresApiCall = true;
				} else {
					if(field.options &amp;&amp; field.options.choices) {
						pre_map[var_name + ""].options = field.options.choices;
						pre_map[var_name + ""].data_type = "LIST_SINGLE";
					}
					if(field.data_type + "" == 'LIST') {
						pre_map[var_name + ""].data_type = field.data_type;
					}
				}
            }
            //console.log(pre_map);
            //if (extApiFlag)
                return pre_map;
            //return false;
        }

        function setOptions(response) {
			
            var answer = response.responseXML.documentElement.getAttribute("answer");
			
			jslog(answer);
			
            var parsedAnswer = JSON.parse(answer);
            var service_field = g_form.getValue('service_data') + '';
			var service_data_full = (service_field != '') ? JSON.parse(service_field) : '';
			
			for(var p = 0; p &lt; service_data_full.length; p++) {
			var service_data = service_data_full[p].service_configuration;
			for (var i in service_data) {
				for (var j in service_data[i]) {
					for (var k in service_data[i][j]) {
						var uuid = service_data[i][j][k].uuid + "";
						for(var m in parsedAnswer) {
							if(uuid == parsedAnswer[m].uuid) {
								var type = parsedAnswer[m].type + "";
								var data_type = parsedAnswer[m].data_type + "";
								
								if(type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') {
									if (parsedAnswer[m].state == 'SUCCESS') {
										//for (var a = 0; a &lt; parsedAnswer.values.length; a++)
										service_data[i][j][k].options = parsedAnswer[m].value;
										//service_data[i][j][k].value = parsedAnswer[m].default_value + '';
									}
									if (parsedAnswer[m].state == 'ERROR'){
										g_form.addErrorMessage("F2: Failed fetching values for variable '" + service_data[i][j][k].question_text + "': " + parsedAnswer[m].error[0]);
									}
								}
								
								if(type == "LOCAL"  &amp;&amp; data_type == "BASE")
									service_data[i][j][k].value = parsedAnswer[m].value + '';
								
								if((data_type == "LIST_SINGLE" || data_type == "LIST") &amp;&amp; (type + "" == "LOCAL" || type + "" == "PREDEFINED")) {
									service_data[i][j][k].options = parsedAnswer[m].options;
									service_data[i][j][k].value = parsedAnswer[m].value;
								}
								
							}
						}
					}
				}
			}
			}
			
            $scope.JSONdata = service_data_full;
            /*g_form.setValue('service_data', JSON.stringify($scope.JSONdata));*/
			//g_form.setValue('service_data', JSON.stringify($scope.JSONdata));
			g_form.setValue('service_data', JSON.stringify(service_data_full));
			loader_count--;
			jslog(loader_count);
			if(loader_count == 0) {
				$scope.$apply();
				new GlideModal().get('variables_loader').destroy();
			}
        }
	};
	
	$scope.updateData = function() {
		g_form.setValue('service_data', JSON.stringify($scope.JSONdata));
	};
	
	$scope.GwtDTPicker = function(input_id, format, showTime) {
		new GwtDateTimePicker(input_id, format, showTime);
	};

	/*$scope.updateDisableStatus = function() {
		for (var title in $scope.JSONdata) {
			for (var cat in $scope.JSONdata[title]) {
				for (var sys in $scope.JSONdata[title][cat]) {
					if ($scope.JSONdata[title][cat][sys].value &amp;&amp; $scope.JSONdata[title][cat][sys].value.includes('@@')) {
						$scope.JSONdata[title][cat][sys].isdisabled = true;
						$scope.JSONdata[title][cat][sys].runtime_config = false;
					}
				}
			}
		}
	};*/

	$scope.hideFields = function (variables) {
		/*var variableArray = variables.split(",");
		for (var title in $scope.JSONdata) {
			for (var cat in $scope.JSONdata[title]) {
				for (var sys in $scope.JSONdata[title][cat]) {
					var question_text = $scope.JSONdata[title][cat][sys].question_text+'';
					var converted = question_text.toLowerCase().replace(/ /g,"");
					var newcat = cat.replace(title,'');
					newcat = newcat.toUpperCase().split('_');
					for (var i = 0; i &lt; newcat.length; i++) {
						newcat[i] = newcat[i].charAt(0).toUpperCase() + newcat[i].slice(1);
					}
					newcat = newcat.join(' ').replace(/ /g,"");
					console.log(newcat+'ere'+variableArray.includes(newcat));

					if (variableArray.includes(converted)||variableArray.includes(newcat)) {
						$scope.JSONdata[title][cat][sys].ishide = true;
					} else {
						$scope.JSONdata[title][cat][sys].ishide = false;
					}
				}
			}
		}*/
	};

	function renderConfiguration (JSONString) {
		/*var variableArray = '';
		var gax = new GlideAjax('Nutanix_ClientServerScriptBridge');
		gax.addParam('sysparm_name','getVariablesProperty');
		gax.getXMLWait();
		variableArray = gax.getAnswer();*/

		//console.log("parsed string :: "+JSONString);
		new GlideModal().get('loader').destroy();

	
		
		var parsedJson = JSON.parse(JSONString);
		console.log("parsedJson RV:"+JSON.stringify(parsedJson));
 		$scope.JSONdata = parsedJson;
	//	$scope.responseJSON = parsedJson.profile;
		$scope.nicOptions = parsedJson[0].subnet_list;
 		$scope.showMessage = (Object.keys(parsedJson[0].service_configuration).length==0);
		
		g_form.setValue('service_data', JSON.stringify(parsedJson));
		
		$scope.createTriggerArray();
		$scope.fetchEscriptHttp("");
		//$scope.updateDisableStatus();
		//$scope.hideFields(variableArray);
	}

	var responseParse = function(response) {

		var answer = response;
	//	jslog("responseParse "+answer);
		renderConfiguration(answer+'');
		
	};	

	$scope.$on('updateEvent', function(event, data){
		$scope.JSONdata = data;
	});


	$scope.getProfileVariableData = function(){

		var val = g_form.getValue('service_data');

		var type = g_form.getValue('type');
		var bpType =g_form.getValue('type_of_blueprint') ;
		var project = g_form.getValue('multiple_project');
		var blueprint = g_form.getValue('blueprint');
		var application_profile = g_form.getValue('multiple_application_profile');
		var cat_item = g_form.getValue('cat_item');
		var delta_profiles = g_form.getValue('delta_profiles');

		var loadingDialog = new GlideModal('loader', true);
		loadingDialog.setTitle('Fetching service data...'); 
		loadingDialog.renderWithContent('&lt;div class="loading-container"&gt;&lt;div class="loading-indicator icon-loading icon-lg"&gt;&lt;/div&gt;&lt;/div&gt;');
		
		var ga = new GlideAjax('Nutanix_ClientServerScriptBridge');
		ga.addParam('sysparm_name', 'getServiceVariableDetails');
		ga.addParam('sysparm_project', project);
		ga.addParam('sysparm_blueprint', blueprint);
		ga.addParam('sysparm_application_profile', application_profile);
		ga.addParam('sysparm_type', type);
		ga.addParam('sysparm_bpType', bpType);
		ga.addParam('sysparm_cat_item', cat_item);
		ga.addParam('sysparm_delta_profiles', delta_profiles);

		ga.getXMLWait();
		
		var answr = ga.getAnswer();
		
		if(val){
			answr = JSON.parse(answr);
		//	answr.service_configuration = JSON.parse(val);
			answr = val;
		}
	
		responseParse(answr);
	};

	_toTitleCase= function (str) {
		/*str = str.toLowerCase().split(' ');
		for (var i = 0; i &lt; str.length; i++) {
			str[i] = str[i].charAt(0).toUpperCase() + str[i].slice(1);
		}
		return str.join(' ');*/ return str;
	};
});


//---------runtimeSvg directive----------
//Created an angular custom directive containing the runtime SVG from Nutanix
// To be used as &lt;runtime-svg&gt;
app.directive('diskUiPage', function() {
	return {
		restrict: 'A',
		scope: {
			passedTitle: '@',
			passedCategory: '@',
			passedSysId: '@',
			passedJson: '@'
		},
		controller: "diskController",
		template: '&lt;div ng-init="parsingJSON(passedJson);"&gt;&lt;div class="disk_main-container"&gt;&lt;table class="table"&gt;&lt;thead&gt;&lt;tr class="padded-row"&gt;&lt;th class="padded-fields"&gt;Actions&lt;/th&gt;&lt;th class="padded-fields"&gt;Name&lt;/th&gt;&lt;th class="padded-fields"&gt;Device&lt;/th&gt;&lt;th class="padded-fields"&gt;&lt;span class="disk_right-indent"&gt;Size (GB)&lt;/span&gt;&lt;/th&gt;&lt;th class="padded-fields" ng-show="global_configuration"&gt;Runtime&lt;/th&gt;&lt;th class="padded-fields"&gt;Volume Type&lt;/th&gt;&lt;th class="padded-fields"&gt;Delete on termination&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr ng-if="JSONdata.root_disk"&gt;&lt;td class="padded-fields"&gt;&lt;a href="#" data-toggle="modal" data-target="#_editModal" ng-click="disk_initializeEditModal($index, JSONdata.root_disk, true);"&gt;&lt;i id="rootDataIcon" class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="padded-fields"&gt;ROOT&lt;/td&gt;&lt;td class="padded-fields"&gt;{{JSONdata.root_disk.device_name}}&lt;/td&gt;&lt;td class="padded-fields"&gt;&lt;span class="disk_right-indent"&gt;{{JSONdata.root_disk.size_gb}}&lt;/span&gt;&lt;/td&gt;&lt;td class="padded-fields" ng-show="global_configuration"&gt;{{JSONdata.root_disk.runtime}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{diskMapping[JSONdata.root_disk.volume_type]}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{JSONdata.root_disk.delete_on_termination}}&lt;/td&gt;&lt;/tr&gt;&lt;tr ng-if="JSONdata.data_disk_list" ng-repeat="data in JSONdata.data_disk_list"&gt;&lt;td class="padded-fields"&gt;&lt;a href="#" data-toggle="modal" data-target="#_editModal" ng-click="disk_initializeEditModal($index, data, false);"&gt;&lt;i id="ebsDataIcon" class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="padded-fields"&gt;EBS&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.device_name}}&lt;/td&gt;&lt;td class="padded-fields"&gt;&lt;span class="disk_right-indent"&gt;{{data.size_gb}}&lt;/span&gt;&lt;/td&gt;&lt;td class="padded-fields" ng-show="global_configuration"&gt;{{data.runtime}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{diskMapping[data.volume_type]}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.delete_on_termination}}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="{{modalid}}_editModal" class="modal fade" role="dialog" ng-if="false"&gt;&lt;div class="modal-dialog"&gt;&lt;div class="modal-content"&gt;&lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt;&lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt;&lt;/div&gt;&lt;div class="modal-body"&gt;&lt;form name="editForm"&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Device&lt;/label&gt; &lt;select ng-model="edit.device_name" class="form-control" ng-disabled="!global_configuration || edit.root_flag" required=""&gt;&lt;option ng-class="{\'disk_disabled-option\': value.disabled}" ng-repeat="(device, value) in device_list" ng-disabled="value.disabled"&gt;{{device}}&lt;/option&gt; &lt;/select&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt; &lt;label for="volume_type"&gt;Volume Type&lt;/label&gt; &lt;select ng-model="edit.volume_type" class="form-control" ng-disabled="true"&gt;&lt;option value="GP2"&gt;General Purpose SSD&lt;/option&gt;&lt;option value="IO1"&gt;Provisioned IOPS SSD&lt;/option&gt;&lt;option value="ST1"&gt;Throughput Optimized HDD&lt;/option&gt;&lt;option value="SC1"&gt;Cold HDD&lt;/option&gt;&lt;option value="STANDARD"&gt;EBS Magnetic HDD&lt;/option&gt; &lt;/select&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="size"&gt;Size (GB)&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt;&lt;input ng-model="edit.runtime" type="checkbox" ng-true-value="\'true\'" ng-false-value="\'false\'" ng-disabled="edit.disabled"/&gt;Runtime&lt;/div&gt; &lt;input ng-if="edit.runtime" ng-model="edit.size_gb" class="form-control" type="number" ng-disabled="edit.disabled"/&gt;&lt;input ng-if="!edit.runtime" ng-model="edit.size_gb" class="form-control" type="number" ng-disabled="edit.disabled"/&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt;&lt;div class="form-group"&gt;&lt;input ng-model="edit.delete_on_termination" type="checkbox" ng-disabled="!global_configuration"/&gt;Delete On Termination&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/form&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt;&lt;button type="button" class="btn btn-default disk_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt;&lt;button type="button" class="btn btn-primary disk_btn-modal" data-dismiss="modal" ng-click="disk_editEntry(edit);"&gt;Save&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="{{modalid}}_editModal" class="modal fade" role="dialog"&gt;&lt;div class="modal-dialog"&gt;&lt;div class="modal-content"&gt;&lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt;&lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt;&lt;/div&gt;&lt;div class="modal-body"&gt;&lt;p style="text-align: center;font-size: medium;"&gt;You can set or edit this field in Calm GUI.&lt;/p&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt;&lt;button type="button" class="btn btn-default disk_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;'
	};
});


//--------diskController controller--------------
//Created a controller for controlling the flow to data of diskApp application
app.controller('diskController', function($scope) {

	$scope.JSONdata = {};

	$scope.parsingJSON = function(passedJSON) {
		$scope.JSONdata = JSON.parse(passedJSON);
		//$scope.
		$scope.disk_checkDeviceList();

		$scope.diskMapping = {
			'GP2': 'General Purpose SSD',
			'IO1': 'Provisioned IOPS SSD',
			'ST1': 'Throughput Optimized HDD',
			'SC1': 'Cold HDD',
			'STANDARD': 'EBS Magnetic HDD',
		};

	};

	$scope.disk_getVariableData = function(passedJSON) {
		$scope.JSONdata = passedJSON;
		$scope.disk_checkDeviceList();
	};


	//$scope.device_list --&gt; contains the hardcoded dropdown list for device name in the form
	//key --&gt; provides the name of the device
	//key.disabled --&gt; provides the status of specific device whether it is added or not
	//    disabled = true  --&gt; added
	//    disabled = false --&gt; not added
	$scope.device_list = {
		"/dev/sda1": { "disabled" : true},
		"/dev/sdb": {"disabled" : false},
		"/dev/sdc": {"disabled" : false},
		"/dev/sdd": {"disabled" : false},
		"/dev/sde": {"disabled" : false},
		"/dev/sdf": {"disabled" : false},
		"/dev/sdg": {"disabled" : false},
		"/dev/sdh": {"disabled" : false},
		"/dev/sdj": {"disabled" : false},
		"/dev/sdk": {"disabled" : false},
		"/dev/sdl": {"disabled" : false}
	};

	//$scope.checkDeviceList --&gt; set the value of $scope.device_list array key.disabled to true or false on basis of JSONdata
	$scope.disk_checkDeviceList = function() {
		$scope.global_configuration = true;
		for (var i = 0;i &lt; $scope.JSONdata.data_disk_list.length; i++) {
			$scope.device_list[$scope.JSONdata.data_disk_list[i].device_name].disabled = true;
		}
	};



	//$scope.initializedEditModal --&gt; initialize all the variables with values from editJSON to render it into editModal
	//PARAMS : index    --&gt; provide the index value to selected entry from the table
	//         editJSON --&gt; contains the JSON of selected entry
	//         rootFlag --&gt; states whether entry is root entry or ebs entry
	$scope.disk_initializeEditModal = function (index, editJSON, rootFlag) {
		
		//alert('You can set or edit this field in Calm GUI.');
		return;
		
		$scope.edit ={};
		$scope.edit.root_flag = rootFlag;
		$scope.edit.index = index;
		$scope.edit.device_name = editJSON.device_name;
		$scope.edit.size_gb = editJSON.size_gb;
		$scope.edit.volume_type = editJSON.volume_type;

		$scope.edit.runtime = editJSON.runtime;
		$scope.edit.disabled = (editJSON.disabled+''=='true')?false:true;

		$scope.edit.delete_on_termination = editJSON.delete_on_termination;
		$scope.edit.previous_device_name = editJSON.device_name;
	};



	//$scope.editEntry --&gt; edit the specific entry from the main JSON
	$scope.disk_editEntry = function (editJSON) {
		$scope.device_list[editJSON.previous_device_name].disabled = false;
		$scope.device_list[editJSON.device_name].disabled = true;
		var createdJSON = {
			"device_name": editJSON.device_name,
			"size_gb": editJSON.size_gb,
			"volume_type": editJSON.volume_type,
			"delete_on_termination": editJSON.delete_on_termination,
			"runtime": editJSON.runtime,
			"snapshot_id": "",
			"iops": "",
			"type" : ""
		};

		if (editJSON.root_flag) {
			createdJSON.snapshot_id = $scope.JSONdata.root_disk.snapshot_id;
			createdJSON.type = $scope.JSONdata.root_disk.type;
			createdJSON.iops = $scope.JSONdata.root_disk.iops;
			$scope.JSONdata.root_disk = createdJSON;
		} else {
			createdJSON.snapshot_id = $scope.JSONdata.data_disk_list[editJSON.index].snapshot_id;
			createdJSON.type = $scope.JSONdata.data_disk_list[editJSON.index].type;
			createdJSON.iops = $scope.JSONdata.data_disk_list[editJSON.index].iops;
			$scope.JSONdata.data_disk_list[editJSON.index] = createdJSON;
		}

		var service_data = JSON.parse(g_form.getValue('service_data'));
		service_data[$scope.passedTitle][$scope.passedCategory][$scope.passedSysId] = $scope.JSONdata;
		$scope.$emit('updateEvent', service_data);
		g_form.setValue('service_data', JSON.stringify(service_data));
	};
});




app.directive('portlistUiPage', function() {
	return {
		restrict: 'A',
		scope: {
			passedTitle: '@',
			passedCategory: '@',
			passedSysId: '@',
			passedJson: '@'
		},
		controller: "portlistController",
		template : '&lt;div ng-init="parsingJSON(passedJson);"&gt;&lt;div class="portlist_main-container"&gt;&lt;table class="table"&gt;&lt;thead&gt;&lt;tr&gt;&lt;th class="padded-fields" ng-show="global_configuration"&gt;Actions&lt;/th&gt;&lt;th class="padded-fields"&gt;Name&lt;/th&gt;&lt;th class="padded-fields"&gt;Protocol&lt;/th&gt;&lt;th class="padded-fields"&gt;Port&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr ng-repeat="data in JSONdata"&gt;&lt;td class="padded-fields" ng-show="global_configuration"&gt;&lt;a href="#" data-toggle="" data-target="#_editModal" ng-click="portlist_initializeEditModal($index, data);"&gt;&lt;i id="ebsDataIcon" class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.endpoint_name}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.protocol}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.target_port}}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog"&gt;&lt;div class="modal-dialog"&gt;&lt;div class="modal-content"&gt;&lt;div class="modal-header"&gt;&lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt;&lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt;&lt;/div&gt;&lt;div class="modal-body"&gt;&lt;form name="editForm"&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt;&lt;label for="device"&gt;Name&lt;/label&gt;&lt;input class="form-control" type="text" ng-model="edit.endpoint_name" /&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt;&lt;label for="volume_type"&gt;Protocol&lt;/label&gt;&lt;input class="form-control" type="text" ng-model="edit.protocol" /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt;&lt;label for="size"&gt;Port&lt;/label&gt;&lt;input class="form-control" type="text" ng-model="edit.target_port" /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/form&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt;&lt;button type="button" class="btn btn-default portlist_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt;&lt;button type="button" class="btn btn-primary portlist_btn-modal" data-dismiss="modal" ng-click="portlist_editEntry(edit);"&gt;Save&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;'
	};

});

//--------portlistController controller--------------
//Created a controller for controlling the flow to data of diskApp application
app.controller('portlistController', function($scope) {

	$scope.JSONdata = {};

	$scope.parsingJSON = function(passedjson) {
		$scope.JSONdata = JSON.parse(passedjson);

		$scope.global_configuration = true;
	};

	//$scope.initializedEditModal --&gt; initialize all the variables with values from editJSON to render it into editModal
	//PARAMS : index    --&gt; provide the index value to selected entry from the table
	//         editJSON --&gt; contains the JSON of selected entry
	//         rootFlag --&gt; states whether entry is root entry or ebs entry
	$scope.portlist_initializeEditModal = function (index, editJSON) {
		
		alert('You can set or edit this field in Calm GUI.');
		return;
		
		$scope.edit ={};
		$scope.edit.index = index;
		$scope.edit.endpoint_name = editJSON.endpoint_name;
		$scope.edit.target_port = editJSON.target_port;
		$scope.edit.protocol = editJSON.protocol;
	};

	//$scope.editEntry --&gt; edit the specific entry from the main JSON
	$scope.portlist_editEntry = function (editJSON) {
		var createdJSON = {
			"protocol": editJSON.protocol,
			"target_port": editJSON.target_port,
			"endpoint_name": editJSON.endpoint_name,
			"type": $scope.JSONdata[editJSON.index].type
		};
		$scope.JSONdata[editJSON.index] = createdJSON;

		var service_data = JSON.parse(g_form.getValue('service_data'));
		service_data[$scope.passedTitle][$scope.passedCategory][$scope.passedSysId] = $scope.JSONdata;
		$scope.$emit('updateEvent', service_data);
		g_form.setValue('service_data', JSON.stringify(service_data));
	};
});




app.directive('vdisklistUiPage', function() {
	return {
		restrict: 'A',
		scope: {
			passedTitle: '@',
			passedCategory: '@',
			passedSysId: '@',
			passedJson: '@'
		},
		controller: "vdisklistController",
		template: '&lt;div ng-init="parsingJSON(passedJson);"&gt;&lt;div class="portlist_main-container"&gt;&lt;table class="table" ng-if="provider==\'nutanix\'"&gt;&lt;thead&gt;&lt;tr class="padded-row"&gt;&lt;th class="padded-fields"&gt;Actions&lt;/th&gt;&lt;th class="padded-fields"&gt;Device Type&lt;/th&gt;&lt;th class="padded-fields"&gt;Device Bus&lt;/th&gt;&lt;th class="padded-fields"&gt;&lt;span class="disk_right-indent"&gt;Size (MB)&lt;/span&gt;&lt;/th&gt;&lt;th class="padded-fields" ng-show="global_configuration"&gt;Runtime&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr ng-if="data.data_source_reference==null" ng-repeat="data in JSONdata"&gt;&lt;td class="padded-fields"&gt;&lt;a href="#" data-toggle="modal" data-target="#_editModal" ng-click="initializeEditModal($index, data, false);"&gt;&lt;i id="ebsDataIcon" class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.device_properties.device_type}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.device_properties.disk_address.adapter_type}}&lt;/td&gt;&lt;td class="padded-fields"&gt;&lt;span class="disk_right-indent"&gt;{{data.disk_size_mib}}&lt;/span&gt;&lt;/td&gt;&lt;td class="padded-fields" ng-show="global_configuration"&gt;{{(data.runtime.disk_size_mib)?data.runtime.disk_size_mib:false}}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table class="table" ng-if="provider==\'vmware\'"&gt;&lt;thead&gt;&lt;tr class="padded-row"&gt;&lt;th class="padded-fields"&gt;Actions&lt;/th&gt;&lt;th class="padded-fields"&gt;Adapter Type&lt;/th&gt;&lt;th class="padded-fields"&gt;Device Type&lt;/th&gt;&lt;th class="padded-fields"&gt;&lt;span class="disk_right-indent"&gt;Size (MB)&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr ng-repeat="data in JSONdata"&gt;&lt;td class="padded-fields"&gt;&lt;a href="#" data-toggle="modal" data-target="#_editModal" ng-click="initializeEditModal($index, data, false);"&gt;&lt;i id="ebsDataIcon" class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.adapter_type}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.disk_type}}&lt;/td&gt;&lt;td class="padded-fields"&gt;&lt;span class="disk_right-indent"&gt;{{data.disk_size_mb}}&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog" ng-if="false"&gt;&lt;div class="modal-dialog"&gt;&lt;div class="modal-content"&gt;&lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt;&lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt;&lt;/div&gt;&lt;div class="modal-body"&gt;&lt;form name="editForm" ng-if="provider==\'nutanix\'"&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt;&lt;label for="device"&gt;Device Type&lt;/label&gt;&lt;input class="form-control" type="text" ng-model="edit.device_type"/&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt;&lt;label for="volume_type"&gt;Device Bus&lt;/label&gt;&lt;input class="form-control" type="text" ng-model="edit.device_bus"/&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="size"&gt;Size&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt;&lt;input ng-model="edit.runtime" type="checkbox" ng-disabled="edit.disabled"/&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.size" ng-disabled="edit.disabled"/&gt;&lt;/div&gt;&lt;/div&gt;&lt;/form&gt;&lt;form name="editForm" ng-if="provider==\'vmware\'"&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Adapter Type&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt;&lt;input ng-model="edit.runtime.adapter_type" type="checkbox" ng-disabled="edit.disabled.adapter_type"/&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.adapter_type" ng-disabled="edit.disabled.adapter_type"/&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt; &lt;label for="volume_type"&gt;Device Type&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt;&lt;input ng-model="edit.runtime.disk_type" type="checkbox" ng-disabled="edit.disabled.disk_type"/&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.disk_type" ng-disabled="edit.disabled.disk_type"/&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="size"&gt;Size&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt;&lt;input ng-model="edit.runtime.size" type="checkbox" ng-disabled="edit.disabled.size"/&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.size" ng-disabled="edit.disabled.size"/&gt;&lt;/div&gt;&lt;/div&gt;&lt;/form&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt;&lt;button type="button" class="btn btn-default portlist_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt;&lt;button type="button" class="btn btn-primary portlist_btn-modal" data-dismiss="modal" ng-click="editEntry(edit);"&gt;Save&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog"&gt; &lt;div class="modal-dialog"&gt; &lt;div class="modal-content"&gt; &lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt; &lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt; &lt;/div&gt;&lt;div class="modal-body"&gt; &lt;p style="text-align: center;font-size: medium;"&gt;You can set or edit this field in Calm GUI.&lt;/p&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt;&lt;button type="button" class="btn btn-default disk_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;'
	};
});

app.controller('vdisklistController', function($scope) {

	$scope.JSONdata = {};

	$scope.parsingJSON = function(passedjson) {
		var parsed =JSON.parse(passedjson);
		$scope.JSONdata = parsed;

		var provider='';

		for(var i in parsed)
			if(parsed[i].adapter_type){
				provider = 'vmware';
				break;
			}else{
				provider = 'nutanix';
				break;
			}

		$scope.provider = provider;

		$scope.global_configuration = true;
	};

	//$scope.initializedEditModal --&gt; initialize all the variables with values from editJSON to render it into editModal
	//PARAMS : index    --&gt; provide the index value to selected entry from the table
	//         editJSON --&gt; contains the JSON of selected entry
	//         rootFlag --&gt; states whether entry is root entry or ebs entry
	$scope.initializeEditModal = function (index, editJSON) {
		
		//alert('You can set or edit this field in Calm GUI.');
		return;
		
		$scope.edit ={};
		$scope.edit.index = index;

		if($scope.provider == 'nutanix'){

			$scope.edit.device_type = editJSON.device_properties.device_type;
			$scope.edit.device_bus = editJSON.device_properties.disk_address.adapter_type;
			$scope.edit.size = editJSON.disk_size_mib;
			$scope.edit.runtime = (editJSON.runtime.disk_size_mib==true)?editJSON.runtime.disk_size_mib:false;	
			$scope.edit.disabled = (editJSON.disabled.disk_size_mib+''=='true')?false:true;	

		}else if($scope.provider == 'vmware'){

			$scope.edit.adapter_type = editJSON.adapter_type;
			$scope.edit.disk_type = editJSON.disk_type;
			$scope.edit.size = editJSON.disk_size_mb;

			$scope.edit.runtime = {};
			$scope.edit.runtime.adapter_type = (editJSON.runtime.adapter_type==true)?editJSON.runtime.adapter_type:false;
			$scope.edit.runtime.disk_type = (editJSON.runtime.disk_type==true)?editJSON.runtime.disk_type:false;
			$scope.edit.runtime.size = (editJSON.runtime.disk_size_mb==true)?editJSON.runtime.disk_size_mb:false;

			$scope.edit.disabled = {};
			$scope.edit.disabled.adapter_type = (editJSON.disabled.adapter_type+''=='true')?false:true;
			$scope.edit.disabled.disk_type = (editJSON.disabled.disk_type+''=='true')?false:true;
			$scope.edit.disabled.size = (editJSON.disabled.disk_size_mb+''=='true')?false:true;
		}

	};

	//$scope.editEntry --&gt; edit the specific entry from the main JSON
	$scope.editEntry = function (editJSON) {

		if($scope.provider == 'nutanix'){

			$scope.JSONdata[editJSON.index].device_properties.device_type = editJSON.device_type;
			$scope.JSONdata[editJSON.index].device_properties.disk_address.adapter_type = editJSON.device_bus;
			$scope.JSONdata[editJSON.index].disk_size_mib = editJSON.size;
			$scope.JSONdata[editJSON.index].runtime.disk_size_mib = editJSON.runtime;	

		}else{

			$scope.JSONdata[editJSON.index].adapter_type = editJSON.adapter_type;
			$scope.JSONdata[editJSON.index].disk_type = editJSON.disk_type;
			$scope.JSONdata[editJSON.index].disk_size_mb = editJSON.size;

			$scope.JSONdata[editJSON.index].runtime.adapter_type = editJSON.runtime.adapter_type;
			$scope.JSONdata[editJSON.index].runtime.disk_type = editJSON.runtime.disk_type;
			$scope.JSONdata[editJSON.index].runtime.disk_size_mb = editJSON.runtime.size;

		}

		var service_data = JSON.parse(g_form.getValue('service_data'));
		service_data[$scope.passedTitle][$scope.passedCategory][$scope.passedSysId] = $scope.JSONdata;
		$scope.$emit('updateEvent', service_data);
		g_form.setValue('service_data', JSON.stringify(service_data));
	};
});



app.directive('imagesUiPage', function() {
	return {
		restrict: 'A',
		scope: {
			passedTitle: '@',
			passedCategory: '@',
			passedSysId: '@',
			passedJson: '@'
		},
		controller: "imagesController",
		template: '&lt;div ng-init="parsingJSON(passedJson);"&gt;&lt;div class="portlist_main-container"&gt;&lt;table class="table"&gt;&lt;thead&gt;&lt;tr class="padded-row"&gt;&lt;th class="padded-fields"&gt;Actions&lt;/th&gt;&lt;th class="padded-fields"&gt;Image&lt;/th&gt;&lt;th class="padded-fields"&gt;Device Type&lt;/th&gt;&lt;th class="padded-fields"&gt;Device Bus&lt;/th&gt;&lt;th class="padded-fields"&gt;Bootable&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr ng-if="data.data_source_reference" ng-repeat="data in JSONdata"&gt;&lt;td class="padded-fields"&gt;&lt;a href="#" data-toggle="modal" data-target="#_editModal" ng-click="initializeEditModal($index, data, false);"&gt;&lt;i id="ebsDataIcon" class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.data_source_reference.name}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.device_properties.device_type}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.device_properties.disk_address.adapter_type}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{(data.bootable)?data.bootable:false}}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog" ng-if="false"&gt;&lt;div class="modal-dialog"&gt;&lt;div class="modal-content"&gt;&lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt;&lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt;&lt;/div&gt;&lt;div class="modal-body"&gt;&lt;form name="editForm"&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Image&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input type="checkbox" disabled/&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" style="font-style: italic;" value="Use Calm to set/edit this field" disabled/&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt; &lt;label for="volume_type"&gt;Device Type&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.device_type" type="checkbox" ng-disabled="edit.disabled.device_type" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.device_type" ng-disabled="edit.disabled.device_type" /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="size"&gt;Device Bus&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.adapter_type" type="checkbox" ng-disabled="edit.disabled.adapter_type" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.adapter_type" ng-disabled="edit.disabled.adapter_type" /&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt;&lt;div class="form-group"&gt; &lt;input ng-model="edit.bootable" type="checkbox" /&gt;Bootable&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/form&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt; &lt;button type="button" class="btn btn-default portlist_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt; &lt;button type="button" class="btn btn-primary portlist_btn-modal" data-dismiss="modal" ng-click="editEntry(edit);"&gt;Save&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog"&gt; &lt;div class="modal-dialog"&gt; &lt;div class="modal-content"&gt; &lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt; &lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt; &lt;/div&gt;&lt;div class="modal-body"&gt; &lt;p style="text-align: center;font-size: medium;"&gt;You can set or edit this field in Calm GUI.&lt;/p&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt;&lt;button type="button" class="btn btn-default disk_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;'
	};
});

app.controller('imagesController', function($scope) {

	$scope.JSONdata = {};

	$scope.parsingJSON = function(passedjson) {
		$scope.JSONdata = JSON.parse(passedjson);
		$scope.global_configuration = true;
	};

	//$scope.initializedEditModal --&gt; initialize all the variables with values from editJSON to render it into editModal
	//PARAMS : index    --&gt; provide the index value to selected entry from the table
	//         editJSON --&gt; contains the JSON of selected entry
	//         rootFlag --&gt; states whether entry is root entry or ebs entry
	$scope.initializeEditModal = function (index, editJSON) {
		
		//alert('You can set or edit this field in Calm GUI.');
		return;
		
		$scope.edit ={};
		$scope.edit.index = index;
		$scope.edit.image = editJSON.data_source_reference.name;
		$scope.edit.device_type = editJSON.device_properties.device_type;
		$scope.edit.adapter_type = editJSON.device_properties.disk_address.adapter_type;
		$scope.edit.bootable = (editJSON.bootable==true)?editJSON.bootable:false;

		$scope.edit.runtime = {};
		$scope.edit.runtime.image = false;//(editJSON.runtime.data_source_reference==true)?editJSON.runtime.data_source_reference:false;
		$scope.edit.runtime.device_type = (editJSON.runtime.device_properties &amp;&amp; editJSON.runtime.device_properties.device_type==true)?editJSON.runtime.device_properties.device_type:false;
		$scope.edit.runtime.adapter_type = (editJSON.runtime.device_properties &amp;&amp; editJSON.runtime.device_properties.adapter_type==true)?editJSON.runtime.device_properties.adapter_type:false;

		$scope.edit.disabled = {};
		$scope.edit.disabled.image = true;//(editJSON.runtime.data_source_reference==true)?editJSON.runtime.data_source_reference:false;
		$scope.edit.disabled.device_type = (editJSON.disabled.device_properties &amp;&amp; editJSON.disabled.device_properties.device_type+''=='true')?false:true;
		$scope.edit.disabled.adapter_type = (editJSON.disabled.device_properties &amp;&amp; editJSON.disabled.device_properties.adapter_type+''=='true')?false:true;
	};

	//$scope.editEntry --&gt; edit the specific entry from the main JSON
	$scope.editEntry = function (editJSON) {

		$scope.JSONdata[editJSON.index].data_source_reference.name = editJSON.image;
		$scope.JSONdata[editJSON.index].device_properties.device_type = editJSON.device_type;
		$scope.JSONdata[editJSON.index].device_properties.disk_address.adapter_type = editJSON.adapter_type;
		$scope.JSONdata[editJSON.index].bootable = editJSON.bootable;

		$scope.JSONdata[editJSON.index].runtime.data_source_reference = editJSON.runtime.image;
		$scope.JSONdata[editJSON.index].runtime.device_properties.device_type = editJSON.runtime.device_type;
		$scope.JSONdata[editJSON.index].runtime.device_properties.adapter_type = editJSON.runtime.adapter_type;


		var service_data = JSON.parse(g_form.getValue('service_data'));
		service_data[$scope.passedTitle][$scope.passedCategory][$scope.passedSysId] = $scope.JSONdata;
		$scope.$emit('updateEvent', service_data);
		g_form.setValue('service_data', JSON.stringify(service_data));
	};
});


app.directive('networkAdapterUiPage', function() {
	return {
		restrict: 'A',
		scope: {
			passedTitle: '@',
			passedCategory: '@',
			passedSysId: '@',
			passedJson: '@',
			passedOptions: '@'
		},
		controller: "networkAdapterController",
		template: '&lt;div ng-init="parsingJSON(passedJson, passedOptions);"&gt;&lt;div class="cluster" &gt;Cluster Name : {{clusterName}}&lt;/div&gt;&lt;div class="portlist_main-container"&gt;&lt;table class="table" ng-if="provider==\'nutanix\'"&gt;&lt;thead&gt;&lt;tr class="padded-row"&gt;&lt;th class="padded-fields"&gt;Actions&lt;/th&gt;&lt;th class="padded-fields"&gt;Name&lt;/th&gt;&lt;th class="padded-fields"&gt;Value&lt;/th&gt;&lt;th class="padded-fields"&gt;Runtime&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr ng-repeat="data in JSONdata"&gt;&lt;td class="padded-fields"&gt;&lt;a href="#" data-toggle="modal" data-target="#_editModal" ng-click="initializeEditModal($index, data, false);"&gt;&lt;i id="ebsDataIcon" class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="padded-fields"&gt;NIC-{{$index+1}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{options[data.subnet_reference.uuid].name}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{(data.runtime.subnet_reference.name)?data.runtime.subnet_reference.name:(data.runtime.subnet_reference)?data.runtime.subnet_reference:false}}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table class="table" ng-if="provider==\'vmware\'"&gt;&lt;thead&gt;&lt;tr class="padded-row"&gt;&lt;th class="padded-fields"&gt;Actions&lt;/th&gt;&lt;th class="padded-fields"&gt;Adapter Type&lt;/th&gt;&lt;th class="padded-fields"&gt;Network Type&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr ng-repeat="data in JSONdata"&gt;&lt;td class="padded-fields"&gt;&lt;a href="#" data-toggle="modal" data-target="#_editModal" ng-click="initializeEditModal($index, data, false);"&gt;&lt;i id="ebsDataIcon" class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.nic_type}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.net_name}}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog" ng-if="provider==\'nutanix\'"&gt;&lt;div class="modal-dialog"&gt;&lt;div class="modal-content"&gt;&lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt;&lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt;&lt;/div&gt;&lt;div class="modal-body"&gt;&lt;form name="editForm" ng-if="provider==\'nutanix\'"&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;{{edit.name}}&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt;&lt;input ng-model="edit.runtime" type="checkbox" ng-disabled="edit.disabled"/&gt;Runtime&lt;/div&gt; &lt;select class="form-control" ng-model="edit.value" ng-disabled="edit.disabled"&gt;&lt;option ng-repeat="(key, value)  in options" value="{{key}}"&gt; {{value.name}} | {{value.cluster_name}}&lt;/option&gt; &lt;/select&gt;&lt;/div&gt;&lt;/div&gt;&lt;/form&gt;&lt;form name="editForm" ng-if="provider==\'vmware\'"&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Adapter Type&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt;&lt;input ng-model="edit.runtime.nic_type" type="checkbox" ng-disabled="edit.disabled.nic_type"/&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.nic_type" ng-disabled="edit.disabled.nic_type"/&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Network Type&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt;&lt;input ng-model="edit.runtime.net_name" type="checkbox" ng-disabled="edit.disabled.net_name"/&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.net_name" ng-disabled="edit.disabled.net_name"/&gt;&lt;/div&gt;&lt;/div&gt;&lt;/form&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt;&lt;button type="button" class="btn btn-default portlist_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt;&lt;button type="button" class="btn btn-primary portlist_btn-modal" data-dismiss="modal" ng-click="editEntry(edit);"&gt;Save&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog" ng-if="provider==\'vmware\'"&gt; &gt;&lt;div class="modal-dialog"&gt;&lt;div class="modal-content"&gt;&lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt;&lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt;&lt;/div&gt;&lt;div class="modal-body"&gt;&lt;p style="text-align: center;font-size: medium;"&gt;You can set or edit this field in Calm GUI.&lt;/p&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt;&lt;button type="button" class="btn btn-default disk_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;'
	};
});

app.controller('networkAdapterController', function($scope) {

	$scope.JSONdata = {};
	
	
	$scope.parsingJSON = function(passedjson, passedOptions) {

		//console.log('passedJSON: '+JSON.stringify(passedjson));
		//console.log('passedOptions: '+passedOptions);
		var options = JSON.parse(passedOptions);
		var parsed = JSON.parse(passedjson);
		var clusterName='';var clusterUUID='';
		
		$scope.options = options;
		$scope.JSONdata = parsed;
		
		for (var i in parsed){
			var parsedElement = parsed[i];
			if(parsedElement.subnet_reference &amp;&amp; parsedElement.subnet_reference.uuid){
				for(var j in options ){
					if( j == parsedElement.subnet_reference.uuid){
						clusterName = options[j].cluster_name;
						clusterUUID = options[j].cluster_uuid;
					}
				}
			}
		}
		
		$scope.clusterName = clusterName;
		$scope.clusterUUID = clusterUUID;
		
		
		
		
		
		
		$scope.global_configuration = true;

		var provider='';

		for(var i in parsed)
			if(parsed[i].net_name){
				provider = 'vmware';
				break;
			}else{
				provider = 'nutanix';
				break;
			}

		$scope.provider = provider;

	};

	//$scope.initializedEditModal --&gt; initialize all the variables with values from editJSON to render it into editModal
	//PARAMS : index    --&gt; provide the index value to selected entry from the table
	//         editJSON --&gt; contains the JSON of selected entry
	//         rootFlag --&gt; states whether entry is root entry or ebs entry
	$scope.initializeEditModal = function (index, editJSON) {
		$scope.edit ={};
		$scope.edit.index = index;

		if($scope.provider == 'nutanix'){
			$scope.edit.name = 'NIC-'+(index+1);
			$scope.edit.value = (editJSON &amp;&amp; editJSON.subnet_reference)?editJSON.subnet_reference.uuid:'';

			$scope.edit.runtime = (editJSON &amp;&amp; editJSON.runtime &amp;&amp; editJSON.runtime.subnet_reference &amp;&amp; editJSON.runtime.subnet_reference.name)?editJSON.runtime.subnet_reference.name:(editJSON &amp;&amp; editJSON.runtime &amp;&amp; editJSON.runtime.subnet_reference)?editJSON.runtime.subnet_reference:false;	

			$scope.edit.disabled = (editJSON &amp;&amp; editJSON.disabled &amp;&amp; editJSON.disabled.subnet_reference &amp;&amp; editJSON.disabled.subnet_reference.name &amp;&amp; editJSON.disabled.subnet_reference.name+''=='true')?false:(editJSON &amp;&amp; editJSON.disabled &amp;&amp; editJSON.disabled.subnet_reference &amp;&amp; editJSON.disabled.subnet_reference+''=='true')?false:true;	
			
		}else{
			
			//alert('You can set or edit this field in Calm GUI.');
			return;
			
			$scope.edit.nic_type = editJSON.nic_type;
			$scope.edit.net_name = editJSON.net_name;

			$scope.edit.runtime = {};
			$scope.edit.runtime.nic_type = (editJSON.runtime.nic_type)?editJSON.runtime.nic_type:false;
			$scope.edit.runtime.net_name = (editJSON.runtime.net_name)?editJSON.runtime.net_name:false;

			$scope.edit.disabled = {};
			$scope.edit.disabled.nic_type = (editJSON.disabled.nic_type+''=='true')?false:true;
			$scope.edit.disabled.net_name = (editJSON.disabled.net_name+''=='true')?false:true;
		}
	};

	//$scope.editEntry --&gt; edit the specific entry from the main JSON
	$scope.editEntry = function (editJSON) {

		if($scope.provider == 'nutanix'){

			
			if(!$scope.JSONdata[editJSON.index])
				$scope.JSONdata[editJSON.index] = {};
				
			if(!$scope.JSONdata[editJSON.index].subnet_reference){
				$scope.JSONdata[editJSON.index].subnet_reference = {
					"kind": "subnet",
					"type": "",
					"name": "",
					"uuid": ""
				};
			}
			$scope.JSONdata[editJSON.index].subnet_reference.uuid = editJSON.value;
			
			if(!$scope.JSONdata[editJSON.index].runtime)
				$scope.JSONdata[editJSON.index].runtime = {};
			
			$scope.JSONdata[editJSON.index].runtime.subnet_reference = editJSON.runtime;	
			
			if(editJSON.value){
				$scope.clusterName = $scope.options[editJSON.value].cluster_name;
				$scope.clusterUUID = $scope.options[editJSON.value].cluster_uuid;	
			}
			
		}else{

			$scope.JSONdata[editJSON.index].nic_type = editJSON.nic_type;
			$scope.JSONdata[editJSON.index].net_name = editJSON.net_name;

			$scope.JSONdata[editJSON.index].runtime = {};

			$scope.JSONdata[editJSON.index].runtime.nic_type = editJSON.runtime.nic_type;
			$scope.JSONdata[editJSON.index].runtime.net_name = editJSON.runtime.net_name;

		}


		var service_data = JSON.parse(g_form.getValue('service_data'));
		for (var i in service_data) {
		    for (var j in service_data[i]) {
		        if ((j).localeCompare("service_configuration") == 0) {
		              for (var k in service_data[i][j]) {
		                var categary = $scope.passedTitle;
		                if (((k.trim()).localeCompare(categary.trim())) == 0){
							service_data[i][j][k][$scope.passedCategory][$scope.passedSysId] = $scope.JSONdata;
						}		                    
		            }
		        }
		    }
		}
//		$scope.$emit('updateEvent', service_data);
		g_form.setValue('service_data', JSON.stringify(service_data));
	};
});


app.directive('networkProfilesUiPage', function() {
	return {
		restrict: 'A',
		scope: {
			passedTitle: '@',
			passedCategory: '@',
			passedSysId: '@',
			passedJson: '@'
		},
		controller: "networkProfilesController",
		template: '&lt;div ng-init="parsingJSON(passedJson);"&gt;&lt;div class="portlist_main-container"&gt;&lt;table class="table"&gt;&lt;thead&gt;&lt;tr class="padded-row"&gt;&lt;th class="padded-fields"&gt;Actions&lt;/th&gt;&lt;th class="padded-fields"&gt;Nic Name&lt;/th&gt;&lt;th class="padded-fields"&gt;Security Group&lt;/th&gt;&lt;th class="padded-fields"&gt;Virtual Network&lt;/th&gt;&lt;th class="padded-fields"&gt;Subnet&lt;/th&gt;&lt;th class="padded-fields"&gt;Public IP Config Name&lt;/th&gt;&lt;th class="padded-fields"&gt;Public IP Config Allocation Method&lt;/th&gt;&lt;th class="padded-fields"&gt;Public IP Config DNS Label&lt;/th&gt;&lt;th class="padded-fields"&gt;Private IP Config Allocation Method&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr ng-if="data.data_source_reference==null" ng-repeat="data in JSONdata"&gt;&lt;td class="padded-fields"&gt;&lt;a href="#" data-toggle="modal" data-target="#_editModal" ng-click="initializeEditModal($index, data, false);"&gt;&lt;i id="ebsDataIcon" class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.nic_name}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.nsg_name}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.vnet_name}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.subnet_name}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.public_ip_info.ip_name}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.public_ip_info.ip_allocation_method}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.public_ip_info.dns_label}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.private_ip_info.ip_allocation_method}}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog" ng-if="false"&gt;&lt;div class="modal-dialog"&gt;&lt;div class="modal-content"&gt;&lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt;&lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt;&lt;/div&gt;&lt;div class="modal-body"&gt;&lt;form name="editForm"&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Nic Name&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.nic_name" type="checkbox" ng-disabled="edit.disabled.nic_name" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.nic_name" ng-disabled="edit.disabled.nic_name" /&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt; &lt;label for="volume_type"&gt;Security Group&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input type="checkbox" disabled/&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" style="font-style: italic;" value="Use Calm to set/edit this field" disabled/&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Virtual Network&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input type="checkbox" disabled/&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" style="font-style: italic;" value="Use Calm to set/edit this field" disabled/&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt; &lt;label for="volume_type"&gt;Subnet&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input type="checkbox" disabled/&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" style="font-style: italic;" value="Use Calm to set/edit this field" disabled/&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Public IP Config Name&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.ip_name" type="checkbox" ng-disabled="edit.disabled.ip_name" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.ip_name" ng-disabled="edit.disabled.ip_name" /&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt; &lt;label for="volume_type"&gt;Public IP Config Allocation Method&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.public_ip_allocation_method" type="checkbox" ng-disabled="edit.disabled.public_ip_allocation_method" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.public_ip_allocation_method" ng-disabled="edit.disabled.public_ip_allocation_method" /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Public IP Config DNS Label&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.dns_label" type="checkbox" ng-disabled="edit.disabled.dns_label" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.dns_label" ng-disabled="edit.disabled.dns_label" /&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt; &lt;label for="volume_type"&gt;Private IP Config Allocation Method&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.private_ip_allocation_method" type="checkbox" ng-disabled="edit.disabled.private_ip_allocation_method" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.private_ip_allocation_method" ng-disabled="edit.disabled.private_ip_allocation_method" /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/form&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt; &lt;button type="button" class="btn btn-default portlist_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt; &lt;button type="button" class="btn btn-primary portlist_btn-modal" data-dismiss="modal" ng-click="editEntry(edit);"&gt;Save&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog"&gt; &lt;div class="modal-dialog"&gt; &lt;div class="modal-content"&gt; &lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt; &lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt; &lt;/div&gt;&lt;div class="modal-body"&gt; &lt;p style="text-align: center;font-size: medium;"&gt;You can set or edit this field in Calm GUI.&lt;/p&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt;&lt;button type="button" class="btn btn-default disk_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;'
	};
});

app.controller('networkProfilesController', function($scope) {

	$scope.JSONdata = {};

	$scope.parsingJSON = function(passedjson) {
		$scope.JSONdata = JSON.parse(passedjson);
		$scope.global_configuration = true;
	};

	//$scope.initializedEditModal --&gt; initialize all the variables with values from editJSON to render it into editModal
	//PARAMS : index    --&gt; provide the index value to selected entry from the table
	//         editJSON --&gt; contains the JSON of selected entry
	//         rootFlag --&gt; states whether entry is root entry or ebs entry
	$scope.initializeEditModal = function (index, editJSON) {
		
		//alert('You can set or edit this field in Calm GUI.');
		return;
		
		$scope.edit ={};
		$scope.edit.index = index;
		$scope.edit.nic_name = editJSON.nic_name;
		$scope.edit.nsg_name = editJSON.nsg_name;
		$scope.edit.vnet_name = editJSON.vnet_name;
		$scope.edit.subnet_name = editJSON.subnet_name;
		$scope.edit.ip_name = editJSON.public_ip_info.ip_name;
		$scope.edit.public_ip_allocation_method = editJSON.public_ip_info.ip_allocation_method;
		$scope.edit.dns_label = editJSON.public_ip_info.dns_label;
		$scope.edit.private_ip_allocation_method = editJSON.private_ip_info.ip_allocation_method;

		$scope.edit.runtime = {};
		$scope.edit.runtime.nic_name = (editJSON.runtime.nic_name)?editJSON.runtime.nic_name:false;
		$scope.edit.runtime.nsg_name = false;//(editJSON.runtime.nsg_name)?editJSON.runtime.nsg_name:false;
		$scope.edit.runtime.vnet_name = false;//(editJSON.runtime.vnet_name)?editJSON.runtime.vnet_name:false;
		$scope.edit.runtime.subnet_name = false;//(editJSON.runtime.subnet_name)?editJSON.runtime.subnet_name:false;
		$scope.edit.runtime.ip_name = (editJSON.runtime.public_ip_info &amp;&amp; editJSON.runtime.public_ip_info.ip_name)?editJSON.runtime.public_ip_info.ip_name:false;
		$scope.edit.runtime.public_ip_allocation_method = (editJSON.runtime.public_ip_info &amp;&amp; editJSON.runtime.public_ip_info.ip_allocation_method)?editJSON.runtime.public_ip_info.ip_allocation_method:false;
		$scope.edit.runtime.dns_label = (editJSON.runtime.public_ip_info &amp;&amp; editJSON.runtime.public_ip_info.dns_label)?editJSON.runtime.public_ip_info.dns_label:false;
		$scope.edit.runtime.private_ip_allocation_method = (editJSON.runtime.private_ip_info &amp;&amp; editJSON.runtime.private_ip_info.ip_allocation_method)?editJSON.runtime.private_ip_info.ip_allocation_method:false;

		$scope.edit.disabled = {};
		$scope.edit.disabled.nic_name = (editJSON.disabled.nic_name+''=='true')?false:true;
		$scope.edit.disabled.nsg_name = true;//(editJSON.disabled.nsg_name+''=='true')?false:true;
		$scope.edit.disabled.vnet_name = true;//(editJSON.disabled.vnet_name+''=='true')?false:true;
		$scope.edit.disabled.subnet_name = true;//(editJSON.disabled.subnet_name+''=='true')?false:true;
		$scope.edit.disabled.ip_name = (editJSON.disabled.public_ip_info &amp;&amp; editJSON.disabled.public_ip_info.ip_name+''=='true')?false:true;
		$scope.edit.disabled.public_ip_allocation_method = (editJSON.disabled.public_ip_info &amp;&amp; editJSON.disabled.public_ip_info.ip_allocation_method+''=='true')?false:true;
		$scope.edit.disabled.dns_label = (editJSON.disabled.public_ip_info &amp;&amp; editJSON.disabled.public_ip_info.dns_label+''=='true')?false:true;
		$scope.edit.disabled.private_ip_allocation_method = (editJSON.disabled.private_ip_info &amp;&amp; editJSON.disabled.private_ip_info.ip_allocation_method+''=='true')?false:true;

	};

	//$scope.editEntry --&gt; edit the specific entry from the main JSON
	$scope.editEntry = function (editJSON) {

		$scope.JSONdata[editJSON.index].nic_name = editJSON.nic_name;
		$scope.JSONdata[editJSON.index].nsg_name = editJSON.nsg_name;
		$scope.JSONdata[editJSON.index].vnet_name = editJSON.vnet_name;
		$scope.JSONdata[editJSON.index].subnet_name = editJSON.subnet_name;
		$scope.JSONdata[editJSON.index].public_ip_info.ip_name = editJSON.ip_name;
		$scope.JSONdata[editJSON.index].public_ip_info.ip_allocation_method = editJSON.public_ip_allocation_method;
		$scope.JSONdata[editJSON.index].public_ip_info.dns_label = editJSON.dns_label;
		$scope.JSONdata[editJSON.index].private_ip_info.ip_allocation_method = editJSON.private_ip_allocation_method;


		$scope.JSONdata[editJSON.index].runtime.nic_name = editJSON.runtime.nic_name;
		$scope.JSONdata[editJSON.index].runtime.nsg_name = editJSON.runtime.nsg_name;
		$scope.JSONdata[editJSON.index].runtime.vnet_name = editJSON.runtime.vnet_name;
		$scope.JSONdata[editJSON.index].runtime.subnet_name = editJSON.runtime.subnet_name;

		$scope.JSONdata[editJSON.index].runtime.public_ip_info = {};
		$scope.JSONdata[editJSON.index].runtime.private_ip_info  = {};

		$scope.JSONdata[editJSON.index].runtime.public_ip_info.ip_name = editJSON.runtime.ip_name;
		$scope.JSONdata[editJSON.index].runtime.public_ip_info.ip_allocation_method = editJSON.runtime.public_ip_allocation_method;
		$scope.JSONdata[editJSON.index].runtime.public_ip_info.dns_label = editJSON.runtime.dns_label;
		$scope.JSONdata[editJSON.index].runtime.private_ip_info.ip_allocation_method = editJSON.runtime.private_ip_allocation_method;

		var service_data = JSON.parse(g_form.getValue('service_data'));
		service_data[$scope.passedTitle][$scope.passedCategory][$scope.passedSysId] = $scope.JSONdata;
		$scope.$emit('updateEvent', service_data);
		g_form.setValue('service_data', JSON.stringify(service_data));
	};
});



app.directive('simpleDiskUiPage', function() {
	return {
		restrict: 'A',
		scope: {
			passedTitle: '@',
			passedCategory: '@',
			passedSysId: '@',
			passedJson: '@'
		},
		controller: "simpleDiskController",
		template: '&lt;div ng-init="parsingJSON(passedJson);"&gt;&lt;div class="portlist_main-container"&gt;&lt;table class="table"&gt;&lt;thead&gt;&lt;tr class="padded-row"&gt;&lt;th class="padded-fields"&gt;Actions&lt;/th&gt;&lt;th class="padded-fields"&gt;Name&lt;/th&gt;&lt;th class="padded-fields"&gt;Use existing disk&lt;/th&gt;&lt;th class="padded-fields"&gt;Disk&lt;/th&gt;&lt;th class="padded-fields"&gt;Storage Type&lt;/th&gt;&lt;th class="padded-fields"&gt;Source Image&lt;/th&gt;&lt;th class="padded-fields"&gt;Size in GB&lt;/th&gt;&lt;th class="padded-fields"&gt;Delete when instance is deleted&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr ng-if="data.data_source_reference==null" ng-repeat="data in JSONdata"&gt;&lt;td class="padded-fields"&gt;&lt;a href="#" data-toggle="modal" data-target="#_editModal" ng-click="initializeEditModal($index, data, false);"&gt;&lt;i id="ebsDataIcon" class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="padded-fields"&gt;{{(data.boot)?\'BOOT DISK\':\'ADDITIONAL DISK\'}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{(data.source)?true:false}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.source}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.initializeParams.diskType}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.initializeParams.sourceImage}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.initializeParams.diskSizeGb}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.autoDelete}}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog" ng-if="false"&gt;&lt;div class="modal-dialog"&gt;&lt;div class="modal-content"&gt;&lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt;&lt;h4 class="modal-title"&gt;{{(edit.boot)?\'BOOT DISK\':\'ADDITIONAL DISK\'}}&lt;/h4&gt;&lt;/div&gt;&lt;div class="modal-body"&gt;&lt;form name="editForm"&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt;&lt;div class="form-group"&gt; &lt;input ng-model="edit.useExisting" type="checkbox" /&gt;Use existing disk&lt;/div&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt; &lt;label for="volume_type"&gt;Disk&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.source" type="checkbox" ng-disabled="edit.disabled.source" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.source" ng-disabled="edit.disabled.source" /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Storage Type&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.diskType" type="checkbox" ng-disabled="edit.disabled.diskType" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.diskType" ng-disabled="edit.disabled.diskType" /&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt; &lt;label for="volume_type"&gt;Source Image&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.sourceImage" type="checkbox" ng-disabled="edit.disabled.sourceImage" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.sourceImage" ng-disabled="edit.disabled.sourceImage" /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Size in GB&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.diskSizeGb" type="checkbox" ng-disabled="edit.disabled.diskSizeGb" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.diskSizeGb" ng-disabled="edit.disabled.diskSizeGb" /&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt;&lt;div class="form-group"&gt; &lt;input ng-model="edit.autoDelete" type="checkbox" ng-disabled="edit.disabled.autoDelete" /&gt;Delete when instance is deleted&lt;/div&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.autoDelete" type="checkbox" ng-disabled="edit.disabled.autoDelete" /&gt;Runtime&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/form&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt; &lt;button type="button" class="btn btn-default portlist_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt; &lt;button type="button" class="btn btn-primary portlist_btn-modal" data-dismiss="modal" ng-click="editEntry(edit);"&gt;Save&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog"&gt; &lt;div class="modal-dialog"&gt; &lt;div class="modal-content"&gt; &lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt; &lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt; &lt;/div&gt;&lt;div class="modal-body"&gt; &lt;p style="text-align: center;font-size: medium;"&gt;You can set or edit this field in Calm GUI.&lt;/p&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt;&lt;button type="button" class="btn btn-default disk_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;'
	};
});

app.controller('simpleDiskController', function($scope) {

	$scope.JSONdata = {};

	$scope.parsingJSON = function(passedjson) {
		$scope.JSONdata = JSON.parse(passedjson);
		$scope.global_configuration = true;
	};

	//$scope.initializedEditModal --&gt; initialize all the variables with values from editJSON to render it into editModal
	//PARAMS : index    --&gt; provide the index value to selected entry from the table
	//         editJSON --&gt; contains the JSON of selected entry
	//         rootFlag --&gt; states whether entry is root entry or ebs entry
	$scope.initializeEditModal = function (index, editJSON) {
		
		//alert('You can set or edit this field in Calm GUI.');
		return;
		
		$scope.edit ={};
		$scope.edit.index = index;
		$scope.edit.boot = editJSON.boot;
		$scope.edit.diskType = editJSON.initializeParams.diskType;
		$scope.edit.sourceImage = editJSON.initializeParams.sourceImage;
		$scope.edit.diskSizeGb = editJSON.initializeParams.diskSizeGb;
		$scope.edit.autoDelete = editJSON.autoDelete;

		$scope.edit.useExisting = (editJSON.source)?true:false;
		$scope.edit.source = editJSON.source;

		$scope.edit.runtime = {};
		$scope.edit.runtime.diskType = (editJSON.runtime.initializeParams &amp;&amp; editJSON.runtime.initializeParams.diskType)?editJSON.runtime.initializeParams.diskType:false;
		$scope.edit.runtime.sourceImage = (editJSON.runtime.initializeParams &amp;&amp; editJSON.runtime.initializeParams.sourceImage)?editJSON.runtime.initializeParams.sourceImage:false;
		$scope.edit.runtime.diskSizeGb = (editJSON.runtime.initializeParams &amp;&amp; editJSON.runtime.initializeParams.diskSizeGb)?editJSON.runtime.initializeParams.diskSizeGb:false;
		$scope.edit.runtime.autoDelete = (editJSON.runtime.autoDelete)?editJSON.runtime.autoDelete:false;		
		$scope.edit.runtime.source = (editJSON.runtime.source)?editJSON.runtime.source:false;		


		$scope.edit.disabled = {};
		$scope.edit.disabled.diskType = (editJSON.disabled.initializeParams &amp;&amp; editJSON.disabled.initializeParams.diskType+''=='true')?false:true;
		$scope.edit.disabled.sourceImage = (editJSON.disabled.initializeParams &amp;&amp; editJSON.disabled.initializeParams.sourceImage+''=='true')?false:true;
		$scope.edit.disabled.diskSizeGb = (editJSON.disabled.initializeParams &amp;&amp; editJSON.disabled.initializeParams.diskSizeGb+''=='true')?false:true;
		$scope.edit.disabled.autoDelete = (editJSON.disabled.autoDelete+''=='true')?false:true;
		$scope.edit.disabled.source = (editJSON.disabled.source+''=='true')?false:true;	
	};

	//$scope.editEntry --&gt; edit the specific entry from the main JSON
	$scope.editEntry = function (editJSON) {

		$scope.JSONdata[editJSON.index].initializeParams.diskType = editJSON.diskType;
		$scope.JSONdata[editJSON.index].initializeParams.sourceImage = editJSON.sourceImage;
		$scope.JSONdata[editJSON.index].initializeParams.diskSizeGb = editJSON.diskSizeGb;
		$scope.JSONdata[editJSON.index].autoDelete = editJSON.autoDelete;

		$scope.JSONdata[editJSON.index].source = editJSON.source;

		$scope.JSONdata[editJSON.index].runtime.initializeParams = {};

		$scope.JSONdata[editJSON.index].runtime.initializeParams.diskType = editJSON.runtime.diskType;
		$scope.JSONdata[editJSON.index].runtime.initializeParams.sourceImage = editJSON.runtime.sourceImage;
		$scope.JSONdata[editJSON.index].runtime.initializeParams.diskSizeGb = editJSON.runtime.diskSizeGb;
		$scope.JSONdata[editJSON.index].runtime.autoDelete = editJSON.runtime.autoDelete;
		$scope.JSONdata[editJSON.index].runtime.source = editJSON.runtime.source;


		var service_data = JSON.parse(g_form.getValue('service_data'));
		service_data[$scope.passedTitle][$scope.passedCategory][$scope.passedSysId] = $scope.JSONdata;
		$scope.$emit('updateEvent', service_data);
		g_form.setValue('service_data', JSON.stringify(service_data));
	};
});




app.directive('blankDisksUiPage', function() {
	return {
		restrict: 'A',
		scope: {
			passedTitle: '@',
			passedCategory: '@',
			passedSysId: '@',
			passedJson: '@'
		},
		controller: "blankDisksController",
		template: '&lt;div ng-init="parsingJSON(passedJson);"&gt;&lt;div class="portlist_main-container"&gt;&lt;table class="table"&gt;&lt;thead&gt;&lt;tr class="padded-row"&gt;&lt;th class="padded-fields"&gt;Actions&lt;/th&gt;&lt;th class="padded-fields"&gt;Disk Type&lt;/th&gt;&lt;th class="padded-fields"&gt;Disk Name&lt;/th&gt;&lt;th class="padded-fields"&gt;Size in GB&lt;/th&gt;&lt;th class="padded-fields"&gt;Delete when instance is deleted&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr ng-repeat="data in JSONdata"&gt;&lt;td class="padded-fields"&gt;&lt;a href="#" data-toggle="modal" data-target="#_editModal" ng-click="initializeEditModal($index, data, false);"&gt;&lt;i id="ebsDataIcon" class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.disk_type}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.name}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.sizeGb}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.autoDelete}}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog" ng-if="false"&gt;&lt;div class="modal-dialog"&gt;&lt;div class="modal-content"&gt;&lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt;&lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt;&lt;/div&gt;&lt;div class="modal-body"&gt;&lt;form name="editForm"&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Disk Type&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.disk_type" type="checkbox" ng-disabled="edit.disabled.disk_type" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.disk_type" ng-disabled="edit.disabled.disk_type" /&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt; &lt;label for="volume_type"&gt;Disk Name&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.name" type="checkbox" ng-disabled="edit.disabled.name" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.name" ng-disabled="edit.disabled.name" /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Size in GB&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.sizeGb" type="checkbox" ng-disabled="edit.disabled.sizeGb" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.sizeGb" ng-disabled="edit.disabled.sizeGb" /&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt;&lt;div class="form-group"&gt; &lt;input ng-model="edit.autoDelete" type="checkbox" ng-disabled="!global_configuration" ng-disabled="edit.disabled.autoDelete" /&gt;Delete when instance is deleted&lt;/div&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.autoDelete" type="checkbox" ng-disabled="edit.disabled.autoDelete" /&gt;Runtime&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/form&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt; &lt;button type="button" class="btn btn-default portlist_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt; &lt;button type="button" class="btn btn-primary portlist_btn-modal" data-dismiss="modal" ng-click="editEntry(edit);"&gt;Save&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog"&gt; &lt;div class="modal-dialog"&gt; &lt;div class="modal-content"&gt; &lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt; &lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt; &lt;/div&gt;&lt;div class="modal-body"&gt; &lt;p style="text-align: center;font-size: medium;"&gt;You can set or edit this field in Calm GUI.&lt;/p&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt;&lt;button type="button" class="btn btn-default disk_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;'
	};
});

app.controller('blankDisksController', function($scope) {

	$scope.JSONdata = {};

	$scope.parsingJSON = function(passedjson) {
		$scope.JSONdata = JSON.parse(passedjson);
		$scope.global_configuration = true;
	};

	//$scope.initializedEditModal --&gt; initialize all the variables with values from editJSON to render it into editModal
	//PARAMS : index    --&gt; provide the index value to selected entry from the table
	//         editJSON --&gt; contains the JSON of selected entry
	//         rootFlag --&gt; states whether entry is root entry or ebs entry
	$scope.initializeEditModal = function (index, editJSON) {
		
		//alert('You can set or edit this field in Calm GUI.');
		return;
		
		$scope.edit ={};
		$scope.edit.index = index;
		$scope.edit.disk_type = editJSON.disk_type;
		$scope.edit.name = editJSON.name;
		$scope.edit.sizeGb = editJSON.sizeGb;
		$scope.edit.autoDelete = editJSON.autoDelete;

		$scope.edit.runtime = {};
		$scope.edit.runtime.disk_type = (editJSON.runtime.disk_type)?editJSON.runtime.disk_type:false;
		$scope.edit.runtime.name = (editJSON.runtime.name)?editJSON.runtime.name:false;
		$scope.edit.runtime.sizeGb = (editJSON.runtime.sizeGb)?editJSON.runtime.sizeGb:false;
		$scope.edit.runtime.autoDelete = (editJSON.runtime.autoDelete)?editJSON.runtime.autoDelete:false;		

		$scope.edit.disabled = {};
		$scope.edit.disabled.disk_type = (editJSON.disabled.disk_type+''=='true')?false:true;	
		$scope.edit.disabled.name = (editJSON.disabled.name+''=='true')?false:true;	
		$scope.edit.disabled.sizeGb = (editJSON.disabled.sizeGb+''=='true')?false:true;	
		$scope.edit.disabled.autoDelete = (editJSON.disabled.autoDelete+''=='true')?false:true;	
	};

	//$scope.editEntry --&gt; edit the specific entry from the main JSON
	$scope.editEntry = function (editJSON) {

		$scope.JSONdata[editJSON.index].disk_type = editJSON.disk_type;
		$scope.JSONdata[editJSON.index].name = editJSON.name;
		$scope.JSONdata[editJSON.index].sizeGb = editJSON.sizeGb;
		$scope.JSONdata[editJSON.index].autoDelete = editJSON.autoDelete;

		$scope.JSONdata[editJSON.index].runtime = {};

		$scope.JSONdata[editJSON.index].runtime.disk_type = editJSON.runtime.disk_type;
		$scope.JSONdata[editJSON.index].runtime.name = editJSON.runtime.name;
		$scope.JSONdata[editJSON.index].runtime.sizeGb = editJSON.runtime.sizeGb;
		$scope.JSONdata[editJSON.index].runtime.autoDelete = editJSON.runtime.autoDelete;

		var service_data = JSON.parse(g_form.getValue('service_data'));
		service_data[$scope.passedTitle][$scope.passedCategory][$scope.passedSysId] = $scope.JSONdata;
		$scope.$emit('updateEvent', service_data);
		g_form.setValue('service_data', JSON.stringify(service_data));
	};
});


app.directive('networkingUiPage', function() {
	return {
		restrict: 'A',
		scope: {
			passedTitle: '@',
			passedCategory: '@',
			passedSysId: '@',
			passedJson: '@'
		},
		controller: "networkingController",
		template: '&lt;div ng-init="parsingJSON(passedJson);"&gt;&lt;div class="portlist_main-container"&gt;&lt;table class="table"&gt;&lt;thead&gt;&lt;tr class="padded-row"&gt;&lt;th class="padded-fields"&gt;Actions&lt;/th&gt;&lt;th class="padded-fields"&gt;Network&lt;/th&gt;&lt;th class="padded-fields"&gt;Subnetwork&lt;/th&gt;&lt;th class="padded-fields"&gt;Access Configuration Name&lt;/th&gt;&lt;th class="padded-fields"&gt;Access Configuration Type&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr ng-repeat="data in JSONdata"&gt;&lt;td class="padded-fields"&gt;&lt;a href="#" data-toggle="modal" data-target="#_editModal" ng-click="initializeEditModal($index, data, false);"&gt;&lt;i id="ebsDataIcon" class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.network}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.subnetwork}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.accessConfigs[0].name}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.accessConfigs[0].config_type}}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog" ng-if="false"&gt;&lt;div class="modal-dialog"&gt;&lt;div class="modal-content"&gt;&lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt;&lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt;&lt;/div&gt;&lt;div class="modal-body"&gt;&lt;form name="editForm"&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Network&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.network" type="checkbox" ng-disabled="edit.disabled.network" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.network" ng-disabled="edit.disabled.network" /&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt; &lt;label for="volume_type"&gt;Subnetwork&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.subnetwork" type="checkbox" ng-disabled="edit.disabled.subnetwork" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.subnetwork" ng-disabled="edit.disabled.subnetwork" /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Access Configuration Name&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.name" type="checkbox" ng-disabled="edit.disabled.name" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.name" ng-disabled="edit.disabled.name" /&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Access Configuration Type&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.config_type" type="checkbox" ng-disabled="edit.disabled.config_type" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.config_type" ng-disabled="edit.disabled.config_type" /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/form&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt; &lt;button type="button" class="btn btn-default portlist_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt; &lt;button type="button" class="btn btn-primary portlist_btn-modal" data-dismiss="modal" ng-click="editEntry(edit);"&gt;Save&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog"&gt; &lt;div class="modal-dialog"&gt; &lt;div class="modal-content"&gt; &lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt; &lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt; &lt;/div&gt;&lt;div class="modal-body"&gt; &lt;p style="text-align: center;font-size: medium;"&gt;You can set or edit this field in Calm GUI.&lt;/p&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt;&lt;button type="button" class="btn btn-default disk_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;'
	};
});

app.controller('networkingController', function($scope) {

	$scope.JSONdata = {};

	$scope.parsingJSON = function(passedjson) {
		$scope.JSONdata = JSON.parse(passedjson);
		$scope.global_configuration = true;
	};

	//$scope.initializedEditModal --&gt; initialize all the variables with values from editJSON to render it into editModal
	//PARAMS : index    --&gt; provide the index value to selected entry from the table
	//         editJSON --&gt; contains the JSON of selected entry
	//         rootFlag --&gt; states whether entry is root entry or ebs entry
	$scope.initializeEditModal = function (index, editJSON) {
		
		//alert('You can set or edit this field in Calm GUI.');
		return;
		
		$scope.edit ={};
		$scope.edit.index = index;
		$scope.edit.network = editJSON.network;
		$scope.edit.subnetwork = editJSON.subnetwork;
		$scope.edit.name = editJSON.accessConfigs[0].name;
		$scope.edit.config_type = editJSON.accessConfigs[0].config_type;

		$scope.edit.runtime = {};
		$scope.edit.runtime.network = (editJSON.runtime.network)?editJSON.runtime.network:false;
		$scope.edit.runtime.subnetwork = (editJSON.runtime.subnetwork)?editJSON.runtime.subnetwork:false;
		$scope.edit.runtime.name = (editJSON.runtime.accessConfigs[0].name)?editJSON.runtime.accessConfigs[0].name:false;
		$scope.edit.runtime.config_type = (editJSON.runtime.accessConfigs[0].config_type)?editJSON.runtime.accessConfigs[0].config_type:false;		

		$scope.edit.disabled = {};
		$scope.edit.disabled.network = (editJSON.disabled.network+''=='true')?false:true;	
		$scope.edit.disabled.subnetwork = (editJSON.disabled.subnetwork+''=='true')?false:true;	
		$scope.edit.disabled.name = (editJSON.disabled.accessConfigs[0].name+''=='true')?false:true;	
		$scope.edit.disabled.config_type = (editJSON.disabled.accessConfigs[0].config_type+''=='true')?false:true;	

	};

	//$scope.editEntry --&gt; edit the specific entry from the main JSON
	$scope.editEntry = function (editJSON) {

		$scope.JSONdata[editJSON.index].network = editJSON.network;
		$scope.JSONdata[editJSON.index].subnetwork = editJSON.subnetwork;
		$scope.JSONdata[editJSON.index].accessConfigs[0].name = editJSON.name;
		$scope.JSONdata[editJSON.index].accessConfigs[0].config_type = editJSON.config_type;

		$scope.JSONdata[editJSON.index].runtime = {};

		$scope.JSONdata[editJSON.index].runtime.network = editJSON.runtime.network;
		$scope.JSONdata[editJSON.index].runtime.subnetwork = editJSON.runtime.subnetwork;

		$scope.JSONdata[editJSON.index].runtime.accessConfigs = [];
		$scope.JSONdata[editJSON.index].runtime.accessConfigs[0] = {};

		$scope.JSONdata[editJSON.index].runtime.accessConfigs[0].name = editJSON.runtime.name;
		$scope.JSONdata[editJSON.index].runtime.accessConfigs[0].config_type = editJSON.runtime.config_type;

		var service_data = JSON.parse(g_form.getValue('service_data'));
		service_data[$scope.passedTitle][$scope.passedCategory][$scope.passedSysId] = $scope.JSONdata;
		$scope.$emit('updateEvent', service_data);
		g_form.setValue('service_data', JSON.stringify(service_data));
	};
});




app.directive('storageProfileDataDisksUiPage', function() {
	return {
		restrict: 'A',
		scope: {
			passedTitle: '@',
			passedCategory: '@',
			passedSysId: '@',
			passedJson: '@'
		},
		controller: "storageProfileDataDisksController",
		template: '&lt;div ng-init="parsingJSON(passedJson);"&gt;&lt;div class="portlist_main-container"&gt;&lt;table class="table"&gt;&lt;thead&gt;&lt;tr class="padded-row"&gt;&lt;th class="padded-fields"&gt;Actions&lt;/th&gt;&lt;th class="padded-fields"&gt;Disk Name&lt;/th&gt;&lt;th class="padded-fields"&gt;Storage Type&lt;/th&gt;&lt;th class="padded-fields"&gt;Disk Caching Type&lt;/th&gt;&lt;th class="padded-fields"&gt;Size (GB)&lt;/th&gt;&lt;th class="padded-fields"&gt;Disk LUN&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr ng-repeat="data in JSONdata"&gt;&lt;td class="padded-fields"&gt;&lt;a href="#" data-toggle="modal" data-target="#_editModal" ng-click="initializeEditModal($index, data, false);"&gt;&lt;i id="ebsDataIcon" class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.name}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.storage_type}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.caching_type}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.size_in_gb}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.lun}}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog" ng-if="false"&gt;&lt;div class="modal-dialog"&gt;&lt;div class="modal-content"&gt;&lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt;&lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt;&lt;/div&gt;&lt;div class="modal-body"&gt;&lt;form name="editForm"&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Disk Name&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.name" type="checkbox" ng-disabled="edit.disabled.name" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.name" ng-disabled="edit.disabled.name" /&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt; &lt;label for="volume_type"&gt;Storage Type&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.storage_type" type="checkbox" ng-disabled="edit.disabled.storage_type" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.storage_type" ng-disabled="edit.disabled.storage_type" /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Disk Caching Type&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.caching_type" type="checkbox" ng-disabled="edit.disabled.caching_type" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.caching_type" ng-disabled="edit.disabled.caching_type" /&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Size (GB)&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.size_in_gb" type="checkbox" ng-disabled="edit.disabled.size_in_gb" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.size_in_gb" ng-disabled="edit.disabled.size_in_gb" /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Disk LUN&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.lun" type="checkbox" ng-disabled="edit.disabled.lun" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.lun" ng-disabled="edit.disabled.lun" /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/form&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt; &lt;button type="button" class="btn btn-default portlist_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt; &lt;button type="button" class="btn btn-primary portlist_btn-modal" data-dismiss="modal" ng-click="editEntry(edit);"&gt;Save&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog"&gt; &lt;div class="modal-dialog"&gt; &lt;div class="modal-content"&gt; &lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt; &lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt; &lt;/div&gt;&lt;div class="modal-body"&gt; &lt;p style="text-align: center;font-size: medium;"&gt;You can set or edit this field in Calm GUI.&lt;/p&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt;&lt;button type="button" class="btn btn-default disk_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;'
	};
});

app.controller('storageProfileDataDisksController', function($scope) {

	$scope.JSONdata = {};

	$scope.parsingJSON = function(passedjson) {
		$scope.JSONdata = JSON.parse(passedjson);
		$scope.global_configuration = true;
	};

	//$scope.initializedEditModal --&gt; initialize all the variables with values from editJSON to render it into editModal
	//PARAMS : index    --&gt; provide the index value to selected entry from the table
	//         editJSON --&gt; contains the JSON of selected entry
	//         rootFlag --&gt; states whether entry is root entry or ebs entry
	$scope.initializeEditModal = function (index, editJSON) {
		
		//alert('You can set or edit this field in Calm GUI.');
		return;
		
		$scope.edit ={};
		$scope.edit.index = index;
		$scope.edit.name = editJSON.name;
		$scope.edit.storage_type = editJSON.storage_type;
		$scope.edit.caching_type = editJSON.caching_type;
		$scope.edit.size_in_gb = editJSON.size_in_gb;
		$scope.edit.lun = editJSON.lun;

		$scope.edit.runtime = {};
		$scope.edit.runtime.name = (editJSON.runtime.name)?editJSON.runtime.name:false;
		$scope.edit.runtime.storage_type = (editJSON.runtime.storage_type)?editJSON.runtime.storage_type:false;
		$scope.edit.runtime.caching_type = (editJSON.runtime.caching_type)?editJSON.runtime.caching_type:false;
		$scope.edit.runtime.size_in_gb = (editJSON.runtime.size_in_gb)?editJSON.runtime.size_in_gb:false;
		$scope.edit.runtime.lun = (editJSON.runtime.lun)?editJSON.runtime.lun:false;

		$scope.edit.disabled = {};
		$scope.edit.disabled.name = (editJSON.disabled.name+''=='true')?false:true;	
		$scope.edit.disabled.storage_type = (editJSON.disabled.storage_type+''=='true')?false:true;	
		$scope.edit.disabled.caching_type = (editJSON.disabled.caching_type+''=='true')?false:true;	
		$scope.edit.disabled.size_in_gb = (editJSON.disabled.size_in_gb+''=='true')?false:true;	
		$scope.edit.disabled.lun = (editJSON.disabled.lun+''=='true')?false:true;	

	};

	//$scope.editEntry --&gt; edit the specific entry from the main JSON
	$scope.editEntry = function (editJSON) {

		$scope.JSONdata[editJSON.index].name = editJSON.name;
		$scope.JSONdata[editJSON.index].storage_type = editJSON.storage_type;
		$scope.JSONdata[editJSON.index].caching_type = editJSON.caching_type;
		$scope.JSONdata[editJSON.index].size_in_gb = editJSON.size_in_gb;
		$scope.JSONdata[editJSON.index].lun = editJSON.lun;


		$scope.JSONdata[editJSON.index].runtime = {};

		$scope.JSONdata[editJSON.index].runtime.name = editJSON.runtime.name;
		$scope.JSONdata[editJSON.index].runtime.storage_type = editJSON.runtime.storage_type;
		$scope.JSONdata[editJSON.index].runtime.caching_type = editJSON.runtime.caching_type;
		$scope.JSONdata[editJSON.index].runtime.size_in_gb = editJSON.runtime.size_in_gb;
		$scope.JSONdata[editJSON.index].runtime.lun = editJSON.runtime.lun;

		var service_data = JSON.parse(g_form.getValue('service_data'));
		service_data[$scope.passedTitle][$scope.passedCategory][$scope.passedSysId] = $scope.JSONdata;
		$scope.$emit('updateEvent', service_data);
		g_form.setValue('service_data', JSON.stringify(service_data));
	};
});





app.directive('osProfileUiPage', function() {
	return {
		restrict: 'A',
		scope: {
			passedTitle: '@',
			passedCategory: '@',
			passedSysId: '@',
			passedJson: '@'
		},
		controller: "osProfileController",
		template: '&lt;div ng-init="parsingJSON(passedJson);"&gt;&lt;div class="portlist_main-container"&gt;&lt;table class="table"&gt;&lt;thead&gt;&lt;tr class="padded-row"&gt;&lt;th class="padded-fields"&gt;Actions&lt;/th&gt;&lt;th class="padded-fields"&gt;Secrets&lt;/th&gt;&lt;th class="padded-fields"&gt;Vault ID&lt;/th&gt;&lt;th class="padded-fields"&gt;Certificate Count&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr ng-if="JSONdata.length!=0" ng-repeat="data in JSONdata"&gt;&lt;td class="padded-fields"&gt;&lt;a href="#" data-toggle="modal" data-target="#_editModal" ng-click="initializeEditModal($index, data, false);"&gt;&lt;i id="ebsDataIcon" class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="padded-fields"&gt;{{$index+1}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.source_vault_id}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.vault_certificates.length}}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog" ng-if="false"&gt;&lt;div class="modal-dialog"&gt;&lt;div class="modal-content"&gt;&lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt;&lt;h4 class="modal-title"&gt;Secrets&lt;/h4&gt;&lt;/div&gt;&lt;div class="modal-body"&gt;&lt;form name="editForm"&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Vault ID&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.source_vault_id" type="checkbox" ng-disabled="edit.disabled.source_vault_id" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.source_vault_id" ng-disabled="edit.disabled.source_vault_id" /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="row" ng-repeat="(i, data) in edit.vault_certificates"&gt;&lt;div class="col-md-12"&gt; &lt;label for="device"&gt;Certificate Config URL&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.vault_certificates[i].certificate_url" type="checkbox" ng-disabled="edit.disabled.vault_certificates[i].certificate_url" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="data.certificate_url" ng-disabled="edit.disabled.vault_certificates[i].certificate_url" /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/form&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt; &lt;button type="button" class="btn btn-default portlist_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt; &lt;button type="button" class="btn btn-primary portlist_btn-modal" data-dismiss="modal" ng-click="editEntry(edit);"&gt;Save&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog"&gt; &lt;div class="modal-dialog"&gt; &lt;div class="modal-content"&gt; &lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt; &lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt; &lt;/div&gt;&lt;div class="modal-body"&gt; &lt;p style="text-align: center;font-size: medium;"&gt;You can set or edit this field in Calm GUI.&lt;/p&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt;&lt;button type="button" class="btn btn-default disk_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;'
	};
});

app.controller('osProfileController', function($scope) {

	$scope.JSONdata = {};

	$scope.parsingJSON = function(passedjson) {
		$scope.JSONdata = JSON.parse(passedjson);
		$scope.global_configuration = true;
	};

	//$scope.initializedEditModal --&gt; initialize all the variables with values from editJSON to render it into editModal
	//PARAMS : index    --&gt; provide the index value to selected entry from the table
	//         editJSON --&gt; contains the JSON of selected entry
	//         rootFlag --&gt; states whether entry is root entry or ebs entry
	$scope.initializeEditModal = function (index, editJSON) {
		
		//alert('You can set or edit this field in Calm GUI.');
		return;
		
		$scope.edit ={};
		$scope.edit.index = index;
		$scope.edit.source_vault_id = editJSON.source_vault_id;
		$scope.edit.vault_certificates = editJSON.vault_certificates;

		$scope.edit.runtime = {};
		$scope.edit.runtime.source_vault_id = (editJSON.runtime.source_vault_id)?editJSON.runtime.source_vault_id:false;

		$scope.edit.disabled = {};
		$scope.edit.disabled.source_vault_id = (editJSON.disabled.source_vault_id+''=='true')?false:true;	

		for(var i in editJSON.vault_certificates){

			if(!$scope.edit.runtime.vault_certificates)
				$scope.edit.runtime.vault_certificates = {};

			if(!$scope.edit.runtime.vault_certificates[i])
				$scope.edit.runtime.vault_certificates[i]={};


			$scope.edit.runtime.vault_certificates[i].certificate_url = (editJSON.runtime.vault_certificates &amp;&amp; editJSON.runtime.vault_certificates[i] &amp;&amp; editJSON.runtime.vault_certificates[i].certificate_url)?editJSON.runtime.vault_certificates[i].certificate_url:false;	

			if(!$scope.edit.disabled.vault_certificates)
				$scope.edit.disabled.vault_certificates = {};

			if(!$scope.edit.disabled.vault_certificates[i])
				$scope.edit.disabled.vault_certificates[i]={};


			$scope.edit.disabled.vault_certificates[i].certificate_url = (editJSON.disabled.vault_certificates &amp;&amp; editJSON.disabled.vault_certificates[i] &amp;&amp; editJSON.disabled.vault_certificates[i].certificate_url+''=='true')?false:true;	
		}

	};

	//$scope.editEntry --&gt; edit the specific entry from the main JSON
	$scope.editEntry = function (editJSON) {

		$scope.JSONdata[editJSON.index].source_vault_id = editJSON.source_vault_id;
		$scope.JSONdata[editJSON.index].vault_certificates = editJSON.vault_certificates;

		$scope.JSONdata[editJSON.index].runtime = editJSON.runtime;

		var service_data = JSON.parse(g_form.getValue('service_data'));
		service_data[$scope.passedTitle][$scope.passedCategory][$scope.passedSysId] = $scope.JSONdata;
		$scope.$emit('updateEvent', service_data);
		g_form.setValue('service_data', JSON.stringify(service_data));
	};
});






app.directive('guestCustomizationDhcpUiPage', function() {
	return {
		restrict: 'A',
		scope: {
			passedTitle: '@',
			passedCategory: '@',
			passedSysId: '@',
			passedJson: '@'
		},
		controller: "guestCustomizationDhcpController",
		template: '&lt;div ng-init="parsingJSON(passedJson);"&gt;&lt;div class="portlist_main-container"&gt; &lt;table class="table"&gt; &lt;thead&gt; &lt;tr class="padded-row"&gt; &lt;th class="padded-fields"&gt;Actions&lt;/th&gt; &lt;th class="padded-fields"&gt;SNo.&lt;/th&gt; &lt;th class="padded-fields"&gt;Use DHCP&lt;/th&gt; &lt;th class="padded-fields"&gt;Runtime&lt;/th&gt; &lt;/tr&gt;&lt;/thead&gt; &lt;tbody&gt; &lt;tr ng-if="JSONdata.length!=0" ng-repeat="data in JSONdata"&gt; &lt;td class="padded-fields"&gt;&lt;a href="#" data-toggle="modal" data-target="#_editModal" ng-click="initializeEditModal($index, data, false);"&gt;&lt;i id="ebsDataIcon" class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="padded-fields"&gt;{{$index+1}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.is_dhcp}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{(data.runtime.is_dhcp)?data.runtime.is_dhcp:false}}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog" ng-if="false"&gt; &lt;div class="modal-dialog"&gt; &lt;div class="modal-content"&gt; &lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt; &lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt; &lt;/div&gt;&lt;div class="modal-body"&gt; &lt;form name="editForm"&gt; &lt;div class="row"&gt; &lt;div class="col-md-6"&gt; &lt;div class="form-group"&gt; &lt;input ng-model="edit.is_dhcp" type="checkbox" ng-disabled="edit.disabled"/&gt;Use DHCP&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;div class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime" type="checkbox" ng-disabled="edit.disabled"/&gt;Runtime&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/form&gt; &lt;/div&gt;&lt;div class="modal-footer"&gt; &lt;button type="button" class="btn btn-default portlist_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt; &lt;button type="button" class="btn btn-primary portlist_btn-modal" data-dismiss="modal" ng-click="editEntry(edit);"&gt;Save&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog"&gt; &lt;div class="modal-dialog"&gt; &lt;div class="modal-content"&gt; &lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt; &lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt; &lt;/div&gt;&lt;div class="modal-body"&gt; &lt;p style="text-align: center;font-size: medium;"&gt;You can set or edit this field in Calm GUI.&lt;/p&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt;&lt;button type="button" class="btn btn-default disk_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;'
	};
});

app.controller('guestCustomizationDhcpController', function($scope) {

	$scope.JSONdata = {};

	$scope.parsingJSON = function(passedjson) {
		$scope.JSONdata = JSON.parse(passedjson);
		$scope.global_configuration = true;
	};

	//$scope.initializedEditModal --&gt; initialize all the variables with values from editJSON to render it into editModal
	//PARAMS : index    --&gt; provide the index value to selected entry from the table
	//         editJSON --&gt; contains the JSON of selected entry
	//         rootFlag --&gt; states whether entry is root entry or ebs entry
	$scope.initializeEditModal = function (index, editJSON) {
		
		//alert('You can set or edit this field in Calm GUI.');
		return;
		
		$scope.edit ={};
		$scope.edit.index = index;
		$scope.edit.is_dhcp = editJSON.is_dhcp;

		$scope.edit.runtime = (editJSON.runtime.is_dhcp)?editJSON.runtime.is_dhcp:false;
		$scope.edit.disabled = (editJSON.disabled.is_dhcp+''=='true')?false:true;	

	};

	//$scope.editEntry --&gt; edit the specific entry from the main JSON
	$scope.editEntry = function (editJSON) {

		$scope.JSONdata[editJSON.index].is_dhcp = editJSON.is_dhcp;

		$scope.JSONdata[editJSON.index].runtime.is_dhcp = editJSON.runtime;

		var service_data = JSON.parse(g_form.getValue('service_data'));
		service_data[$scope.passedTitle][$scope.passedCategory][$scope.passedSysId] = $scope.JSONdata;
		$scope.$emit('updateEvent', service_data);
		g_form.setValue('service_data', JSON.stringify(service_data));
	};
});










app.directive('multiSelectUiPage', function() {
	return {
		restrict: 'A',
		scope: {
			passedTitle: '@',
			passedCategory: '@',
			passedSysId: '@',
			passedJson: '@',
			passedProfile: '@'
		},
		controller: "multiSelectController",
		template: '&lt;div ng-init="parsingJSON(passedJson);"&gt;&lt;div style="display: -webkit-inline-box; margin: 3px;" &gt;&lt;div ng-repeat="(option, selection) in options" ng-if="selection==true"&gt;&lt;span style="margin: 3px; padding: 5px; border: 1px solid rgba(0, 126, 255, 0.24); line-height: 13px; font-size: 12px; display: inline-block; border-radius: 2px; background-color: rgba(0, 126, 255, 0.08); color: #007eff;"&gt;{{option}}&lt;a href="#" ng-click="unselectOption(option)"&gt;&lt;i class="icon-cross" style="padding-left: 7px;font-size: 11px;margin-top: -4px;"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;select class="form-control" ng-disabled="JSONData.isdisabled+\'\'==\'true\'" ng-change="selectOption()" ng-model="valueAt"&gt;&lt;option ng-repeat="(option, selection) in options" ng-if="selection==false" value="{{option}}" &gt;{{option}}&lt;/option&gt; &lt;/select&gt;&lt;/div&gt;'
	};
});

app.controller('multiSelectController', function($scope) {
	
	$scope.finalArr = [];
	
	$scope.parsingJSON = function(passedJson){
		var parsedJson = JSON.parse(passedJson);
		
		var options = parsedJson.options;
		var value = (parsedJson.value+'').split(',');
		var tmp = {};
		
		for(var i=0; i&lt;options.length; i++){
			
			if(!options[i])
				continue;
			
			tmp[options[i]] = false;
		}
		
		for(var i=0; i&lt;value.length; i++){
			
			if(!value[i])
				continue;
			
			$scope.finalArr.push(value[i]);
			tmp[value[i]] = true;	
		}
	
	//	console.log(JSON.stringify(tmp));
		
		$scope.options = tmp;
	};
	
	$scope.selectOption = function(prof){
		
		if(!$scope.valueAt)
			return;
		
		$scope.options[$scope.valueAt] = true;
		$scope.finalArr.push($scope.valueAt);
		var service_data = JSON.parse(g_form.getValue('service_data'));
		for(var i = 0; i &lt; service_data.length; i++) {
			if(service_data[i].profile + "" == $scope.passedProfile + "") {
				service_data[i]["service_configuration"][$scope.passedTitle][$scope.passedCategory][$scope.passedSysId].value = $scope.finalArr.toString();
				break;
			}
		}
		$scope.$emit('updateEvent', service_data);
		g_form.setValue('service_data', JSON.stringify(service_data));
	};
	
	$scope.unselectOption = function(val){
		
		$scope.options[val] = false;
		
		var arr = $scope.finalArr;
		var index = arr.indexOf(val);
		if (index &gt; -1) {
			arr.splice(index, 1);
		}
		$scope.finalArr = arr;
		
		var service_data = JSON.parse(g_form.getValue('service_data'));
		for(var i = 0; i &lt; service_data.length; i++) {
			if(service_data[i].profile + "" == $scope.passedProfile + "") {
				service_data[i]["service_configuration"][$scope.passedTitle][$scope.passedCategory][$scope.passedSysId].value = $scope.finalArr.toString();
				break;
			}
		}
		$scope.$emit('updateEvent', service_data);
		g_form.setValue('service_data', JSON.stringify(service_data));
	};	
	
});
]]&gt;&lt;/script&gt;&lt;script_name&gt;Calm_Catalog_Service_Config_Script&lt;/script_name&gt;&lt;sys_class_name&gt;sys_ui_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-11-04 20:08:14&lt;/sys_created_on&gt;&lt;sys_id&gt;db9441c237212300fdfc097973990e67&lt;/sys_id&gt;&lt;sys_mod_count&gt;792&lt;/sys_mod_count&gt;&lt;sys_name&gt;x_nuta2_nutanix_ca.Calm_Catalog_Service_&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_script_db9441c237212300fdfc097973990e67&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2022-01-28 12:15:38&lt;/sys_updated_on&gt;&lt;ui_type&gt;0&lt;/ui_type&gt;&lt;use_scoped_format&gt;false&lt;/use_scoped_format&gt;&lt;/sys_ui_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>514645076</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>9402d2272fd50110e49924c62799b6a6</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb91c201d0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table/>
<target_name>x_nuta2_nutanix_ca.Calm_Catalog_Service_</target_name>
<type>UI Script</type>
<update_domain>global</update_domain>
<update_guid>364fa942dd950110d0fec49fffeb33c8</update_guid>
<update_guid_history>364fa942dd950110d0fec49fffeb33c8:514645076,f89545746a59c11084e9b1b230d62920:-1815932151,a339bcf83319c110f0baa0afdc11b0ea:-1317364941,2791647ce195c110e9e7f1c190f68bba:1774119297,9c173e51e300011020df788f9628089c:1557122078,67036df04f2b70105e4b7b29a14de6d9:-1146116258,55f24d34526770109b20c0156f76fe70:-1561615190,aadf98e0262b3010230cec53d890cf22:-1422421270,9b91406893a73010c0b3988359fdcb14:718128568,b12fbf18b5a73010fe53698d637d344e:-1557585283,7b9e7f18caa730107f4c2d92323b2af7:-907589069,566ebbd497a7301022ff64ad375959a5:-1615957069,552ebfd403a730101da0cf2c6adcecec:1685798077,85ecf3d447a7301039e4f16d2c2c1689:-248210078,ee9c73d40ba730109f71d63d08690b89:890754564,b9db7f1445a730103478d94158827139:-450139886,4a5b7394e7a73010b936e3c520d12549:1095799082,7fdabf5429a7301048f362bce4a9019b:27498710,868a7f1452a73010f9179f87d367a043:1275256984,f45aff14cba73010869960088844dab3:-793537998,041abb54f8a7301025eaa3e2db9238c9:667509621,9838331406a73010a58c891967333ef3:75333389,2ed7b3d0a9a730108ec97630ab6898ae:337925491,45d663dc282730102838eb64a7d713fe:1941110481,e747c713667630101347a0d0448e25b3:-941213441,8d6b4a4846d530107c6828749f0c3cc0:542656977,58942fe78fcdb410c339b14a3c68dcf6:-1909333385,92236327c9cdb4106e8f22b64025149e:542656977,6e3067a3a6cdb410924f755dee83c992:307137934,3b9e9beb108db4106bf3b9193173f512:188902735,c14e1b6bac8db410837340bff93203fc:482371759,8cd467136905b410fb1048bb66f94751:-1276783679,9701a71fc9c1b410a0dbd4e35b68a8f5:103044125,cc30e71b7ec1b410b6a72678df6e701e:-445511144,df8f17d756c1b410a288ff7952dec6c0:838107981,1b0c9b9fa581b410bffa78378e24f8b1:-1448809835,d83b935b7fc1b4107eddedc7c2971fb8:293732596,0f929fdf1e81b41041add780b4422521:897399134,5f6cc397b181b410b2fe8519b9277f23:959326907,66e51915eae7a850d8b6abc02c3a5f52:-835124005,9f176a93a553e050729950acf234da56:232693249,f5f469323997605091e3131350e4e829:-286937192,b21d597e63576050e8648e55fe17de2c:-543839925,52a3cd703c17e010e61fe4239ce5176e:994703595,3f6381bc8613e010ef79632a8051b836:270554027,607a612490d7a0102b12b5329720fbfb:1806947322,94e9a1649ad7a01091ab37f668ef6046:533134160,983929e0e1d7a01011baf82abc41a50b:1454109492,0808eda01fd7a0108bb3b7a6cb1b5a28:-304264966,fd876560f3d7a010ea349b9b946f47e8:1806947322,1c26e12021d7a0101d3c80b4482fb6f9:1478319491,e81525e85b97a01061abd9349c22f8ca:2028741381,7c142daced97a0109196ed55983a497a:-874218811,95726d688597a010c9edae68573c3d53:-1451464577,236061682597a010aed899addb5d9020:-596473119,4dae19283397a01008ef346e949a64ca:703727431,a50b45ec3b17a010c7f9c1c2208a4d6c:1690448569,d21a05ac9b17a010feb51c71cf5aef39:45926763,59f705ac1617a010d161c2d7a5cdbb32:-2013706751,78b5052cfc17a01024d563bda2c69b9d:453832083,4e140924e017a010b78252ebb861d36c:-1508475450,ef6db0a06f17a0109b2c9fd08d39b3a7:1364406432,88dbb460aa17a0100a36269d0f7fe811:-1666651089,18b8880d4204a01088c41287d5e350e6:246116453,4001b9930c231410417f8ab2ea23caf8:1767434771,453e6553d2231410ca1da03cdf865eaf:825901171,066d65df13efd0100ea59083700da2e8:1643924948,2ebaa9d759afd0107d813b3bdb8bc56c:-1494678267,b5418d5388afd0101cee4e2756962885:1732416772,8666709b5f6fd0109312b4df880ae430:-1346398271,72e7e7c3c2abd01059e36bc09eb7bb0e:-1684032790,bc13ab0fac6bd0109bcf4e1f6a281e2e:-1187775007,14b79b50d7eb5850e4ac7dd48b5ccaff:-297630690,372ed5cf7f5754505d9184643349ac8c:1751867310,1ad9b5f9db97141035cd34b70b9239a0:-1178534172,746042a47b1b1c104c12902e975bfee6:1294871344,11cebd64861b1c10ebd19b5899365602:-861225798,fc6bb920b61b1c10f508c7d694b19086:-470153584,b62b55e89b971c10701cc3653d2efe80:833119490,ed869f00fe97d8109f77b435469b3b8b:2078304810,3ab9870c3657d8104a4416741440a7c8:169806781,59248f488157d8103f48082defb8a426:1082902511,1a5dc2847ed3d8105c40267a86820d3e:1070983823,5a3bc648aa93d8102f7c645d98d3abb0:-599813286,f3dacb10a71f1010fde64bc8710b279f:1483677380,47372623e64b14d00603be1b22a9a005:1207972165,613919a73f4714d0bb8bff393c818936:-178128522,6e4a3ca3e40714d0188ac98ace57148c:-270649826,78f201def5329490eb49a63970e7bd42:-178128522,1f019a9d757ad0904524e544ab15a7b6:1734213370,e2d4db09a7b2d090064c965edb991c93:-1461006110,ce84134960b2d090b9d21e2d33068296:1734213370,bbf29bc500b2d090a9f82fe995c0b778:1191389125,0b02938576b2d090049d32f049591f76:-1744599707,986f0b05c2b2d090500afadd7ff0ce8d:-1867850108,66ae07c1a0b2d090a17854870b4e53c6:94811044,67adc3c1ceb2d090fe9f3c8190986fcd:1734213370,dcd6a689df32d0909e42f07e5fd66c8a:-1397289451,9bb52249dd32d090cd8aca447ae47c9f:-593556491,e6f4ea09ef32d0901fbf03f40f07e8a2:-754183921,be746a094232d0902583874248013b22:-809043005,c05a5ecdf6fe9090d25357d673b52a30:543359535,709b354d79be9090f0d6420fffe383c1:695471405,dedaf9c9d9be90905b230e309ddf888c:-1956543231,d1197d89e2be9090d06de2bdf919572d:-107136696,2d57358910be9090f77855c4af58804f:890227838,18d3f14595be9090a4a7ff9b9a47fbe1:336611294,1d61f505c7be90903e5f9a370368bdd4:-1943831536,e380b905adbe90900bd34cebfbf8d55e:-391155984,e6ef6d41aebe90902396aa2be4f11661:531034376,c4a91cb84b7610901cab15ec0bc1d795:1734213370,12cd1fe8d67a5c50c6d30100543939a4:-192600108,2b988e84f9fad8506fa837e8ebe527ce:1734213370,7305868483fad850bed8690fc6cff16c:1567337331,1f9098d3bd6a18502f3293e0e4ef7a5b:1652222679,0e260e227d6e9450d7f197b621ffa53a:-819200622,38854eeedd2e9450c5ee3695ddce0557:-436979822,9c2486eee72e9450073ad98a60718d04:1102520626,93520a2e152e9450a3396a231f8a12bb:-1141342446,ef61c26ee92e9450a32c786110faff54:-618451054,bc3979a66d2e94505e6436a12486fdd2:-266094126,d7c2925d8f3e9010c2d93f23c99580bf:-82494624,5d041265bda2d050aabe263db4978f6f:905186290,a01f17f4c36e1050514acd9aba441f18:-819200622,a3be97b45a6e10503f8af615ed62edc3:-1151893866,a41b4ff4f12e1050e79bbf51c6954a89:-1980941514,db6f6634cbea1050b9fba9b40233b49e:-1151893866,69b7a7391a96d4106f5d4b8b213b7efd:1249780560,978a5b7d4756d410f8d649eb0d1bf005:1970777982,9319dff9e256d410ef4522c82b3927f9:462237429,620f433d1e16d4103123a740125c6482:1709956878,a5e3a8b5765a941016c96ac792a6d865:-196782839,d78160758d5a9410cf4dc2cf9a0fc287:1535480701,c5006035955a9410b90f4d4d25b9600e:-1711644659,d358d8fd501a941003ffde342f4d2005:-82960582,96f5187dd61a94109fcbe9f093ee598c:-2142979804,9b90d0391e1a94107f4376ba11b675b2:366082948,235fbf69fcda5410c11f6519b50d3673:938363492,4b3fff692ada54105efb0c788deda951:1088897028,47c6532962965410d5920189d464a54c:1400352789,450e43a1fb96541077dbb975a909b151:-1101333874,3e4c0721a4965410c211a1d888741609:-886552607,da6ef6a512565410bc4d1d45bac31ecd:-804748579,7adcb2a58a56541058c718cde447f082:1181455100,66abf6a1ce565410951e9a75765c5f4e:-1361067728,b815f661b2565410a7b826fbea1dde14:1657652454,0c02f2ed5f1654103fdb743ba9e26f4f:-1793419166,7a60be2d7616541048c06934004ffb38:1866460047,834e262d91165410c6e462a9e2ea94e5:855860207,71ecee6960165410d81357c68e56297a:1842475669,fc1962296116541039f142280c7a7042:2102346355,c437a6e59816541047a490eb8da92a1e:29699666,6ad42a6576165410f093c6f10c7e9ebe:1756225823,97442e2548165410561610499aae7a91:-1540032851,9ab22ea9ded254100ee89f711be67921:-2135041522,d3b2122922d254108b3048e7ef3460fd:194453756,c5cc4225fbd25410ab1bbd24b0aab3ea:-1367987025,5ea90e6143d25410c5c08b858e3b253b:339309881,81f50a2141d25410f5c9afd848de35ed:950879051,87b4c62de09254105f9ca9e8ffffa7bc:574571,a59eb1e9ab92541046de84e54ad58d3e:-1732626329,d237271d661e14108e2749814ac336a2:1877196325,324dd3952d1e141027dfa8909ce51b1b:-1643776281,28e044cd8bd6d010c4c5716054341028:-492819395,1ef4fb38c3d6d0108e735653a39bded0:-1346583153,80997ab0b93010107ab53500786fc273:-824638093,91bbbaece3bc50105580ff9af1b38af6:-824638093,a6cabeac1dbc5010e1b6948364bdc039:-2039579104,02d79c05708c5c1066b40112bf4bad0e:1737653246,88771cc16a8c5c10c99da9d7b554e7e2:679039966,2d9554c1908c5c10c2099f2662d1f3a4:-873098818,a3159881ba8c5c108202f02197a15187:734937726,82a49481af8c5c1070a80fac5a35fe0f:-1567352386,f232dccd114c5c10f424f29e82614a14:-1717880384,b8001c0d184c5c10a2a5e35c85e00130:286045440,e6dec8c9ee4c5c107f61c7fe7d2fa346:-232711584,a6a04481124c5c1098cf2b4f1da56f20:-2067744671,c245f7b4aa0c5c1099060992c712d591:1908451675,6f19d9a4b53f4010f25b7050719f8930:-861419333,e6939f6fd3ce449012e5e38c9529be07:1908451675,97d412f8cfcc33009548fd247eedade2:-1431915761,529392b8e3cc3300a093d45dd188c3ef:-589527608,3bb21ef478cc33005cd5b75850d6efd1:-801963142,3e2256380dcc3300de8ef1c592fadd36:1092752787,43705674dfcc3300e06ad476c824a7a1:855820526,76dcbd24c50433001592da757a610cc8:545347597,2b3cfd24c90433007a77c7fe844b6eeb:2009474843,674afda07004330050d36577cbb51c91:545347597,8a58f9a0500433005ca6cccd6fbf74e4:-992094261,f60731a0b70433005795dc0405c55cc5:1579140894,9a4631a05b04330003b7d7d6bb954790:647942130,22753120ea043300cf5855f383d0d947:-1612744334,3744b520620433006f881b848808514a:1585317422,15d37120c0043300b1ef0f02f69e5934:748363634,2473fdac44c0330075f9c352b67029d9:-108338589,2e02f9ace5c0330062d2642474ec892b:-1982890284,aa81b1ac6ec03300055372f7a292febb:1488394879,8266e524e0c033000d724484364547dd:1099059551,2e34ede04bc033005d2b29640e635f13:-297108577,d9e32d60cdc0330037a4e66af691a776:-2109123476,4ec36de01bc033008f1a0fd6e1b7866e:2144499577,aa3ac1ac7b4033002353b1c80f7f389b:2085147135,e20e78a0f94033001472ad9062bc1fb3:-117929350,a5dd78a089403300a5f64c7406366caf:-1748347026,34c860a4df003300342a13995ee80018:-1799966414,4118a064ed0033007923b2f0a261bdf1:-912143918,5c8439a752bf2300fab27a2847ea789c:-1799966414,2b4cc56f603f23001c33284e62b3d964:-1142318777,473acdebb13f2300f8a1b6ade47987d6:322336713,a6b1398879b7230091b9e4ab252156d7:-162248238,821b3a90b4222300868c95f746aa868b:-1964749064,683c2100ad622300cb91d871879af888:-1683450280,cc93812ec8d2630049f59667d087606f:1630276649,c07dd6c753826300a893970eff47bae4:423890997,e85d1ac73082630055d9db66b024bd12:1760520153,0246399a338ea300d73c1432b9526be4:423890997,6206f5129ecea30030b7dc2a76cb3993:261511307,929531de398ea30076cdaf2f5782f202:-314292382,44c6d635f00a63009968565d2e9d9761:-501876213,ecad94bdd8c26300e85526adb1bb6c25:1820963679,60ac5831c1066300c47dc71b3d393e05:68997323,cf7bd8bd62c263008f5e9ee019759d3f:-294119870,114bd8bd7bc263002f7ba2ee06d0d3ce:-152280491,be49903d39c26300efff847e505d5b13:289862433,fba8943d7bc26300cd058846f5e572d0:529087331,2d481879e8c26300e9e59f5576bb8255:651187334,0667503d8ec263006c3c3ae1714091e5:-444004130,978498f9cdc2630095b990cfa90337c8:1643805839,a4e35879c5c2630086efa7b2ce5fb102:482306599,cfb2d8395ac26300a5ebe48e1ca4971d:-1426255984,badfc8394fc2630016d383c37e61f542:1297902004,81fec8399bc263005a515c143c5d4c18:-308594361,236e88f50ac26300a2b8f80b3c2f5eed:-502869701,f3bc88b55bc2630034c4f76202b22fe9:1152770812,c59c88f51bc26300870fd4e03733d685:1233708474,7efb00358fc26300cfa54a574497f371:1758977364,6b8b00f56bc26300470a0ec093b012e5:600965492,6bda007547c26300dd29766dab8eeab6:-1992371162,d1e7887179c26300cfd48d2b6665595d:1931670243,1d07083514c26300051caea5b9fd1093:-40972797,9bc44871afc2630092ddca5c6e1c3d31:-275644943,4314c8b109c263008a5349e25cfbb245:804908593,ed30732952826300da30765308d4af21:-359776069,a5103be559826300237df6a1384f90b1:812276184,0abea7a54f82630094bf865325776ae3:-359776069,d06e6b65b4826300ca0c11ec8c3da15c:-1014399151,619d2b65ba826300f3c32c924a793b3f:-132391791,138b2365ca826300f1d1b4fc189566bf:-150317108,842b6b25cc8263007f10f913a57a7cdb:-1103409994,f2cae725c68263007756e7181fff7b91:1274341228,1088a721b3826300569bc9c73f7909e5:5560923,3767a7a1b882630049c3909351f465b9:-697249986,f0b2a7ed93426300bf5b713cd6f0eab8:-494204128,d104d0a48e8200500b235b24238be690:1156528091,32425b901ccecc10f7762343045571e2:1891700713,fac8125201ff7300d4ad46115de91ec8:-864059845,855b44dd4c3b3300decec60d89c36ec1:872815447,f26e4ec41fff330061ef88b7d6a96e4f:905768446,2cdaba1cfbf373004a87279fa629e684:-369800677,1bf63ad43cf373005514f4d8e2b7597d:-1706832671,f1bce658ecb3730096544bd92c4c8048:1795324476,b36e6e0816bf730035c5bc0cedcbb5b5:1980911416,4b3ea6c434bf7300a58123d3f070fcef:1880773507,ff844e00807f73007110e6c004768b62:-363887976,1e14ceccf13f73001909af9c97751c2b:-1479339910,8163c68c533f7300c8a4da7d56dd2c8d:46151046,87238e4c163f73009fa0e4fc35b1bc7a:1099001884,f1e0420cce3f73009f7e694b85f1aa26:-434349723,719f31c8673f7300ab84e837b54a97ff:1099001884,2a5fb1c8983f730026d15e1ab580eaae:46151046,1b9bbd44053f7300c1cd1e32fe35696a:-1761445183,ceaa39c0823f73005c605b7c6c408862:1109367705,9ab97144043f73006b065a8c41155aad:-857792399,144ba5c8c1fb73008055774fd5a451f4:1691362612,7dc96984affb7300ecdefdbf95133145:272346575,2ca6e1c41cfb730090c50a9041b8ffed:1691362612,1c156d8072fb7300e787ff10fcc848bf:2059170102,7d92e940b7fb730031360a49a1762df6:1691362612,0d71e98090fb730005a3befb0ae6f46e:1630886574,954974d2a4a7f30048b6d3243875f5e6:1442339271,6fa8f4d66aa7f30083eaa6bf5a12ea40:2031417170,1be1b892a4a7f300aecdddbca46fcc47:-1462736450,05a174d219a7f300bae2f9ce0cc1fb79:-1537896416,50417c9216a7f30042acea787a924367:1443802611,d501349203a7f300476bc4cc9984e906:470040613,8f9034924ea7f3009004492387ee7301:1551364701,46307892fda7f3002ccc8707ba412664:1527497040,6befe092d4a7f300dcab750017746ed0:1843777612,fa0ca09e4f67f3002580b07216978fab:-1712254407,82dae8da8567f30075c6712aa0ba455c:545395961,2b5a60dace67f3003ca42da7a709d92a:1868482493,b548281e5067f300ad127f2e3f706274:-1191390793,9987ecda9e67f30053a8ab9802183118:-412632523,da86a81a7467f30077ba92995ae58251:-1310269035,8e26e8daf367f30057af018684caa057:-1792929615,74e5a49ace67f300ee2346aa6dc9281a:1802101333,5f65a89ac067f3005e379091473a9af0:1212616961,3d2524d67267f300347c8bb2de896473:-1862005645,36ce5c96ea67f30015f6bc685a8bf797:1212616961,effd9096ea67f300cdcbcb1f4fcd0fe2:-3963708,c17f6bca0ce3f30062e4a85e399e3654:1645169393,9cae6f8a17e3f300b90de082d3a8a92a:-95450270,7722a6c29523f300ceadbd6a05ecaf74:1010710111,2521ae42ab23f3001e454610692b25e0:-729817642,ac9f5ac28123f3008746bc86702bf32d:-1232322930,5e5e9e42ac23f300bba4d241ccffb0f0:2034890521,55612f1e4aa337006a957b85134da86b:-1782959649,5cd99f86482bf3008189cb66d88002ca:2081398751,aef81706512bf300f24cff719254021c:-353008248,16459b82882bf3002681bae67175d337:-871809540,092453027b2bf300f4e29f2ac3fe4340:1132041635,26d113ced1e7f3005bc1ae5faa459129:-1568975281,d48f8b4e57e7f300503315901d956fee:1576580410,c45f8b4e0be7f300513a10ffb48cceac:563879992,8aed8f4a5fe7f300c1db82b5bdc8cbc8:-583761212,c05a8f8a85e7f30061aa44a2bba3ae41:-1724656148,5ff8c34a82e7f3009c34e5dea5899534:-888772668,1a66cf4679e7f300355003379754e45d:1676776655,d335830690e7f3007312701981509af0:-1574140542,8cfe57156caf33002e0e81bc63552052:1882374621,adb3b7c5cd273300091366748842fd2b:30331230,54d077051027330097d2a6ccf904b342:1608500991,e8cf19117ee77300efba0c81c0181723:-58426942,b28f91112de77300f5c15fa264dd315d:683298488,45fe9d9d73a773003c00706774605130:-1597509034,07ae9d5dd6a7730036534d6e130b1dd4:1153075132,f56b9d5d51a773009d06be377a6cb73c:1008386012,0b2b2f4d65a3730092eaca9b47564ef0:-1590341781,527e5b85f2a37300c3ea5429a6a5aaac:1008386012,d93e9b45f7a37300dd208a4931a2c033:-196245695,0e995701baa3730033efc11e1f76fc08:16416134,9908f1a31c9f33008657fb492f4c3370:-1859093595,0b16b1a3349f33000ccfcc513ff46a33:2119377325,70c5712fc85f3300baed43bfc5d458e3:-326713781,5270392f385f3300501ebccb614be27a:-1796477561,bf5c616fba1f3300e9434da83298161b:-1317971764,07ebedeb895f3300c2ba292f233a704c:-485684187,f241e84d165f7300d82106165a869c65:1760905029,a509eb1cf497330094bf784d91da52cd:-269343621,9517af5887973300367c358be0cee578:-928620908,13756318ec973300bb67d6aaae0ec908:612110085,31b2a314f2973300aff6854e285dd232:-819001053,556397542e5733004fd7e48cde997a5d:-928620908,5f700354fe173300d0f28d9c7a9c5362:-387955778,7f300b54d91733004985f8f2fcf9bdf0:-653988709,217f3a54b9173300407fd57bd415b0ed:2107630462,d45f3654041733008937a73f54c2fd53:-1058306351,3f3b361051173300a2c9ccca1de4a011:-1299263595,feda3e506a17330035c91276314b1aa1:-2107978398,10ee8a03228fb300bcca4bf17c3c45be:-928620908,ff3e8acf094fb300ae6cffb791920b22:-579721247,216af14fd10fb300c21daff6e5868f4d:896658375,2d293dcb9a0fb300e96d7ef54a879a25:-121295058,502d6d8f64cbb3008b2290d9334df5ae:180900655,0db7658b2ccbb30017864b5505439f9f:1672486095,7537254b56cbb300e56f53317d9767d2:2107526492,1496218b7fcbb3008a4d85bba20f31fe:-767841612,d256a14bcfcbb3002bc6d160c50c4a7b:746825524,3a45614b4fcbb300af9e13c59038e6b0:-1011514623,fd152dc798cbb300a0a1eb791c494379:-137343033,202265c328cbb300c9f1ed9c59ffd573:1235331319,d6e06983cdcbb3000cf8caf9026dfb76:-780521520,622ec1faaccf7300ef3c4dc10986cbb4:24669704,1a615c3a010f7300b71b504c17b62468:-1835561705,48713062ff07730038588387c8cf8be2:-423750907,437ea86e7fc3730049b6304231bcc1d7:2033044287,ebfda8ae35c37300a342f4c873e5b223:1166979482,baad20aeddc37300bd63435395a5df54:-1103156076,c00da02e6dc37300116b3e15128365be:934503892,0bdce46e28c37300468e2c302fca791f:932901480,799ba4aac0c373003e678c629e565e69:-1103156076,525b2cea27c3730056c1190557e27f5b:1166979482,dfcaec6abec37300db2b6ad2577daf9c:-448223913,4399286a08c373004a3ebf2c50dab1c4:608100588,15692caa1cc37300ed2264e41d1db0d9:-1836053966,1d19a86ac1c37300ad6e9cdd87e271e8:-872548470,13f8a86a1ec37300f7e5ec29e2e494e4:1328228725,9cd8e466cfc373006fea4aa40400bf45:-718452280,4b98ec6a71c373004f20298f49624f97:1264431464,ca58e86a44c37300bb6110bcf762fa9a:1167263052,ec38a866c8c37300568cff2167ab4b97:-1369276498,5e1864e6cec37300bea97039c218e13d:445221350,c684282699c373003a4151b6813c4002:47605535,7eb1ac2669c37300286a95cd2f89f29c:58027673,b391242689c37300b17529d27c90cd93:-1247369647,a0f028267cc37300d7491d70e20fe97c:2089981402,4b80e42e6b8373007ab23914a9cc4a82:-479074413,be40686e618373007cc6f54cfb76b168:-1555193091,e7a4d8ea358373004fee931863bd8e3a:-633942217,3094186e1e83730049a163cfe70f7c0f:1749755455,9123d42e9c837300115b1944b57c637c:1473928033,ec031cea12837300e7678e5389451b9f:-1389893161,42721cea87837300263503601972a720:-1166912437,b722d86a5d837300469d08b9adc97487:1534134295,cbf1d86aa98373000f3c5d8811e4fd66:85876481,5291546aaf837300abcc6cc98147815b:-851472386,5571906691837300031bf9d6bb4cb723:1519404939,ad2f8ce6c1837300257786cf37362f1e:2132670442,4bfec8e6d5837300fc276b6512243942:-1308402462,61ed886615837300197aaeeb26048298:-1593514022,28bd0ca6ff8373008248d980de760054:462380449,34ccc06617837300a0d859207f796210:737718300,9dbc00a60e837300a977c80d55f5d00e:-1447818679,b38c40660b837300d7fc2712a52930e4:1336705564,ea4cc06612837300d455dead3911baea:-1345876004,8e0c4c26a6837300727a686fd68671a5:1303215595,1acb8cee354373005cdac4a8561066e9:-1519292002,809bc426df8373001dd0668d85efdf40:-295615377,dd2bc4aec9437300975ae363a6a7f168:1151235799,491bc426178373000a7fa99aa931913a:2137284623,4d8a88ae33437300dd4704363778128f:1206782183,c7738cee8d437300b2e7cf3cfc729fe1:421134460,220304ae784373001833f166d1af71d4:590254410,1f91c42e904373002aeb3eff304d5561:1186765824,f171c4ae3d437300f3ba8e27f78c6e51:-421974536,6c51482e53437300b1fb449ab3aafe17:1853875756,bb400c2e1f437300122550a599deae86:-179192158,0310806ea1437300026de1e695cf7f29:-766654429,55df771ec5437300937c7595fc938e16:2013222217,697f3f1e32437300dce0b9f1f4394f81:-1220531655,eefe371e60437300bad202d53721a6f2:-68489711,6f9d77dac74373009b8c76ee59765a91:221271851,cd5a7b1ab04373001d4e2583cd9fb4c6:-134319881,20de63124743730064b2b34105f9c72c:1495335156,ff4e2312f6437300596b0b61fc968241:-983920227,f48caf1e9403730083dbe929c2f7b60d:-270928724,463cab5ecb0373009b32f90094576838:-577903714,302c6f5ea10373007811bc9893946b6e:1223379988,f4ea6f1e47037300a38f6bc7b050a5c8:-984478399,09385712d6cf3300722af8db65c53898:1092032258,ed779f1231cf33005e9abef920d0915e:1872385450,26e6d35ece8f3300dee031a878b6a9dc:-1413547193,0a8347cab6073300dffd9dedad0aa985:-581693348,d332c34a8b073300f095a0d8eed44057:1897772797,f65eb2c600073300ab64ad2dfa383733:-2069395803,21fdba86e7073300c7ce0dbe6926514a:-1155415216,f0ac3ac2c7073300adc7a66b48d2d243:1115535893,de7cf206a80733005c1b6d62e38d313c:-833162795,3a1bfa4269073300cb8b3765239ffcd9:619527577,2de93ececac33300e933db5c495dc3ac:-1220294951,04983a0e30c333000c81670aeff6017f:1869264271,e1e0a7cd908373001d55692a57543e55:813141420,2170a7cdba83730090c811f2f1331c4c:2121407220,ebdf978db8837300404b955609ac3b58:-619851447,4e6a9389ce837300429793d99a723ea5:813141420,9c58530982837300e3bea0a3d6183ad3:238566526,625b2efca7473300c67a1b1a60eaf186:-947913691,a32aeabcf94733003098c6596ecd0e48:586058503,2059ea3c9f473300e6b166581cd32ce6:883400698,6aaebb5b60eab3002eee2ded554f6af4:30713791,d7cab357a7eab3001c1fe5a793b17085:108327538,f5b9bf13b2eab3009a3559f09492c06d:-1876501173,4897b313deeab3001bee522a57da462a:703894886,82f4775f7daab30025ace0d7daaede2d:1715009537,f2e3f3dbebaab300eb97204d0656be8e:-487913799,002f2357e9aab300171fa574c37ed918:-1185236153,835e23d3d4aab300113d127a96ae777b:-31956723,914c6d13bc66b3006efc64577e8af2d7:1667265865,39fbaddf1626b3006de84cc047a30009:-594548496,9630a80b5a2a73007f040799c3c685ef:1667265865,b4bf50c7152a7300bd6fc04228cc5ff3:-284046753,241f54c7952a7300943582efece17369:1334268614,eb7b1847922a73006e03068499031f3a:-1581618661,67eb0bd2bee233009413b0c9777c249c:-1259399487,11db0bd2bae23300620a85b7f0cae497:-1577590819,de3b879288e233004f2161ef3bea6120:-16841823,c05a87923de23300532598e9b8631387:-807659663,24b9879273e2330014fd26d436052d32:-1626679599,4f788712e9e23300741f3a425ac26396:-732440036,1571b94637ee330086ad4665fe58b5b5:-1577590819,362465424cae330020294404dcaf3043:1334268614,4203a546066e3300f2922e053a5cdb35:-1956450477,51364d8e442e33004fdaa2eb188c2ef0:-1524129608,a2d5898e4e2e3300338fd91d7c4b4756:115330682,0f95810e5d2e33000b4be981c474086d:1966009679,73f4410e6e2e33002029e53d7d7d544f:-789084165,4e93810ec62e330020cee7d3febc51f1:-1284547600,d791c94a132e330071854ddf4db7ae55:-1323686185,1990098a202e33006ce1cbf0ffb8b4b0:-187025370,b5761eb91ea633005e073aaec58095a8:-1738949289,9ed416b591a63300c15be87723e57792:1038559758,cc24def5caa633002bc1b30ad4a0d362:1310681001,e9b35279d2a6330054d48c7515580d28:713636128,97b19eb5e4a63300244b6225d4d2481e:1038559758,d7e096f510a6330038d204fdd68e39eb:1628625586,a8ff0e356da63300c539ade421228a02:-406393117,d84f027508a633003fcba70a7e8eff91:594452033,64ae0af135a63300158f44bb3473fd2c:837392857,ac0251f909e2330088077001deab89e8:-1930473061,2fba4139c6e23300b74f5ee47cde769f:-1748243032,909a4979e7e23300a90bb71a14a8a23a:-1930473061,ed8909b99ce233009731b4d71b594b44:-1202888609,9ce70979d9e23300d5b396a35312416d:-801478021,ce86493909e23300f30e4780c2344616:1300291744,53664db5bbe23300a2ad4d3d32526840:-1365407091,d62605fd4ea23300db82aa8b52463d91:1713725401,ab7505bd98a23300c5fd8d99d422b768:-1074608722,f94345bd23a23300e6330e840e265d61:-1923522917,ecada47960a2330069b8a3e1439967f4:-460495822,9d6d647907a23300930c76cac3776090:999586634,61fb2c39e0a2330006b5143aa70a93fd:1551738318</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>catalog_script_client_f0d855e337212300fdfc097973990e2b</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="catalog_script_client"&gt;&lt;catalog_script_client action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;applies_catalog&gt;true&lt;/applies_catalog&gt;&lt;applies_extended&gt;false&lt;/applies_extended&gt;&lt;applies_req_item&gt;false&lt;/applies_req_item&gt;&lt;applies_sc_task&gt;false&lt;/applies_sc_task&gt;&lt;applies_target_record&gt;false&lt;/applies_target_record&gt;&lt;applies_to&gt;item&lt;/applies_to&gt;&lt;cat_item display_value="Configure Calm Settings"&gt;6ddd772a37112300fdfc097973990e01&lt;/cat_item&gt;&lt;cat_variable/&gt;&lt;condition/&gt;&lt;description/&gt;&lt;field/&gt;&lt;global&gt;true&lt;/global&gt;&lt;isolate_script&gt;false&lt;/isolate_script&gt;&lt;messages/&gt;&lt;name&gt;Set Fields Value&lt;/name&gt;&lt;order&gt;100&lt;/order&gt;&lt;script&gt;&lt;![CDATA[function onLoad() {
	//Type appropriate comment here, and begin script below
	if(g_form.getValue('blueprint_data') != "") {
		var selected_data = JSON.parse(g_form.getValue('blueprint_data'));
	
		g_form.addOption('blueprint', selected_data.blueprint, selected_data.blueprint_name);	
	}
	var performAction = (g_form.getValue('type'))?g_form.getValue('type'):getParameterValue('performAction')+'';

	if(getParameterValue('performAction')+''){
		g_form.setValue('type', performAction);

		g_form.setValue('url', (self.location+'').split('&amp;b&amp;')[0]);	


		var blueprintType = g_form.getValue('type_of_blueprint');

		var loadingHTML= "&lt;div class='loading-container'&gt;&lt;div class='loading-indicator icon-loading icon-lg'&gt;&lt;/div&gt;&lt;/div&gt;";
		var loadingDialog = new GlideModal("loader", true);
		loadingDialog.setTitle('Fetching Blueprints...'); //Set the loading dialog title here...
		loadingDialog.renderWithContent(''+loadingHTML);

		var ga = new GlideAjax('Nutanix_ClientServerScriptBridge');
		ga.addParam('sysparm_name', 'fetchMultipleBlueprints');
		ga.addParam('sysparm_blueprintType', blueprintType);
		ga.getXML(processProject, null, loadingDialog);

		function processProject(response, loadingDialog) {
			var answer = response.responseXML.documentElement.getAttribute("answer");
			var blueprintsList = JSON.parse(answer);

			g_form.clearOptions('blueprint');
			g_form.clearValue('multiple_project');
			g_form.clearValue('multiple_application_profile');
			g_form.clearValue('endpoint');

			for(var i in blueprintsList){
				var blueprint = blueprintsList[i];
				g_form.addOption('blueprint', blueprint.sys_id, blueprint.name);
			}

			new GlideModal().get("loader").destroy();

			if( performAction == 'update'){
				var loadingHTML= "&lt;div class='loading-container'&gt;&lt;div class='loading-indicator icon-loading icon-lg'&gt;&lt;/div&gt;&lt;/div&gt;";
				var loadingDialog = new GlideModal('loader', true);
				loadingDialog.setTitle('Fetching runtime variables value...'); //Set the loading dialog title here...
				loadingDialog.renderWithContent(''+loadingHTML);

				var sysId = getParameterValue('sys_id')+'';


				var ga = new GlideAjax('Nutanix_ClientServerScriptBridge');
				ga.addParam('sysparm_name', 'fetchRuntimeVariablesValue');
				ga.addParam('sysparm_sysId', sysId);
				ga.getXML(processResponse, null, loadingDialog);

				function processResponse(response, loadingDialog) {
					var answer = response.responseXML.documentElement.getAttribute("answer");
					var variableValue = JSON.parse(answer);
					jslog("answer:"+answer);
					g_form.clearValue('multiple_project');
					g_form.clearOptions('blueprint');


					g_form.setMandatory('blueprint', false);
					g_form.setMandatory('type_of_blueprint', false);

					g_form.setReadOnly('blueprint', true);
					g_form.setReadOnly('type_of_blueprint', true);

					var project = variableValue['project'];
					var project_sys_ids = project.sys_ids.split(',');
					for(var i=0; i&lt;project_sys_ids.length; i++){
						g_form.setValue('multiple_project', project_sys_ids[i]+'');
						jslog("Set Fields Value, set Project value as "+ project_sys_ids[i]);
					}

					var blueprint1 = variableValue['blueprint'];
					if( blueprint1['class']+'' == 'x_nuta2_nutanix_ca_runbooks' || blueprint1['class']+'' == 'x_nuta2_nutanix_ca_nutanix_marketplaceitems' &amp;&amp; variableValue['type_of_blueprint']+'' == 'published_runbook'){
						g_form.clearOptions('runbook');
						g_form.setReadOnly('runbook', true);
						g_form.addOption('runbook', blueprint1.sys_id+'', blueprint1.name+'');
						jslog("Set Fields Value, set runbook value as "+ blueprint1.name);
					}else{
						g_form.addOption('blueprint', blueprint1.sys_id+'', blueprint1.name+'');
						jslog("Set Fields Value, set Blueprint value as "+ blueprint1.name);
					}


					var blueprintType = '';

					if( blueprint1['class']+'' == 'x_nuta2_nutanix_ca_nutanix_blueprint' )
						blueprintType = 'unpublished';
					if( blueprint1['class']+'' == 'x_nuta2_nutanix_ca_runbooks' )
						blueprintType = 'runbook';
					else
						blueprintType = 'published';

					g_form.setValue('type_of_blueprint', blueprintType);
					jslog("Set Fields Value, set type_of_blueprint value as "+blueprintType);

					g_form.setValue('cat_item', variableValue['item_name']+'');
					jslog("Set Fields Value, set cat_item value as "+variableValue['item_name']);

					if(performAction == 'update'){
						if(blueprintType+'' == 'unpublished' || blueprintType+'' == 'published'){
							//add
							g_form.clearValue('environments');

							var environments = variableValue['environments'];
							var sys_ids = environments.sys_ids.split(',');

							for(var i=0; i&lt;sys_ids.length; i++){
								g_form.setValue('environments', sys_ids[i]+'');
								jslog("Set Fields Value, environment value as "+sys_ids[i]);
							}

							g_form.clearValue('multiple_application_profile');

							var application_profile = variableValue['application_profile'];
							var sys_ids = application_profile.sys_ids.split(',');

							for(var i=0; i&lt;sys_ids.length; i++){
								g_form.setValue('multiple_application_profile', sys_ids[i]+'');
								jslog("Set Fields Value, application_profile value as "+sys_ids[i]);
							}
							
							g_form.clearValue('type_of_blueprint');
							var type_of_blueprint = variableValue['type_of_blueprint'];
							g_form.setValue('type_of_blueprint', type_of_blueprint+'');

						}
						if(blueprintType+'' == 'runbook' ){
							g_form.clearValue('runbook');

							var endpoint = variableValue['endpoint'];
							var sys_ids = endpoint.sys_ids.split(',');

							for(var i=0; i&lt;sys_ids.length; i++){
								g_form.setValue('endpoint', sys_ids[i]+'');
								jslog("Set Fields Value, endpoint value as "+sys_ids[i]);
							}

							g_form.clearValue('multiple_application_profile');

							var application_profile = variableValue['application_profile'];
							var application_profile_sys_ids = application_profile.sys_ids.split(',');

							for(var i=0; i&lt;application_profile_sys_ids.length; i++){
								g_form.setValue('multiple_application_profile', application_profile_sys_ids[i]+'');
								jslog("Set Fields Value, application_profile value as "+application_profile_sys_ids[i]);
							}
							//add
							var environments = variableValue['environments'];
							var sys_ids = environments.sys_ids.split(',');

							for(var i=0; i&lt;sys_ids.length; i++){
								g_form.setValue('environments', sys_ids[i]+'');
								jslog("Set Fields Value, environment value as "+sys_ids[i]);
							}

							g_form.clearValue('type_of_blueprint');
							var type_of_blueprint = variableValue['type_of_blueprint'];
							g_form.setValue('type_of_blueprint', type_of_blueprint+'');
						}
					}

					new GlideModal().get("loader").destroy();
				}
			}

		}

		var data = getParameterValue('data');

		if(data){
			jslog("Set Fields Value "+data);
			data = JSON.parse(decodeURIComponent(data));

			g_form.setValue('type_of_blueprint', data.type);
			g_form.setValue('blueprint', data.blueprint);

			g_form.clearValue('multiple_project');
			g_form.clearValue('multiple_application_profile');
			g_form.clearValue('delta_profiles');
			g_form.clearValue('delta_project');
			g_form.setValue('delta_profiles', data.delta_profile);
			g_form.setValue('delta_profiles', data.delta_project);
			
		}

	}
	else{		
		var data = {
			"project": g_form.getValue('multiple_project'),
			"type": g_form.getValue('type_of_blueprint'),
			"blueprint": g_form.getValue('blueprint'),
			"blueprint_name": g_form.g_form.getDisplayValue('blueprint'),
			"profile": g_form.getValue('multiple_application_profile'),
			"delta_profile": g_form.getValue('delta_profiles'),
			"delta_project": g_form.getValue('delta_project'),
			"runbook": g_form.getValue('runbook'),
			"endpoint": g_form.getValue('endpoint'),
			"environments": g_form.getValue('environments')
		};

		self.location = g_form.getValue('url')+'&amp;b&amp;data='+JSON.stringify(data);
	}

}

function getParameterValue(name) {  
	name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");  
	var regexS = "[\\?&amp;]" + name + "=([^&amp;#]*)";  
	var regex = new RegExp(regexS);  
	var results = regex.exec(self.location);  
	if (results == null) {  
		return "";  
	} else {  
		return unescape(results[1]);  
	}  
}]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;catalog_script_client&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-11-09 11:39:36&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;f0d855e337212300fdfc097973990e2b&lt;/sys_id&gt;&lt;sys_mod_count&gt;142&lt;/sys_mod_count&gt;&lt;sys_name&gt;Set Fields Value&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;catalog_script_client_f0d855e337212300fdfc097973990e2b&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-12-06 08:57:01&lt;/sys_updated_on&gt;&lt;table/&gt;&lt;type&gt;onLoad&lt;/type&gt;&lt;ui_type&gt;0&lt;/ui_type&gt;&lt;variable_set/&gt;&lt;view/&gt;&lt;/catalog_script_client&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1329400894</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>98021aa32fd50110e49924c62799b6cf</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb91894ea0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table/>
<target_name>Set Fields Value</target_name>
<type>Catalog Client Scripts</type>
<update_domain>global</update_domain>
<update_guid>d895408d4690011055e6dcd78d132e28</update_guid>
<update_guid_history>d895408d4690011055e6dcd78d132e28:-1329400894,07f54b1cafa330108fbe878c7134e1c3:-1224809779,84d34d81c04f30108272b53155d6b378:1389608343,6d6ef38688973010ceee56267a9214cb:-432130657,a2a657a3913230106c2ca585e077b785:729087028,38bccab74cc63010f95531b4832cce18:457922230,0ad881a72b82701022ba982e611c4e35:-1435060982,bd7649a7f3827010b1047b7894f37968:-2036822608,a3873fe24db53010ad210eb220be66e8:-825442330,6175f7e2d2b53010b814ba4684944334:-525495014,3d653fe286b5301057a71d44f8cfeb6d:1168306673,da45bbe2bab53010ea62bb8af2e963ac:-525495014,e49473a21ab53010406555fc1c2bcaec:329303991,b23b3eaa867130102a2509945907c1ee:-2003433056,2aa5aaaac7313010011675f70ca380e2:-582129622,9334547c2bb0fc50647d5abe1ee2739a:-2019204529,60ca1c08c4f03850f507b29d1cdb11a5:-89659621,44e95008fff0385057630f4cbfb11540:-454090276,cf2914c493f03850ead508c9a28751fe:1178464613,f7825c04e0703850fa705df67b21d672:-447894589,d9c111f76c28f450d29bf5c9f8e915d6:-31624341,5b52161f1f6c745092c38e1c0c0b6cfe:1875234826,9efa69768a24b0500fee11d5a3359a4e:2063984911,49caad365e24b0507aaf48261c724095:1732483,3a9a61f21724b050139b21d65432b435:1827493056,04c8d65e269f5410c87093deb23e5d9f:1875234826,f33592da039f5410a1101f34319c61bf:-665580021,ff20de56e99f54106279de39e7716ec4:-173785962,9ac50e1ee75f54100cc23e31cb620fc0:-571244682,fad1c21a235f5410f4f21bdf9f4d34a5:-682626850,f169f9d2a65f54103f7f6c0a9e71049d:-488055648,b3043dde251f54108b3a5f35039cdf49:-682626850,0142799e901f54100eb97e59ca4fbc6a:653359704,5776a5165b1f5410ed561e090da76001:857486588,cb74ad923e1f541003b6979a473469c8:875389413,7fbe555ec4db54101ec33f47946dc699:-195915513,73fd99da28db54100561cbdd43e9d8f8:105195336,20351d5643db5410b334dae2570b2494:1418315541,c5b4555693db541096b80dab708dd15b:105195336,20c39516d3db5410829615c94fe17606:-195915513,f19dbb8a47d75410aed46f2142f1f3e2:904871751,9fa7f34a9e1350108937ede36ada78ac:-1564326999,abac28424c5b101032e5fa135a5ee7c7:-542753791,d17d4ac90c5b9010992b84cf52275d5b:-1564326999,2c1d420d895b901082535efa599130b6:-340952914,427a4a41375b90101b00f12e7c04ccba:-242764577,5d63cc7ce15b50109c31772e572640aa:-365848770,8d02cbecf79750104ac6b93503c20d94:1399568774,88c143acc097501017a642ca4cf53e3a:-1264654638,420fddac71935010cb3942bf557e85f0:637005214,81d91da80b935010013714b7b9c91670:661918775,4977d9289f935010ea5e7b0b6e74415f:-1283915147,23b555e4b1935010646844631a9d466a:661918775,bb629d248993501029c23c51a2745cf9:-1017083344,8a60552413935010c1a283e9682e5292:552232130,252e4920759350107e15951ea306da4c:1117972962,500b4920c3935010be75cd6f56675836:-60591095,9d9a45ecc6535010d82169be5e4d7132:-2108193964,ae59c1ecfc53501056d117914675b405:-89072676,0ae7c1acdc5350108976420596d2afe0:1117972962,50e64d2c81535010e402ce32718c2d04:1865338601,89a5892c90535010867d8fa3ace1c7c1:-1727304707,d443056ca2571c1001d49af4cefbbc67:1117972962,fcdcb864da5350109d4d91f1deb9c225:2001276207,f31cb254b6db10100ce0b68b8fbedea3:1020648133,b148b6908edb10102e011a553bfe2a2d:28289569,ee91bcd8705710109edc8cd0c0eae104:-1167220491,ef7ee458cc5710106a53a4bc80a7ab23:-340057275,cd302c9c65171010c78622f22938886d:538398203,490f905c3a1710108b1c2d784602055e:-170062852,dc6d141c1e17101002564cb42dfcdb63:-1772351001,7b57dc903417101059e1be339e38a8bc:1887773772,367b8c5cfad31010b142281e289dbdb9:-2097179019,22d8045cd4d310108fb1893084df9840:1410702276,566f47c486531010e6beba9cc5fa45f5:482066766,644dcf44b95310109b7f9839b9c157cd:762929449,11c88f80fe5310108b122563f96b1101:268047876,66a60b4c3713101050efb2a421f1e2b9:-601168005,e29f320cb7131010668fde7f2952701c:1039425221,1db8be846613101060e81412c0d19ed4:1844130230,29187684b31310104f0ff7cbf2bce3b6:640422773,e9c6b24480131010c656df58c77ea1fc:-347670940,eae4bac0771310105a74a88c117bdf66:-170062852,bb917416204f10d0c2ec1c5891f00b90:-914791332,d47ec4011bc75c90b43d6bb21bec3b42:-170062852,90faf81a7a329490cd120355e7f65e82:1483434664,d9ef39c2897a5490acaf898b1adecfb6:-1626752911,f5d7354ed53a54906c548061caa7d26b:-747166830,0298014e74b654906133aa4911f98f78:-1926077571,2827410e76b654909a4b204fa8098de6:-364283753,7ce1f04e4e765490cff29772467a5c86:997828551,fddfe04eee7654905ce258d99a46467f:-1298965832,ec5aa80a9d765490bf0fcdb7d9375baf:176451300,b193d5853ffa9090c57855a4e8e4e284:1843090363,d80559f493729090f057ae0fe48f97c0:1707654237,81334e3ecbe6d450e2cb44ee3f74ffde:-747166830,3badedfa98a6d450f62bb2408ee983eb:-827305059,8f04457a6826d4509e7c1e080532bffd:-747166830,5b1bf5d0d8d6501025d0362b6b9b0039:-635181498,cb9dadc85e1e10108dd3695f1cf05d9c:-330048295,ecf1efb8ab885c10cd7d38175f38c373:-484471055,c1b79d64c43f40103cff854fd8f5a1cb:-1359079439,aca3f90c6df33300c3e7a166efb353ad:595491389,4c5555c461b3330089a403bf8a8dbc5e:1936727840,2245eb4907e33300d21c054ba220da9f:1582938483,a941d5f0ed4333003f7eabfcd6c3d376:-1949603073,6731ddf099433300d1d3119d37e773b1:286729628,1a4b0830004e7300c1b9519505b7f972:-1949603073,8fb1c478380e7300560d642e82a95007:-2111558348,74307f50708273005084860af1efceb0:1595191068,01358945edb72300ff34ef4bda5486a4:-1889455290,e5f4490528b7230057d1a1f71925b1c7:459069404,f194814507b72300cb71dc1acaf2a6af:-1235805224,7923cdc1f9b72300f2235754a64764e0:-2117201992,079281c128b72300244cf20b24a0c010:-131222997,3eb14941c4b7230026f38cf7cf3e40ea:-247805176,bd2df8cd647723000bfae736934e02f4:-1068515412,ef3c7c8d0077230034a683dae234bfe6:-1620423251,07cb788df9772300186700215d01533f:-2090602168,6b3afc0d79772300113dbbbc33fbc203:-896522946,0bf838c51b772300e9315287bae6ffcf:-2105663922,76d8f4893e7723003b19f1af0da9be02:-2030606682,e5b2b4c1a97723003e33be614d58f190:-90980338,f37270c1df772300c1855087395b5ee9:-1273488466,be42fc814f7723008b590472979bec21:-735147932,9d12b8814d772300a0bb8bb4b7fc0638:174733702,0be1fc41d3772300357338c677704f25:622212287,64c1f8414b77230066555e20e947889e:-1201918068,5481384136772300a0ce0c53f85a4ffd:-848645116,f5e4ec053ff323000d3b9c4272b9ba75:1953560927,1334e40513f32300312331421c447641:-1956115318,ef32e081d0f3230086da1fa40d3c8d39:-869156164,7ce12c4188f32300acce6ca777a546eb:1044278530,fb706041d2f32300696efa6d4a1f2eef:-1062129820,33df9401fdf323007309df6b01b43638:1705684556,520a095594ce6b001d626f2c3011ddc8:-436142656,31f9815563ce6b00dd3b06c51e919ebd:-234641667,cb4446d8e7c2e700433a5e164a40ca2d:-436142656,c5be5397b979e3000fea0b2d8d2d6f71:-1282308650,38086e1baf75e300104835cf71011d10:-1070825034,d9ca1fba8871a3002a7f320c9d8f9195:284108420,f159977ad871a3001f7918e8bf0dcd21:529010214,fc49977a9a71a30019538767860e5de7:687131721,44e8537a4571a300426d48c3d956bf51:529010214,3afec7b2c871a300f5a8a254b100a2cb:687131721,28bec3b24b71a300cd57f1dc392314e6:-1469957558,7e7ec3b28071a300cf4b4133f11a6f91:-242472457,ab524e6148f9a300ed645eeb07366243:748240058,e2708eed5eb9a300bedd78574fb77429:-1351440434,fd07c1e96939a300e1147df2b85805eb:1186986114,0fc601e97f39a3009774ec0cdee86992:-1276925837,358609a99039a300bcfefb9c994175ec:1751403543,7e418165ad39a300e1ec0bbaad0d7100:103680790,882e30656039a3001b2499b86b9d86e6:-100546375,476d7825ed39a30076b592c54386a837:-1998295963,ee5db0255139a300eab0f86308b06cc9:-1355836898,394db4252c39a30002337877d8ad9b12:-1998295963,ececfce1bd39a30019658d5d17e4c8b7:-132926143,0acc7ce1ee39a3007cb00de0b11cb997:-606498927,fbac7ce1e639a3009a192ccbd88cc54f:-1179205951,796c78e1be39a30036ad9b3ee74a1e54:555664398,97fa34a1ba39a300a2268df03c1fb2ed:976235255,9c2abc212539a30004df650403887e38:1941460891,491a7821c539a3008596102fc91779f0:-2227038,0878b4214d39a3007256d220f01d0263:1135298054,981738ed17f5a3009540722cebef2aaa:277700791,af22fa3c68bd2300619aeab1981f6749:-1433397603,2bdd2a38bdbd2300bed4f575f5fa6ba5:-427870899,2ecdceb0fb7d23006c98f28d1d7dfac0:99497236,bdadceb0367d23008cd91d816e208f78:473672693,b2f06de33f21230068c3dc1593215096:893638024,7d6ed127b221230033d8b54df0094515:877822643,69edd5e39c2123003c7f1d50472ddc93:-417066180,97b9d1e3462123003126666d573b940e:-292672363,246951e313212300c20f5f1e2d12764a:-192707034</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_031dc0d33702a300fdfc097973990ee4</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Nutanix_ImportUsers&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Nutanix_ImportUsers&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Nutanix_ImportUsers = Class.create();
Nutanix_ImportUsers.prototype = {
    initialize: function() {
		this.appUtil = new Nutanix_Calm_Utils();
		this.logger = new Nutanix_Calm_Logger();
		
		// Role x_nuta2_nutanix_ca.user : 3376fd254f452b001200e5201310c717
		// Role itil : 282bf1fac6112285017366cb5f867469
		// Role mid_server : e76b74ba0ab3015700a3263b26e5e9d5
		// Role catalog : e098ecf6c0a80165002aaec84d906014
		
		this.endUserRoles = ['3376fd254f452b001200e5201310c717'];
		
		var grProp = new GlideRecord('x_nuta2_nutanix_ca_calm_plugin_configuration');
		if (grProp.get(gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id')))
			{
		/*if(grProp.use_external_credential_system)
		  this.endUserRoles.push('e76b74ba0ab3015700a3263b26e5e9d5');*/
		
	//	this.endUserRoles = ['3376fd254f452b001200e5201310c717','282bf1fac6112285017366cb5f867469'];
		
				this.pageBreaker = 20;
			}
    },

	getConsumerSysId: function(){
		try{
			this.logger.debug("Inside Nutanix_ImportUsers.getConsumerSysId");
			var body = { 
				"kind": "role", 
				"filter": "name==Consumer"
			};
			var response = this.appUtil.makeCalmApiCall("POST", this.appUtil.configuration.api.getRolesList+"", this.appUtil.stringify(body));
			if(response.getStatusCode() == '200' || response.getStatusCode() == '201'){
				
				var parsed = this.appUtil.parse(response.getBody());
				var entities = parsed.entities;
				
				for(var i in entities){
					var entity = entities[i];
					
					if(entity.status.name == "Consumer"){
						gs.setProperty('x_nuta2_nutanix_ca.cosumer.role.uuid', entity.metadata.uuid);
						break;
					}
				}
				
			} else {
				this.logger.debug("Nutanix_ImportUsers.getConsumerSysId :- Connection to roles/list not established :- "+response.haveError()+" Status code :- "+response.getStatusCode());
			}
		
		} catch(e) {
			this.logger.debug("Nutanix_ImportUsers.getConsumerSysId :- Exception caught during retrieval of Consumer SysId. Error: "+e);
			this.logger.error("Exception caught during retrieval of Consumer SysId. Error: "+e);
		}
	},
	
	startUsersImport: function(){
		try{
			this.getConsumerSysId();
			this.logger.debug("Inside Nutanix_ImportUsers.startUsersImport");
			var body = {
				"kind": "user",
				"offset": 0,
				"length": 1
			};
			var response = this.appUtil.makeCalmApiCall("POST", this.appUtil.configuration.api.getUsersList+"", this.appUtil.stringify(body));
			if(response.getStatusCode() == '200' || response.getStatusCode() == '201'){
				this.logger.info("Connection established to "+this.appUtil.configuration.api.getUsersList);
				var parsed = this.appUtil.parse(response.getBody());
				var records = parsed.metadata.total_matches;
				var pages = parseInt(records/this.pageBreaker);
				this.logger.debug("Number of Project JSON pages "+(pages+1));
				for(var i=0, k=0 ; i &lt;= pages; i++, k+=19) {
					body = {
						"kind": "user",
						"offset": i+k,
						"length": this.pageBreaker
					};
					this.appUtil.insertIntoQueue("importUsers", "POST", this.appUtil.stringify(body), this.appUtil.configuration.api.getUsersList+"", 'Import users', 'This job invokes the import of users from LDAP.');
				}
			}
			else{
				this.logger.debug("Nutanix_ImportUsers.startUsersImport :- Connection to users/list not established :- "+response.haveError()+" Status code :- "+response.getStatusCode());
			}
		}
		catch(e){
			this.logger.debug("Nutanix_ImportUsers.startUsersImport :- Exception caught during retrieval of projects. Error: "+e);
			this.logger.error("Exception caught during retrieval of projects. Error: "+e);
		}
	},
	
	importUsers: function(current){
		try{
			this.logger.debug("Inside Nutanix_ImportUsers.importUsers");
			var response = this.appUtil.makeCalmApiCall(current.method+'', current.payload+'', current.parameter+'');
			if(response.getStatusCode() == '200' || response.getStatusCode() == '201'){
				var parsedJSON = this.appUtil.parse(response.getBody());
				var entities = parsedJSON.entities;
				for(var i=0; i&lt;entities.length; i++){
					var entity = entities[i];
					var userName = entity.status.name+'';
					var uuid = entity.metadata.uuid+'';
					
					var userGR = new GlideRecord('sys_user');
					userGR.addQuery(gs.getProperty('x_nuta2_nutanix_ca.user.table.field.to.map')+'', userName);
					userGR.query();
					
					if(userGR.next()){
						userGR.x_nuta2_nutanix_ca_nutanix_uuid = uuid;
						userGR.update();
						
						//this._updateUsersWithRoles(userGR.sys_id+'', userGR.user_name+'');
						
					}
				}
			}
			else{
				this.logger.debug("Nutanix_ImportUsers.importUsers:- Connection users/list not established :- "+response.haveError()+" Status code :- "+response.getStatusCode());
			}
		}
		catch(e){
			this.logger.debug("Nutanix_ImportUsers.importUsers:- Exception caught during retrieval of users. Error:- "+e);
			this.logger.error("Exception caught during retrieval of users. Error :- "+e);
		}
	},
	
	/*_updateUsersWithRoles: function(userSysID, userName){
		try{
			this.logger.debug("Inside Nutanix_ImportUsers._updateUsersWithRoles.");		

			var roles = this.endUserRoles;

			for(var i=0; i&lt;roles.length; i++){

				var grd = new GlideRecord('sys_user_has_role');
				grd.addQuery('user', userSysID);
				grd.addQuery('role', roles[i]);
				grd.query();

				if(!grd.hasNext()){
					grd.user = userSysID;
					grd.role = roles[i];
					grd.insert();
				}
			}

			this.logger.info("Updated user " + userName + " with Calm Plugin End Users roles.");			
		}catch(e){
			this.logger.error("Exception caught inside Nutanix_ImportUsers._updateUsersWithRoles. Error:- "+e);
		}
	},	*/
	
	startGroupsImport: function(){
		try{
			this.getConsumerSysId();
			this.logger.debug("Inside Nutanix_ImportUsers.startGroupsImport");
			var body = {
				"kind": "user_group",
				"offset": 0,
				"length": 1
			};
			var response = this.appUtil.makeCalmApiCall("POST", this.appUtil.configuration.api.getGroupsList+"", this.appUtil.stringify(body));
			if(response.getStatusCode() == '200' || response.getStatusCode() == '201'){
				this.logger.info("Connection established to "+this.appUtil.configuration.api.getGroupsList);
				var parsed = this.appUtil.parse(response.getBody());
				var records = parsed.metadata.total_matches;
				var pages = parseInt(records/this.pageBreaker);
				this.logger.debug("Number of Groups JSON pages "+(pages+1));
				for(var i=0, k=0 ; i &lt;= pages; i++, k+=19) {
					body = {
						"kind": "user_group",
						"offset": i+k,
						"length": this.pageBreaker
					};
					this.appUtil.insertIntoQueue("importGroups", "POST", this.appUtil.stringify(body), this.appUtil.configuration.api.getGroupsList+"", 'Import groups', 'This job invokes the import of groups from LDAP.');
				}
			}
			else{
				this.logger.debug("Nutanix_ImportUsers.startGroupsImport :- Connection to user_groups/list not established :- "+response.haveError()+" Status code :- "+response.getStatusCode());
			}
		}
		catch(e){
			this.logger.debug("Nutanix_ImportUsers.startGroupsImport :- Exception caught during retrieval of groups. Error: "+e);
			this.logger.error("Exception caught during retrieval of groups. Error: "+e);
		}
	},
	
	importGroups: function(current){
		try{
			this.logger.debug("Inside Nutanix_ImportUsers.importGroups");
			var response = this.appUtil.makeCalmApiCall(current.method+'', current.payload+'', current.parameter+'');
			if(response.getStatusCode() == '200' || response.getStatusCode() == '201'){
				//gs.error("Groups body :: "+response.getBody());
				var parsedJSON = this.appUtil.parse(response.getBody());
				var entities = parsedJSON.entities;
				for(var i=0; i&lt;entities.length; i++){
					var entity = entities[i];
					var userName = entity.status.resources.display_name+'';
					var uuid = entity.metadata.uuid+'';
					
					var userGR = new GlideRecord('sys_user_group');
					userGR.addQuery(gs.getProperty('x_nuta2_nutanix_ca.group.table.field.to.map')+'', userName);
					userGR.query();
					
					if(userGR.next()){
						//gs.error("Inside Groups body :: "+userGR.name);
						userGR.x_nuta2_nutanix_ca_nutanix_group_uuid = uuid;
						userGR.update();
						
						//this._updateGroupWithRoles(userGR.sys_id+'', userGR.name+'');
						
					}
				} 
			}
			else{
				this.logger.debug("Nutanix_ImportUsers.importGroups:- Connection user_groups/list not established :- "+response.haveError()+" Status code :- "+response.getStatusCode());
			}
		}
		catch(e){
			this.logger.debug("Nutanix_ImportUsers.importGroups:- Exception caught during retrieval of groups. Error:- "+e);
			this.logger.error("Exception caught during retrieval of groups. Error :- "+e);
		}
	},
	
	/*_updateGroupWithRoles: function(groupSysID, groupName){
		try{
			this.logger.debug("Inside Nutanix_ImportUsers._updateGroupWithRoles.");		

			var roles = this.endUserRoles;

			for(var i=0; i&lt;roles.length; i++){

				var grd = new GlideRecord('sys_group_has_role');
				grd.addQuery('group', groupSysID);
				grd.addQuery('role', roles[i]);
				grd.query();

				if(!grd.hasNext()){
					grd.group = groupSysID;
					grd.role = roles[i];
					grd.insert();
				}
			}

			this.logger.info("Updated group " + groupName + " with Calm Plugin End Users roles.");
		}catch(e){
			this.logger.error("Exception caught inside Nutanix_ImportUsers._updateGroupWithRoles. Error:- "+e);
		}
	},*/
	
    type: 'Nutanix_ImportUsers'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-12-03 08:07:11&lt;/sys_created_on&gt;&lt;sys_id&gt;031dc0d33702a300fdfc097973990ee4&lt;/sys_id&gt;&lt;sys_mod_count&gt;17&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_ImportUsers&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_031dc0d33702a300fdfc097973990ee4&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2022-01-24 12:13:01&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>1527369597</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>98021aa32fd50110e49924c62799b6d2</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb91c1fe00000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table/>
<target_name>Nutanix_ImportUsers</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>d15849f48059c1104705484e443649b0</update_guid>
<update_guid_history>d15849f48059c1104705484e443649b0:1527369597,01e149fb444901102b5a9ce2afa1eaf9:307873813,7907cb0620581410b6d79ae996e3e272:-168030805,05adb9ddec0894507ed777a5564b1621:790592400,9e02b6b4cba38010cfb7bde0fb7afda3:1616158415,121e196c396340107e9f1c7747f7a43f:-757697555,704f91e84cef041038c9a4f75bc7c379:-358628669,fd2e11a855ef041036d205c3e8c7cfc0:542133062,49cc592842ef0410c4dae6600f177131:2125682237,bc5c4de8f0af0410ab5fc849d5f37b06:-1737952467,d154a4cc7b27c010445c13f70981260b:-805718120,508d54482727c0102c0169253469b645:1190896214,ba0390cca1e3c01047300ff7f9680ae8:-1010898338,25bebe404ec633002fcb0e0cea859b25:-2076180627,50815acc3d06330098f9c54653f6805b:-1770728353,c0dec64c7f0633006a9f013bc94a0e2e:340655937,183ece48c5063300d5c961f7da8c3065:1589262651,7acd02c4090633001940d85dd3166fba:-121697431,53e34ac0c1423300cff4c1103318f998:953500631,1c23428806823300e4e6b69f8df694a1:-752324255,934bb58cfa4233005bec56b826fd6058:1295138376,316f19ab488c7300c5cb0354ac6c9eeb:1672832920,5a3e710bc10c33009c8bc15c5105fa0b:-1700848008,f24971079a0c33002e6be7bfcf3dfaf6:112118904,60a27983060c33006b2c100d4fd86a2d:-1262508048,30c982f6980433003bb737a498c543b6:-611080572,c7feb57239043300cd2ae4fff3d312fe:-539371809,22712d323bc0330045700f2181fdfa1f:-1486704058,e7368d8cbd222300833864fcf3b07691:-575443713,b505541b1802a300534c749fb1d11118:-96464114,c7eec0d3b102a300e2d891f6e0f0cab5:1358758537</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_scope_privilege_622f7fe21ba4411098a61f4a234bcb60</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_scope_privilege"><sys_scope_privilege action="INSERT_OR_UPDATE"><operation>read</operation><source_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</source_scope><status>allowed</status><sys_class_name>sys_scope_privilege</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2021-12-24 05:14:41</sys_created_on><sys_id>622f7fe21ba4411098a61f4a234bcb60</sys_id><sys_mod_count>0</sys_mod_count><sys_name>sc_cat_item_category</sys_name><sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_scope_privilege_622f7fe21ba4411098a61f4a234bcb60</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2021-12-24 05:14:41</sys_updated_on><target_name>sc_cat_item_category</target_name><target_scope display_value="Global">global</target_scope><target_type>sys_db_object</target_type></sys_scope_privilege></record_update>]]></payload>
<payload_hash>-972170639</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>9c021aa32fd50110e49924c62799b6d1</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb91895bf0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table/>
<target_name>sc_cat_item_category</target_name>
<type>Cross scope privilege</type>
<update_domain>global</update_domain>
<update_guid>834f372687a4411001cbac0a243a0952</update_guid>
<update_guid_history>834f372687a4411001cbac0a243a0952:-972170639</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_db_object_3c455540372d2300fdfc097973990e1b</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_db_object"><sys_db_object action="INSERT_OR_UPDATE"><access>public</access><actions_access>false</actions_access><alter_access>false</alter_access><caller_access/><client_scripts_access>false</client_scripts_access><configuration_access>false</configuration_access><create_access>true</create_access><create_access_controls>true</create_access_controls><delete_access>false</delete_access><extension_model/><is_extendable>false</is_extendable><label>Application Profile</label><live_feed_enabled>false</live_feed_enabled><name>x_nuta2_nutanix_ca_application_profile</name><number_ref/><provider_class/><read_access>true</read_access><scriptable_table>false</scriptable_table><super_class/><sys_class_code/><sys_class_name>sys_db_object</sys_class_name><sys_class_path/><sys_created_by>girishgyani</sys_created_by><sys_created_on>2018-10-29 14:24:03</sys_created_on><sys_id>3c455540372d2300fdfc097973990e1b</sys_id><sys_mod_count>8</sys_mod_count><sys_name>Application Profile</sys_name><sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_db_object_3c455540372d2300fdfc097973990e1b</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2022-01-24 13:55:29</sys_updated_on><update_access>true</update_access><user_role display_value="x_nuta2_nutanix_ca.user" name="x_nuta2_nutanix_ca.user">3376fd254f452b001200e5201310c717</user_role><ws_access>true</ws_access></sys_db_object></record_update>]]></payload>
<payload_hash>1440486629</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>d0021aa32fd50110e49924c62799b6d0</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb91c20060000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table>x_nuta2_nutanix_ca_application_profile</table>
<target_name>Application Profile</target_name>
<type>Table</type>
<update_domain>global</update_domain>
<update_guid>0ecf91f88999c1109ec354ae52bffd4e</update_guid>
<update_guid_history>0ecf91f88999c1109ec354ae52bffd4e:1440486629,95bfddb8aa99c11035bf2bbaf9060ee4:691655715,9d0f95b80499c110d558674a74ae3448:1440486629,36a0584e7a626300d49224c794ff1558:580368956,343c4a57e535e30014f15548ca9b4fbe:1881305560,b30609d8b2a563000fabf77058a817b0:-958346040,709e0e84f0ad230020ade926d791c5fe:-958346040,709e0e84f0ad230020ade926d791c5fe:-958346040,f2bd4284e4ad2300266e62e815c54f7e:404364887,a685d540732d2300d2dd54ba0aa577ee:-958346040</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_75c3833837fd2300fdfc097973990e2f</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Nutanix_ConfigureSettingScripts&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Nutanix_ConfigureSettingScripts&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Nutanix_ConfigureSettingScripts = Class.create();
Nutanix_ConfigureSettingScripts.prototype = {
    initialize: function() {
        this.appUtil = new Nutanix_Calm_Utils();
        this.logger = new Nutanix_Calm_Logger();
        this.appScriptInstance = new Nutanix_ImportApplicationProfiles();
        this.protected_var = 'protected';
    },
	
	
    _updateOptions: function(fieldSysid, opt, type) {
        gs.info("Called update options:" + fieldSysid);
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._updateOptions");
            if (type == 5) {
                var grQust = new GlideRecord('question_choice');
                grQust.addQuery('question', fieldSysid);
                grQust.query();
                while (grQust.next()) {
                    grQust.setValue('question', '');
                    grQust.update();
                }
                grQust.deleteMultiple();
                for (var i in opt) {
                    grQust = new GlideRecord('question_choice');
                    grQust.initialize();
                    grQust.sys_class_name = "question_choice";
                    grQust.question = fieldSysid + '';
                    grQust.text = opt[i] + '';
                    grQust.value = opt[i] + '';
                    grQust.insert();
                }
            } else if (type == 21) {
                var grQust = new GlideRecord(this.appUtil.configuration.table.dropDownTable);
                grQust.addQuery('variable', fieldSysid);
                grQust.deleteMultiple();

                for (var i in opt) {
                    grQust = new GlideRecord(this.appUtil.configuration.table.dropDownTable);
                    grQust.initialize();
                    grQust.variable = fieldSysid;
                    grQust.name = opt[i];
                    grQust.value = opt[i];
                    grQust.insert();
                }
                var fGR = new GlideRecord('item_option_new');
                fGR.addQuery('sys_id', fieldSysid);
                fGR.query();
                if (fGR.next()) {
					var column_fields = {};
					column_fields.reference_qual = "variable=" + fieldSysid;
					var fieldSysId = this.updateVariableTable(fGR.sys_id, column_fields, 'update');
                }

            }
        } catch (e) {
            this.logger.error("Inside Nutanix_ConfigureSettingScripts._updateOptions " + e);
        }

    },

    setServiceVariables: function(current) {
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts.setServiceVariables.");

            var performAction = current.variables.type + '';
            var catName = '';

            if (performAction == 'new') {
                //priyanka More 
                var profile = current.variables.multiple_application_profile + "";
                gs.info("Abh chaljayega" + profile + current.variables.multiple_application_profile);
                var profile_arr = profile.split(",");

                var blueprint = current.variables.blueprint;
                var catSysId = current.description;
                var service_data = JSON.parse(current.variables.service_data);

                this.logger.debug("Got Profile:- " + profile + " Blueprint:- " + blueprint + " Catalog Item:- " + catSysId + " and Service Variables Data:- " + current.variables.service_data + " for setting service variables");

                var fieldGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                fieldGR.addEncodedQuery('cat_item=' + catSysId);
                fieldGR.query();

                var fieldInfo = {};

                while (fieldGR.next()) {
                    fieldInfo[fieldGR.name] = fieldGR.sys_id + '';
                }


                this.logger.debug("Fethed the mapping of fields to sysIds. JSON string:- " + JSON.stringify(fieldInfo));

                var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');

                for (var i in service_data) {
                    var serviceName = i;
                    var categoryList = service_data[i];

                    for (var j in categoryList) {
                        var categoryName = j;
                        var category = categoryList[j];

                        var keys = Object.keys(category);

                        if (!category[keys[0]].notCmplx || category[keys[0]].notCmplx + '' == 'false') {

                            this.logger.debug("Mapping PortList variables " + JSON.stringify(category[keys[0]]) + " in Varaibles properties table");

                            gr.initialize();
                            gr.variable = fieldInfo[categoryName + ''] + '';
                            gr.application_profile = profile + '';
                            gr.catalog_item = catSysId + '';
                            gr.default_value = JSON.stringify(category[keys[0]]);
                            gr.isprofilevariable = 'false';
                            gr.runtime_config = 'false';
                            gr.uuid = '';
                            gr.service_name = fieldInfo[serviceName + ''] + '';
                            gr.category_name = fieldInfo[categoryName + ''] + '';
                            gr.insert();

                        } else {
                            for (var k in category) {
                                var varia = category[k];

                                this.logger.debug("Mapping service variable " + varia.name + " with value " + varia.value + " and runtime config as " + varia.runtime_config + " againsts service " + serviceName + " and category " + categoryName + " in Varaibles properties table");

                                if (varia.data_type + '' == 'LOCAL' &amp;&amp; (varia.val_type + '' == 'DATE_TIME' || varia.val_type + '' == 'DATE'))
                                    varia.value = this.appScriptInstance._formttedDateTime(varia.value + '', varia.val_type + '', true);


                                gr.initialize();
                                gr.variable = fieldInfo[varia.name + ''] + '';
                                gr.application_profile = profile + '';
                                gr.catalog_item = catSysId + '';
                                gr.default_value = varia.value + '';
                                gr.isprofilevariable = varia.isprofilevariable + '';
                                gr.runtime_config = varia.runtime_config + '';
                                gr.uuid = varia.uuid + '';
                                gr.service_name = fieldInfo[serviceName + ''] + '';
                                gr.category_name = fieldInfo[categoryName + ''] + '';

                                gr.isdisabled = varia.isdisabled + '';
                                gr.issupported = varia.isSupported + '';
                                gr.isservicevariable = varia.isservicevariable + '';


                                gr.type = varia.type;
                                gr.value_type = varia.val_type + '';
                                gr.field_regex = varia.regex + '';
                                gr.data_type = varia.data_type + '';
                                gr.uuid = varia.uuid + '';

                                gr.field_json = varia.field + "";
                                gr.is_hidden = (varia.isHidden + "" == 'true') ? true : false;

                                gr.insert();

                                catName = gr.catalog_item.name + '';


                                //                                 if (varia.isservicevariable + '' == 'true')
                                //                                     this._createOnChangeScript(fieldInfo[varia.name + ''] + '', catSysId + "");
                            }
                        }

                    }
                }
                //priyanka More 
                //                 this.logger.info("Set service variables values for " + catName + ".");
                // 				this.logger.debug("Prince Logs outside for :::   " + profile_arr + " ::: " + profile_arr.length);
                // 				for(var i = 0 ; i &lt; profile_arr.length ; i++){
                // 					this.logger.debug("Prince Logs calling ... _createOnChangeScriptForDependee ");
                // 					this._createOnChangeScriptForDependee(catSysId , profile_arr[i], true, "serviceVar" );
                // 				}

            } else {

                var profile = current.variables.application_profile + '';
                var catSysId = current.variables.cat_item + '';

                var service_data = JSON.parse(current.variables.service_data + '');

                this.logger.debug("Got Profile:- " + profile + " Catalog Item:- " + catSysId + " and Service Variables Data:- " + current.variables.service_data + " to update service variables.");

                var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                gr.addQuery('catalog_item', catSysId);
                gr.addQuery('application_profile', profile);
                gr.addQuery('isprofilevariable', false);
                gr.query();

                while (gr.next()) {
                    /*if((gr.category_name.name+'').indexOf('storage') != -1){
                    	gr.default_value = JSON.stringify(service_data[gr.service_name.name+''][gr.category_name.name+''][gr.sys_id+'']);
                    	gr.update();	
                    	this.logger.debug("Updated service storage variable "+ gr.default_value);
                    }else if((gr.category_name.name+'').indexOf('port') != -1){
                    	gr.default_value = JSON.stringify(service_data[gr.service_name.name+''][gr.category_name.name+''][gr.sys_id+'']);
                    	gr.update();	
                    	this.logger.debug("Updated service port list "+ gr.default_value);
                    }*/


                    var jsonData = service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''];

                    if (!jsonData.notCmplx || jsonData.notCmplx + '' == 'false') {
                        gr.default_value = JSON.stringify(service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + '']);
                        gr.update();
                        this.logger.debug("Updated service port list " + gr.default_value);
                    } else {
                        if (service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].data_type + '' == 'LOCAL' &amp;&amp; (service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].val_type + '' == 'DATE_TIME' || service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].val_type + '' == 'DATE'))
                            service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].value = this.appScriptInstance._formttedDateTime(service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].value + '', service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].val_type + '', true);

                        gr.default_value = service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].value + '';
                        gr.runtime_config = service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].runtime_config + '';
                        gr.update();

                        this.logger.debug("Updated service variable " + gr.variable.name + " with value " + gr.default_value + " and runtime config as " + gr.runtime_config + " againsts service " + gr.service_name.name + " and category " + gr.category_name.name + " in Variables properties table");
                        catName = gr.catalog_item.name + '';

                    }
                }

                this.logger.info("Updated service variables values for " + catName + ".");
            }

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts.setServiceVariables. Error:- " + e);
        }
    },

    setProfileVariables: function(current) {
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts.setProfileVariables.");
            this.logger.info("Setting profile variables properties." + JSON.stringify(current));

            var performAction = current.variables.type + '';
            var catName = '';

            if (performAction == 'new') {			
                var profile = current.variables.multiple_application_profile + "";
                var profile_arr = profile.split(",");

                var blueprint = current.variables.blueprint;
                var catSysId = current.description;
                var variable_data = JSON.parse(current.variables.variable_data);

                this.logger.debug("Got Profile:- " + profile + " Blueprint:- " + blueprint + " Catalog Item:- " + catSysId + " and Service Variables Data:- " + current.variables.variable_data + " for setting profile variables");

                var fieldGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                fieldGR.addEncodedQuery('cat_item=' + catSysId + '^type!=19^type!=20');
                fieldGR.query();

                var fieldInfo = {};

                while (fieldGR.next()) {
                    fieldInfo[fieldGR.name] = fieldGR.sys_id + '';
                }

                this.logger.debug("Fethed the mapping of fields to sysIds. JSON string:- " + JSON.stringify(fieldInfo));

                var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');

                for (var i in variable_data) {
                    var varia = variable_data[i];

                    if (varia.data_type + '' == 'LOCAL' &amp;&amp; (varia.val_type + '' == 'DATE_TIME' || varia.val_type + '' == 'DATE'))
                        varia.value = this.appScriptInstance._formttedDateTime(varia.value + '', varia.val_type + '', true);

                    gr.initialize();
                    gr.application_profile = varia.application_profile + '';
                    gr.catalog_item = catSysId + '';
                    gr.default_value = varia.value + '';
                    gr.isprofilevariable = varia.isprofilevariable + '';
                    gr.runtime_config = varia.runtime_config + '';
                    gr.uuid = varia.uuid + '';
                    gr.variable = fieldInfo[varia.name + ''] + '';
                    gs.info("priyanka BP varable " + fieldInfo[varia.name + ''] + " new catalog item variable " + gr.variable);
                    gr.isdisabled = varia.isdisabled + '';
                    gr.type = varia.type;
                    gr.value_type = varia.val_type + '';
                    gr.field_regex = varia.regex + '';
                    gr.data_type = varia.data_type + '';
                    gr.uuid = varia.uuid + '';
                    gr.field_json = varia.field + "";
                    gr.is_hidden = (varia.isHidden + "" == 'true') ? true : false;
                    gr.insert();
                    catName = gr.catalog_item.name + '';
                    this.logger.debug("Mapping profile variable " + varia.name + " with value " + varia.value + " and runtime config as " + varia.runtime_config + " againsts profile " + gr.application_profile.name + " in Variables properties table");


                    //if(varia.isprofilevariable+'' == "true")
                    //	this._createOnChangeScript(fieldInfo[varia.name+'']+'' , catSysId + "");


                }

                //priyanka More				

                for (var i = 0; i &lt; profile_arr.length; i++) {

                    this._createOnChangeScriptForDependee(catSysId, profile_arr[i], "profileVar");
                }

                this.logger.info("Set profile variables values for " + catName + ".");
            } else {

                var profile = current.variables.multiple_application_profile + "";
                gs.info("Abh chaljayega" + profile + current.variables.multiple_application_profile);
                var profile_arr = profile.split(",");
                var catSysId = current.variables.cat_item + '';
                var delta_profile = (current.variables.delta_profiles + '').split(',');
                var variable_data = JSON.parse(current.variables.variable_data + '');

                var variable_data = JSON.parse(current.variables.variable_data + '');
                for (var c in variable_data) {
                    var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                    gr.addQuery('catalog_item', catSysId);
                    gr.addQuery('application_profile', variable_data[c].application_profile);
                    gr.addQuery('isprofilevariable', true);
                    gr.query();

                    while (gr.next()) {
                        if (variable_data[gr.sys_id + ''].data_type + '' == 'LOCAL' &amp;&amp; (variable_data[gr.sys_id + ''].val_type + '' == 'DATE_TIME' || variable_data[gr.sys_id + ''].val_type + '' == 'DATE'))
                            variable_data[gr.sys_id + ''].value = this.appScriptInstance._formttedDateTime(variable_data[gr.sys_id + ''].value + '', variable_data[gr.sys_id + ''].val_type + '', true);

                        gr.default_value = variable_data[gr.sys_id + ''].value + '';
                        gr.runtime_config = variable_data[gr.sys_id + ''].runtime_config + '';
                        gr.update();
                        catName = gr.catalog_item.name + '';
                        this.logger.debug("Updated profile variable " + gr.variable.name + " with value " + gr.default_value + " and runtime config as " + gr.runtime_config + " againsts profile " + gr.application_profile.name + " in Variables properties table");
                    }
                }
                this.logger.info("Updated profile variables values for " + catName + ".");

                var fieldGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                fieldGR.addEncodedQuery('cat_item=' + catSysId + '^type!=19^type!=20');
                fieldGR.query();

                var fieldInfo = {};

                while (fieldGR.next()) {
                    fieldInfo[fieldGR.name] = fieldGR.sys_id + '';
                }

                for (var c in variable_data) {
                    for (var k in delta_profile) {
                        if (variable_data[c].application_profile == delta_profile[k]) {
                            var varia = variable_data[c];

                            if (varia.data_type + '' == 'LOCAL' &amp;&amp; (varia.val_type + '' == 'DATE_TIME' || varia.val_type + '' == 'DATE'))
                                varia.value = this.appScriptInstance._formttedDateTime(varia.value + '', varia.val_type + '', true);

                            gr.initialize();
                            gr.application_profile = varia.application_profile + '';
                            gr.catalog_item = catSysId + '';
                            gr.default_value = varia.value + '';
                            gr.isprofilevariable = varia.isprofilevariable + '';
                            gr.runtime_config = varia.runtime_config + '';
                            gr.uuid = varia.uuid + '';
                            gr.variable = fieldInfo[varia.name + ''] + '';
                            gr.isdisabled = varia.isdisabled + '';
                            gr.type = varia.type;
                            gr.value_type = varia.val_type + '';
                            gr.field_regex = varia.regex + '';
                            gr.data_type = varia.data_type + '';
                            gr.uuid = varia.uuid + '';
                            gr.field_json = varia.field + "";
                            gr.is_hidden = (varia.isHidden + "" == 'true') ? true : false;
                            gr.insert();
                            catName = gr.catalog_item.name + '';
                            this.logger.debug("Mapping profile variable " + varia.name + " with value " + varia.value + " and runtime config as " + varia.runtime_config + " againsts profile " + gr.application_profile.name + " in Variables properties table");


                            //                             if (varia.isprofilevariable + '' == "true")
                            //                                 this._createOnChangeScript(fieldInfo[varia.name + ''] + '', catSysId + "");

                        }
                    }
                }

                for (var i = 0; i &lt; profile_arr.length; i++) {

                    this._createOnChangeScriptForDependee(catSysId, profile_arr[i], "profileVar");
                }
            }

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts.setProfileVariables. Error:- " + e);
        }
    },

    _createOnChangeScriptForDependee: function(catSysId, profileSysID, type) {
        try {

            var clientScriptVar = [];
            var variableProperty = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
            variableProperty.addQuery('catalog_item', catSysId);
            variableProperty.addNotNullQuery('field_json');
            //      variableProperty.addQuery('application_profile', profileSysID);

            if (type + '' == 'profileVar')
                variableProperty.addQuery('isprofilevariable', true);
            if (type + '' == 'serviceVar')
                variableProperty.addQuery('isservicevariable', true);

            variableProperty.query();
            while (variableProperty.next()) {
                var depend_on = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
                depend_on.addQuery('catalog_item', catSysId);
                depend_on.addNotNullQuery('field_json');
                //            depend_on.addQuery('application_profile', profileSysID);

                if (type + '' == 'profileVar')
                    depend_on.addQuery('isprofilevariable', true);
                if (type + '' == 'serviceVar')
                    depend_on.addQuery('isservicevariable', true);

                depend_on.query();
                while (depend_on.next()) {
                    var dependent_var = '';
                    if (type + '' == 'serviceVar') {

                        dependent_var = '@@{' + variableProperty.variable.question_text + '}@@';
                        gs.info("!!!!! serviceVar " + dependent_var);
                    }
                    if (type + '' == 'profileVar') {

                        dependent_var = '@@{' + variableProperty.variable.name + '}@@';
                        gs.info("!!!!! profileVar " + dependent_var);
                    }
                    var field_json = depend_on.field_json + '';
                    gs.info("Priyanka log dependent_var " + dependent_var + " " + field_json + " " + field_json.indexOf(dependent_var));
                    if (field_json != '{}') {
                        if (field_json.indexOf(dependent_var) != -1) {
                            if (clientScriptVar.indexOf(variableProperty.variable.sys_id) === -1) {
                                gs.info("!!!!! varaible push to array " + variableProperty.variable.name);
                                clientScriptVar.push(variableProperty.variable.sys_id);
                            }
                            break;
                        }
                    }
                }
            }

            for (var j in clientScriptVar) {
                if (this._clientScriptExist(clientScriptVar[j] + '', catSysId + ""))
                    continue;
                else
                    this._createOnChangeScript(clientScriptVar[j] + '', catSysId + "");
            }
        } catch (e) {
            this.logger.error("Inside _createOnChangeScriptForDependee caught exception :::: " + e)
        }
    },
    _clientScriptExist: function(clientScriptVar, catSysId) {
        var gr = new GlideRecord('catalog_script_client');
        gr.addQuery('name', 'Fetch values OnChange');
        gr.addQuery('cat_item', catSysId);
        gr.addQuery('cat_variable', clientScriptVar);
        gr.query();
        if (gr.next())
            return true;
        else
            return false;
    },
    setCredentialsData: function(current) {

        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts.setCredentialsData.");





            var catSysId = current.description;
            var catName = '';
            var performAction = current.variables.type + '';

            if (performAction == 'new') {
                var blueprint = current.variables.blueprint;
                var variable_data = JSON.parse(current.variables.credentials_data);

                this.logger.debug("Got Blueprint:- " + blueprint + " Catalog Item:- " + catSysId + " and Credentials Data:- " + current.variables.credentials_data + " for setting credetnails.");

                var gr = new GlideRecord(this.appUtil.configuration.table.Credentials + '');

                for (var i in variable_data) {
                    var varia = variable_data[i];

                    gr.initialize();

                    gr.catalog_item = catSysId + '';
                    gr.actual_name = i + '';
                    gr.description = varia.description + '';
                    gr.is_default = varia.is_default + '';
                    gr.is_secret_modified = varia.is_secret_modified + '';
                    gr.name = varia.credential_name.value + '';
                    gr.passphrase = (varia.passphrase) ? varia.passphrase.value + '' : '';
                    gr.passphrase_editable = (varia.passphrase) ? varia.passphrase.runtime_config + '' : '';
                    gr.password = (varia.password) ? varia.password.value + '' : '';
                    gr.secret_editable = (varia.password) ? varia.password.runtime_config + '' : '';
                    gr.ssh_private_key = (varia.ssh_private_key) ? varia.ssh_private_key.value + '' : '';
                    gr.ssh_private_key_editable = (varia.ssh_private_key) ? varia.ssh_private_key.runtime_config + '' : '';
                    gr.state = varia.state + '';
                    gr.type = varia.secret_type.value + '';
                    gr.username = varia.username.value + '';
                    gr.username_editable = varia.username.runtime_config + '';
                    gr.uuid = varia.uuid + '';

                    gr.username_isdisabled = varia.username_isdisabled + '';
                    gr.secret_isdisabled = varia.secret_isdisabled + '';
                    gr.ssh_private_key_isdisabled = varia.ssh_private_key_isdisabled + '';
                    gr.passphrase_isdisabled = varia.passphrase_isdisabled + '';

                    gr.credential_reference = varia.credential_reference.value + '';
                    gr.runtime = varia.runtime + '';

                    gr.insert();

                    catName = gr.catalog_item.name + '';
                    this.logger.debug("Mapped credentials data against catalog item " + gr.catalog_item);
                }

                // 				var gr = new GlideRecord(this.appUtil.configuration.table.variableSetTable+'');
                // 				gr.addQuery('variable_set', gs.getProperty('x_nuta2_nutanix_ca.credentials.variable.set')+'');
                // 				gr.addQuery('sc_cat_item', catSysId+'');
                // 				gr.query();

                // 				if(!gr.hasNext()){
                // 					gr.initialize();
                // 					gr.variable_set = gs.getProperty('x_nuta2_nutanix_ca.credentials.variable.set')+'';
                // 					gr.sc_cat_item = catSysId+''; 
                // 					gr.order = '51001';
                // 					gr.insert();	
                // 				}

                var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                gr.addQuery('variable', gs.getProperty('x_nuta2_nutanix_ca.credentials.mapping.variable.sys.id') + '');
                gr.addQuery('catalog_item', catSysId + '');
                gr.query();

                if (gr.next()) {
                    gr.default_value = current.variables.environment_mapping;
                    gr.update();
                } else {
                    gr.initialize();
                    gr.variable = gs.getProperty('x_nuta2_nutanix_ca.credentials.mapping.variable.sys.id') + '';
                    gr.application_profile = '';
                    gr.catalog_item = catSysId + '';
                    gr.default_value = current.variables.environment_mapping;
                    gr.isprofilevariable = false;
                    gr.runtime_config = false;
                    gr.uuid = '';
                    gr.service_name = '';
                    gr.category_name = '';
                    gr.insert();
                }

                // 				if(current.variables.environment_mapping+'' == 'true'){
                // 					var mapping_data = JSON.parse(current.variables.credentials_mapping);

                // 					for(var i in mapping_data){

                // 						var varia = mapping_data[i];

                // 						var gr = new GlideRecord(this.appUtil.configuration.table.Credentials+'');
                // 						gr.addQuery('catalog_item', catSysId+'');
                // 						gr.addQuery('environment', varia.environment+'');
                // 						gr.addQuery('project', varia.project+'');
                // 						gr.query();

                // 						if(!gr.hasNext()){
                // 							gr.initialize();

                // 							gr.catalog_item = catSysId+'';
                // 							gr.actual_name = i+'';
                // 							gr.description = varia.description+'';
                // 							gr.is_default = varia.is_default+'';
                // 							gr.is_secret_modified = varia.is_secret_modified+'';
                // 							gr.name = varia.credential_name.value+'';
                // 							gr.passphrase = (varia.passphrase)?varia.passphrase.value+'':'';
                // 							gr.passphrase_editable = (varia.passphrase)?varia.passphrase.runtime_config+'':'';
                // 							gr.password = (varia.password)?varia.password.value+'':'';
                // 							gr.secret_editable = (varia.password)?varia.password.runtime_config+'':'';
                // 							gr.ssh_private_key = (varia.ssh_private_key)?varia.ssh_private_key.value+'':'';
                // 							gr.ssh_private_key_editable = (varia.ssh_private_key)?varia.ssh_private_key.runtime_config+'':'';
                // 							gr.state = varia.state+'';
                // 							gr.type = varia.secret_type.value+'';
                // 							gr.username = varia.username.value+'';
                // 							gr.username_editable = varia.username.runtime_config+'';
                // 							gr.uuid = varia.uuid+'';
                // 							gr.environment = varia.environment+'';
                // 							gr.project = varia.project+'';

                // 							gr.username_isdisabled = varia.username_isdisabled+'';
                // 							gr.secret_isdisabled = varia.secret_isdisabled+'';
                // 							gr.ssh_private_key_isdisabled = varia.ssh_private_key_isdisabled+'';
                // 							gr.passphrase_isdisabled = varia.passphrase_isdisabled+'';				 

                // 							gr.insert();	
                // 						}
                // 					}
                // 				}

                this.logger.info("Set profile variables values for " + catName + ".");
            } else {
                var catSysId = current.variables.cat_item + '';
                var variable_data = JSON.parse(current.variables.credentials_data);

                for (var i in variable_data) {
                    var varia = variable_data[i];

                    var gr = new GlideRecord(this.appUtil.configuration.table.Credentials + '');
                    gr.addQuery('catalog_item=' + catSysId + '^uuid=' + varia.uuid);
                    gr.query();

                    if (gr.next()) {
                        gr.catalog_item = catSysId + '';
                        gr.description = varia.description + '';
                        gr.is_default = varia.is_default + '';
                        gr.is_secret_modified = varia.is_secret_modified + '';
                        gr.name = varia.credential_name.value + '';
                        gr.passphrase = (varia.passphrase) ? varia.passphrase.value + '' : '';
                        gr.passphrase_editable = (varia.passphrase) ? varia.passphrase.runtime_config + '' : '';
                        gr.password = (varia.password) ? varia.password.value + '' : '';
                        gr.secret_editable = (varia.password) ? varia.password.runtime_config + '' : '';
                        gr.ssh_private_key = (varia.ssh_private_key) ? varia.ssh_private_key.value + '' : '';
                        gr.ssh_private_key_editable = (varia.ssh_private_key) ? varia.ssh_private_key.runtime_config + '' : '';
                        gr.state = varia.state + '';
                        gr.type = varia.secret_type.value + '';
                        gr.username = varia.username.value + '';
                        gr.username_editable = varia.username.runtime_config + '';
                        gr.uuid = varia.uuid + '';

                        gr.username_isdisabled = varia.username_isdisabled + '';
                        gr.secret_isdisabled = varia.secret_isdisabled + '';
                        gr.ssh_private_key_isdisabled = varia.ssh_private_key_isdisabled + '';
                        gr.passphrase_isdisabled = varia.passphrase_isdisabled + '';

                        gr.credential_reference = varia.credential_reference.value + '';
                        gr.runtime = varia.runtime + '';

                        gr.update();
                        catName = gr.catalog_item.name + '';
                        this.logger.debug("Updated credentials data against catalog item " + gr.catalog_item);
                    }
                }

                // 				var gr = new GlideRecord(this.appUtil.configuration.table.variableSetTable+'');
                // 				gr.addQuery('variable_set', gs.getProperty('x_nuta2_nutanix_ca.credentials.variable.set')+'');
                // 				gr.addQuery('sc_cat_item', catSysId+'');
                // 				gr.query();

                // 				if(!gr.hasNext()){
                // 					gr.initialize();
                // 					gr.variable_set = gs.getProperty('x_nuta2_nutanix_ca.credentials.variable.set')+'';
                // 					gr.sc_cat_item = catSysId+''; 
                // 					gr.order = '51001';
                // 					gr.insert();	
                // 				}

                var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                gr.addQuery('variable', gs.getProperty('x_nuta2_nutanix_ca.credentials.mapping.variable.sys.id') + '');
                gr.addQuery('catalog_item', catSysId + '');
                gr.query();

                if (gr.next()) {
                    gr.default_value = current.variables.environment_mapping;
                    gr.update();
                } else {
                    gr.initialize();
                    gr.variable = gs.getProperty('x_nuta2_nutanix_ca.credentials.mapping.variable.sys.id') + '';
                    gr.application_profile = '';
                    gr.catalog_item = catSysId + '';
                    gr.default_value = current.variables.environment_mapping;
                    gr.isprofilevariable = false;
                    gr.runtime_config = false;
                    gr.uuid = '';
                    gr.service_name = '';
                    gr.category_name = '';
                    gr.insert();
                }

                // 				if(current.variables.environment_mapping+'' == 'true'){
                // 					var mapping_data = JSON.parse(current.variables.credentials_mapping);

                // 					for(var i in mapping_data){

                // 						var varia = mapping_data[i];

                // 						var gr = new GlideRecord(this.appUtil.configuration.table.Credentials+'');
                // 						gr.addQuery('catalog_item', catSysId+'');
                // 						gr.addQuery('environment', varia.environment+'');
                // 						gr.addQuery('project', varia.project+'');
                // 						gr.query();

                // 						if(!gr.hasNext()){
                // 							gr.initialize();

                // 							gr.catalog_item = catSysId+'';
                // 							gr.actual_name = i+'';
                // 							gr.description = varia.description+'';
                // 							gr.is_default = varia.is_default+'';
                // 							gr.is_secret_modified = varia.is_secret_modified+'';
                // 							gr.name = varia.credential_name.value+'';
                // 							gr.passphrase = (varia.passphrase)?varia.passphrase.value+'':'';
                // 							gr.passphrase_editable = (varia.passphrase)?varia.passphrase.runtime_config+'':'';
                // 							gr.password = (varia.password)?varia.password.value+'':'';
                // 							gr.secret_editable = (varia.password)?varia.password.runtime_config+'':'';
                // 							gr.ssh_private_key = (varia.ssh_private_key)?varia.ssh_private_key.value+'':'';
                // 							gr.ssh_private_key_editable = (varia.ssh_private_key)?varia.ssh_private_key.runtime_config+'':'';
                // 							gr.state = varia.state+'';
                // 							gr.type = varia.secret_type.value+'';
                // 							gr.username = varia.username.value+'';
                // 							gr.username_editable = varia.username.runtime_config+'';
                // 							gr.uuid = varia.uuid+'';
                // 							gr.environment = varia.environment+'';
                // 							gr.project = varia.project+'';

                // 							gr.username_isdisabled = varia.username_isdisabled+'';
                // 							gr.secret_isdisabled = varia.secret_isdisabled+'';
                // 							gr.ssh_private_key_isdisabled = varia.ssh_private_key_isdisabled+'';
                // 							gr.passphrase_isdisabled = varia.passphrase_isdisabled+'';				 

                // 							gr.insert();	
                // 						}
                // 					}
                // 				}

                this.logger.info("Updated credentials values for " + catName + ".");
            }
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts.setCredentialsData. Error:- " + e);
        }
    },

    _groupsToUsers: function(current) {

        var groups = (current.variables.assign_groups) ? (current.variables.assign_groups + "") : "";
        var users = (current.variables.assign_users) ? (current.variables.assign_users + "").split(",") : [];

        var grMembers = new GlideRecord("sys_user_grmember");
        grMembers.addEncodedQuery("group.sys_idIN" + groups);
        grMembers.query();
        while (grMembers.next()) {
            if (users.indexOf(grMembers.user.sys_id + "") == -1)
                users.push(grMembers.user.sys_id + "");
        }

        current.variables.assign_users = users.toString();

        return current;
    },

    configBPGeneralSettings: function(current, clientData, nonFilteredClientData) {

        try {

            this.logger.debug("Inside Nutanix_ConfigureSettingScripts.configBPGeneralSettings.\n current : " + JSON.stringify(current) + "\n clientData : " + JSON.stringify(clientData) + "\n nonFilteredClientData " + JSON.stringify(nonFilteredClientData));
            var lg = new x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge();
            var status = lg.hideAccessLocalGroupOption(); //to check if the given option is for local groups.

            if (status + "" == "false")
                current = this._groupsToUsers(current);
            var environments = current.variables.environments + '';
            var performAction = current.variables.type + '';
            if (performAction == 'new') {
                var blueprint = (current.variables.type_of_blueprint == 'runbook' || current.variables.type_of_blueprint == 'published_runbook') ? current.variables.runbook + '' : current.variables.blueprint + '';
                var blueprintType = current.variables.type_of_blueprint + '';
                var createCatalog = current.variables.create_catalog + '';

                this.logger.debug("Got Blueprint:- " + blueprint + " Blueprint Type:- " + blueprintType + " and Create Catalog:- " + createCatalog + " for configuring new catalog item.");

                var targetCatTable = 'x_nuta2_nutanix_ca_nutanix_catalog_items';
                var sourceCatTable = '';
                if (blueprintType == 'unpublished')
                    sourceCatTable = 'x_nuta2_nutanix_ca_nutanix_blueprint';
                if (blueprintType == 'runbook')
                    sourceCatTable = 'x_nuta2_nutanix_ca_runbooks';
                if (blueprintType == 'published_runbook')
                    sourceCatTable = 'x_nuta2_nutanix_ca_nutanix_marketplaceitems';
                if (blueprintType == 'published')
                    sourceCatTable = 'x_nuta2_nutanix_ca_nutanix_marketplaceitems';


                var ans;
                if (createCatalog == 'yes')
                    ans = this._copyCatalogItem(sourceCatTable, targetCatTable, blueprint, current, blueprintType, clientData, nonFilteredClientData);
                else
                    ans = this._updateCatalogItem(sourceCatTable, targetCatTable, blueprint, current);

                this._insertIntoRuntimeConfigTable(ans, current);
                this._updateUserOverCalm(current);
                if (status + "" == "false") //updated version check the flag for referense.
                {
                    this._updateGroupOverCalm(current);
                }
                /*else {
					this._updateGroupSnowRole(current);
				}*/

                return ans[0] + '';
            } else {

                var cat_item = current.variables.cat_item + '';

                var blueprintType = current.variables.type_of_blueprint + '';

                this.logger.debug("Got Catalog Item:- " + cat_item + " for updating existing catalog item.");

                var gr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
                gr.addQuery('item_name', cat_item);
                gr.query();

                if (gr.next()) {
                    var cat = gr.item_name.getRefRecord();
                    cat.sys_name = current.variables.item_name + '';
                    cat.name = current.variables.item_name + '';
                    cat.short_description = current.variables.item_name + '';
                    cat.description_markdown = current.variables.description + '';
                    cat.description = this.appUtil.markdown_renderer(current.variables.description + '');
                    cat.update();

                    // 					var user_criteria = gr.user_criteria.getRefRecord();
                    // 					user_criteria.user = current.variables.assign_users;
                    var group = '';
                    if (status + "" == "false") {
                        group = current.variables.assign_groups;
                    } else {
                        group = current.variables.assign_local_groups;
                    }
                    var user_criteria = new sn_uc.UserCriteria(gr.user_criteria.sys_id);
                    user_criteria.update({
                        "user": "" + current.variables.assign_users,
                        "group": "" + group
                    }, "Update user criteria user Group");
                    //	user_criteria.update();

                    this._updateUserOverCalm(current);

                    if (status + "" == "false") {
                        this._updateGroupOverCalm(current);
                    }
                    /*else {
						this._updateGroupSnowRole(current);
					}*/
                    gr.multiple_application_profile = current.variables.multiple_application_profile;
                    gr.multiple_projects = current.variables.multiple_project;
                    gr.environments = current.variables.environments;
                    if (blueprintType == 'runbook' || blueprintType == 'published_runbook') {
                        gr.endpoint = current.variables.endpoint;
                    }
                    gr.update();
                    return gr.item_name + '';
                }

            }

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts.configBPGeneralSettings. Error:- " + e);
        }
    },

    _checkUsersUUID: function(current) {
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._checkUsersUUID.");

            var userGr = new GlideRecord('sys_user');
            userGr.addEncodedQuery('sys_idIN' + current.variables.assign_users + '^x_nuta2_nutanix_ca_nutanix_uuidISEMPTY');
            userGr.query();

            var taskUUIDList = [];

            while (userGr.next()) {

                var ldapGR = new GlideRecord('ldap_server_config');
                if (ldapGR.get(userGr.ldap_server + '')) {
                    var LDAPName = '';
                    var LDAPUuid = '';
                    // 				var ldap_rdn = ldapGR.rdn+'';
                    // 				ldap_rdn = ldap_rdn.replace(/DC=/g,"").replace(/,/g,".");
                    var dir_body = {
                        "kind": "directory_service",
                        "filter": 'url==' + ldapGR.server_url //+";domain_name=="+ldap_rdn
                    }

                    this.logger.debug("Body for directory services:: :: " + JSON.stringify(dir_body));

                    var response = this.appUtil.makeCalmApiCall("POST", this.appUtil.configuration.api.directoryServices + "", JSON.stringify(dir_body));
                    this.logger.debug("Response Body for directory :: " + response.getBody());

                    if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                        var parsed = JSON.parse(response.getBody());
                        parsed = parsed.entities;
                        for (var p in parsed) {
                            var par_entity = parsed[p];
                            var domain_name = par_entity.status.resources.domain_name + "";
                            //						if(domain_name == ldap_rdn){
                            if (par_entity.status.resources.url + '' == ldapGR.server_url + '' || par_entity.status.resources.url + '' == ldapGR.server_url + '/' || par_entity.status.resources.url + '/' == ldapGR.server_url + '') {
                                LDAPName = par_entity.status.name + '';
                                LDAPUuid = par_entity.metadata.uuid + '';
                                break;
                            }
                        }

                        //LDAPName = parsed.entities[0].status.name+'';
                        //LDAPUuid = parsed.entities[0].metadata.uuid+'';

                    } else {
                        this.logger.error("Nutanix_ConfigureSettingScripts._checkUsersUUID :- Error while updating directory:- " + response.haveError() + " Status code :- " + response.getStatusCode() + " Error :: " + response.getBody());
                    }

                    var body = {
                        "spec": {
                            "resources": {
                                "directory_service_user": {
                                    "user_principal_name": userGr.email + '',
                                    "directory_service_reference": {
                                        "kind": "directory_service",
                                        "name": LDAPName,
                                        "uuid": LDAPUuid

                                    }
                                }
                            }
                        },
                        "metadata": {
                            "kind": "user",
                            "name": userGr.name + ''
                        }
                    };
                    this.logger.debug("Body send for user :: " + JSON.stringify(body));
                    var response = this.appUtil.makeCalmApiCall("POST", "/users", JSON.stringify(body));
                    var res = JSON.parse(response.getBody());
                    if (response.getStatusCode() == '200' || response.getStatusCode() == '201' || response.getStatusCode() == '202') {

                        userGr.x_nuta2_nutanix_ca_nutanix_uuid = JSON.parse(response.getBody()).metadata.uuid + '';
                        userGr.update();

                        taskUUIDList.push(JSON.parse(response.getBody()).status.execution_context.task_uuid + '');

                    } else if (response.getStatusCode() == '400' &amp;&amp; res.message_list[0].reason == "DUPLICATE_ENTITY") {

                        var payload = {
                            "kind": "user",
                            "filter": "username==" + userGr.email + ''
                        };


                        var response = this.appUtil.makeCalmApiCall("POST", this.appUtil.configuration.api.getUsersList + "", this.appUtil.stringify(payload));

                        if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                            var parsedJSON = this.appUtil.parse(response.getBody());
                            var entities = parsedJSON.entities;
                            var entity = entities[0];
                            var uuid = entity.metadata.uuid + '';
                            userGr.x_nuta2_nutanix_ca_nutanix_uuid = uuid;
                            userGr.update();

                        } else {

                            this.logger.debug("Nutanix_ImportUsers.importUsers:- Connection users/list not established :- " + response.haveError() + " Status code :- " + response.getStatusCode());
                        }
                        ///

                    } else {
                        this.logger.error("Nutanix_ConfigureSettingScripts._checkUsersUUID :- Error while creating user entity in calm:- " + response.haveError() + " Status code :- " + response.getStatusCode() + " Error :: " + response.getBody());
                    }
                }
            }

            var taskComplete = true;
            var i = 0;
            do {
                if (i &gt;= taskUUIDList.length) {
                    i = 0;
                    taskComplete = true;
                }

                var response = this.appUtil.makeCalmApiCall("GET", "/tasks/" + taskUUIDList[i], '');
                var parsedTask = JSON.parse(response.getBody());
                if (parsedTask.status + '' == 'QUEUED' || parsedTask.status + '' == 'RUNNING') {
                    taskComplete = false;
                    i++;
                } else {
                    taskUUIDList.splice(i, 1);
                }

                if (taskUUIDList.length &lt; 1)
                    break;

            } while (taskComplete == false);

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._checkUsersUUID. Error:- " + e);
        }
    },


    _updateUserOverCalm: function(current) {
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._updateUserOverCalm.");

            if (!current.variables.assign_users)
                return;

            this._checkUsersUUID(current); //this create ldap user in calm and updates ldap user uuid in SNOW if user uuid is not present in calm.

            var projects = current.variables.multiple_project.toString();
            var project_array = projects.split(',');
            for (var k = 0; k &lt; project_array.length; k++) {
                this.logger.debug('Inside Nutanix_ConfigureSettingScripts._updateUserOverCalm. projects sys_id' + project_array[k]);
                var projectGR = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
                if (projectGR.get(project_array[k])) {
                    var projectUUID = projectGR.uuid;
                    this.logger.debug('Inside Nutanix_ConfigureSettingScripts._updateUserOverCalm. projects UUID ' + projectUUID);
                    var response = this.appUtil.makeCalmApiCall("GET", this.appUtil.configuration.api.projectInternal + "/" + projectUUID, '');
                }
                if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                    var parsed = this.appUtil.parse(response.getBody());
                    var acpRoles = parsed.spec.access_control_policy_list;

                    var acpConsumerRoleIndex = '';

                    for (var i in acpRoles) {
                        if (acpRoles[i].acp.resources.role_reference.uuid + '' == gs.getProperty('x_nuta2_nutanix_ca.cosumer.role.uuid') + '') {
                            acpConsumerRoleIndex = i;
                        }
                        parsed.spec.access_control_policy_list[i].operation = "UPDATE";
                    }

                    var userGr = new GlideRecord('sys_user');
                    userGr.addEncodedQuery('sys_idIN' + current.variables.assign_users);
                    userGr.query();

                    var userArr = {};

                    while (userGr.next()) {
                        userArr[userGr.sys_id + ''] = {
                            "uuid": (userGr) ? userGr.x_nuta2_nutanix_ca_nutanix_uuid + '' : '',
                            "email": (userGr) ? userGr.email + '' : ''
                        };
                    }

                    if (acpConsumerRoleIndex) { //if consumer role is there in project

                        var users = (current.variables.assign_users + '').split(',');
                        for (var i in users) {
                            parsed.spec.access_control_policy_list[acpConsumerRoleIndex].acp.resources.user_reference_list.push({
                                "name": (userArr[users[i] + '']) ? userArr[users[i] + ''].email + '' : '',
                                "kind": "user",
                                "uuid": (userArr[users[i] + '']) ? userArr[users[i] + ''].uuid + '' : ''
                            });

                            parsed.spec.project_detail.resources.user_reference_list.push({
                                "name": (userArr[users[i] + '']) ? userArr[users[i] + ''].email + '' : '',
                                "kind": "user",
                                "uuid": (userArr[users[i] + '']) ? userArr[users[i] + ''].uuid + '' : ''
                            });
                        }

                    } else { //pushes consumer role in project

                        var projectSubnet;
                        var project = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
                        project.addQuery('uuid', projectUUID + '');
                        project.setLimit(1);
                        project.query();
                        if (project.next()) {
                            projectSubnet = project.subnet + '';
                        }

                        var arr = [];

                        var gr = new GlideRecord('x_nuta2_nutanix_ca_subnet');
                        gr.addEncodedQuery('sys_idIN' + projectSubnet);
                        gr.query();
                        while (gr.next()) {
                            arr.push(gr.cluster_uuid + '');
                        }

                        var clusterEntitle = {
                            "left_hand_side": {
                                "entity_type": "cluster"
                            },
                            "operator": "IN",
                            "right_hand_side": {
                                "uuid_list": arr
                            }
                        };


                        var tmp = {
                            "acp": {
                                "name": "nuSnowAcp-" + projectUUID,
                                "resources": {
                                    "role_reference": {
                                        "name": "Consumer",
                                        "uuid": "49e8f061-0948-4705-953b-88915397bd60",
                                        "kind": "role"
                                    },
                                    "user_group_reference_list": [],
                                    "user_reference_list": [],
                                    "filter_list": {
                                        "context_list": [{
                                            "scope_filter_expression_list": [{
                                                "operator": "IN",
                                                "left_hand_side": "PROJECT",
                                                "right_hand_side": {
                                                    "uuid_list": [projectUUID + '']
                                                }
                                            }],
                                            "entity_filter_expression_list": [{
                                                "operator": "IN",
                                                "left_hand_side": {
                                                    "entity_type": "ALL"
                                                },
                                                "right_hand_side": {
                                                    "collection": "ALL"
                                                }
                                            }]
                                        }, {
                                            "entity_filter_expression_list": []
                                        }]
                                    }
                                },
                                "description": ""
                            },
                            "metadata": {
                                "kind": "access_control_policy"
                            },
                            "operation": "ADD"
                        };

                        var consumerFilter = JSON.parse(gs.getProperty('x_nuta2_nutanix_ca.consumer.entitlement.filter'));
                        tmp.acp.resources.filter_list.context_list[1].entity_filter_expression_list = consumerFilter["2.9"]; //gs.getProperty('x_nuta2_nutanix_ca.calm_version')];

                        tmp.acp.resources.filter_list.context_list[1].entity_filter_expression_list.push(clusterEntitle);

                        tmp.acp.resources.role_reference = {
                            "name": "Consumer",
                            "uuid": gs.getProperty('x_nuta2_nutanix_ca.cosumer.role.uuid') + '',
                            "kind": "role"
                        };

                        tmp.acp.resources.user_reference_list = [];

                        var users = (current.variables.assign_users + '').split(',');
                        for (var i in users) {

                            tmp.acp.resources.user_reference_list.push({
                                "name": (userArr[users[i] + '']) ? userArr[users[i] + ''].email + '' : '',
                                "kind": "user",
                                "uuid": (userArr[users[i] + '']) ? userArr[users[i] + ''].uuid + '' : ''
                            });

                            parsed.spec.project_detail.resources.user_reference_list.push({
                                "name": (userArr[users[i] + '']) ? userArr[users[i] + ''].email + '' : '',
                                "kind": "user",
                                "uuid": (userArr[users[i] + '']) ? userArr[users[i] + ''].uuid + '' : ''
                            });
                        }
                        parsed.spec.access_control_policy_list.push(tmp);

                    }

                    var requestBody = {
                        "spec": parsed.spec,
                        "api_version": parsed.api_version,
                        "metadata": parsed.metadata
                    }

                    var response = this.appUtil.makeCalmApiCall("PUT", this.appUtil.configuration.api.projectInternal + "/" + projectUUID, JSON.stringify(requestBody));

                    if (response.getStatusCode() == '200' || response.getStatusCode() == '201' || response.getStatusCode() == '202') {

                        this.logger.info("Nutanix_ConfigureSettingScripts._updateUserOverCalm:- Users successfuly updated in calm.");
                        //this._updateSnowRole(current);
                    } else {
                        this.logger.error("Nutanix_ConfigureSettingScripts._updateUserOverCalm :- Error while updating users onto calm :- " + response.haveError() + " Status code :- " + response.getStatusCode() + " Error :: " + response.getBody());
                    }
                } else {
                    this.logger.error("Nutanix_ConfigureSettingScripts._updateUserOverCalm :- Connection to /projects_internal not established :- " + response.haveError() + " Status code :- " + response.getStatusCode());
                }
            }


        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._updateUserOverCalm. Error:- " + e);
        }
    },
   
	getColumnFields: function(sys_id) {
		var column_name = {};
		var fields = new GlideRecord('sys_dictionary');
		fields.addQuery('name', 'item_option_new').addOrCondition('name', 'question');
		fields.query();
		while (fields.next()) {
			column_name[fields.element.toString()] = "";
		}
		var onLoadCatalogClientScript = new sn_sc.CatalogItemVariable(sys_id);
		var column_fields = onLoadCatalogClientScript.read(column_name, true);
		return column_fields;
	},
    ///changes
    _checkGroupUUID: function(current) {
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._checkGroupsUUID.");
            var groupGr = new GlideRecord('sys_user_group');
            groupGr.addEncodedQuery('sys_idIN' + current.variables.assign_groups + '^x_nuta2_nutanix_ca_nutanix_group_uuidISEMPTY');
            groupGr.query();

            var taskUUIDList = [];

            while (groupGr.next()) {
                var groups = (current.variables.assign_groups.getDisplayValue() + '').split(',');

                var distinguishedName = groupGr.source.replace(/ldap:/g, ""); //"CN="+groups[i]+",CN=Users,DC=calsoftcalm,DC=com";

                var body = {
                    "api_version": "3.0",
                    "metadata": {
                        "kind": "user_group"
                    },
                    "spec": {
                        "resources": {
                            "directory_service_user_group": {
                                "distinguished_name": distinguishedName
                            }
                        }
                    }
                };
                this.logger.debug("Body send for group :: " + JSON.stringify(body));
                var response = this.appUtil.makeCalmApiCall("POST", "/user_groups", JSON.stringify(body));
                var res = JSON.parse(response.getBody());
                if (response.getStatusCode() == '200' || response.getStatusCode() == '201' || response.getStatusCode() == '202') {

                    groupGr.x_nuta2_nutanix_ca_nutanix_group_uuid = JSON.parse(response.getBody()).metadata.uuid + '';
                    groupGr.update();

                    taskUUIDList.push(JSON.parse(response.getBody()).status.execution_context.task_uuid + '');

                } else if (response.getStatusCode() == '400' &amp;&amp; res.message_list[0].reason == "DUPLICATE_ENTITY") {

                    var payload = {
                        "kind": "user_group",
                        "filter": "group_name==" + groupGr.name + ''
                    };


                    var response = this.appUtil.makeCalmApiCall("POST", this.appUtil.configuration.api.getGroupsList + "", this.appUtil.stringify(payload));

                    if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                        var parsedJSON = this.appUtil.parse(response.getBody());
                        var entities = parsedJSON.entities;
                        var entity = entities[0];
                        var uuid = entity.metadata.uuid + '';
                        groupGr.x_nuta2_nutanix_ca_nutanix_group_uuid = uuid;
                        groupGr.update();

                    } else {

                        this.logger.debug("Nutanix_ImportUsers.importUsers:- Connection users/list not established :- " + response.haveError() + " Status code :- " + response.getStatusCode());
                    }
                    ///
                } else {
                    this.logger.error("Nutanix_ConfigureSettingScripts._checkGroupsUUID :- Error while creating group entity in calm:- " + response.haveError() + " Status code :- " + response.getStatusCode() + " Error :: " + response.getBody());
                }
                //}
                //} 

                //} 
            }

            var taskComplete = true;
            var i = 0;
            do {
                if (i &gt;= taskUUIDList.length) {
                    i = 0;
                    taskComplete = true;
                }

                var response = this.appUtil.makeCalmApiCall("GET", "/tasks/" + taskUUIDList[i], '');
                var parsedTask = JSON.parse(response.getBody());
                if (parsedTask.status + '' == 'QUEUED' || parsedTask.status + '' == 'RUNNING') {
                    taskComplete = false;
                    i++;
                } else {
                    taskUUIDList.splice(i, 1);
                }

                if (taskUUIDList.length &lt; 1)
                    break;

            } while (taskComplete == false);

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._checkGroupUUID. Error:- " + e);
        }
    },


    _updateGroupOverCalm: function(current) {
        try {

            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._updateGroupOverCalm.");

            if (!current.variables.assign_groups)
                return;

            this._checkGroupUUID(current); //this create ldap group in calm and updates ldap group uuid in SNOW if group uuid is not present in calm.
            var projects = current.variables.multiple_project.toString();
            var project_array = projects.split(',');
            for (var k = 0; k &lt; project_array.length; k++) {
                this.logger.debug('RV: Inside Nutanix_ConfigureSettingScripts._updateGroupOverCalm. projects sys_id' + project_array[k]);
                var projectGR = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
                if (projectGR.get(project_array[k])) {
                    var projectUUID = projectGR.uuid;
                    var response = this.appUtil.makeCalmApiCall("GET", this.appUtil.configuration.api.projectInternal + "/" + projectUUID, '');
                }
                if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {
                    var parsed = this.appUtil.parse(response.getBody());
                    var acpRoles = parsed.spec.access_control_policy_list;
                    var acpConsumerRoleIndex = '';

                    for (var i in acpRoles) {
                        if (acpRoles[i].acp.resources.role_reference.uuid + '' == gs.getProperty('x_nuta2_nutanix_ca.cosumer.role.uuid') + '') {
                            acpConsumerRoleIndex = i;
                        }
                        parsed.spec.access_control_policy_list[i].operation = "UPDATE";
                    }

                    var groupGr = new GlideRecord('sys_user_group');
                    groupGr.addEncodedQuery('sys_idIN' + current.variables.assign_groups);
                    groupGr.query();

                    var groupArr = {};

                    while (groupGr.next()) {
                        groupArr[groupGr.sys_id + ''] = {
                            "uuid": (groupGr) ? groupGr.x_nuta2_nutanix_ca_nutanix_group_uuid + '' : '',
                            "name": (groupGr) ? groupGr.name + '' : ''
                        };
                    }
                    if (acpConsumerRoleIndex) { //if consumer role is there in project

                        var groups = (current.variables.assign_groups + '').split(',');
                        for (var i in groups) {
                            parsed.spec.access_control_policy_list[acpConsumerRoleIndex].acp.resources.user_group_reference_list.push({
                                "name": (groupArr[groups[i] + '']) ? groupArr[groups[i] + ''].name + '' : '',
                                "kind": "user_group",
                                "uuid": (groupArr[groups[i] + '']) ? groupArr[groups[i] + ''].uuid + '' : ''
                            });

                            parsed.spec.project_detail.resources.external_user_group_reference_list.push({
                                "name": (groupArr[groups[i] + '']) ? groupArr[groups[i] + ''].name + '' : '',
                                "kind": "user_group",
                                "uuid": (groupArr[groups[i] + '']) ? groupArr[groups[i] + ''].uuid + '' : ''
                            });
                        }


                    } else { //pushes consumer role in project

                        //var tmp = {"acp":{"name":"nuSnowAcp-"+current.variables.project,"resources":{"role_reference":{"name":"Consumer","uuid":"49e8f061-0948-4705-953b-88915397bd60","kind":"role"},"user_group_reference_list":[],"user_reference_list":[],"filter_list":{"context_list":[{"scope_filter_expression_list":[{"operator":"IN","left_hand_side":"PROJECT","right_hand_side":{"uuid_list":[current.variables.project+'']}}],"entity_filter_expression_list":[{"operator":"IN","left_hand_side":{"entity_type":"ALL"},"right_hand_side":{"collection":"ALL"}}]},{"entity_filter_expression_list":[]}]}},"description":"untitledAcp-e3c568f8-e11b-71e3-a916-493940647e79"},"metadata":{"kind":"access_control_policy"},"operation":"ADD"};

                        var projectSubnet;
                        var project = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
                        project.addQuery('uuid', projectUUID + '');
                        project.setLimit(1);
                        project.query();
                        if (project.next()) {
                            projectSubnet = project.subnet + '';
                        }

                        var arr = [];

                        var gr = new GlideRecord('x_nuta2_nutanix_ca_subnet');
                        gr.addEncodedQuery('sys_idIN' + projectSubnet);
                        gr.query();
                        while (gr.next()) {
                            arr.push(gr.cluster_uuid + '');
                        }

                        var clusterEntitle = {
                            "left_hand_side": {
                                "entity_type": "cluster"
                            },
                            "operator": "IN",
                            "right_hand_side": {
                                "uuid_list": arr
                            }
                        };


                        var tmp = {
                            "acp": {
                                "name": "nuSnowAcp-" + current.variables.project,
                                "resources": {
                                    "role_reference": {
                                        "name": "Consumer",
                                        "uuid": "49e8f061-0948-4705-953b-88915397bd60",
                                        "kind": "role"
                                    },
                                    "user_group_reference_list": [],
                                    "user_reference_list": [],
                                    "filter_list": {
                                        "context_list": [{
                                            "scope_filter_expression_list": [{
                                                "operator": "IN",
                                                "left_hand_side": "PROJECT",
                                                "right_hand_side": {
                                                    "uuid_list": [current.variables.project + '']
                                                }
                                            }],
                                            "entity_filter_expression_list": [{
                                                "operator": "IN",
                                                "left_hand_side": {
                                                    "entity_type": "ALL"
                                                },
                                                "right_hand_side": {
                                                    "collection": "ALL"
                                                }
                                            }]
                                        }, {
                                            "entity_filter_expression_list": []
                                        }]
                                    }
                                },
                                "description": ""
                            },
                            "metadata": {
                                "kind": "access_control_policy"
                            },
                            "operation": "ADD"
                        };

                        var consumerFilter = JSON.parse(gs.getProperty('x_nuta2_nutanix_ca.consumer.entitlement.filter'));
                        tmp.acp.resources.filter_list.context_list[1].entity_filter_expression_list = consumerFilter["2.9"]; //gs.getProperty('x_nuta2_nutanix_ca.calm_version')];

                        tmp.acp.resources.filter_list.context_list[1].entity_filter_expression_list.push(clusterEntitle);



                        tmp.acp.resources.role_reference = {
                            "name": "Consumer",
                            "uuid": gs.getProperty('x_nuta2_nutanix_ca.cosumer.role.uuid') + '',
                            "kind": "role"
                        };

                        tmp.acp.resources.user_group_reference_list = [];

                        var groups = (current.variables.assign_groups + '').split(',');
                        for (var i in groups) {

                            tmp.acp.resources.user_group_reference_list.push({
                                "name": (groupArr[groups[i] + '']) ? groupArr[groups[i] + ''].name + '' : '',
                                "kind": "user_group",
                                "uuid": (groupArr[groups[i] + '']) ? groupArr[groups[i] + ''].uuid + '' : ''
                            });

                            parsed.spec.project_detail.resources.external_user_group_reference_list.push({
                                "name": (groupArr[groups[i] + '']) ? groupArr[groups[i] + ''].name + '' : '',
                                "kind": "user_group",
                                "uuid": (groupArr[groups[i] + '']) ? groupArr[groups[i] + ''].uuid + '' : ''
                            });
                        }
                        parsed.spec.access_control_policy_list.push(tmp);
                    }

                    var requestBody = {
                        "spec": parsed.spec,
                        "api_version": parsed.api_version,
                        "metadata": parsed.metadata
                    }

                    var response = this.appUtil.makeCalmApiCall("PUT", this.appUtil.configuration.api.projectInternal + "/" + projectUUID, JSON.stringify(requestBody));


                    if (response.getStatusCode() == '200' || response.getStatusCode() == '201' || response.getStatusCode() == '202') {
                        this.logger.info("Nutanix_ConfigureSettingScripts._updateGroupOverCalm:- Groups successfuly updated in calm.");
                        //this._updateGroupSnowRole(current);
                    } else {
                        this.logger.error("Nutanix_ConfigureSettingScripts._updateGroupOverCalm :- Error while updating groups onto calm :- " + response.haveError() + " Status code :- " + response.getStatusCode() + " Error :: " + response.getBody());
                    }
                } else {
                    this.logger.error("Nutanix_ConfigureSettingScripts._updateGroupOverCalm :- Connection to /projects_internal not established :- " + response.haveError() + " Status code :- " + response.getStatusCode());
                }
            }

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._updateGroupOverCalm. Error:- " + e);
        }
    },
    ////changes over

    _updateCatalogItem: function(source, target, bpSys_id, current) {

        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._updateCatalogItem.");
            var catItemSysId = current.variables.cat_item + '';

            var lg = new x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge();
            var status = lg.hideAccessLocalGroupOption(); //to check if the given option is for local groups.

            var ans = [];

            var assignCriteria = new GlideRecord(this.appUtil.configuration.table.catalogUserCriteria + '');
            assignCriteria.addQuery('sc_cat_item', catItemSysId);
            assignCriteria.query();

            this.logger.info("Updated user &amp; group entitlement to " + current.variables.assign_users + " :: " + current.variables.assign_groups);

            if (assignCriteria.next()) {
                var uc = new sn_uc.UserCriteria(assignCriteria.user_criteria);
                uc.setUsers(current.variables.assign_users);
                if (status + "" == "false") {
                    uc.setGroups(current.variables.assign_groups);
                } else {
                    uc.setGroups(current.variables.assign_local_groups);
                }
                ans.push(catItemSysId);
                ans.push(criteriaSysId);
            }

            return ans;
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._updateCatalogItem. Error:- " + e);
        }
    },

    updateVariableTable: function(fieldSysId, column_fields, oper) {
        try {
            var new_fieldSysId = '';
			column_fields.sys_scope='3b7631654f452b001200e5201310c76b';
            if (oper == 'insert') {
                var onLoadCatalogClientScript2 = new sn_sc.CatalogItemVariable();
                onLoadCatalogClientScript2.setAttributes(column_fields);
                new_fieldSysId = onLoadCatalogClientScript2.create();
            } else if (oper == 'update') {
                var onLoadCatalogClientScript = new sn_sc.CatalogItemVariable(fieldSysId);
                onLoadCatalogClientScript.update(column_fields, true);
				new_fieldSysId=fieldSysId;
            }
            return new_fieldSysId;
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts.updateVariableTable. Error:- " + e);
        }
    },

    _copyCatalogItem: function(source, target, bpSys_id, current, blueprintType, clientData, nonFilteredClientData) {
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._copyCatalogItem. source " + source + "\n target " + target + "\n bpSys_id " + bpSys_id + " blueprintType " + blueprintType + " clientData " + clientData + " nonFilteredClientData " + nonFilteredClientData + '\n current ' + JSON.stringify(current));

            var sourceGR = new GlideRecord(source);
            sourceGR.addQuery('sys_id', bpSys_id);
            sourceGR.query();

            var ans = [];
            var nicSysIdList = [];

            if (sourceGR.next()) {

                var profileSysID = '';
                var appSysID = '';
                var targetGr = sourceGR;
                var projectSysID = '';
                var environmentSysId = '';

                targetGr.sys_name = current.variables.item_name + '';
                targetGr.name = current.variables.item_name + '';
                targetGr.short_description = current.variables.item_name + '';
                targetGr.description_markdown = current.variables.description + '';
                targetGr.description = this.appUtil.markdown_renderer(current.variables.description + '');
                targetGr.active = true;
                targetGr.blueprint_name = bpSys_id + '';
                targetGr.sys_class_name = target + '';
                if (blueprintType == "published") {

                    var parsedClientData = JSON.parse(clientData);

                    targetGr.cloned_bp_json = nonFilteredClientData;
                    targetGr.cloned_bp_uuid = (parsedClientData.uuid + '') ? parsedClientData.uuid + '' : "";
                    targetGr.cloned_bp_name = (parsedClientData.name + '') ? parsedClientData.name + '' : "";
                }

                var catItemSysId = targetGr.insert();

                var imageBase64Str = gs.getProperty('x_nuta2_nutanix_ca.default.image');

                var gr = new GlideRecord('sys_attachment');
                gr.addQuery('table_sys_id', catItemSysId); //tablesys_id of the record
                gr.query();
                if (gr.next()) {
                    var kk = new GlideSysAttachment();
                    imageBase64Str = kk.getContentBase64(gr);
                }

                var attachGR = new GlideSysAttachment();
                attachGR.writeBase64(targetGr, 'picture', 'image/png', imageBase64Str);

                attachGR = new GlideSysAttachment();
                attachGR.writeBase64(targetGr, 'icon', 'image/png', gs.getProperty('x_nuta2_nutanix_ca.default.icons'));




                this.logger.debug("Created catalog item with sysId " + catItemSysId);
                this.logger.info("Catalog item " + current.variables.item_name + " creating.");

                var fieldGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                fieldGR.addEncodedQuery('cat_item=' + bpSys_id);
                fieldGR.query();

                while (fieldGR.next()) {
                    var oldSysId = fieldGR.sys_id + '';
					var column_fields={};
                    var column_fields = this.getColumnFields(oldSysId);
                    column_fields.cat_item = catItemSysId + '';
                    var fieldSysId = this.updateVariableTable('', column_fields, 'insert');
                    if (fieldGR.type + '' == 5) {
                        var glideRec = new GlideRecord('question_choice');
                        glideRec.addQuery('question', oldSysId + '');
                        glideRec.query();
                        while (glideRec.next()) {
                            glideRec.question = fieldSysId;
                            var x = glideRec.insert();

                        }
                    }
                    // Multiple value insert code
                    if (fieldGR.type + '' == 21) {

                        var grOptions = new GlideRecord("x_nuta2_nutanix_ca_generic_table_for_dropdown");
                        grOptions.addQuery("variable", oldSysId + "");
                        grOptions.query();
                        var grNewOptions = new GlideRecord("x_nuta2_nutanix_ca_generic_table_for_dropdown");
                        while (grOptions.next()) {
                            grNewOptions.initialize();
                            grNewOptions.variable = fieldSysId + "";
                            grNewOptions.name = grOptions.name + "";
                            grNewOptions.value = grOptions.value + "";
                            grNewOptions.insert();
                        }
						var column_fields = {};
                        column_fields.reference_qual = "variable=" + fieldSysId;
                        var fieldSysId = this.updateVariableTable(fieldSysId, column_fields, 'update');
                    }

                    /**Advance variable Select box choices**/
                    if (fieldGR.name + '' == 'default_project')
                        projectSysID = fieldSysId;

                    if (fieldGR.name + '' == 'default_profile')
                        profileSysID = fieldSysId;

                    if (fieldGR.name + '' == 'default_app_name')
                        appSysID = fieldSysId;

                    if (parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2")) {
                        if (fieldGR.name + '' == 'default_environment')
                            environmentSysId = fieldSysId;
                    }


                    if ((fieldGR.name + '').indexOf('_nic_') != -1) {
                        nicSysIdList.push(fieldSysId + '');
                    }
                }


                /*var insVar = new GlideRecord(this.appUtil.configuration.table.varaiblesTable+''); //Inserts variable to check sync or delete
                insVar.addQuery('cat_item', catItemSysId);
                insVar.query();
                if(insVar.next()) {
                	insVar.initialize();
                	insVar.type = 6;
                	insVar.cat_item = catItemSysId+'';
                	insVar.active = true;
                	insVar.question_text = 'sync_flag';
                	insVar.name = 'sync_flag';
                	insVar.mandatory = 'false';
                	insVar.order = 0;
                	insVar.insert();
                }*/

                //Hide containers on order page
                var hideGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                hideGR.addQuery('cat_item', catItemSysId);
                hideGR.addQuery('active', true);
                hideGR.orderBy('order');
                var previousGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                previousGR.addQuery('cat_item', catItemSysId);
                previousGR.addQuery('active', true);
                previousGR.orderBy('order');
                hideGR.query();
                previousGR.query();
                while (hideGR.next()) {
                    if (hideGR.type == 20 &amp;&amp; previousGR.type == 19) {
                        var column_fields = {
                            "active": "false"
                        };
                        var fieldSysId = this.updateVariableTable(previousGR.sys_id, column_fields, 'update');
                        var fieldSysId = this.updateVariableTable(hideGR.sys_id, column_fields, 'update');
                    }
                    previousGR.next();
                }


                var lg = new x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge();
                var status = lg.hideAccessLocalGroupOption(); //to check if the given option is for local groups.
                // 				var user_criteria = new GlideRecord(this.appUtil.configuration.table.userCriteria+'');
                // 				user_criteria.initialize();
                // 				user_criteria.name = "Nutanix_"+current.variables.item_name+"_Entitlement";
                // 				user_criteria.user = current.variables.assign_users;
                // 				if(status+"" == "false")
                // 					{
                // 						user_criteria.group = current.variables.assign_groups;
                // 					}
                // 				else
                // 					{
                // 						user_criteria.group = current.variables.assign_local_groups;
                // 					}				
                // 				user_criteria.role = gs.getProperty('x_nuta2_nutanix_ca.admin.role.sysId');
                // 				user_criteria.active = true;
                // 				user_criteria.advanced = true;
                // 				user_criteria.match_all = false;
                // 				user_criteria.script = "answer = false;";
                // 				var criteriaSysId = user_criteria.insert(); 
                // 				gs.info('user_criteria.group '+user_criteria.group);


                var user_criteria = new sn_uc.UserCriteria();
                user_criteria.setName("Nutanix_" + current.variables.item_name + "_Entitlement");
                user_criteria.setUsers(current.variables.assign_users);
                var group = '';
                if (status + "" == "false") {
                    group = current.variables.assign_groups;
                } else {
                    group = current.variables.assign_local_groups;
                }
                user_criteria.setGroups(group);
                user_criteria.setRoles(gs.getProperty('x_nuta2_nutanix_ca.admin.role.sysId'));
                user_criteria.setActive(true);
                user_criteria.setAdvanced(true);
                user_criteria.setMatchAll(false);
                user_criteria.setScript("answer = false;");
                var criteriaSysId = user_criteria.create();



                /*				var assignCriteria = new GlideRecord(this.appUtil.configuration.table.catalogUserCriteria+'');
                				assignCriteria.initialize();
                				assignCriteria.sc_cat_item = catItemSysId+'';
                				assignCriteria.user_criteria = criteriaSysId+'';
                				assignCriteria.insert();*/

                var assignCriteria = new sn_sc.CatItem(catItemSysId);
                assignCriteria.availableForUserCriteria("add", [criteriaSysId]);

                ans.push(catItemSysId);
                ans.push(criteriaSysId);

                /*var onLoadclientScript = new GlideRecord(this.appUtil.configuration.table.catalogClientScript+'');
                onLoadclientScript.initialize();
                onLoadclientScript.name = "Get sync status on load";
                onLoadclientScript.type = "onLoad";
                onLoadclientScript.applies_to = "item";
                onLoadclientScript.cat_item = catItemSysId;
                onLoadclientScript.active = true;
                onLoadclientScript.order=100;
                //onLoadclientScript.sys_policy=this.protected_var;

                onLoadclientScript.description = 'This script is auto created thorugh runtime module for saving sync status.';

                onLoadclientScript.applies_catalog = true;
                onLoadclientScript.ui_type = "0";
                onLoadclientScript.applies_req_item = false;
                onLoadclientScript.applies_sc_task = false;
                onLoadclientScript.script = "function onLoad() { g_form.setValue('sync_flag', ''); var a=new GlideAjax('Nutanix_ClientServerScriptBridge');a.addParam('sysparm_name','checkQueue');a.getXML(responseParse);} function responseParse(response) {var b=response.responseXML.documentElement.getAttribute('answer');g_form.setValue('sync_flag', b);}";
                onLoadclientScript.insert();

                this.logger.debug("Created onLoad get sync value script on catalog item "+current.variables.item_name);

                var onSubmitclientScript = new GlideRecord(this.appUtil.configuration.table.catalogClientScript+'');
                onSubmitclientScript.initialize();
                onSubmitclientScript.name = "Prevent form submit";
                onSubmitclientScript.type = "onSubmit";
                onSubmitclientScript.applies_to = "item";
                onSubmitclientScript.cat_item = catItemSysId;
                onSubmitclientScript.active = true;
                onSubmitclientScript.order=100;
                //onLoadclientScript.sys_policy=this.protected_var;

                onSubmitclientScript.description = 'This script is auto created thorugh runtime module for preventing submission of form during a sync or delete.';

                onSubmitclientScript.applies_catalog = true;
                onSubmitclientScript.ui_type = "0";
                onSubmitclientScript.applies_req_item = false;
                onSubmitclientScript.applies_sc_task = false;
                onSubmitclientScript.script = "function onSubmit() { var sync_stat = g_form.getValue('sync_flag'); if(sync_stat == 'true'){return true;}else{return false;} }";
                onSubmitclientScript.insert();

                this.logger.debug("Created onSubmit validation script on catalog item "+current.variables.item_name);*/


                if (current.variables.type_of_blueprint == 'runbook' || current.variables.type_of_blueprint == 'published_runbook') {
                    var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                    onLoadCatalogClientScript.setAttributes({
                        "name": "Get Project and Endpoint List onLoad",
                        "type": "onLoad",
                        "applies_to": "item",
                        "cat_item": '' + catItemSysId,
                        "active": "true",
                        "order": "100",
                        "description": "This script is auto created thorugh runtime module for getting projects and profile list.",
                        "applies_catalog": "true",
                        "ui_type": "10",
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });

                    onLoadCatalogClientScript.appliesToCatalogItem(true);
                    var onLoadScript = "function onLoad() { var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchMultipleProjectAndEndpointList\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponseMultipleProjectAndEndpointList); function parseResponseMultipleProjectAndEndpointList(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); var projectList = parsed.projectList; g_form.clearOptions(\'default_project\'); for (var i = 0; i &lt; projectList.length; i++) { var project = projectList[i]; g_form.addOption(\'default_project\', project.uuid, project.name); } if (projectList.length == 1) { g_form.setReadOnly(\'default_project\', true); } var endpointList = parsed.endpointList; } var ga1 = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga1.addParam(\'sysparm_name\', \'advanceVariableDynamicOptions\'); ga1.addParam(\'sysparm_catSysID\', cat_sys_id); ga1.getXML(parseResponseAdvanceVariable); function parseResponseAdvanceVariable(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parse = JSON.parse(answer); var keys = Object.keys(parse[0]); var fieldRegex = parse[1]; parse = parse[0]; sessionStorage[\'FieldRegex_\' + g_form.getUniqueValue()] = JSON.stringify(fieldRegex); for (var i = 0; i &lt; keys.length; i++) { var row = parse[keys[i] + \'\']; if (row.options.state == \'SUCCESS\') { g_form.clearOptions(keys[i] + \'\'); for (var k = 0; k &lt; (row.options.values).length; k++) { g_form.addOption(keys[i] + \'\', row.options.values[k], row.options.values[k]); } } else { g_form.addErrorMessage(\'Error in variable: \' + keys[i] + \': \' + row.options.values[0]); } } } var ga2 = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga2.addParam(\'sysparm_name\', \'fetchOrderFormData\'); ga2.addParam(\'sysparm_profile\', \'runbook\'); ga2.addParam(\'sysparm_catSysID\', cat_sys_id); ga2.getXML(parseResponseOrderFormData); function parseResponseOrderFormData(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var nameTypeMap = {}; var flds = g_form.nameMap; for (var i in flds) { nameTypeMap[flds[i].prettyName + \'\'] = fldType[flds[i].realName + \'\'] + \'\'; } var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf(\'cluster_name\') == -1) { if (nameTypeMap[i + \'\'] + \'\' == \'masked\') { fielVal[i] = parsed[i].value; g_form.setValue(i + \'\', \'\'); } else { g_form.setValue(i + \'\', parsed[i].value + \'\'); } g_form.setReadOnly(i + \'\', parsed[i].readOnly + \'\'); g_form.setDisplay(i + \'\', !parsed[i].readOnly); } else { g_form.setDisplay(i + \'\', !parsed[i].readOnly); g_form.setReadOnly(i + \'\', true); } } sessionStorage[\'fieldValues_\' + g_form.getUniqueValue()] = JSON.stringify(fielVal); } }";
                    onLoadCatalogClientScript.addScript(onLoadScript);
                    var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
					var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onLoadCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
						grChange.setValue("sys_policy", this.protected_var);
                        grChange.update();

                    }

                }


                var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Check Catalog Item Validity",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "active": false,
                    "order": 1,
                    "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
                    "applies_catalog": true,
                    "ui_type": '10',
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = "function onLoad() { var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+''; var projectUUID = getParameterValue('projectUUID') + ''; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; } if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName); } 				 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true'; 				 }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   } }";
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
				var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onLoadCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
						grChange.setValue("sys_policy", this.protected_var);
                        grChange.update();

                    }

                if (current.variables.type_of_blueprint == 'unpublished' || current.variables.type_of_blueprint == 'published') {
                    var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                    onLoadCatalogClientScript.setAttributes({
                        "name": "Get Project and Profile List onLoad",
                        "type": "onLoad",
                        "applies_to": "item",
                        "cat_item": '' + catItemSysId,
                        "active": "true",
                        "order": "100",
                        "description": "This script is auto created thorugh runtime module for getting projects and profile list.",
                        "applies_catalog": "true",
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onLoadCatalogClientScript.appliesToCatalogItem(true);
                    var onLoadScript = "";
                    if (parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2")) {
                        onLoadScript = "function onLoad() { try { var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; } var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchProjectAndProfileList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer); var projectList = parsed.projectList; g_form.clearOptions('default_project'); for (var i = 0; i &lt; projectList.length; i++) { var project = projectList[i]; g_form.addOption('default_project', project.uuid, project.name); } if (portal_check == 'true') { project = projectList[0]; g_form.setValue('default_project', project.uuid); } if (projectList.length == 1) { g_form.setReadOnly('default_project', true); } if (portal_check == 'false') new GlideModal().get('loader').destroy(); } } catch (e) { console.log('Exception in Get project and profile list onload ' + e.message); }}";
                    } else {
                        onLoadScript = "function onLoad() { var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if(portal_check =='false') { var loadingHTML = \"&lt;div class='loading-container'&gt;&lt;div class='loading-indicator icon-loading icon-lg'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching Project And Profile'); loadingDialog.renderWithContent('' + loadingHTML); } var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchProjectAndProfileList'); ga.addParam('sysparm_catSysID', cat_sys_id); if(portal_check == 'false') ga.getXML(parseResponse, null, loadingDialog); else ga.getXML(parseResponse); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer); var projectList = parsed.projectList; g_form.clearOptions('default_project'); for (var i = 0; i &lt; projectList.length; i++) { var project = projectList[i]; g_form.addOption('default_project', project.uuid, project.name); } var profileList = parsed.profileList.split(','); g_form.clearOptions('default_profile'); for (i = 0; i &lt; profileList.length; i++) { g_form.addOption('default_profile', profileList[i] + '', profileList[i] + ''); } g_form.setValue('default_profile', profileList[0]); if (projectList.length == 1) { g_form.setReadOnly('default_project', true); } if (profileList.length == 1) { g_form.setReadOnly('default_profile', true); } new GlideModal().get('loader').destroy(); var loadingHTML = \"&lt;div class='loading-container'&gt;&lt;div class='loading-indicator icon-loading icon-lg'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching variables...'); loadingDialog.renderWithContent('' + loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue('default_profile').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchLaunchVars'); ga.addParam('sysparm_catsysid', cat_sys_id); ga.addParam('sysparm_profile', profile); ga.getXML(varResponse, null, loadingDialog); } function parseResponseForPortal(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer); var projectList = parsed.projectList; g_form.clearOptions('default_project'); for (var i = 0; i &lt; projectList.length; i++) { var project = projectList[i]; g_form.addOption('default_project', project.uuid, project.name); } var profileList = parsed.profileList.split(','); g_form.clearOptions('default_profile'); for (i = 0; i &lt; profileList.length; i++) { g_form.addOption('default_profile', profileList[i] + '', profileList[i] + ''); } g_form.setValue('default_profile', profileList[0]); if (projectList.length == 1) { g_form.setReadOnly('default_project', true); } if (profileList.length == 1) { g_form.setReadOnly('default_profile', true); } var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue('default_profile').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchLaunchVars'); ga.addParam('sysparm_catsysid', cat_sys_id); ga.addParam('sysparm_profile', profile); ga.getXML(varResponseForPortal); } function varResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue('IO:' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + ''; sess_json['IO:' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue('IO:' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + ''; sess_json['IO:' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage['varValues'] = JSON.stringify(sess_json); } function varResponseForPortal(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue('IO:' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + ''; sess_json['IO:' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue('IO:' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + ''; sess_json['IO:' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage['varValues'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); gajax.addParam('sysparm_name', 'variableArrayParser'); gajax.addParam('sysparm_type', 'catalog'); gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + ''); gajax.addParam('sysparm_varJson', act_var_JSON); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = 'IO:' + row.sys_id; var type = row.type + ''; if (row.state == 'SUCCESS') { if (type == 'LOCAL') g_form.setValue(sys_id, row.value); if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; (row.value).length; k++) { g_form.addOption(sys_id + '', row.value[k], row.value[k]); } } } if (row.state == 'ERROR') { g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]); } } } } }";
                    }
                    onLoadCatalogClientScript.addScript(onLoadScript);
                    var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
					var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onLoadCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
						grChange.setValue("sys_policy", this.protected_var);
                        grChange.update();

                    }
                    
                    //			this.logger.debug("Created onLoad script to get project and profile list on catalog item "+current.variables.item_name);
                }


                var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Get Credentials OnLoad",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "active": true,
                    "order": 900,
                    "description": "This script is auto created thorugh runtime module for getting Credentials list.",
                    "applies_catalog": true,
                    "ui_type": '10',
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = "function onLoad() { try { var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXML(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == 'false') { var loadingHTML = \"&lt;div class='loading-container'&gt;&lt;div class='loading-indicator icon-loading icon-lg'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching Credentials List...'); loadingDialog.renderWithContent('' + loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchCredentialsList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var credArr = {}; var parsed = JSON.parse(answer); for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + '').toLowerCase().replace(/ /g, '_'); g_form.setValue(name + '_credential_name', credential.name + ''); g_form.setReadOnly(name + '_credential_name', true); g_form.setValue(name + '_secret_type', credential.type + '', (credential.type + '' == 'KEY') ? 'SSH Private Key' : 'Password'); g_form.setReadOnly(name + '_secret_type', true); g_form.setValue(name + '_username', credential.username.value); g_form.setReadOnly(name + '_username', credential.username.readOnly); g_form.setDisplay(name + '_username', !credential.username.readOnly); if ((credential.type == 'KEY')) { g_form.setValue(name + '_ssh_private_key', credential.ssh_private_key.value); g_form.setReadOnly(name + '_ssh_private_key', credential.ssh_private_key.readOnly); g_form.setValue(name + '_passphrase', credential.passphrase.value); g_form.setReadOnly(name + '_passphrase', credential.passphrase.readOnly); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_ssh_private_key', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + '_passphrase', !credential.passphrase.readOnly); } else { g_form.setValue(name + '_password', ''); credArr[name + '_password'] = credential.password.value; g_form.setReadOnly(name + '_password', credential.password.readOnly); g_form.setDisplay(name + '_password', !credential.password.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); } g_form.setDisplay(name + '_credential_reference', 'false'); if (credential.credential_reference &amp;&amp; credential.credential_reference.name) { g_form.setDisplay(name + '_credential_reference', 'true'); g_form.addOption(name + '_credential_reference', credential.credential_reference.uuid + '', credential.credential_reference.name + ''); g_form.setReadOnly(name + '_credential_reference', credential.credential_reference.readOnly); g_form.setDisplay(name + '_credential_reference', !credential.credential_reference.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_secret_type', 'false'); } } sessionStorage['credentials_' + g_form.getUniqueValue()] = JSON.stringify(credArr); new GlideModal().get('loader').destroy(); } } else { var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchCredentialsList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var credArr = {}; var parsed = JSON.parse(answer); for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + '').toLowerCase().replace(/ /g, '_'); g_form.setValue(name + '_credential_name', credential.name + ''); g_form.setReadOnly(name + '_credential_name', true); g_form.setValue(name + '_secret_type', credential.type + '', (credential.type + '' == 'KEY') ? 'SSH Private Key' : 'Password'); g_form.setReadOnly(name + '_secret_type', true); g_form.setValue(name + '_username', credential.username.value); g_form.setReadOnly(name + '_username', credential.username.readOnly); g_form.setDisplay(name + '_username', !credential.username.readOnly); if ((credential.type == 'KEY')) { g_form.setValue(name + '_ssh_private_key', credential.ssh_private_key.value); g_form.setReadOnly(name + '_ssh_private_key', credential.ssh_private_key.readOnly); g_form.setValue(name + '_passphrase', credential.passphrase.value); g_form.setReadOnly(name + '_passphrase', credential.passphrase.readOnly); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_ssh_private_key', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + '_passphrase', !credential.passphrase.readOnly); } else { g_form.setValue(name + '_password', ''); credArr[name + '_password'] = credential.password.value; g_form.setReadOnly(name + '_password', credential.password.readOnly); g_form.setDisplay(name + '_password', !credential.password.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); } g_form.setDisplay(name + '_credential_reference', 'false'); if (credential.credential_reference &amp;&amp; credential.credential_reference.name) { g_form.setDisplay(name + '_credential_reference', 'true'); g_form.addOption(name + '_credential_reference', credential.credential_reference.uuid + '', credential.credential_reference.name + ''); g_form.setReadOnly(name + '_credential_reference', credential.credential_reference.readOnly); g_form.setDisplay(name + '_credential_reference', !credential.credential_reference.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_secret_type', 'false'); } } sessionStorage['credentials_' + g_form.getUniqueValue()] = JSON.stringify(credArr); } } } } catch(e) { console.log('Exception Inside Get Credentials OnLoad '+e.message); } }";
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
				var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onLoadCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
						grChange.setValue("sys_policy", this.protected_var);
                        grChange.update();

                    }
                //			this.logger.debug("Created onLoad script to get credentials data on catalog item "+current.variables.item_name);	

                /* Fetching Dynamic values for advance variable*/



                var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Fetch dynamic value for advance variables onload",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "active": true,
                    "order": 10,
                    "description": "This script is created for fetching dynamic values for advance variables onload.",
                    "applies_catalog": true,
                    "ui_type": '10',
                    "applies_req_item": false,
                    "applies_sc_task": false
				});
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = "function onLoad() { var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXML(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == 'false') { var loadingHTML = \"&lt;div class='loading-container'&gt;&lt;div class='loading-indicator icon-loading icon-lg'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching Dynamic values for advance variables...'); loadingDialog.renderWithContent('' + loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var elemen = g_form.nameMap; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'advanceVariableDynamicOptions'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parse = JSON.parse(answer); var keys = Object.keys(parse[0]); var fieldRegex = parse[1]; parse = parse[0]; sessionStorage['FieldRegex_' + g_form.getUniqueValue()] = JSON.stringify(fieldRegex); for (var i = 0; i &lt; keys.length; i++) { var row = parse[keys[i] + '']; if (row.options.state == 'SUCCESS') { g_form.clearOptions(keys[i] + ''); for (var k = 0; k &lt; (row.options.values).length; k++) { g_form.addOption(keys[i] + '', row.options.values[k], row.options.values[k]); } } else { g_form.addErrorMessage('Error in variable: ' + keys[i] + ': ' + row.options.values[0]); } } new GlideModal().get('loader').destroy(); } } else { var cat_sys_id = g_form.getUniqueValue(); var elemen = g_form.nameMap; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'advanceVariableDynamicOptions'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parse = JSON.parse(answer); var keys = Object.keys(parse[0]); var fieldRegex = parse[1]; parse = parse[0]; sessionStorage['FieldRegex_' + g_form.getUniqueValue()] = JSON.stringify(fieldRegex); for (var i = 0; i &lt; keys.length; i++) { var row = parse[keys[i] + '']; if (row.options.state == 'SUCCESS') { g_form.clearOptions(keys[i] + ''); for (var k = 0; k &lt; (row.options.values).length; k++) { g_form.addOption(keys[i] + '', row.options.values[k], row.options.values[k]); } } else { g_form.showFieldMsg(keys[i], 'Error in variable: ' + keys[i] + ': ' + row.options.values[0], 'error'); } } } } } }";
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
				var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onLoadCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
						grChange.setValue("sys_policy", this.protected_var);
                        grChange.update();

                    }

                /* Fetching Dynamic values for advance variable*/


                if (current.variables.type_of_blueprint == 'unpublished' || current.variables.type_of_blueprint == 'published') {

                    var catalogScriptGR = new sn_sc.CatalogClientScript();
                    catalogScriptGR.setAttributes({
                        "name": "Fetch form data on change of profile",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": "" + catItemSysId,
                        "cat_variable": "IO:" + profileSysID,
                        "active": true,
                        "order": 100,
                        "description": 'This script is auto created thorugh runtime module for fetching and setting form data and visibility.',
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    catalogScriptGR.appliesToCatalogItem(true);
                    var script = '';
                    if (parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2")) {
                        script = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } try { var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { if (newValue == \'\') return; var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + \'\'] + \'\' == \'formatter\' || fldType[flds[i].realName + \'\'] + \'\' == \'container\' || fldType[flds[i].realName + \'\'] + \'\' == \'checkbox_container\' || fldType[flds[i].realName + \'\'] + \'\' == \'undefined\') { continue; } if (flds[i].prettyName != \'default_app_name\') { g_form.setMandatory(flds[i].prettyName, false); } g_form.setDisplay(flds[i].prettyName, false); } g_form.setVariablesReadOnly(true); g_form.setDisplay(\'provider_icons\', false); g_form.setReadOnly(\'default_project\', false); g_form.setReadOnly(\'default_app_name\', false); g_form.setReadOnly(\'default_profile\', false); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_app_name\', true); g_form.setDisplay(\'default_profile\', true); g_form.setMandatory(\'default_profile\', true); g_form.setDisplay(\'default_environment\', true); g_form.setReadOnly(\'default_environment\', false); var profile = newValue; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchOrderFormData\'); ga.addParam(\'sysparm_profile\', profile); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var nameTypeMap = {}; var flds = g_form.nameMap; for (var i in flds) { nameTypeMap[flds[i].prettyName + \'\'] = fldType[flds[i].realName + \'\'] + \'\'; } var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf(\'cluster_name\') == -1) { if (nameTypeMap[i + \'\'] + \'\' == \'masked\') { fielVal[i] = parsed[i].value; g_form.setValue(i + \'\', \'\'); } else { g_form.setValue(i + \'\', parsed[i].value + \'\'); } g_form.setReadOnly(i + \'\', parsed[i].readOnly + \'\'); g_form.setDisplay(i + \'\', !parsed[i].readOnly); if (parsed[i].mandatory) { g_form.setMandatory(i + \'\', parsed[i].mandatory); } } else { g_form.setValue(i + \'\', parsed[i].value + \'\'); g_form.setDisplay(i + \'\', !parsed[i].readOnly); g_form.setReadOnly(i + \'\', true); if (parsed[i].mandatory) { g_form.setMandatory(i + \'\', parsed[i].mandatory); } } } sessionStorage[\'fieldValues_\' + g_form.getUniqueValue()] = JSON.stringify(fielVal); new GlideModal().get(\'loader\').destroy(); var cat_sys_id = g_form.getUniqueValue(); var envUUID = (g_form.getValue(\'default_environment\') + \'\').trim(); var projectUUID = (g_form.getValue(\'default_project\') + \'\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchCredentialsList\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.addParam(\'sysparm_project\', projectUUID); ga.addParam(\'sysparm_env\', envUUID); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var credArr = {}; var parsed = JSON.parse(answer); for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + \'\').toLowerCase().replace(\/ \/g, \'_\'); g_form.setValue(name + \'_credential_name\', credential.name + \'\'); g_form.setReadOnly(name + \'_credential_name\', true); g_form.setValue(name + \'_secret_type\', credential.type + \'\', (credential.type + \'\' == \'KEY\') ? \'SSH Private Key\' : \'Password\'); g_form.setReadOnly(name + \'_secret_type\', true); g_form.setValue(name + \'_username\', credential.username.value); g_form.setReadOnly(name + \'_username\', credential.username.readOnly); g_form.setDisplay(name + \'_username\', !credential.username.readOnly); if ((credential.type == \'KEY\')) { g_form.setValue(name + \'_ssh_private_key\', credential.ssh_private_key.value); g_form.setReadOnly(name + \'_ssh_private_key\', credential.ssh_private_key.readOnly); g_form.setValue(name + \'_passphrase\', credential.passphrase.value); g_form.setReadOnly(name + \'_passphrase\', credential.passphrase.readOnly); g_form.setDisplay(name + \'_password\', \'false\'); g_form.setDisplay(name + \'_ssh_private_key\', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + \'_passphrase\', !credential.passphrase.readOnly); } else { g_form.setValue(name + \'_password\', \'\'); credArr[name + \'_password\'] = credential.password.value; g_form.setReadOnly(name + \'_password\', credential.password.readOnly); g_form.setDisplay(name + \'_password\', !credential.password.readOnly); g_form.setDisplay(name + \'_ssh_private_key\', \'false\'); g_form.setDisplay(name + \'_passphrase\', \'false\'); } g_form.setDisplay(name + \'_credential_reference\', \'false\'); if (credential.credential_reference &amp;&amp; credential.credential_reference[0].name) { g_form.setDisplay(name + \'_credential_reference\', \'true\'); for (var i = 0; i &lt; credential.credential_reference.length; i++) { g_form.addOption(name + \'_credential_reference\', credential.credential_reference[i].uuid + \'\', credential.credential_reference[i].name + \'\'); } if (credential.credential_reference.length &lt;= 1) { g_form.setReadOnly(name + \'_credential_reference\', \'true\'); } else g_form.setReadOnly(name + \'_credential_reference\', \'false\'); g_form.setDisplay(name + \'_credential_reference\', credential.credential_reference[0].readOnly); g_form.setDisplay(name + \'_ssh_private_key\', \'false\'); g_form.setDisplay(name + \'_passphrase\', \'false\'); g_form.setDisplay(name + \'_password\', \'false\'); g_form.setDisplay(name + \'_secret_type\', \'false\'); } } sessionStorage[\'credentials_\' + g_form.getUniqueValue()] = JSON.stringify(credArr); new GlideModal().get(\'loader\').destroy(); } } } else { var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'getFieldDetails\'); ga.addParam(\'cat_item_sys_id\', g_form.getUniqueValue()); ga.addParam(\'fieldNameArray\', g_form.getFieldNames()); ga.getXML(parseFieldResponse); function parseFieldResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var object1 = JSON.parse(answer); for (var i in object1) { if (object1[i].var_type == \'formatter\' || object1[i].var_type == \'container\' || object1[i].var_type == \'checkbox_container\' || object1[i].var_type == \'undefined\' || object1[i].var_type == \'Container Start\') { continue; } if (object1[i].var_name != \'default_app_name\') { g_form.setMandatory(object1[i].var_name + \'\', false); } if (object1[i].var_name != \'default_environment\' &amp;&amp; object1[i].var_name != \'default_project\' &amp;&amp; object1[i].var_name != \'default_profile\') { g_form.setDisplay(object1[i].var_name + \'\', false); } } } g_form.setDisplay(\'provider_icons\', \'true\'); g_form.setReadOnly(\'default_project\', false); g_form.setReadOnly(\'default_app_name\', false); g_form.setReadOnly(\'default_profile\', false); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_app_name\', true); g_form.setDisplay(\'default_profile\', true); g_form.setDisplay(\'default_environment\', true); var profile = newValue; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchOrderFormData\'); ga.addParam(\'sysparm_profile\', profile); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponse, null); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchOrderFormData\'); ga.addParam(\'sysparm_profile\', profile); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponse1, null); function parseResponse1(response) { var answer1 = response.responseXML.documentElement.getAttribute(\'answer\'); var object1 = JSON.parse(answer1); for (var i in object1) { var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf(\'cluster_name\') == -1) { if (object1[i].var_type + \'\' == \'masked\') { fielVal[i] = parsed[i].value; g_form.setValue(i + \'\', \'\'); } else { g_form.setValue(i + \'\', parsed[i].value + \'\'); } g_form.setReadOnly(i + \'\', parsed[i].readOnly + \'\'); g_form.setDisplay(i + \'\', !parsed[i].readOnly); if (parsed[i].mandatory) { g_form.setMandatory(i + \'\', parsed[i].mandatory); } } else { g_form.setValue(i + \'\', parsed[i].value + \'\'); g_form.setDisplay(i + \'\', !parsed[i].readOnly); g_form.setReadOnly(i + \'\', true); if (parsed[i].mandatory) { g_form.setMandatory(i + \'\', parsed[i].mandatory); } } } sessionStorage[\'fieldValues_\' + g_form.getUniqueValue()] = JSON.stringify(fielVal); } } } } } } catch (e) { console.log(\'Inside onchange profile: \' + e.message); } }";
                    } else {
                        script = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } var loadingHTML = \"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var loadingDialogbox = new GlideModal(\'loader\', true); loadingDialogbox.setTitle(\'Fetching Order Form Data...\'); loadingDialogbox.renderWithContent(\'\' + loadingHTML); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + \'\'] + \'\' == \'formatter\' || fldType[flds[i].realName + \'\'] + \'\' == \'container\' || fldType[flds[i].realName + \'\'] + \'\' == \'checkbox_container\' || fldType[flds[i].realName + \'\'] + \'\' == \'undefined\') { continue; } if (flds[i].prettyName != \'default_app_name\') { g_form.setMandatory(flds[i].prettyName, false); } g_form.setDisplay(flds[i].prettyName, false); } g_form.setVariablesReadOnly(true); g_form.setDisplay(\'provider_icons\', \'false\'); g_form.setReadOnly(\'default_project\', false); g_form.setReadOnly(\'default_app_name\', false); g_form.setReadOnly(\'default_profile\', false); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_app_name\', true); g_form.setDisplay(\'default_profile\', true); var profile = newValue; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchOrderFormData\'); ga.addParam(\'sysparm_profile\', profile); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponse, null, loadingDialogbox); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var nameTypeMap = {}; var flds = g_form.nameMap; for (var i in flds) { nameTypeMap[flds[i].prettyName + \'\'] = fldType[flds[i].realName + \'\'] + \'\'; } var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf(\'cluster_name\') == -1) { if (nameTypeMap[i + \'\'] + \'\' == \'masked\') { fielVal[i] = parsed[i].value; g_form.setValue(i + \'\', \'\'); } else { g_form.setValue(i + \'\', parsed[i].value + \'\'); } g_form.setReadOnly(i + \'\', parsed[i].readOnly + \'\'); g_form.setDisplay(i + \'\', !parsed[i].readOnly); if (parsed[i].mandatory) { g_form.setMandatory(i + \'\', parsed[i].mandatory); } } else { g_form.setDisplay(i + \'\', !parsed[i].readOnly); g_form.setReadOnly(i + \'\', true); if (parsed[i].mandatory) { g_form.setMandatory(i + \'\', parsed[i].mandatory); } } } sessionStorage[\'fieldValues_\' + g_form.getUniqueValue()] = JSON.stringify(fielVal); new GlideModal().get(\'loader\').destroy(); var loadingHTML = \"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var loadingDialog = new GlideModal(\'loader\', true); loadingDialog.setTitle(\'Fetching Credentials List...\'); loadingDialog.renderWithContent(\'\' + loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchCredentialsList\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var credArr = {}; var parsed = JSON.parse(answer); for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + \'\').toLowerCase().replace(\/ \/g, \'_\'); g_form.setValue(name + \'_credential_name\', credential.name + \'\'); g_form.setReadOnly(name + \'_credential_name\', true); g_form.setValue(name + \'_secret_type\', credential.type + \'\', (credential.type + \'\' == \'KEY\') ? \'SSH Private Key\' : \'Password\'); g_form.setReadOnly(name + \'_secret_type\', true); g_form.setValue(name + \'_username\', credential.username.value); g_form.setReadOnly(name + \'_username\', credential.username.readOnly); g_form.setDisplay(name + \'_username\', !credential.username.readOnly); if ((credential.type == \'KEY\')) { g_form.setValue(name + \'_ssh_private_key\', credential.ssh_private_key.value); g_form.setReadOnly(name + \'_ssh_private_key\', credential.ssh_private_key.readOnly); g_form.setValue(name + \'_passphrase\', credential.passphrase.value); g_form.setReadOnly(name + \'_passphrase\', credential.passphrase.readOnly); g_form.setDisplay(name + \'_password\', \'false\'); g_form.setDisplay(name + \'_ssh_private_key\', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + \'_passphrase\', !credential.passphrase.readOnly); } else { g_form.setValue(name + \'_password\', \'\'); credArr[name + \'_password\'] = credential.password.value; g_form.setReadOnly(name + \'_password\', credential.password.readOnly); g_form.setDisplay(name + \'_password\', !credential.password.readOnly); g_form.setDisplay(name + \'_ssh_private_key\', \'false\'); g_form.setDisplay(name + \'_passphrase\', \'false\'); } g_form.setDisplay(name + \'_credential_reference\', \'false\'); if (credential.credential_reference &amp;&amp; credential.credential_reference.name) { g_form.setDisplay(name + \'_credential_reference\', \'true\'); g_form.addOption(name + \'_credential_reference\', credential.credential_reference.uuid + \'\', credential.credential_reference.name + \'\'); g_form.setReadOnly(name + \'_credential_reference\', credential.credential_reference.readOnly); g_form.setDisplay(name + \'_credential_reference\', !credential.credential_reference.readOnly); g_form.setDisplay(name + \'_ssh_private_key\', \'false\'); g_form.setDisplay(name + \'_passphrase\', \'false\'); g_form.setDisplay(name + \'_password\', \'false\'); g_form.setDisplay(name + \'_secret_type\', \'false\'); } } sessionStorage[\'credentials_\' + g_form.getUniqueValue()] = JSON.stringify(credArr); new GlideModal().get(\'loader\').destroy(); } } }";
                    }
                    catalogScriptGR.addScript(script);
                    var ScriptId = catalogScriptGR.create();
					var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(ScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
						grChange.setValue("sys_policy", this.protected_var);
                        grChange.update();

					}
                }


                /*Onload script for subnet*/

                /*		var onLoadclientScript = new GlideRecord(this.appUtil.configuration.table.catalogClientScript+'');
                		onLoadclientScript.initialize();
                		onLoadclientScript.name = "Get Subnet Info";
                		onLoadclientScript.type = "onLoad";
                		onLoadclientScript.applies_to = "item";
                		onLoadclientScript.cat_item = catItemSysId;
                		onLoadclientScript.active = true;
                		onLoadclientScript.order=50;

                		onLoadclientScript.description = 'This script is created for getting subnet list.';

                		onLoadclientScript.applies_catalog = true;
                		onLoadclientScript.ui_type = "0";
                		onLoadclientScript.applies_req_item = false;
                		onLoadclientScript.applies_sc_task = false;
                		onLoadclientScript.script = "function onLoad() { var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getSubnet');ga.addParam('sysparm_catSysID', catalogSysId);ga.getXML(processAnswer);function processAnswer(response) {var ans = response.responseXML.documentElement.getAttribute('answer');sessionStorage['clusterName_' + g_form.getUniqueValue()] = ans;ans = JSON.parse(ans);var catalog_clusterJSON = ans.catalog_data;clusterJSON = ans.cluster_info;var nicList = [];for(var m in clusterJSON){nicList.push(clusterJSON[m].subnet);}for (var k in catalog_clusterJSON) {for (var i in catalog_clusterJSON[k].nics) {if (catalog_clusterJSON[k].value + '') {for (var l in clusterJSON) {var subnetList = clusterJSON[l].subnet;if (l != catalog_clusterJSON[k].value + '')for (var s in subnetList) g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', s);}}else{var opt = g_form.getElement(catalog_clusterJSON[k].nics[i] + '');for (var x=1, n = opt.options.length; x &lt; n; x++) {var present = false;var val = opt.options[x].value+'';for(var s=0; s &lt; nicList.length ;s++){if (nicList[s][val]) {present =true;break;}} if(!present){ g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', opt.options[x].value+''); x--;n--; } }} }}}}";
                		onLoadclientScript.insert();*/


                var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Get Subnet Info",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": "" + catItemSysId,
                    "active": false,
                    "order": 50,
                    "description": "This script is created for getting subnet list.",
                    "applies_catalog": true,
                    "ui_type": '10',
                    "applies_req_item": false,
                    "applies_sc_task": false,
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = "function onLoad() { var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getSubnet');ga.addParam('sysparm_catSysID', catalogSysId);ga.getXML(processAnswer);function processAnswer(response) {var ans = response.responseXML.documentElement.getAttribute('answer');sessionStorage['clusterName_' + g_form.getUniqueValue()] = ans;ans = JSON.parse(ans);var catalog_clusterJSON = ans.catalog_data;clusterJSON = ans.cluster_info;var nicList = [];for(var m in clusterJSON){nicList.push(clusterJSON[m].subnet);}for (var k in catalog_clusterJSON) {for (var i in catalog_clusterJSON[k].nics) {if (catalog_clusterJSON[k].value + '') {for (var l in clusterJSON) {var subnetList = clusterJSON[l].subnet;if (l != catalog_clusterJSON[k].value + '')for (var s in subnetList){ /*g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', s);*/}}}{var opt = g_form.getElement(catalog_clusterJSON[k].nics[i] + '');for (var x=1, n = opt.options.length; x &lt; n; x++) {var present = false;var val = opt.options[x].value+'';for(var s=0; s &lt; nicList.length ;s++){if (nicList[s][val]) {present =true;break;}} if(!present){g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', opt.options[x].value+''); x--;n--; } }} }}}}";
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
				var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onLoadCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
						grChange.setValue("sys_policy", this.protected_var);
                        grChange.update();

                    }

                /*End of Onload script for subnet*/
                /**/


                for (var x = 0; x &lt; nicSysIdList.length; x++) {
                    var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript.setAttributes({
                        "name": "Populate Nic on change of Nic Sys_id : " + x,
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": '' + catItemSysId,
                        "cat_variable": "IO:" + nicSysIdList[x],
                        "active": true,
                        "order": 400,
                        "description": "This script is created for onChange of Nic",
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onChangecatalogClientScript.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == 'false') { var clusterJson = JSON.parse(sessionStorage.getItem('clusterName_' + g_form.getUniqueValue())); var catCluster = clusterJson.catalog_data; var clusterInfo = clusterJson.cluster_info; var clusterVal; for (var i in clusterInfo) { for (var k in clusterInfo[i].subnet) { if (k == newValue) { clusterVal = i + ''; } } } var clustername, relatedNic; for (var i in catCluster) { var nic = catCluster[i].nics; for (var k in nic) { var nicElem = nic[k]; if ('" + nicSysIdList[x] + "' == k) { if (!catCluster[i].value) { g_form.setValue(catCluster[i].name, clusterVal); relatedNic = catCluster[i].nics; addNicOptions(relatedNic); } else { g_form.setValue(catCluster[i].name, clusterVal); relatedNic = catCluster[i].nics; } } } } function addNicOptions(relatedNic) { for (var n in relatedNic) { for (var l in clusterInfo) { if (l != clusterVal &amp;&amp; clusterVal) for (var j in clusterInfo[l].subnet) { g_form.removeOption(relatedNic[n], j); } } } } } else { var clusterJson = JSON.parse(sessionStorage.getItem('clusterName_' + g_form.getUniqueValue())); var catCluster = clusterJson.catalog_data; var clusterInfo = clusterJson.cluster_info; var clusterVal; for (var i in clusterInfo) { for (var k in clusterInfo[i].subnet) { if (k == newValue) { clusterVal = i + ''; } } } var clustername, relatedNic; for (var i in catCluster) { var nic = catCluster[i].nics; for (var k in nic) { var nicElem = nic[k]; if ('" + nicSysIdList[x] + "' == k) { if (!catCluster[i].value) { g_form.setValue(catCluster[i].name, clusterVal); relatedNic = catCluster[i].nics; addNicOptions(relatedNic); } else { g_form.setValue(catCluster[i].name, clusterVal); relatedNic = catCluster[i].nics; } } } } if (typeof clusterVal == \"undefined\") { g_form.showFieldMsg(catCluster[i].name,'This Nic is not associated with the project, Please select another Nic. To Filterout unassociated Nic reload the page.', 'error'); } function addNicOptions(relatedNic){ for (var n in relatedNic) { for (var l in clusterInfo) { if (l != clusterVal &amp;&amp; clusterVal) for (var j in clusterInfo[l].subnet){ g_form.removeOption(relatedNic[n], j); } } } } } } }";
                    onChangecatalogClientScript.addScript(onChangeScript);
                    var onChangeCatalogClientScriptId = onChangecatalogClientScript.create();
					var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onChangeCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
						grChange.setValue("sys_policy", this.protected_var);
                        grChange.update();

                    }
                    

                }

                /**/
                this.logger.debug("Created onChange script to get form data on catalog item " + current.variables.item_name);




                var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript.setAttributes({
                    "name": "Check AppName OnChange",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "cat_variable": "IO:" + appSysID,
                    "active": true,
                    "order": 100,
                    "description": "This script is auto created thorugh runtime module for checking application name.",
                    "applies_catalog": true,
                    "ui_type": '10',
                    "applies_req_item": false,
                    "applies_sc_task": false,

                });
                onChangecatalogClientScript.appliesToCatalogItem(true);
                var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; var name = newValue; if ((newValue.length != ((newValue.trim()).length)) || (!(\/^[\\_\\-\\w ]+$\/.test(name) &amp;&amp; (name.trim().lastIndexOf('-') != (name.trim().length - 1))))) { if(portal_check == 'false') g_form.clearValue('default_app_name'); else g_form.setValue('default_app_name', ''); g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and in between spaces are allowed and cannot end with hyphens(-). Leading and trailing spaces are not allowed.'); } } }";
                onChangecatalogClientScript.addScript(onChangeScript);
                var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
				var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(OnChangeCatalogScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
						grChange.setValue("sys_policy", this.protected_var);
                        grChange.update();

                    }

                this.logger.debug("Created onChange script to check application name on " + current.variables.item_name);



                var onSubmitcatalogScriptGR = new sn_sc.CatalogClientScript();
                onSubmitcatalogScriptGR.setAttributes({
                    "name": "Check AppName OnSubmit",
                    "type": "onSubmit",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "active": 'false',
                    "order": 100,
                    "description": "This script is auto created thorugh runtime module for checking application name on submit.",
                    "applies_catalog": true,
                    "ui_type": '10',
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onSubmitcatalogScriptGR.appliesToCatalogItem(true);
                var onSubmitscript = "function onSubmit() { var result = true; var name = g_form.getValue('default_app_name'); if (!(/^[_-\\w ]+$/.test(name) &amp;&amp; (name.trim().lastIndexOf('-') != (name.trim().length - 1)))) { g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and spaces are allowed and cannot end with hyphens(-).'); result = false; } var errorFieldName = ''; var errorIntFieldName = ''; var parse = JSON.parse(sessionStorage.getItem('FieldRegex_' + g_form.getUniqueValue())); var keys = Object.keys(parse); for (var i = 0; i &lt; keys.length; i++) { var row = parse[keys[i] + '']; var patt = row.regex + ''; var reg = new RegExp(patt); var value = g_form.getValue(keys[i] + ''); var dataType = (row.data_type + '' == 'EXEC_SECRET' || row.data_type + '' == 'HTTP_SECRET' || row.data_type + '' == 'EXEC_LOCAL' || row.data_type + '' == 'HTTP_LOCAL') ? 'Dynamic' : row.data_type + ''; if (row.type + '' == 21) { var splitted = value.split(','); var actualVal = row.listRegex; var count = 0; for (var j = 0, n = splitted.length; j &lt; n; j++) { var listVal = actualVal[splitted[j] + ''];  if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') &amp;&amp; j == n - 1 &amp;&amp; listVal.includes('\n')){ while(listVal.indexOf('\n') != -1){ listVal = listVal.replace('\n','');} if (reg.test(listVal)) { count++;} } if (count == n) row.status = true; } else { if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') &amp;&amp; value.includes('\n')){while(value.indexOf('\n') != -1){value = value.replace('\n','');}} if (reg.test(value)) { row.status = true; } } if (value &amp;&amp; row.status == false) { result = false; g_form.hideFieldMsg(keys[i] + ''); if(dataType == ''){ errorIntFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'This is a Integer field.Please provide a integer value.'); } else{ errorFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'Value does not match specified regex: ' + row.regex); } }} if (result) {   var parse = JSON.parse(sessionStorage.getItem('fieldValues_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 			 parse = JSON.parse(sessionStorage.getItem('credentials_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 		 sessionStorage.removeItem('fieldValues_' + g_form.getUniqueValue()); sessionStorage.removeItem('credentials_' + g_form.getUniqueValue());      sessionStorage.removeItem('clusterName_' + g_form.getUniqueValue()); sessionStorage.removeItem('FieldRegex_' + g_form.getUniqueValue());var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\" ;var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Validating field value with regex..'); loadingDialog.renderWithContent(''+loadingHTML);} else { errorIntFieldName = (errorIntFieldName.endsWith(',')) ? errorIntFieldName.substr(0, errorIntFieldName.length - 1) : errorIntFieldName; errorFieldName = (errorFieldName.endsWith(',')) ? errorFieldName.substr(0, errorFieldName.length - 1) : errorFieldName; if(errorIntFieldName != '' ) g_form.addErrorMessage('Variables are Integer field.Please provide suitable values: ' + errorIntFieldName); if(errorFieldName != '' ) g_form.addErrorMessage('Variables value does not match specified Regex.Please provide suitable values: ' + errorFieldName); new GlideModal().get('loader').destroy(); return false; }var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+'';var profileName = (g_form.getValue('default_profile')+'').trim(); if(profileName == '') return; var projectUUID = (g_form.getValue('default_project')+'').trim(); if(projectUUID == '') return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName);ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; }if(flds[i].label == \"Project\"  &amp;&amp; flds[i].prettyName == \"default_project\")continue;if(flds[i].label == \"Profile\"  &amp;&amp; flds[i].prettyName == \"default_profile\")continue;if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName);  /*	 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true'; 	*/			} }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   }}";
                onSubmitcatalogScriptGR.addScript(onSubmitscript);
                var onSubmitcatalogScriptId = onSubmitcatalogScriptGR.create();
				var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onSubmitcatalogScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
						grChange.setValue("sys_policy", this.protected_var);
                        grChange.update();

					}

                this.logger.debug("Created onSubmit script to check application name on " + current.variables.item_name);



                var onLoadCatalogClientScriptGR = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScriptGR.setAttributes({
                    "name": "Hide Order details on request",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "active": true,
                    "order": 10,
                    "description": "Hide values on request details.",
                    "applies_catalog": "false",
                    "ui_type": '10',
                    "applies_req_item": "true",
                    "applies_sc_task": "false"
                });
                onLoadCatalogClientScriptGR.appliesToCatalogItem(false);
                onLoadCatalogClientScriptGR.appliesToRequestedItem(true);
                var onLoadScriptHide = "function onLoad() { var blueprintType = \"\"; if (g_form.getTableName() + \'\' == \'sc_req_item\') { var item_name = g_form.getValue(\"cat_item\"); var glide = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); glide.addParam(\'sysparm_name\', \'fetchBlueprintType\'); glide.addParam(\'sysparm_item_sys_id\', item_name); glide.getXML(getBlueprintResponse); function getBlueprintResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); blueprintType = answer; var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + \'\'] + \'\' == \'formatter\' || fldType[flds[i].realName + \'\'] + \'\' == \'container\' || fldType[flds[i].realName + \'\'] + \'\' == \'checkbox_container\' || fldType[flds[i].realName + \'\'] + \'\' == \'undefined\') { continue; } g_form.setMandatory(flds[i].prettyName, false); g_form.setDisplay(flds[i].prettyName, false); } g_form.setVariablesReadOnly(true); g_form.setDisplay(\'provider_icons\', \'false\'); g_form.setReadOnly(\'default_project\', true); g_form.setReadOnly(\'default_environment\', true); g_form.setReadOnly(\'default_app_name\', true); g_form.setReadOnly(\'default_profile\', true); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_environment\', true); g_form.setDisplay(\'default_app_name\', true); g_form.setDisplay(\'default_profile\', true); if (blueprintType == \"Runbook\" || blueprintType == \"Marketplace Runbook\") { g_form.setDisplay(\'default_endpoint\', true); } var profile = g_form.getValue(\'default_profile\') + \'\'; var cat_sys_id = g_form.getValue(\'cat_item\') + \'\'; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchOrderFormData\'); ga.addParam(\'sysparm_profile\', profile + \'\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id + \'\'); ga.getXML(parseResponse); } } function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var nameTypeMap = {}; var flds = g_form.nameMap; for (var i in flds) { nameTypeMap[flds[i].prettyName + \'\'] = fldType[flds[i].realName + \'\'] + \'\'; } var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf(\'cluster_name\') == -1) { if (nameTypeMap[i + \'\'] + \'\' == \'masked\') { fielVal[i] = parsed[i].value; g_form.setValue(i + \'\', \'\'); } g_form.setReadOnly(i + \'\', true); g_form.setDisplay(i + \'\', !parsed[i].readOnly); } else { g_form.setDisplay(i + \'\', !parsed[i].readOnly); g_form.setReadOnly(i + \'\', true); } } sessionStorage[\'fieldValues_\' + g_form.getUniqueValue()] = JSON.stringify(fielVal); } }";
                onLoadCatalogClientScriptGR.addScript(onLoadScriptHide);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScriptGR.create();
				var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onLoadCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
						grChange.setValue("sys_policy", this.protected_var);
                        grChange.update();

                    }


                var onChangecatalogClientScript1 = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript1.setAttributes({
                    "name": "Get Subnet Info on project change",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "cat_variable": "IO:" + projectSysID,
                    "active": true,
                    "order": 600,
                    "description": "This script is auto created thorugh runtime module for checking application name on submit.",
                    "applies_catalog": true,
                    "ui_type": '10',
                    "applies_req_item": false,
                    "applies_sc_task": false

                });
                onChangecatalogClientScript1.appliesToCatalogItem(true);
                var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (newValue == \'\') { return; } var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'getSubnet\'); ga.addParam(\'sysparm_catSysID\', catalogSysId); ga.addParam(\'sysparm_ProjectUuid\', newValue); ga.getXML(processAnswer); function processAnswer(response) { var ans = response.responseXML.documentElement.getAttribute(\'answer\'); sessionStorage[\'clusterName_\' + g_form.getUniqueValue()] = ans; ans = JSON.parse(ans); var catalog_clusterJSON = ans.catalog_data; clusterJSON = ans.cluster_info; var nicList = []; for (var m in clusterJSON) { nicList.push(clusterJSON[m].subnet); } for (var k in catalog_clusterJSON) { for (var i in catalog_clusterJSON[k].nics) { if (catalog_clusterJSON[k].value + \'\') { for (var l in clusterJSON) { var subnetList = clusterJSON[l].subnet; if (l != catalog_clusterJSON[k].value + \'\') for (var s in subnetList) { \/*g_form.removeOption(catalog_clusterJSON[k].nics[i] + \'\', s);*\/ } } } { var opt = g_form.getElement(catalog_clusterJSON[k].nics[i] + \'\'); var n=0; if(opt.options) { n = opt.options.length; } for (var x = 1; x &lt; n; x++) { var present = false; var val = opt.options[x].value + \'\'; for (var s = 0; s &lt; nicList.length; s++) { if (nicList[s][val]) { present = true; break; } } if (!present) { g_form.removeOption(catalog_clusterJSON[k].nics[i] + \'\', opt.options[x].value + \'\'); x--; n--; } } } } } } } else { try { var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'getSubnet\'); ga.addParam(\'sysparm_catSysID\', catalogSysId); ga.addParam(\'sysparm_ProjectUuid\', newValue); ga.addParam(\'sysparm_ProjectUuid\', newValue); ga.getXML(processAnswer); function processAnswer(response) { var ans = response.responseXML.documentElement.getAttribute(\'answer\'); sessionStorage[\'clusterName_\' + g_form.getUniqueValue()] = ans; ans = JSON.parse(ans); var catalog_clusterJSON = ans.catalog_data; clusterJSON = ans.cluster_info; var nicList = []; for (var m in clusterJSON) { nicList.push(clusterJSON[m].subnet); } var nic_variable_namme = []; for (var n in catalog_clusterJSON) { var nics = catalog_clusterJSON[n].nics; for (var k in nics) nic_variable_namme.push(nics[k]); } var catNicJson = { \"nic\": nic_variable_namme, \"nicList\": nicList }; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'setSubnet\'); ga.addParam(\'sysparm_catSysID\', catalogSysId); ga.addParam(\'sysparm_catNicJson\', JSON.stringify(catNicJson)); ga.getXML(processAnswer1); function processAnswer1(response) { var ans = response.responseXML.documentElement.getAttribute(\'answer\'); } } } catch (err) {} } } }";
                onChangecatalogClientScript1.addScript(onChangeScript);
				var OnChangeCatalogScriptId = onChangecatalogClientScript1.create();
                var grChange = new GlideRecord('catalog_script_client');
                if (grChange.get(OnChangeCatalogScriptId)) {
                	grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                	grChange.setValue('sys_policy', this.protected_var);
                	grChange.update();
				}

                this.logger.debug("Created onChange script to check application name on " + current.variables.item_name);



                var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Check Catalog Item Validity project",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "cat_variable": "IO:" + projectSysID,
                    "active": true,
                    "order": 1,
                    "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
                    "applies_catalog": true,
                    "ui_type": '10',
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } g_form.setReadOnly(\'default_endpoint\', false); var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { var selectedEndpointList; var allEndpointList; portal_check = response; if (portal_check == \'false\') { var loadingHTML = \"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var projectUUID = (newValue + \'\').trim(); if (projectUUID == \'\') return; var loadingDialog = new GlideModal(\'loader\', true); loadingDialog.setTitle(\'Checking Project Status...\'); loadingDialog.renderWithContent(\'\' + loadingHTML); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'checkCatalogValidity\'); ga.addParam(\'onChangeType\', \'project\'); ga.addParam(\'sysparm_projectUUID\', projectUUID); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); for (var index in parsed) { var message = \'\'; if (parsed[index].state == \'INACTIVE\') { message = parsed[index].name + \' is not available at Calm. So, Catalog Item cant be launched.Re - Directing back to catalog launch page. \'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } else if (parsed[index].state == \'CANTCHECK\') { message = \' Cant check whether the \' + parsed[index].name + \' from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.\'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } } new GlideModal().get(\'loader\').destroy(); } function clearFieldValue(message) { var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + \'\'] + \'\' == \'formatter\' || fldType[flds[i].realName + \'\'] + \'\' == \'container\' || fldType[flds[i].realName + \'\'] + \'\' == \'checkbox_container\' || fldType[flds[i].realName + \'\'] + \'\' == \'undefined\') { continue; } if (flds[i].label == \"Project\" &amp;&amp; flds[i].prettyName == \"default_project\") continue; if (flds[i].label == \"Profile\" &amp;&amp; flds[i].prettyName == \"default_profile\") continue; if (flds[i].prettyName.indexOf(\'cluster_name\') == -1) g_form.clearValue(flds[i].prettyName); } } function getParameterValue(name) { name = name.replace(\/[\\[]\/, \"\\\\\\[\").replace(\/[\\]]\/, \"\\\\\\]\"); var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\"; var regex = new RegExp(regexS); var results = regex.exec(self.location); if (results == null) { return \"\"; } else { return unescape(results[1]); } } var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchSelectedEndpointList\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponseMultipleProjectAndEndpointList); function parseResponseMultipleProjectAndEndpointList(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); selectedEndpointList = parsed.endpointList; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchEndpointAssociatedToProject\'); ga.addParam(\'sysparm_projectID\', newValue); ga.addParam(\'sysparm_selected_endpoint\', JSON.stringify(selectedEndpointList)); ga.getXML(parseResponseProjectAndEndpointList); function parseResponseProjectAndEndpointList(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); console.log(\"Endpoint associated to new project ::\" + answer); var parse = JSON.parse(answer); var final_endpointList = parse.single; g_form.clearOptions(\'default_endpoint\'); for (var i = 0; i &lt; final_endpointList.length; i++) { var endpoint = final_endpointList[i]; g_form.addOption(\'default_endpoint\', endpoint.uuid + \'\', endpoint.name + \'\'); console.log(\"endpoint ::\" + endpoint.uuid); if (endpoint.uuid == \"\") { g_form.showFieldMsg(\'default_endpoint\', \'There are no applicable Endpoints(s) that match the selected Project. Please choose a different Project to proceed.\'); } } if (final_endpointList.length == 1) { g_form.setReadOnly(\'default_endpoint\', true); } } } } else { var projectUUID = (newValue + \'\').trim(); if (projectUUID == \'\') return; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'checkCatalogValidity\'); ga.addParam(\'onChangeType\', \'project\'); ga.addParam(\'projectUUID\', projectUUID); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); for (var index in parsed) { var message = \'\'; if (parsed[index].state == \'INACTIVE\') { message = parsed[index].name + \' is not available at Calm. So, Catalog Item cant be launched.Re - Directing back to catalog launch page. \'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } else if (parsed[index].state == \'CANTCHECK\') { message = \' Cant check whether the \' + parsed[index].name + \' from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.\'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } } } function getParameterValue(name) { name = name.replace(\/[\\\\[]\/, \"\\\\\\\\\\\\[\").replace(\/[\\\\]]\/, \"\\\\\\\\\\\\]\"); var regexS = \"[\\\\\\\\?&amp;]\" + name + \"=([^&amp;#]*)\"; var regex = new RegExp(regexS); var results = regex.exec(self.location); if (results == null) { return \"\"; } else { return unescape(results[1]); } } function clearFieldValue(message) { alert(message); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'getFieldDetails\'); ga.addParam(\'cat_item_sys_id\', g_form.getUniqueValue()); ga.addParam(\'fieldNameArray\', g_form.getFieldNames()); ga.getXML(parseResponse1); function parseResponse1(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var object = JSON.parse(answer); for (var i in object) { if (object[i].var_type == \'formatter\' || object[i].var_type == \'container\' || object[i].var_type == \'checkbox_container\' || object[i].var_type == \'undefined\' || object[i].var_type == \'Container Start\') { continue; } if (object[i].var_name.indexOf(\'cluster_name\') == -1) g_form.clearValue(object[i].var_name); } } self.location = \'\/sp?id=sc_category&amp;catalog_id=240abede37112300fdfc097973990e24\'; } var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchSelectedEndpointList\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponseMultipleProjectAndEndpointList); function parseResponseMultipleProjectAndEndpointList(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); selectedEndpointList = parsed.endpointList; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchEndpointAssociatedToProject\'); ga.addParam(\'sysparm_projectID\', newValue); ga.addParam(\'sysparm_selected_endpoint\', JSON.stringify(selectedEndpointList)); ga.getXML(parseResponseProjectAndEndpointList); function parseResponseProjectAndEndpointList(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); console.log(\"Endpoint assciated to new project ::\" + answer); var parse = JSON.parse(answer); var final_endpointList = parse.single; g_form.clearOptions(\'default_endpoint\'); for (var i = 0; i &lt; final_endpointList.length; i++) { var endpoint = final_endpointList[i]; g_form.addOption(\'default_endpoint\', endpoint.uuid + \'\', endpoint.name + \'\'); console.log(\"endpoint ::\" + endpoint.uuid); if (endpoint.uuid == \"\") { g_form.showFieldMsg(\'default_endpoint\', \'There are no applicable Endpoints(s) that match the selected Project. Please choose a different Project to proceed.\'); } } if (final_endpointList.length == 1) { g_form.setReadOnly(\'default_endpoint\', true); } } } } } }";
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
				var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onLoadCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
						grChange.setValue("sys_policy", this.protected_var);
                        grChange.update();

                    }

                if (current.variables.type_of_blueprint == 'unpublished' || current.variables.type_of_blueprint == 'published') {

                    var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                    onLoadCatalogClientScript.setAttributes({
                        "name": "Check Catalog Item Validity profile",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": '' + catItemSysId,
                        "cat_variable": "IO:" + profileSysID,
                        "active": true,
                        "order": 1,
                        "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onLoadCatalogClientScript.appliesToCatalogItem(true);
                    var onLoadScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } try { var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { var blueprintType = getParameterValue(\'type\') + \'\'; var blueprintUUID = getParameterValue(\'uuid\') + \'\'; var profileSysId = getParameterValue(\'profileSysId\') + \'\'; var profileName = (newValue + \'\').trim(); var envUUID = (g_form.getValue(\'default_environment\')+\'\').trim(); var loadingHTML = \"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var loadingDialog = new GlideModal(\'loader\', true); loadingDialog.setTitle(\'Checking Blueprint Status...\'); loadingDialog.renderWithContent(\'\' + loadingHTML); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'checkCatalogValidity\'); ga.addParam(\'onChangeType\', \'profile\'); ga.addParam(\'sysparm_blueprintType\', blueprintType); ga.addParam(\'sysparm_blueprintUUID\', blueprintUUID); ga.addParam(\'sysparm_envUUID\', envUUID); ga.addParam(\'sysparm_profileSysId\', profileSysId); ga.addParam(\'sysparm_profileName\', profileName); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); for(var index in parsed) { var message = \'\'; if(parsed[index].state == \'INACTIVE\'){ message = parsed[index].name+\' is not available at Calm. So, Catalog Item cant be launched.Re - Directing back to catalog launch page. \'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } else if (parsed[index].state == \'CANTCHECK\') { message = \' Cant check whether the \'+ parsed[index].name+\' from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.\'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } } new GlideModal().get(\'loader\').destroy(); } function clearFieldValue(message) { var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + \'\'] + \'\' == \'formatter\' || fldType[flds[i].realName + \'\'] + \'\' == \'container\' || fldType[flds[i].realName + \'\'] + \'\' == \'checkbox_container\' || fldType[flds[i].realName + \'\'] + \'\' == \'undefined\') { continue; } if (flds[i].label == \"Project\" &amp;&amp; flds[i].prettyName == \"default_project\") continue; if (flds[i].label == \"Profile\" &amp;&amp; flds[i].prettyName == \"default_profile\") continue; if (flds[i].prettyName.indexOf(\'cluster_name\') == -1) g_form.clearValue(flds[i].prettyName); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } } function getParameterValue(name) { name = name.replace(\/[[]\/, \"\\[\").replace(\/[]]\/, \"\\]\"); var regexS = \"[\\?&amp;]\" + name + \"=([^&amp;#]*)\"; var regex = new RegExp(regexS); var results = regex.exec(self.location); if (results == null) { return \"\"; } else { return unescape(results[1]); } } } else { var blueprintType = getParameterValue(\'type\') + \'\'; var blueprintUUID = getParameterValue(\'uuid\') + \'\'; var profileSysId = getParameterValue(\'profileSysId\') + \'\'; var profileName = (newValue + \'\').trim(); if (profileName == \'\') return; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'checkCatalogValidity\'); ga.addParam(\'onChangeType\', \'profile\'); ga.addParam(\'blueprintType\', blueprintType); ga.addParam(\'blueprintUUID\', blueprintUUID); ga.addParam(\'profileSysId\', profileSysId); ga.addParam(\'profileName\', profileName); ga.addParam(\'cat_item_sys_id\', g_form.getUniqueValue()); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); for(var index in parsed) { var message = \'\'; if(parsed[index].state == \'INACTIVE\'){ message = parsed[index].name+\' is not available at Calm. So, Catalog Item cant be launched.Re - Directing back to catalog launch page. \'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } else if (parsed[index].state == \'CANTCHECK\') { message = \' Cant check whether the \'+ parsed[index].name+\' from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.\'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } } } function getParameterValue(name) { name = name.replace(\/[\\[]\/, \"\\\\\\[\").replace(\/[\\]]\/, \"\\\\\\]\"); var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\"; var regex = new RegExp(regexS); var results = regex.exec(self.location); if (results == null) { return \"\"; } else { return unescape(results[1]); } } function clearFieldValue(message) { alert(message); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'getFieldDetails\'); ga.addParam(\'cat_item_sys_id\', g_form.getUniqueValue()); ga.addParam(\'fieldNameArray\', g_form.getFieldNames()); ga.getXML(parseResponse1); function parseResponse1(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var object = JSON.parse(answer); for (var i in object) { if (object[i].var_type == \'formatter\' || object[i].var_type == \'container\' || object[i].var_type == \'checkbox_container\' || object[i].var_type == \'undefined\' || object[i].var_type == \'Container Start\') { continue; } if (object[i].var_name.indexOf(\'cluster_name\') == -1) g_form.clearValue(object[i].var_name); } } self.location = \'\/sp?id=sc_category&amp;catalog_id=240abede37112300fdfc097973990e24\'; } } } } catch (e) { console.log(\'inside Check Catalog Item Validity profile:: \' + e.message); } }";
                    onLoadCatalogClientScript.addScript(onLoadScript);
                    var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
					var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onLoadCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
						grChange.setValue("sys_policy", this.protected_var);
                        grChange.update();

                    }
                }


                var onChangecatalogClientScript2 = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript2.setAttributes({
                    "name": "Set Session Vars",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "cat_variable": "IO:" + profileSysID,
                    "active": true,
                    "order": 700,
                    "description": "This script is auto created thorugh runtime module for setting session json.",
                    "applies_catalog": true,
                    "ui_type": '10',
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onChangecatalogClientScript2.appliesToCatalogItem(true);
                var onChangeScriptSess = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } try { var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + \'\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); jslog(answer); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; } for (var j in serv_json) { for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; } } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } } else { var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + \'\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); } function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'); gajax.addParam(\'sysparm_type\', \'catalog\'); gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'); gajax.addParam(\'sysparm_varJson\', act_var_JSON); gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')); gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\') { if (type == \'LOCAL\') g_form.setValue(sys_id, row.value); if (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; (row.value).length; k++) { g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); } } } if (row.state == \'ERROR\') { g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } } } } catch (e) { console.log(\'inside Set Session Vars:: \' + e.message); } }";
                onChangecatalogClientScript2.addScript(onChangeScriptSess);
                var OnChangeCatalogScriptId = onChangecatalogClientScript2.create();
				var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(OnChangeCatalogScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
						grChange.setValue("sys_policy", this.protected_var);
                        grChange.update();

                    }

                this.logger.debug("Created onChange script to set Session variables " + current.variables.item_name);

                if (current.variables.type_of_blueprint == 'unpublished' || current.variables.type_of_blueprint == 'published') {
                    var onChangecatalogClientScript3 = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript3.setAttributes({
                        "name": "Fetch dependencies on change of profile",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": '' + catItemSysId,
                        "cat_variable": "IO:" + profileSysID,
                        "active": true,
                        "order": 900,
                        "description": "This script is auto created thorugh runtime module for getting variables on change of profile.",
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onChangecatalogClientScript3.appliesToCatalogItem(true);
                    var onChangeScriptVars = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + \'\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); console.log(answer); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); if (portal_check == \'false\') parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); if (portal_check == \'false\') parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'); gajax.addParam(\'sysparm_type\', \'catalog\'); gajax.addParam(\'sysparm_field\', \'onLoad\'); gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'); gajax.addParam(\'sysparm_varJson\', act_var_JSON); gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')); gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\' &amp;&amp; (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\')) { g_form.clearOptions(sys_id); if (row.value) { for (var k = 0; k &lt; row.value.length; k++) g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); } if (row.value != \'\' &amp;&amp; row.value != \'undefined\') { g_form.setValue(sys_id, row.value[0]); } } else { if (row.data_type + \'\' != \'BASE\') { g_form.clearOptions(sys_id); if (row.options) { for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + \'\', row.options[k], row.options[k]); } } if (row.value != \'\' &amp;&amp; row.value != \'undefined\') { g_form.setValue(sys_id, row.value); } } if (row.state == \'ERROR\') { g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } if (portal_check == \'false\') new GlideModal().get(\'variables_loader\').destroy(); } } } } }";
                    onChangecatalogClientScript3.addScript(onChangeScriptVars);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript3.create();
					var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(OnChangeCatalogScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
						grChange.setValue("sys_policy", this.protected_var);
                        grChange.update();

                    }

                    this.logger.debug("Created onChange script to set Session variables " + current.variables.item_name);
                }


                // Serive Potal New Script
                if (gs.getProperty('x_nuta2_nutanix_ca.Nutanix_Calm_Select_Service_Portal') == 'true') {
                    active_flag = 'true';
                } else {
                    active_flag = 'false';
                }


                var catalogScriptGR = new sn_sc.CatalogClientScript();
                catalogScriptGR.setAttributes({
                    "name": "Service portal fixes",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": "" + catItemSysId,
                    "cat_variable": "IO:" + profileSysID,
                    "active": active_flag,
                    "order": 300,
                    "description": 'This script is auto created thorugh runtime module for service portal fixes.',
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false
				});
                catalogScriptGR.appliesToCatalogItem(true);
                var Script = "function onChange(control, oldValue, newValue, isLoading) { try { if (isLoading) { return; } var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if( portal_check == 'true') { if (newValue == '') { var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + '' === 'default_profile' || elemen[i] + '' === 'default_project' || elemen[i] + '' === 'default_environment' || elemen[i] + '' === 'default_app_name') g_form.setDisplay(elemen[i], true); else { g_form.setMandatory(elemen[i], false); g_form.setDisplay(elemen[i], false); } } g_form.setDisplay('default_profile', true); g_form.setDisplay('default_project', true); g_form.setDisplay('default_environment', true); g_form.setDisplay('default_app_name', true); g_form.setMandatory('default_profile', true); } else { var credentials = g_form.getFieldNames(); for (var i in credentials) { if (credentials[i].includes('_password') || credentials[i].includes('_private_key') || credentials[i].includes('_passphrase')) { g_form.setVisible(credentials[i] + '', false); } } var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'extraFields'); ga.addParam('sysparm_catSysID', g_form.getUniqueValue()); ga.addParam('sysparm_fieldNames', g_form.getFieldNames()); ga.addParam('sysparm_profile', newValue); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var object = JSON.parse(answer); var extraFields = JSON.parse(object.extraFields); var privateFields = JSON.parse(object.privateFields); var showRuntimeVariables = JSON.parse(object.showRuntimeVariables); var secretVariables = JSON.parse(object.secretVariables); var extraCredentials = JSON.parse(object.extraCredentials); for (var i in extraFields) g_form.setVisible(extraFields[i] + '', false); for (var j in privateFields) g_form.setVisible(privateFields[j] + '', false); for (var k in showRuntimeVariables) g_form.setVisible(showRuntimeVariables[k] + '', true); for (var l in secretVariables) g_form.clearValue(secretVariables[l] + ''); for (var m in extraCredentials) g_form.setVisible(extraCredentials[k] + '', true); } } } } } catch (e) { console.log('Service portal fix' + e); }}";
                catalogScriptGR.addScript(Script);
                var ScriptId = catalogScriptGR.create();
				var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(ScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
						grChange.setValue("sys_policy", this.protected_var);
                        grChange.update();

                    }


                if (parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2")) {
                    this.logger.debug("Created On Change of Project (calm evirment 3.2) client script on  " + current.variables.item_name);

                    if (current.variables.type_of_blueprint == 'unpublished' || current.variables.type_of_blueprint == 'published') {

                        var onChangeCatalogProject = new sn_sc.CatalogClientScript();
                        onChangeCatalogProject.setAttributes({
                            "name": "On Change of Project",
                            "type": "onChange",
                            "applies_to": "item",
                            "cat_item": '' + catItemSysId,
                            "cat_variable": "IO:" + projectSysID,
                            "active": true,
                            "order": 700,
                            "description": "This script is auto created thorugh runtime module for getting variables on change of project.",
                            "applies_catalog": true,
                            "ui_type": '10',
                            "applies_req_item": false,
                            "applies_sc_task": false
						});
                        onChangeCatalogProject.appliesToCatalogItem(true);
                        var onChangeProjectScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchEnvironments\'); ga.addParam(\'sysparm_cat_sys_id\', cat_sys_id); ga.addParam(\'sysparm_project_id\', newValue); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var result = JSON.parse(answer); if (result.length == 0) { g_form.hideFieldMsg(\'default_environment\', true); g_form.clearOptions(\'default_environment\'); g_form.showFieldMsg(\'default_environment\', \'This Project has no valid Environments configured, you cannot proceed with the launch. Please contact your administrator\'); g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); if (portal_check == \'true\') { var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + \'\' === \'default_profile\' || elemen[i] + \'\' === \'default_project\' || elemen[i] + \'\' === \'default_environment\' || elemen[i] + \'\' === \'default_app_name\') g_form.setDisplay(elemen[i], true); else { g_form.setMandatory(elemen[i], false); g_form.setDisplay(elemen[i], false); } } } g_form.setMandatory(\'default_profile\', true); g_form.showFieldMsg(\'default_profile\', \'There are no applicable Profile(s) that match the selected Environment. Please choose a different Environment to proceed.\'); if (portal_check == \'false\') { var elemen = g_form.elements; for (var i in elemen) { g_form.setDisplay(elemen[i].fieldName, false); } } g_form.setDisplay(\'default_profile\', true); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_environment\', true); g_form.setMandatory(\'default_profile\', true); } else { g_form.clearMessages(); g_form.clearOptions(\'default_environment\'); g_form.clearValue(\'default_environment\'); for (var i = 0; i &lt; result.length; i++) { var jsonObj = result[i]; g_form.addOption(\'default_environment\', jsonObj.UUID + \'\', jsonObj.Name + \'\'); } if (portal_check == \'true\') { var jsonobj = result[0]; g_form.setValue(\'default_environment\', jsonObj.UUID); } } } } }";
                        onChangeCatalogProject.addScript(onChangeProjectScript);
                        var OnChangeCatalogScriptId = onChangeCatalogProject.create();
						var grChange = new GlideRecord('catalog_script_client');
							if (grChange.get(OnChangeCatalogScriptId)) {
							grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
							grChange.setValue("sys_policy", this.protected_var);
							grChange.update();
						}
                        this.logger.debug("Created On Change of Project (calm evirment 3.2) client script on  " + current.variables.item_name);
                    }

                    this.logger.debug("Created On Change of Environment (calm evirment 3.2) client script on  " + current.variables.item_name);


                    if (current.variables.type_of_blueprint == 'unpublished' || current.variables.type_of_blueprint == 'published') {

                        var onChangeCatalogEnvironment = new sn_sc.CatalogClientScript();
                        onChangeCatalogEnvironment.setAttributes({
                            "name": "On Change of Environment variable",
                            "type": "onChange",
                            "applies_to": "item",
                            "cat_item": '' + catItemSysId,
                            "cat_variable": "IO:" + environmentSysId,
                            "active": true,
                            "order": 700,
                            "description": "This script is auto created thorugh runtime module for getting variables on change of project.",
                            "applies_catalog": true,
                            "ui_type": '10',
                            "applies_req_item": false,
                            "applies_sc_task": false
                        });
                        onChangeCatalogEnvironment.appliesToCatalogItem(true);
                        var onChangeEnvironmentScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { var loadingHTML = \"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var loadingDialog = new GlideModal(\'environment_loader\', true); loadingDialog.setTitle(\'Fetching Profiles...\'); loadingDialog.renderWithContent(\'\' + loadingHTML); var def_project; var gUrl = new GlideURL(); gUrl.setFromCurrent(); for (var i = 0; i &lt; g_form.getControl(\'default_project\').options.length; i++) { if (g_form.getControl(\'default_project\').options[i].value == g_form.getValue(\'default_project\')) { def_project = g_form.getControl(\'default_project\').options[i].innerText; break; } } var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchProfilesBasisOnEnvironment\'); ga.addParam(\'sysparm_env\', g_form.getValue(\'default_environment\')); ga.addParam(\'sysparm_proValue\', g_form.getValue(\'default_project\')); ga.addParam(\'sysparm_pro\', def_project + \'\'); ga.addParam(\'sysparm_profile\', gUrl.getParam(\'profileSysId\')); ga.addParam(\'sysparm_blueprint\', gUrl.getParam(\'uuid\')); ga.addParam(\'sysparm_type\', gUrl.getParam(\'type\')); ga.getXML(parseData); function parseData(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); jslog(\' On Change of Environment variable answer\' + answer); answer = JSON.parse(answer); if (answer.length == 0) { g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); g_form.showFieldMsg(\'default_profile\', \'There are no applicable Profile(s) that match the selected Environment. Please choose a different Environment to proceed.\'); var elemen = g_form.elements; for (var i in elemen) { g_form.setDisplay(elemen[i].fieldName, false); } g_form.setDisplay(\'default_profile\', true); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_environment\', true); g_form.setMandatory(\'default_profile\', true); } else { var elemen = g_form.elements; for (var i in elemen) { g_form.setDisplay(elemen[i].fieldName, true); } g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); for (var i = 0; i &lt; answer.length; i++) { g_form.addOption(\'default_profile\', answer[i], answer[i]); } if (answer.length == 1) { g_form.setReadOnly(\'default_profile\', true); } } new GlideModal().get(\'environment_loader\').destroy(); new GlideModal().get(\'environment_loader\').destroy(); new GlideModal().get(\'environment_loader\').destroy(); var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue(\'default_profile\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); } function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'); gajax.addParam(\'sysparm_type\', \'catalog\'); gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'); gajax.addParam(\'sysparm_varJson\', act_var_JSON); gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')); gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\') { if (type == \'LOCAL\') g_form.setValue(sys_id, row.value); if (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; (row.value).length; k++) { g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); } } } if (row.state == \'ERROR\') { g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } } } else { var def_project; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchProfilesBasisOnEnvironment\'); ga.addParam(\'sysparm_env\', g_form.getValue(\'default_environment\')); ga.addParam(\'sysparm_proValue\', g_form.getValue(\'default_project\')); ga.addParam(\'sysparm_sysID\', g_form.getUniqueValue()); ga.addParam(\'sysparm_type\', getParameterValue(\'type\')); ga.getXML(parseData); function parseData(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); answer = JSON.parse(answer); if (answer.length == 0) { g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); g_form.showFieldMsg(\'default_profile\', \'There are no applicable Profile(s) that match the selected Environment. Please choose a different Environment to proceed.\'); var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + \'\' === \'default_profile\' || elemen[i] + \'\' === \'default_project\' || elemen[i] + \'\' === \'default_environment\' || elemen[i] + \'\' === \'default_app_name\') g_form.setDisplay(elemen[i], true); else { g_form.setMandatory(elemen[i], false); g_form.setDisplay(elemen[i], false); } } g_form.setDisplay(\'default_profile\', true); g_form.setReadOnly(\'default_profile\', false); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_environment\', true); g_form.setMandatory(\'default_profile\', true); } else { g_form.setReadOnly(\'default_profile\', false); var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + \'\' === \'default_profile\' || elemen[i] + \'\' === \'default_project\' || elemen[i] + \'\' === \'default_environment\' || elemen[i] + \'\' === \'default_app_name\') g_form.setDisplay(elemen[i], true); else { g_form.setMandatory(elemen[i], false); g_form.setDisplay(elemen[i], false); } } g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); g_form.clearValue(\'default_profile\'); for (var i = 0; i &lt; answer.length; i++) { g_form.addOption(\'default_profile\', answer[i], answer[i]); } g_form.setValue(\'default_profile\', answer[0]); if (answer.length == 1) { g_form.setReadOnly(\'default_profile\', true); } } var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue(\'default_profile\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); } function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'); gajax.addParam(\'sysparm_type\', \'catalog\'); gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'); gajax.addParam(\'sysparm_varJson\', act_var_JSON); gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')); gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\') { if (type == \'LOCAL\') g_form.setValue(sys_id, row.value); if (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; (row.value).length; k++) { g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); } } } if (row.state == \'ERROR\') { g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } } function getParameterValue(name) { name = name.replace(\/[\\[]\/, \"\\\\\\[\").replace(\/[\\]]\/, \"\\\\\\]\"); var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\"; var regex = new RegExp(regexS); var results = regex.exec(self.location); if (results == null) { return \"\"; } else { return unescape(results[1]); } } } } }";
                        onChangeCatalogEnvironment.addScript(onChangeEnvironmentScript);
                        var OnChangeCatalogScriptId = onChangeCatalogEnvironment.create();
						var grChange = new GlideRecord('catalog_script_client');
							if (grChange.get(OnChangeCatalogScriptId)) {
							grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
							grChange.setValue("sys_policy", this.protected_var);
							grChange.update();

						}
                        this.logger.debug("Created On Change of Environment (calm evirment 3.2) client script on  " + current.variables.item_name);
                    }

                }


                var cat_ui_policy = new GlideRecord(this.appUtil.configuration.table.catalogUIPolicy + '');
                cat_ui_policy.initialize();
                cat_ui_policy.catalog_item = catItemSysId;
                cat_ui_policy.short_description = 'Make Variables RITM ReadOnly';
                cat_ui_policy.applies_catalog = false;
                cat_ui_policy.applies_sc_task = false;
                cat_ui_policy.applies_req_item = true;
                cat_ui_policy.run_scripts = true;
                cat_ui_policy.script_true = 'function onCondition() { g_form.setVariablesReadOnly(true); }';
                cat_ui_policy.insert();



                this.logger.debug("Created ui policy to make field readonly on RITM on catalog item " + current.variables.item_name);

            }

            this.logger.info("New Catalog item " + current.variables.item_name + " creation completed.");
            return ans;

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._copyCatalogItem. Error:- " + e);
        }
    },

    _insertIntoRuntimeConfigTable: function(ans, current) {
        try {
            this.logger.debug("RV: Inside Nutanix_ConfigureSettingScripts._insertIntoRuntimeConfigTable." + JSON.stringify(current));

            var createCatalog = current.variables.create_catalog + '';
            var environments = current.variables.environments + '';
            var type_of_blueprint = current.variables.type_of_blueprint + '';
            this.logger.debug("RV type of blueprint: " + type_of_blueprint);
            if (createCatalog == 'yes') {

                // 				var project = new GlideRecord(this.appUtil.configuration.table.Project+'');
                // 				project.addQuery('sys_id', current.variables.project+'');
                // 				project.setLimit(1);
                // 				project.query();
                // 				project.next();

                var gr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
                gr.initialize();
                gr.multiple_application_profile = current.variables.multiple_application_profile + '';
                gr.environments = current.variables.environments + ''; //add
                gr.type_of_blueprint = current.variables.type_of_blueprint + ''; //add
                this.logger.debug("RV type of blueprint_new: " + gr.type_of_blueprint);
                gr.endpoint = current.variables.endpoint + '';
                //gr.assigned_users = current.variables.assign_users+'';
                gr.user_criteria = ans[1];
                gr.blueprint = (current.variables.type_of_blueprint + '' == 'runbook' || current.variables.type_of_blueprint + '' == 'published_runbook') ? current.variables.runbook : current.variables.blueprint;
                //gr.description = current.variables.description+'';
                gr.item_name = ans[0] + '';
                gr.multiple_projects = current.variables.multiple_project + '';
                gr.insert();
                this.logger.info("Inserting value and runtime value of fields into variable proerpteis table.");
            } else {
                var gr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
                gr.addQuery('item_name', current.variables.cat_item + '');
                gr.query();
                if (gr.next()) {
                    gr.application_profile = gr.application_profile + ',' + current.variables.application_profile + '';
                    gr.environments = gr.environments + ',' + current.variables.environments + ''; //add
                    gr.type_of_blueprint = current.variables.type_of_blueprint + ''; //add
                    this.logger.debug("RV type of blueprint_update: " + gr.type_of_blueprint);
                    gr.endpoint = gr.endpoint + ',' + current.variables.endpoint + '';
                    //gr.item_name = ans[0] + '';
                    //gr.user_criteria = ans[1];
                    gr.multiple_projects = gr.multiple_project + ',' + current.variables.multiple_project + '';
                    gr.update();
                }

                this.logger.info("Updating value and runtime value of fields into variable proerpteis table.");
            }

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._insertIntoRuntimeConfigTable. Error:- " + e);
        }

    },

    setMultiProfileServiceVariables: function(current) {
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts.setMultiProfileServiceVariables.");

            var performAction = current.variables.type + '';
            var catName = '';


            if (performAction == 'new') {
                var profile = current.variables.multiple_application_profile + '';
                var profile_arr = profile.split(",");
                var blueprint = current.variables.blueprint;
                var catSysId = current.description;
                var multiprofile_service_data = JSON.parse(current.variables.service_data);

                this.logger.debug("Got Profile:- " + profile + " Blueprint:- " + blueprint + " Catalog Item:- " + catSysId + " and Service Variables Data:- " + current.variables.service_data + " for setting service variables");

                var fieldGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                fieldGR.addEncodedQuery('cat_item=' + catSysId);
                fieldGR.query();

                var fieldInfo = {};

                while (fieldGR.next()) {
                    fieldInfo[fieldGR.name] = fieldGR.sys_id + '';
                }


                this.logger.debug("Fethed the mapping of fields to sysIds. JSON string:- " + JSON.stringify(fieldInfo));
                for (var c in multiprofile_service_data) {
                    var profile = multiprofile_service_data[c].profile_sys_id;
                    var profile_gr = new GlideRecord('x_nuta2_nutanix_ca_application_profile');
                    if (profile_gr.get(profile)) {}


                    var service_data = multiprofile_service_data[c].service_configuration;

                    var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');

                    for (var i in service_data) {
                        var serviceName = i;
                        var categoryList = service_data[i];

                        for (var j in categoryList) {
                            var categoryName = j;
                            var category = categoryList[j];

                            var keys = Object.keys(category);

                            if (!category[keys[0]].notCmplx || category[keys[0]].notCmplx + '' == 'false') {

                                this.logger.debug("Mapping PortList variables " + JSON.stringify(category[keys[0]]) + " in Varaibles properties table");

                                gr.initialize();
                                var temp1 = categoryName.replace(profile_gr.name + '_', '');
                                gr.variable = fieldInfo[temp1 + ''] + '';
                                gr.application_profile = profile + '';
                                gr.catalog_item = catSysId + '';
                                gr.default_value = JSON.stringify(category[keys[0]]);
                                gr.isprofilevariable = 'false';
                                gr.runtime_config = 'false';
                                gr.uuid = '';
                                var temp2 = serviceName.replace(profile_gr.name + '_', '');
                                gr.service_name = fieldInfo[temp2 + ''] + '';
                                var temp3 = categoryName.replace(profile_gr.name + '_', '');
                                gr.category_name = fieldInfo[temp3 + ''] + '';
                                gr.insert();

                            } else {
                                for (var k in category) {
                                    var varia = category[k];

                                    this.logger.debug("Mapping service variable " + varia.name + " with value " + varia.value + " and runtime config as " + varia.runtime_config + " againsts service " + serviceName + " and category " + categoryName + " in Varaibles properties table");

                                    if (varia.data_type + '' == 'LOCAL' &amp;&amp; (varia.val_type + '' == 'DATE_TIME' || varia.val_type + '' == 'DATE'))
                                        varia.value = this.appScriptInstance._formttedDateTime(varia.value + '', varia.val_type + '', true);


                                    gr.initialize();
                                    var temp1 = (varia.name).replace(profile_gr.name + '_', '');

                                    gr.variable = fieldInfo[temp1 + ''] + '';
                                    gr.application_profile = profile + '';
                                    gr.catalog_item = catSysId + '';
                                    gr.default_value = varia.value + '';
                                    gr.isprofilevariable = varia.isprofilevariable + '';
                                    gr.runtime_config = varia.runtime_config + '';
                                    gr.uuid = varia.uuid + '';
                                    var temp = serviceName.replace(profile_gr.name + '_', '');
                                    gr.service_name = fieldInfo[temp + ''] + '';
                                    var temp1 = categoryName.replace(profile_gr.name + '_', '');
                                    gr.category_name = fieldInfo[temp1 + ''] + '';

                                    gr.isdisabled = varia.isdisabled + '';
                                    gr.issupported = varia.isSupported + '';
                                    gr.isservicevariable = varia.isservicevariable + '';


                                    gr.type = varia.type;
                                    gr.value_type = varia.val_type + '';
                                    gr.field_regex = varia.regex + '';
                                    gr.data_type = varia.data_type + '';
                                    gr.uuid = varia.uuid + '';

                                    gr.field_json = varia.field + "";
                                    gr.is_hidden = (varia.isHidden + "" == 'true') ? true : false;


                                    gr.insert();

                                    catName = gr.catalog_item.name + '';

                                    //                                     if (varia.isservicevariable + '' == 'true')
                                    //                                         this._createOnChangeScript(fieldInfo[varia.name + ''] + '', catSysId + "");
                                }
                            }

                        }
                    }

                    this.logger.info("Set service variables values for " + catName + ".");
                }

                this.logger.info("Set service variables values for " + catName + ".");

                for (var i = 0; i &lt; profile_arr.length; i++) {

                    this._createOnChangeScriptForDependee(catSysId, profile_arr[i], "serviceVar");
                }
            } else {

                var profile = current.variables.multiple_application_profile + '';
                var profile_arr = profile.split(",");
                var blueprint = current.variables.blueprint;
                var catSysId = current.description;
                var multiprofile_service_data = JSON.parse(current.variables.service_data);
                var delta_profiles = ((current.variables.delta_profiles).toString()).split(',');

                // 				gs.info("##### Profile : "+profile+" blueprint "+blueprint+" catSysId "+catSysId+"  multiprofile_service_data "+multiprofile_service_data+" delta_profiles "+delta_profiles+"type of delta profile "+typeof delta_profiles+" delta_profiles [0] "+delta_profiles[0]);

                var service_data = JSON.parse(current.variables.service_data + '');

                this.logger.debug("RiyaV : multiprofile_service_data: " + JSON.stringify(multiprofile_service_data));
                for (var c in multiprofile_service_data) {
                    var profile = multiprofile_service_data[c].profile_sys_id;

                    var profile_gr = new GlideRecord('x_nuta2_nutanix_ca_application_profile');
                    if (profile_gr.get(profile)) {}
                    var service_data = multiprofile_service_data[c].service_configuration;
                    this.logger.debug("RiyaV : service_data: " + JSON.stringify(service_data));
                    var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                    gr.addQuery('catalog_item', catSysId);
                    gr.addQuery('application_profile', profile);
                    gr.addQuery('isprofilevariable', false);
                    gr.query();
                    this.logger.debug("catalog_item: " + catSysId + " application profile: " + profile + "isprofilevariable: profile_gr: " + profile_gr); //extra line
                    while (gr.next()) {
                        var jsonData = service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''];
                        this.logger.debug("json_data" + JSON.stringify(service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + '']));
                        this.logger.debug("service_data2: " + JSON.stringify(service_data));
                        if (!jsonData.notCmplx || jsonData.notCmplx + '' == 'false') {
                            gr.default_value = JSON.stringify(service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + '']);
                            gr.update();
                            this.logger.debug("Updated service port list " + gr.default_value);
                        } else {
                            if (service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].data_type + '' == 'LOCAL' &amp;&amp; (service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].val_type + '' == 'DATE_TIME' || service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].val_type + '' == 'DATE'))
                                service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].value = this.appScriptInstance._formttedDateTime(service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].value + '', service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].val_type + '', true);

                            gr.default_value = service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].value + '';
                            gr.runtime_config = service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].runtime_config + '';
                            gr.update();

                            this.logger.debug("Updated service variable " + gr.variable.name + " with value " + gr.default_value + " and runtime config as " + gr.runtime_config + " againsts service " + gr.service_name.name + " and category " + gr.category_name.name + " in Variables properties table");
                            catName = gr.catalog_item.name + '';

                        }
                    }
                }
                this.logger.info("RiyaV : Updated service variables values for " + catName + ".");

                var multiprofile_service_data = JSON.parse(current.variables.service_data);
                var fieldGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                fieldGR.addEncodedQuery('cat_item=' + catSysId);
                fieldGR.query();

                var fieldInfo = {};

                while (fieldGR.next()) {
                    fieldInfo[fieldGR.name] = fieldGR.sys_id + '';
                }

                for (var c in multiprofile_service_data) {
                    var profile = multiprofile_service_data[c].profile_sys_id;
                    var profile_gr = new GlideRecord('x_nuta2_nutanix_ca_application_profile');
                    if (profile_gr.get(profile)) {}

                    var service_data = multiprofile_service_data[c].service_configuration;
                    for (var i in delta_profiles) {
                        if (profile + '' == delta_profiles[i] + '') {
                            var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');

                            for (var i in service_data) {
                                var serviceName = i;
                                var categoryList = service_data[i];

                                for (var j in categoryList) {
                                    var categoryName = j;
                                    var category = categoryList[j];

                                    var keys = Object.keys(category);

                                    if (!category[keys[0]].notCmplx || category[keys[0]].notCmplx + '' == 'false') {

                                        this.logger.debug("Mapping PortList variables " + JSON.stringify(category[keys[0]]) + " in Varaibles properties table");

                                        gr.initialize();
                                        var temp1 = categoryName.replace(profile_gr.name + '_', '');
                                        gr.variable = fieldInfo[temp1 + ''] + '';
                                        gr.application_profile = profile + '';
                                        gr.catalog_item = catSysId + '';
                                        gr.default_value = JSON.stringify(category[keys[0]]);
                                        gr.isprofilevariable = 'false';
                                        gr.runtime_config = 'false';
                                        gr.uuid = '';
                                        var temp2 = serviceName.replace(profile_gr.name + '_', '');
                                        gr.service_name = fieldInfo[temp2 + ''] + '';
                                        var temp3 = categoryName.replace(profile_gr.name + '_', '');
                                        gr.category_name = fieldInfo[temp3 + ''] + '';
                                        gr.insert();

                                    } else {
                                        for (var k in category) {
                                            var varia = category[k];

                                            this.logger.debug("Mapping service variable " + varia.name + " with value " + varia.value + " and runtime config as " + varia.runtime_config + " againsts service " + serviceName + " and category " + categoryName + " in Varaibles properties table");

                                            if (varia.data_type + '' == 'LOCAL' &amp;&amp; (varia.val_type + '' == 'DATE_TIME' || varia.val_type + '' == 'DATE'))
                                                varia.value = this.appScriptInstance._formttedDateTime(varia.value + '', varia.val_type + '', true);


                                            gr.initialize();
                                            var temp1 = (varia.name).replace(profile_gr.name + '_', '');
                                            gr.variable = fieldInfo[temp1 + ''] + '';
                                            gr.application_profile = profile + '';
                                            gr.catalog_item = catSysId + '';
                                            gr.default_value = varia.value + '';
                                            gr.isprofilevariable = varia.isprofilevariable + '';
                                            gr.runtime_config = varia.runtime_config + '';
                                            gr.uuid = varia.uuid + '';
                                            var temp = serviceName.replace(profile_gr.name + '_', '');
                                            gr.service_name = fieldInfo[temp + ''] + '';
                                            var temp1 = categoryName.replace(profile_gr.name + '_', '');
                                            gr.category_name = fieldInfo[temp1 + ''] + '';

                                            gr.isdisabled = varia.isdisabled + '';
                                            gr.issupported = varia.isSupported + '';
                                            gr.isservicevariable = varia.isservicevariable + '';


                                            gr.type = varia.type;
                                            gr.value_type = varia.val_type + '';
                                            gr.field_regex = varia.regex + '';
                                            gr.data_type = varia.data_type + '';
                                            gr.uuid = varia.uuid + '';

                                            gr.field_json = varia.field + "";
                                            gr.is_hidden = (varia.isHidden + "" == 'true') ? true : false;

                                            gr.insert();

                                            catName = gr.catalog_item.name + '';

                                            //                                             if (varia.isservicevariable + '' == 'true')
                                            //                                                 this._createOnChangeScript(fieldInfo[varia.name + ''] + '', catSysId + "");
                                        }
                                    }

                                }
                            }
                        }
                    }
                }

                for (var i = 0; i &lt; profile_arr.length; i++) {

                    this._createOnChangeScriptForDependee(catSysId, profile_arr[i], "serviceVar");
                }
            }

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts.setMultiProfileServiceVariables. Error:- " + e);
        }
    },

    _onChangeScripts: function(variaJSON, catSysId) {
        try {
            for (var i in variaJSON) {
                this._createOnChangeScript(i, catSysId);
            }
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._onChangeScripts. Error:- " + e);
        }
    },

    _createOnChangeScript: function(varSysId, catSysId) {
        try {
            var grCatalogScript = new GlideRecord("catalog_script_client");
            grCatalogScript.addEncodedQuery("cat_item=" + catSysId + "^name=Fetch values OnChange^type=onChange^cat_variableLIKEIO:" + varSysId);
            grCatalogScript.query();
            if (!grCatalogScript.next()) {
                var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript.setAttributes({
                    "name": "Fetch values OnChange",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": '' + catSysId,
                    "cat_variable": "IO:" + varSysId,
                    "active": true,
                    "order": 1000,
                    "description": "This script is auto created thorugh runtime module for fetching values.",
                    "applies_catalog": "true",
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false,
                });
                onChangecatalogClientScript.appliesToCatalogItem(true);
                var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { if (!sessionStorage[\'varValues\']) return; var varValues = JSON.parse(sessionStorage[\'varValues\']); oldValue = varValues[control.id + \'\']; if (isLoading || newValue == \'\' || oldValue + \'\' == newValue + \'\') { new GlideModal().get(\'loader\').destroy(); return; } function varResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var var_array = []; for (var i in prof_json) { if (i + \'\' == control.id + \'\') continue; var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); varValues[\'IO:\' + i] = curr_value + \'\'; var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value, parsed_field.sys_id = i + \'\', var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { if (control.id + \'\' == k) { continue; } var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); varValues[\'IO:\' + k] = curr_value + \'\'; var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value, parsed_field.sys_id = k + \'\', var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(varValues); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'), gajax.addParam(\'sysparm_field\', control.id + \'\'), gajax.addParam(\'sysparm_type\', \'catalog\'), gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'), gajax.addParam(\'sysparm_varJson\', act_var_JSON), gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')), gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')), gajax.getXML(getVarResponse); } function getVarResponse(response) { new GlideModal().get(\'loader\').destroy(); var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; if (control.id + \'\' == sys_id) { continue; } var type = row.type + \'\'; if (row.state == \'SUCCESS\' &amp;&amp; (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\')) { g_form.clearOptions(sys_id); for (var k = 0; k &lt; row.value.length; k++) g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); g_form.setValue(sys_id, row.value); } else { if (row.data_type + \'\' != \'BASE\') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + \'\', row.options[k], row.options[k]); } g_form.setValue(sys_id, row.value); } if (row.state == \'ERROR\') { g_form.clearOptions(sys_id); g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } } var loadingHTML = \"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var loadingDialog = new GlideModal(\'loader\', true); loadingDialog.setTitle(\'Fetching variables...\'); loadingDialog.renderWithContent(\'\' + loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue(\'default_profile\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'), ga.addParam(\'sysparm_catsysid\', cat_sys_id), ga.addParam(\'sysparm_profile\', profile), ga.getXML(varResponse, null, loadingDialog); } else { try { if (!sessionStorage[\'varValues\']) return; var control_id =\'" + varSysId + "\'; var varValues = JSON.parse(sessionStorage[\'varValues\']); oldValue = varValues[control_id + \'\']; if (isLoading || newValue == \'\' || oldValue + \'\' == newValue + \'\') { return; } console.log(oldValue); console.log(newValue); function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); varValues[\'IO:\' + i] = curr_value + \'\'; var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value, parsed_field.sys_id = i + \'\', var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); varValues[\'IO:\' + k] = curr_value + \'\'; var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value, parsed_field.sys_id = k + \'\', var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(varValues); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'), gajax.addParam(\'sysparm_field\', control_id + \'\'), gajax.addParam(\'sysparm_type\', \'catalog\'), gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'), gajax.addParam(\'sysparm_varJson\', act_var_JSON), gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')), gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')), gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\' &amp;&amp; (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\')) { g_form.clearOptions(sys_id); for (var k = 0; k &lt; row.value.length; k++) g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); g_form.setValue(sys_id, row.value[0]); } else { if (row.data_type + \'\' != \'BASE\') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + \'\', row.options[k], row.options[k]); } g_form.setValue(sys_id, row.value); } row.state == \'ERROR\' &amp;&amp; g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue(\'default_profile\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'), ga.addParam(\'sysparm_catsysid\', cat_sys_id), ga.addParam(\'sysparm_profile\', profile), ga.getXML(varResponse); } catch (e) { console.log(\'Fetch values OnChange\' + e) } } } }";
                onChangecatalogClientScript.addScript(onChangeScript);
                var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
				var grChange = new GlideRecord('catalog_script_client');
							if (grChange.get(OnChangeCatalogScriptId)) {
							grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
							grChange.setValue("sys_policy", this.protected_var);
							grChange.update();
				}
            }
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._createOnChangeScript. Error:- " + e);
        }
    },

    // calm 3.2 Envirment task

    fetchProfilesBasisOnEnvironment: function() {
        try {
            var body = new Object();
            var profile = [];
            body["api_version"] = "3.0";
            var metadata = {};
            var api_info;
            if (this.getParameter('sysparm_type') + "" == "x_nuta2_nutanix_ca_nutanix_marketplaceitems") {
                metadata.kind = "marketplace_item";
                api_info = "calm_marketplace_items";
            } else {
                metadata.kind = "blueprint";
                api_info = "blueprints";
            }
            metadata["categories"] = {};
            //sysparm_blueprint
            var project_reference = {};
            project_reference["kind"] = "project";
            project_reference["name"] = this.getParameter("sysparm_pro") + "";
            project_reference["uuid"] = this.getParameter("sysparm_proValue") + "";
            metadata["project_reference"] = project_reference;

            body["metadata"] = metadata;
            var specs = {};
            var environment_profile_pairs = [];
            var environment = {};
            environment["uuid"] = this.getParameter("sysparm_env") + "";
            var app_profile = this.getParameter("sysparm_profile");
            app_profile = app_profile.split(",");
            for (var i = 0; i &lt; app_profile.length; i++) {
                var profile_obj = {};
                var gr = new GlideRecord("x_nuta2_nutanix_ca_application_profile");
                if (gr.get(app_profile[i])) {
                    profile_obj.app_profile = {
                        "name": gr.name + ""
                    };
                    profile.push(gr.name + "");
                }
                profile_obj.environment = environment;
                environment_profile_pairs.push(profile_obj);
            }
            specs["environment_profile_pairs"] = environment_profile_pairs;
            var final_profile = [];
            body["spec"] = specs;
            this.appUtil = new Nutanix_Calm_Utils();
            this.logger.debug("Nutanix_ConfigureSettingScripts.fetchProfilesBasisOnEnvironment" + JSON.stringify(body));
            var response = this.appUtil.makeCalmApiCall('POST', '/' + api_info + '/' + this.getParameter("sysparm_blueprint") + "/patch_with_environment/validate", JSON.stringify(body));
            this.logger.debug("Nutanix_ConfigureSettingScripts.fetchProfilesBasisOnEnvironment" + JSON.stringify(response.getBody()) + response.getStatusCode());
            if (response.getStatusCode() + "" == "200" || response.getStatusCode() + "" == "201") {
                response = JSON.parse(response.getBody());
                var environment_profile_pair = response.status.environment_profile_pairs;

                for (var i = 0; i &lt; environment_profile_pair.length; i++) {
                    var name = environment_profile_pair[i].app_profile.name + "";
                    var state = environment_profile_pair[i].state;
                    if (profile.indexOf(name) != -1) {
                        if (state == "valid") {
                            final_profile.push(name);
                        }
                    }
                }
            } else {
                this.logger.error("Nutanix_ConfigureSettingScripts.fetchProfilesBasisOnEnvironment patch_with_environment/validate call failed response statusCode : " + response.getStatusCode());
            }
            return JSON.stringify(final_profile);
        } catch (e) {
            this.logger.error("Nutanix_ConfigureSettingScripts.fetchProfilesBasisOnEnvironment " + e);
        }

    },
    fetchEnvironments: function() {
        this.logger.debug("inside Nutanix_ConfigureSettingScripts.fetchEnvironments");
        var project = this.getParameter("sysparm_project");
        var gr_pro = new GlideRecord("x_nuta2_nutanix_ca_nutanix_project");
        gr_pro.addQuery("uuid", project);
        gr_pro.query();
        var arr = [];
        if (gr_pro.next()) {
            var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_environment");
            gr.addQuery("project", gr_pro.sys_id);
            gr.query();
            while (gr.next()) {
                var obj = {};
                obj["Name"] = (gr.name + "");
                obj["UUID"] = (gr.uuid + "");
                arr.push(obj);
            }
        }
        return (JSON.stringify(arr));
    },

    type: 'Nutanix_ConfigureSettingScripts'

};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-11-13 16:38:54&lt;/sys_created_on&gt;&lt;sys_id&gt;75c3833837fd2300fdfc097973990e2f&lt;/sys_id&gt;&lt;sys_mod_count&gt;734&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_ConfigureSettingScripts&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_75c3833837fd2300fdfc097973990e2f&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2022-01-24 12:07:10&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>-719718641</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>d0021aa32fd50110e49924c62799b6d3</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb91c1f950000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table/>
<target_name>Nutanix_ConfigureSettingScripts</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>eff689b42359c1104a57789d23853dda</update_guid>
<update_guid_history>eff689b42359c1104a57789d23853dda:-719718641,ccd633e025d1c110434e99dfea636da8:-1572128914,b2343720d2d1c110695c250b269d81f4:-1557723472,b19b0af2a7cd0510e499acae7aebcdcd:-1021389136,b72906fe0c8d05105dbbea0a14e5f680:-1746048289,bfdc7172f58d05108f48ef1cca0e04f2:999632631,05a439f6ad4d0510aedd226afe366ec9:-350649459,9bd7e9fa60450510ff0eb71d30e87671:243876813,3bbf95f240450510899704a97c95dc28:-1493676107,32124ae1c981011050b7b4a82abb3b86:1064885258,66fb712d2241011099f353bb14321bb8:-1125083509,597fd89dc589c110634cdef8dda1a6c1:655176559,67fd505d6089c11014854de3c49e8af0:-1401681679,3dcd98598589c11058deccdf9b36893b:-1669894335,f7ec141dc989c1102c3b135753805dc8:-1990917772,987390d1c189c110a6307d1fa94a971b:553910680,a23194911b89c11004d4421313249131:751941818,5ff01c112989c1104965ac62d2fc3add:-1534333768,fd1f8011ae89c110c2ea8fb8f421fdc6:608088248,d35ccc5d1649c11024d7db089ad4ace2:-144626037,75b513818285c11062f79567526d3efb:-330962538,76caeb30570d01103075bc2834960b6f:-1590155110,fe586b7c73c901109be795e9ebb51a09:1407444795,41ce47f84b4901106ecf0cc76257529e:1000879234,683b873887490110869bb410f077277c:-43145653,03473eb4918501102024dac77fb07712:-263253269,15177eb4328501104f23125a26ada018:-1845256507,77c96a3ccf4501109144689efa952c45:574603085,dae82eb02c450110cd1f4b24d2e5bc3e:2131389145,0a504a70c0410110c96bce61b5df9be7:-312362651,2cafaea4500501101347b4e51a3c92d3:86792661,9257e834d9f48110fc32b6ff5b4f7441:496836417,f4a3ac3077f4811081a27349d3dc4b59:-1415126110,f13d28a2b5a44110f5fa861763061c89:-62100545,643ca86257a44110b28d5594c2d9e903:96850688,4b314f0636a001103963cd0ed0a1b79c:5632736,132df28233a001101bf4029950877c04:864336543,da0bbece9f6001109c896e035b63cba4:2140887889,78dba2022b600110156bf4c580d8bca9:-581039121,1fdd12b5dea00110414622158f515e2a:1647833561,c4020d90b66001101fe3c314448f8e20:1049713611,6568d912f758c110bb18b69b812fe843:-77036213,dc3095d62a18c110f208ace2777a7e60:536234621,50bab81ee794c110fcddac1b08fe0ae6:1175523496,e055158aae1c811024f33f5c88047133:-1172052618,c4c05d4a1cd88110dfa81ca7fcd8e062:1175523496,758af006945881101b6ec589b607a99d:-943865048,a6f93086b9588110f4b9e8ee0bf52aaf:-1070738577,ae29b44652588110ccada7707f4242f3:65176175,a51e6b317c5481108110293c7a1448bd:-1575941386,64db6b3104548110c13a81b6b9d10edd:1742200267,2f0d5b6d43944110f1019ba19686729d:1095392960,4c7dc7215a54411088af7157090c0dc4:-1130007410,eb1dc721b6544110754bd65035bfe6be:-462221425,408b4b6d6d1441107b8f14ad51365cfc:693165633,2e1b476d5b1441102d86c28725c52a20:-462221425,4dd4432912144110aaac1010a2591778:1135487407,498cba2db6d041107b2313663ebd9984:989563233,c9f7ea651c9041106408827fa842efd0:1632814603,e9eb8141291801107a402b78979a8a3b:1844725757,3afac5cdd0d4011074a7c1a0645e4c67:856802844,f227a4cd16540110263a66d663fff08d:1976713850,9d602009ec54011021423f9eddda11b1:608216148,470fe21c6fb3730034e4acd01adada0d:280064304,1f74e65c05737300f2a8b70948dcf622:141017344,92c2e65c1673730063873f246388b01c:678875932,deb09144a3bb7300118aa76ff67e1cba:280064304,ab809544febb73007fe599a694298a95:1494440481,dfee010475bb7300fbd0c7fe88ef533c:1381773573,5791e17b0d637300cb2c9a4ee9a92c3c:-1969894150,830d55b3d463730046ee46cc04b1c961:-669344185,c06452945d337300944c75a29cc639fd:907799312,dfdf3d40633733008df14512dcf03f91:50681350,921c69841cf3330099dd8a667db905e8:535357156,7741214016f33300def83efe3ed33dc8:863150788,18ac51c8feb33300a09410bd02542e0d:230182039,697bdd88a0b33300697bd2125a3dcb36:-1337519963,a84ba53926a33300209ddd97ff9de9bb:-1331551696,987e9db949633300bb915c9d87adb702:-1204987844,db2385a1cbe37300bc260a3783ac72ce:811441335,76da5021a2637300fce7e72131319331:1740202500,a6b59c2dac2373006f8fa06c237c209d:-985102419,b4ff8c69cd237300dee7521539b677ca:1945066666,243be34d00e33300c0aaad712704d52f:1044321641,45c8e74dcee33300d92e77bb6c43198c:1725016939,965e5bc5f3e33300497838e9132be89a:1753245222,d2a1ee7846a33300260bb049db96da53:364212093,6554e2e6fb13330010c64d50b684d29d:-1394626435,0466eb21e1173300acf1ece0e3649503:1778433155,100e33d0015b3300cf0383108c233e45:1131244627,21a4ff94c31b33005f5e71e277e08f3d:-1075620266,e82ed13c9ac801107547302975cc126e:-411647898,7e9dc1fcc88801100abdb32df5e1a19c:1567832582,6ea16db0582b701036f8a54204fc6189:1135532975,07dc1c6c92e730102d001ba4cba5d6f9:-189094993,ae259680d82b701052dca0dd4edc5a6b:1602311214,84e4de40e62b701028fee03f2efc49ad:-1617296883,60ebc284abe7701055b04f30943f6205:1731675711,ac4b4e8016e77010d3f5d167e370a511:1069318496,d0dd338698973010ce6e96229c148407:456601185,d1bc770631973010ed96b84ff6250918:-735810527,891ef1249f57301040c25b3b65fabcd9:1470773915,4ed80484ca9f30108c5a532263da1c1a:-1015717029,39f64cc0fa9f3010b0c31550b0412b72:-944841963,32c652f7b3033010d6ed21d2b7962609:-1981002383,1ad65f72b90b3010f9a7c280e80965b1:71175648,ec969f72cc0b3010f5d234a4415db1fa:-787161814,19c824027cc330105702e4e5715a2833:181977564,cdb8a0028ac33010e5638a41c059f590:878489733,3948acce988330101607435cbc8f9cb4:181977564,d638accecc8330108174eda2571e031f:878489733,96fb54c67383301028fc98ddfdfa0fcd:181977564,5999d046d58330102e2b3bd220e05f70:-1240321427,611794c2268330104a105ba2c9604614:1330682240,9b1db30dcd3ef01026a1ecae03c2da04:869483494,09f3ae05bb76f01085bd5a162b751294:-1287226192,947201bc6772b01044d0c26ffc61c719:-1676338982,49228ce095b270101c16fb6c21e4023f:100291377,8cba37c0f97630105284c01756e7b83a:1297901649,aa5e04980e7a30102358101574bc36bb:-1977639425,d04b4b43be223010f74ff32c9b0c19a3:89580177,a89bd053086670106b8387b345c68172:-1622356413,38f410d378267010b4dfd2f7992d61bf:1297901649,bffbc4d73ee270100af6d741531aa743:-283218644,96ef7307b2a270108db445f264562c0d:1770879788,7489ffba12a630104b981df93ee94c48:-283218644,59d43fb218a630107c85a7386af8ed71:-386214135,953ee3b64d663010425407552653a27b:719578912,cd2baf32416630108ccd765c46dc8875:-197045120,99bc62a29da670100b7e918270a82c87:-1944227535,2b93871ca66eb010f68ea22fd0ff653a:-1388879811,c76ebad41e6eb010d387cfb0e30b22ea:-1434594629,43c0eadc9eeab0104c928f65c8cfa4d5:323438201,3a32cad4b4aab01089a62e8095144970:-185496997,244b951e6262f0107286bc316c81cbac:-629611778,0b0b911efa62f010a3e75225892036c8:188965628,93b1548eab2a3010aa06881f9b63f59f:442221279,531e488ae02a3010030dd63392f2b958:1858113204,7db8c4468d2a30101b7036634df427d0:6683022,22e7c006ca2a3010dd9c56a9eb440257:1523465003,f14784820b2a3010566cb5eceac7c3c7:-705088097,df1c0fb907a2301079db16c059ba232d:-1375887699,d6a82fe0df2ab0101d5be6c197aa0e9f:-1019751890,1d07f6685766b01036a4612778ae904d:814125057,86c7b91445e2701081d256795aea5845:-185496997,abb1f19cbaa2701003ac015751fc7bca:-1434594629,34ba695492a27010e3ff08f8ddafcd0a:-185496997,19196d901ea27010081b00198075a1a5:-478095717,5fd765509aa27010049c4feae2952b02:-1094659525,df78dddc4e22701056bbd3212b2902c2:-478095717,85d799dcc6227010772a9e2775487eeb:-1094659525,6ec6955ca5227010390e359116058087:1393159355,bcab0990db2270106ff1674c340818eb:854095903,5d7a705098ee3010bd3fdaff14f30d4d:1295778551,1adc70c06e2630103bd5a96b9ef60623:732818390,5eab7080a1263010db2d6d84a88f3c96:555301104,6f968d76ee9af41082bf910e16021c53:1228556162,30a708320692f41053a07886903548b3:-844798282,0e475f5076d2b010d93745c04605c396:51733474,256dc6f706c63010c903f7a053a17ca7:1287472490,e7297457f24230100088e032c023a9d2:-875994977,790304177d4630105a65ca28d5769e71:-888169842,5ade9dde950ab0100c7a9d3c6f36c7ad:768834964,66a094d60846b01041e707f2ed907bad:885101964,0afd6b4ed3c2b010c70ab9b404ad2374:-806694401,c017c00e164a7010252e5f92de9d1fd1:-1413547629,18a03a39604670100899e82846e96f32:1541915399,9d4a66718a467010ed2e677cc813e405:-1589098125,2c09ee3111467010c685bf2a77b583fe:1350531748,7518aef502c270102157a21fac7eb2fb:-1500906667,f7864a3909427010d52e0b7819ecf611:799521308,9b03652d5b423010b413a1f86b58e53c:262245678,31b7859d6306b010e981cc1e47d64817:-952697311,70407499bcc2b010ac9b8f6b34ccc964:-1594004582,3706e89db182b010e747cd9e4d6ca55a:29910427,93912c990f82b010bafd9dd78bd9da83:285554743,9bf66c0d694670102220a5ff3753e88d:1408259077,04c1ac457b4670103000fd98a33dd0a7:-1851191244,bdff330bbf463010f5c51eaed2dbf154:227489425,a0904734b6827410c8ff724094180594:583777009,e0ce7a30158274104eaaf1067d5db300:-1695776868,06c3faf4b542741032b7c4aa2edaa95c:1008082813,1072f674024274105161f29adfa16f5b:353272535,fdcd1980544eb010ebd84451bf4d1b34:1008082813,42bbf3fbcd753010f9ca67119980e039:636595157,c7dd67ffdd353010c302365f09f7b046:982413717,003839a39dfd301083469e550b0891fe:-362548424,e172d2db157530109c575e535adf29d9:-1605362570,297d8e9746753010c0c9b3bbea6f9ea3:205473453,ff04c21fa53530105b28ae7216bf25df:-1502696353,35a3251f49b13010fb6fd2a29af8f1c7:1483777169,b5dd851be3713010f41281c45bcc8e90:630995029,777c78dfb2313010603f22c9118ff397:1183414632,24f9385f19313010063d041df2f5e080:-536901071,63f0376e4d753010ca28cc0ee87da54d:1950651672,290d6ba6f475301027d15d1ddcc61902:-1661788210,9bbb67e2e1753010dde4f5c7396e6077:1206675116,bc996722d17530103b4514606c4b991d:-1630288804,e2476baeeb353010bc0f1e7eddd2cd43:51754812,e542eb6aa83530103ecc98488a4fc512:-1288230358,c6c1676adb3530105cdff1a4c42d702e:-1727538495,8d0ed366613530103b3adfaee044a961:569929523,44db1b62893530104f12e7942ff05d76:-551091724,399a9feeb0f1301004869cd041441ec9:180536586,9f89d76e77f13010d7211fc8b1b5206b:27666623,44079b2a5ef1301097a59ceae24f93ab:-1970997443,ab95972a0ef1301085d3943a6b28af1e:1459156681,63d31726d7f13010ccafc6a8a62dc34e:-1794063134,99f05762bff13010c41bd078ebe3262b:-146210249,60cc872e91b13010dbf000fbf32bc980:1176793343,ecdacfaa32b13010a24dc3f311911851:398214733,f8f8c7e678b130108584d714225c1d8f:-286509012,a4dbac71e2bd701000cf368fb4b31887:244794233,c51fa3e1aef97010c327fca8c73f94c3:555577919,e93d63a1bcf9701097a5b183ff8074df:1572901573,8630ef2931b970101fccdb1d4fbf0ddd:865771422,e7369761dab970100bfeabbccfa2bfa7:-769224553,68c1df6dbb797010bbe651f0db19a0f3:902474542,2b207834eb353010fa29405f40a3d3d7:-939744409,772e5df9ec4930d074055f262473ba8b:-47649525,279f7208868db8909f15cf3475be4976:1376844555,7a17837727b0b890742131731a5d3a81:-1261384886,661503b306b0b89054305b520663ad8e:1991878203,0e538f3370b0b890c9b34009e0d35c47:1491998702,333d91aba93078905366bd8901d2bf31:648314087,42e9192b90307890bd7556519f2f8a0f:899254670,9829681d52853010de3284f12127a847:1017121745,569e578170c13010f85fcab5879ac102:992747923,5e4bab703cf87010a35f78e7404b3757:-1266896063,4d5ae3304bf87010c3c867ee650d8707:-1204814701,b7d52f3c8ab870103f6d8d772a56fa34:1306536178,adf46ff8deb87010451217626f581705:639591283,69542fb8a6b870105022a6a29a5c0651:1473303227,23932bb838b87010e06b9a102e925738:732054622,f3126378fcb870105e0381cd3b5f814a:-1731185869,b3c0aff41cb870106d6b4578b5022719:-934587248,8a2023b442b87010b2f11b6b7b5bbca1:1068534129,85fdef383f7cfc50f96cd3293e9dc5da:341152565,8bbda738747cfc509214eae5aa89a0a3:2123487761,ae9deb38507cfc50b2400334ca2ab24b:-371156355,1f3da738957cfc5033fdaea44621fe18:2123487761,b9281ab42878fc501acb21598213fc45:31786207,5ee416344478fc5030c688bda80f894f:-1886751361,4ffaafe732e0f4500b84bca0ec9d280e:639591283,842c821be36c745010361deea0dbd1dc:-1688443158,d5c629d7146874502bcdd282dd294d21:-1253330838,5150e9d3cfac3450c099961f3ff5813c:781580788,935115df17a83450b0ea703e05864757:-1203260297,8453654fa7ecf0504d94160e8b280bdb:-315979628,927634c3cf2cf050159b1b47f8c5f75b:-1932582975,1a80740fb1e8f050863286f0b7f19779:-1733693033,d0ce683a0c60b05045e65cd2b962d37c:-1966449999,aa18828affd53010fbd00bfa2689137f:-1977263151,538b7142a6d530100a5a652f188370f7:1675492567,677c7c0630d130106b6922b12847656b:154779377,b7da78c2e0d13010865f6614dfe46569:1905900141,2aebc438d9553010aa8b802973c30bba:1596063504,717a00745a5530104fce55cda1cce525:-649705009,ac8ff768fd153010b1ca748bff5915a6:160827214,ab973be0c1153010306708b9fecf4878:1802929685,ea7d7b90d5597010de6aef84a44826b1:745419558,9a5cca8892d5301058fcca14e7ae8d31:-932151725,84813d08ac553010ce57a29b4874027c:834656827,6aaa21c854553010c862d648ead3eadb:211925568,d677a98488553010ee5acc2db8ae1188:1684615242,914ebc671609b4109d3cb86aa00276e4:699650821,e434f31f6505b410a9ae2dc1afa06d1d:747192559,cbf2f29a9801f01096654f72a2bace59:-894758934,244654925e89b010a65eb54cdfa19c74:1519789641,470e7ece69c1b010cfe11ec69e408425:1821332375,cfcaf20a10c1b01029968ccec1d2f1a9:1961136125,64d932ce83c1b010bfc5f83f5274678d:-210893079,70927065a2c93010a2e5b00a1a86fc17:-1683239988,4341446579453010decf3a1b08aeb82f:-896456924,a61eb7dd5e053010da87bdd541048f76:1867817956,52e309f6aac4bc109b634cce241323e4:-1164771172,2f83493a14c4bc10a3193bd9a1fe5700:-1785983923,189f08fe9cc0bc105032da0bc7749497:484367703,74ea0f2ecfcc7c10138247c15ca236b3:653844417,56a536224fc07c1001c2cb9d7e381cc0:1854644139,3a4a7a9650083c10c2d6e2a750165773:-1651728514,abbb987db5487810574e9b37df1619ed:213554611,0705d435c04878108b46bed693923961:-1647332622,5ddd00f9fc087810d3f6d7c1f9174ace:16459002,f3b67fedad047810caaa77f8672b595f:-1183035278,fadf222102c8f41011ef0bdc7f9725f6:1582148719,16a7de61bb08f4109bf2ce38855191ad:-1968237729,f47553d9aac4b4106e2f2e13be85082b:-1394259762,b2a0ad11b500b4104eb069ed214419f0:500803982,f7ea0ce42e08f010b6b1c88e69fea749:1820385952,017a33100c08f01072d6343d2ffafb50:1306971744,10ec83c4e848b010f292c978da116ec3:1286648248,84a083cc4d08b010a9097d949f7a1cbc:155489049,ef712608d4c4b010a98a2db971f19035:-2141390013,ad79b5c4bcc0b010ed9198a47f269d8c:1644289389,2559bd009fc0b0108f4f6f6e8dc62a42:43605913,f1c339c071c0b010b93617862211448f:1644289389,1c517d401dc0b010572998b495f7c9c0:-1351097034,ed2291cb4ded241013131dfee3ed461b:1055099831,3953b9cef365a010879f0e61063d4c69:-1189841817,212d2cc80b332300b37707f308e476c1:1474472888,f59628442833230071a89ca6b270db68:1965922265,6ba2a04459332300ca516c1c7858641c:1972821307,d1f91d282127230047fb7bb529b251aa:1875771069,9eb751580623a300728067ec014302b1:735878130,b8bb45103323a300eeb03b9d3723b0a4:2106653218,5f29c95c80ef6300bd14f3f931fa2778:-1905033145,459e8c1c886f63001e5629fe3f399576:6470929,3441c0d0746f6300f6a24017558e6142:1065809142,e0e04490ea6f63009b31fe085a3eaac5:-1024757928,8b8f73c0506f6300fe2f5e3dd5f26376:1406690245,99661f48fdeb63007af502f7381a2bca:-2100029723,c2e17fd7a0fc60100b2c969d15cb9faa:-596981149,f8efe5de95c4a0106fd1b0496026b898:205606953,132e5d1234c4a010bf43a33447b8b39d:-960065880,67bb115eba84a010eadba7979b589813:-21633336,2217d5960b84a0107a5915252dc95b43:1740580877,a6235152e084a0103c33be1f72c3d471:1705107376,9100595a9144a01067ac626f449643cc:-1649855386,9f41499e6504a010f5dd1ee0e278f2bc:1265128700,79cdf146170c60102eeec4d465c7533c:1994581026,5ca73d8eeec86010251b88407087d45d:-1004091363,d7f4f1caa8c86010968c7995dc3be964:935160829,9542350ae5c860101e19fa5a820eefdc:-2130383463,786524427a846010479d5816caf764e5:511704233,14e4684a9844601081b0d4a5d7d885d7:871484670,fad9dc0a484460100bb8a798c573f3cb:-298300494,fcc8900a5744601023d143c315e5a286:1290917975,d9179446d0446010df7ea0068fd3c44b:405614430,b94558c2fb446010dcf7d4febd79b3c3:871484670,fc22d082784460103db73bb425fcf4ac:605359006,1dab840e81046010a1e5ec9fa8115a49:1393768782,c96868b9c1482010e244fd9ac1d53f2a:2121208221,a6981cf5f2482010e6d46b133ba1ba33:1050941749,4184112da4709010023afd0e8912e206:-1304121442,59427715a97c5010253d3162c09cd605:1672077125,0e1c9bc9bd70501026072e2fce04603f:-1696037193,0ef9aac54ffc10109e275ed6d9537e16:-1510549871,16f1d768e9e45410bfef2650e98cae0b:-821684643,0bc5329450a814104c71f33c0add4964:1729157361,39a3ba5432a814103e75e7d88e0f250a:1134027802,9680b21090a81410979ddd72407eef45:1343230461,c26b715c286414101b04e2c8a3da224e:-792562923,cc36bd94f9641410b6794fd209216816:-1031812228,a3cc68845f28d010874bdc545005556f:-421654938,721fa83d362f28108363497ea8f356a7:1157360293,eedd47e9cd27681020d0c90f90a37fe2:-1990655154,6ab8f6a1cce368109583e4533fc6b283:-1266365220,34c67229dca36810558c2a469fe9896c:87151291,b484baa1d26368109245e2c89995a749:-512811207,32b106957aebe4104796d2010939ae05:-405231282,b1d5d515f9e7a8505fb188c4af8b231b:132657891,4b9cd85549a3a850d093933c9f95ac6e:507366021,4713200d87af2850b32d4af94ad3685e:1440960590,ecc0a8c5c3af2850d0dee44408f80dc6:-1993900778,9a0d94cd8b6f2850ab2282139c4043b3:1306150294,53db9c0da16f2850975b01f53935e2c3:-1583125994,ee8a90c9a36f28505f9551f8e0291146:214031638,ce455045346f28502af2b491b00c40d2:-1624668436,fe9314c15a6f2850303675024d31ce43:1826400305,cb3d0489bf2f28501ad5297df59c16f0:1951564893,7fb984c5c72f2850cbecba977910bd81:-582875435,5918c445782f2850bf433cf2e694fdb4:-2108094509,44b48c01ab2f2850ad95267705577198:1893397508,2d1208cd7aeb2850fb5d2da4f729c118:-1733382002,d7eebbf8d1eb2850e298505166ab0782:-521504728,236d73f4b4eb2850a2b24fd829505b9b:-935469780,249b77b466eb285032c9bdab68c60e92:1682391145,e4f93fb0efeb28502a575d94bbf30e4a:1651276655,ae95f330e6eb2850195124c16bbf7d55:-462100539,8364b7bcbdab2850fbfddf7e687580a2:256920279,115c40b804232850c1183477545117c4:-1255463558,474b80f4422328509d269696e92b8fc9:340943639,80d5487891efe450671e0718b9dc66f9:100882704,dc2fb3e44dafe450c313c30cab4b9521:340943639,1f2bd7a003e7e450e6eb129df63cb2b4:100882704,2347d72809a7e450b1af51331bb6ec9a:668987982,d434136403a7e450786ef1ba30daa5e5:22389811,8362d36c0667e450e606de1d0fed92cd:667012180,b22c215405af6450cd40778e814ebf8e:1833007974,491ba9d04eaf6450a3bff18d4aa5c854:1827052757,2385a9dcdb6f645041aafb2b65708083:-1034692083,6af3695c546f6450cfeb59a611a82cea:618212707,90f2a1d82c6f6450daa19525e8f3aa8a:987303739,fbc305a70d1fe050a42e952e1d40137f:1833007974,efc470eb29dbe0505fa96e6c4b906f9d:-1416969524,b87914ab385be050fd5e0f557aaf7b9b:117290690,a45773d7fcd7e050ed9751160a9dbbd8:1912824130,b6367b57d0d7e050dc14e992f47a8f7f:-836145166,2fe4b757eed7e05070529c2f42af0735:-1258053161,c6c29fdf2117e0501ffd8693aae415e6:1659772540,d7dd4f976c17e0504b8c1e2a3b70fec1:-1280678162,33fb0f974217e050eaa9ee1d0299cc2b:-113263504,5a848b9b67d3e0505785827e25d3baff:1659772540,faf3c39bb0d3e0507162945b56e6e625:1493245432,b8d2c5d575dfe01034fc2d3e54575de4:158990900,809a7c1de91fe0102128764dca7dd8eb:834025564,b9ed9bc965df24503629bc7f741aebd1:-1993524322,64b8d789bfdba01036b2502b2c0ebf9d:-1915626394,bbdd9388a15f2450e65b1273479d3467:-141594718,93becf4c071f2450ff28c82bf47befd4:-1050357894,26f17a44dddb24507c6f4aa652eda058:1224266282,24448ebaa7cf2050d41d3bd8653ca0ec:1218027852,1e08766288cbac1083086ef2e1aaa936:-1936212047,ec194aaead0bac10ff520a2297801186:1739986338,838d084dd143281079ac392fd6cff77a:-1927416986,0d6ccc0d69432810c5633ca896acfbdf:911724301,fc93efbc1ccfe410e6b35bed6dd35ea3:554908490,43af97b892cfe410ac07c2d5a377a938:1472524450,f26d93345acfe4102a7645a71749e0b7:641264607,b62b17bc0e8fe410fbf8235e5b30a2a3:-631008750,46ca5bfcea8fe4100b53e4584f3088d1:733467951,779893bc868fe410329a4304c36475dd:-96592498,7d56dfb8418fe4100a134622b1f0f21c:2007383658,a4dc9c38c287e41056a7a8d6e7224d0b:-586159130,613adc743a87e4104cc68ece7ba2c209:-1475190068,d258b32c0cc3e4108a90204ad156188c:-886329138,65925ad0cd83a410fe02d069c36aca23:-305273394,ff487d98bb03a4105211c9208e116b75:1364124702,ff65f554a903a41066a05948e9db84ef:-980442061,d6747118fe03a410c555457408fe282a:-895676518,712f0598f08b64106dbb4264b101f5fd:1004114738,d2c691cca54be0107658ba5e0a8765bc:697515414,f4afbc88ee0be010b87459a5867f6a52:-1313523081,3dcdc8886107e0100313a90e7004002b:-564455622,7d523ffb3ab2e010c0acb8c8b59af4f8:440669397,862a8fbbb0bea010a627a3fe66541f17:1185386627,7289837f9bbea010447b6a21430ebe35:1117790567,18fdbc7f913aa010e5d49fc89cdaf187:-173041377,2b3a4dfe053ee4508d9d386aef728b50:429861134,4655c53ac73ee45006d10b55b1939580:-161288432,25adf8b2a73ee4502e41a54d8dd03a47:-478890791,0386b0b2bc3ee450deb6f19e1c469307:938936195,6023307ed9fae450dca129054dc8cdf2:-478890791,22a17cfa36fae45030f4ae11384943dc:-2097323161,f930343ac7fae450d4d51a270f7bd6ed:-1580751824,f725c4ba187ae450741531718b6f6c1a:-161288432,29fd33660b7ae450bcec80d14f5282a5:-914290836,38e9dad2ad3a6450fa340c0f764880f0:-161288432,6347569a3df664507579f137d74d3a28:-350190014,4306965ef8f66450044c423808fa187a:429942047,155871363d62e410be96e4af0745af83:550277159,b3b3713a0422e410036cbae8dadf1443:137480909,9f3cc63c1d4e2b00438236adba734174:-1120900491,f7303320e1822b00177d2c1680536996:-1500211880,561ea7accf422b0027fe031da348653e:500570330,bb6d276c7f422b004f97230988beb4a8:-942158918,fe4a63e8c4422b00a591c7a2e5aeb8ad:-697012778,7ff910d4524ea70047ba5af7ca42c234:-1047898512,c41276e7e77d2700a63880e71adb3d79:-141350877,f60f995b8871e30086dbc880cf48b609:1513819955,79fcd9d77971e300fb4dcefdd37d2d70:1482287239,8939d113a371e300a34a11c1834498df:-534529906,d1786fe472422b002c6aeafe5bf5ee5e:-1040130432,6c536b6423422b006906a3929284b7c9:1886024193,8befd3e06c422b00145ece7eee2a5441:15587755,d41121d46542e7001a1b7f8a23aaafdc:-1800816530,c36f4c01c744a010bc272dec8b6d51b5:-1992233950,3248880d3b04a0103c45025bd26de8a7:-1833017365,e5ef7026ad6f54109779aa46c92e7e55:1616147809,3b597156de675410891a2698dcd4ca07:1468196792,3a2bad867d2b1410d9dac4514743f219:1772913191,feaaad86952b1410317f8f1d658bbcec:-1254919706,23abdcf57ce7d0103c5b5edb4a71aecf:1764433557,59ea94b5f8e7d010ea8299fd9e75887a:-753471165,93730c714ea7d01077140b51ed4d3cfe:-751229948,77330c71fea7d01062b3c14a819bdef8:542176913,2d6a3ba93b67d0101ce0751dc9ea10bb:1448084201,da653b658267d01034ab5c3def396063:542176913,473373254567d0105c3b1d5171ac2c28:1792133874,fb2cabadc727d010b24700d423a62928:-250492030,f5d6f9a5622f10108080bf8d18a618e1:-1645470349,4c138a5c86a758507f8695f2ca83325f:493161386,61eb4977269b50103dbf4b75ddab8a94:1504385365,3f160d33ba9b501032911850aafc408c:-914725237,60bbb4f7135b5010139930b83d0f207b:302458098,1313fc7f4b1b5010290277d3432a814d:-1911876119,2e4f24fb791b5010717da4595e2887eb:1219622821,e7335873bad750105bbe533f70a032da:-1485932751,e22272af6c53501074adbbd31a2402e1:-419111573,01cd622b425350104ca81c4ce6702148:2118911264,517f962f52135010fee974753b88da65:-1065961815,73fe802318db10109541fb8132f18c71:1216174146,338c8c2f2e9b1010c1e2abbabf9b4a9e:385987718,2b607c3f3d1bd450d6a922f1a4575363:1523216832,7549e03bb01bd45064bb456b3f447cac:-234921222,1ad5e477941bd4501fa785ac9534364f:-1592605335,7c9ed4bf0fd7d450b49787418fec7828:576627197,a18b44b31cd7d4502e49c3aec3e3b008:1688714709,29fc787908571410876a9e22fdf8619b:583337574,99ede14147d75010274002e989ce77dd:120880822,99ede14147d75010274002e989ce77dd:120880822,01c4a1c54a9750105fa35fd8aab0baed:439881143,a6ce9501d897501054a59a0567ac42d6:836513344,899170788d135c10d5b177180dc24a61:640050117,dd603cf4d0135c107aca48f5373ec5de:-303458123,6bf7acfc55df1c10154465dc91375f6c:-115022120,3c6fd87432df1c1034cc3d6d0bc942a0:1081999118,723c107081df1c10d6e31ff5f045018f:-870727260,481154b8dc9f1c100703c7b5d3372204:383365488,173ce7e407db1c106aece7ae472767cd:-567547525</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_ui_script_b7e56ae437a12300fdfc097973990e63</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ui_script"&gt;&lt;sys_ui_script action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;description/&gt;&lt;global&gt;false&lt;/global&gt;&lt;name&gt;x_nuta2_nutanix_ca.Calm_Catalog_Variable&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var $j = jQuery.noConflict();
var trigger_array = [];

function render_variables(answer){
    var profiles = g_form.getValue('multiple_application_profile');
	var noProfileVar = [];
	var array_profile = [];
	if(g_form.getValue('no_variables_for_profile')+'' != "[]")
		noProfileVar =  JSON.parse(g_form.getValue('no_variables_for_profile'));
	console.log("noProfileVar :"+noProfileVar);
	console.log("Profiles: "+profiles);
	console.log("Profiles length: "+profiles.length);
	if (profiles.length != 0) {
		array_profile = profiles.split(',');
	}
	console.log("array_profile:"+array_profile);
	console.log("array_profile:"+array_profile.length);
	var profile_html = [];
	console.log("profile_name_sys_id :"+g_form.getValue('profile_name_sys_id'));
	
	
	if (profiles != null &amp;&amp; profiles.trim().length == 0 &amp;&amp; (g_form.getValue('type_of_blueprint') == 'runbook' || g_form.getValue('type_of_blueprint') == 'published_runbook')) {
		array_profile = [];
	} else {
		var selected_profile = JSON.parse(g_form.getValue('profile_name_sys_id'));
		console.log("selected Profile : "+JSON.stringify(selected_profile));
	}
		
	for(var n=0; n &lt;array_profile.length; n++){
		
		if(noProfileVar.include(array_profile[n])){
		var json ={
			"profile" : array_profile[n],
			"html" : "&lt;span style=\"padding: 10px 15px 10px 15px; display: block; background: #e6e8ea; font-weight: bold;\" data-toggle=\"collapse\" data-target=\"#"+array_profile[n]+"\"&gt;&lt;i class=\"fa fa-plus\"&gt;&lt;/i&gt; "+selected_profile[array_profile[n]+''].name+"&lt;/span&gt;&lt;div id="+array_profile[n]+" class=\"collapse\"&gt;&lt;p style=\"padding: 10px 15px 10px 15px;\"&gt;No variables are defined for this profile.&lt;/p&gt;"
			};			
		}
		else{
		var json ={
			"profile" : array_profile[n],
			"html" : "&lt;span style=\"padding: 10px 15px 10px 15px; display: block; background: #e6e8ea; font-weight: bold;\" data-toggle=\"collapse\" data-target=\"#"+array_profile[n]+"\"+&gt;&lt;i class=\"fa fa-plus\"&gt;&lt;/i&gt; "+selected_profile[array_profile[n]+''].name+"&lt;/span&gt;&lt;div id="+array_profile[n]+"  class=\"collapse\"&gt;"
			};
		}
		profile_html.push(json);
	}
	var str = '';
	
	if(answer &amp;&amp; answer!="{}"){
		var variable_data = (answer)?answer:g_form.getValue('variable_data');

		variable_data = JSON.parse(variable_data);

		var k = 0;
		console.log("Variable DATA :  "  + answer);
		for(var i in variable_data){
			var row = variable_data[i];
			
			if(row.isHidden + '' == 'true')
				continue;

			var check ='';

			if(row.runtime_config==true || row.runtime_config=='true')
				check = 'checked="true"';

			var setVal = "onchange=\"setVal('" + i +"', this.value)\"";
			var setRun = "onchange=\"setRuntime('" + i +"', this.checked)\"";

			var fieldType = (row.data_type+'' == 'SECRET')?'password':'text';
			var placeHolder = (row.data_type+'' == 'SECRET') ? 'placeholder="*******"' :'';
			var isDisabled = (row.isdisabled+''=='true')?'disabled':'';
			var mandatoryAttr = (row.mandatory+''=='true')?'required':'';
			var isCheckBoxDisabled = isDisabled;
			var secrate_variable = (g_form.getValue('profile_secret_variables'));

			var dependsStr = 
				(row.field_json.all_dep.length != 0) ? '&lt;div style="padding: 5px 1px; margin-bottom: 10px; background-color: #e8f0fa; color: #007eff; position: relative;"&gt;Depends on ' + (row.field_json.all_dep.toString()).replaceAll('_' + row.application_profile, '') + '' + (secrate_variable.includes(row.field_json.all_dep.toString()) ? ' value is secret and therefore not displayed &lt;/div&gt;' : '&lt;/div&gt;') : "";
			
			if(row.data_type == 'EXEC_LOCAL' || row.data_type == 'HTTP_LOCAL' || row.data_type == 'EXEC_SECRET' || row.data_type == 'HTTP_SECRET') {
				isCheckBoxDisabled = 'disabled';
			}
			var GWT_calm_format = {'DATE_TIME':'yyyy-MM-dd HH:mm:ss','DATE':'yyyy-MM-dd','TIME':'HH:mm:ss'};
			
			var spn = '';
			
			var inputType = '';

			if(row.data_type+'' == 'SECRET')
				spn = '&lt;span class="field-icon toggle-password glyphicon glyphicon-eye-open spanField'+k+'" onclick="tooglePassword(\'field'+k+'\', \'spanField'+k+'\')"&gt;&lt;/span&gt;';

			if(k%2==0)
				str = str + '&lt;div class="containerStart"&gt;';

			if(row.type+'' == '5')
				inputType = '&lt;select ' +placeHolder+ ' ' +isDisabled+ ' class="inputText field'+k+'" ' + setVal +' '+mandatoryAttr+'  id="'+row.uuid+'"&gt;'+_option_handler(row)+'&lt;/select&gt;';
			
			if(row.type+'' == '21'){
				
				inputType = '&lt;div&gt;&lt;div id="span-'+row.uuid+'"&gt;&lt;/div&gt;&lt;select ' +placeHolder+ ' ' +isDisabled+ ' '+mandatoryAttr+' onchange="selectOption(\'addOption\',this.value, \''+i+'\')" class="inputText field'+k+'" id="'+row.uuid+'"&gt;'+_option_handler(row)+'&lt;/select&gt;&lt;/div&gt;';
			
			}
			if(row.type+'' == '9')
				inputType = '&lt;span class="input-group"&gt;&lt;input type="text" id="'+row.uuid+'" class="form-control" ' + setVal +' style="background-color:white;" ReadOnly="true" value="'+_option_handler(row)+'"/&gt;&lt;span class="input-group-btn"&gt;&lt;button class="btn btn-default" ' +isDisabled+ ' onclick="new GwtDateTimePicker(\''+row.uuid+'\', \''+GWT_calm_format[row.val_type]+'\', false)"&gt;&lt;span class="icon-calendar icon"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;/span&gt;';
			
			if(row.type+'' == '10')
				inputType = '&lt;span class="input-group"&gt;&lt;input type="text" id="'+row.uuid+'" class="form-control" ' + setVal +' style="background-color:white;" ReadOnly="true" value="'+_option_handler(row)+'"/&gt;&lt;span class="input-group-btn"&gt;&lt;button class="btn btn-default" ' +isDisabled+ ' onclick="new GwtDateTimePicker(\''+row.uuid+'\', \''+GWT_calm_format[row.val_type]+'\', true)"&gt;&lt;span class="icon-calendar icon"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;/span&gt;';
			
			if(row.type+'' == '2')
				inputType = '&lt;textarea ' +placeHolder+ ' ' +isDisabled+ ' '+mandatoryAttr+' class="inputText field'+k+'" ' + setVal +'  id="'+row.uuid+'"&gt;'+_option_handler(row)+'&lt;/textarea&gt;';
			
			if(row.type+'' == '6')
				inputType = '&lt;input type="'+fieldType+'" ' +placeHolder+ ' ' +isDisabled+ ' ' + setVal +' '+mandatoryAttr+' class="inputText field'+k+'" id="'+row.uuid+'" value="'+_option_handler(row)+'"/&gt;';
			
			if(row.type+'' == '25')
				inputType = '&lt;input type="'+fieldType+'" ' +placeHolder+ ' ' +isDisabled+ ' ' + setVal +' '+mandatoryAttr+' class="inputText field'+k+'" id="'+row.uuid+'"/&gt;';
			
			/*if(row.type+'' == '25') {
				inputType = '&lt;input class="inputText field'+k+'" type="password" value="' + row.value + '"' + setVal +' '+isDisabled+'&gt;';
				spn = '&lt;span class="field-icon toggle-password glyphicon glyphicon-eye-open spanField'+k+'" onclick="tooglePassword(\'field'+k+'\', \'spanField'+k+'\')"&gt;&lt;/span&gt;';
			}
			else if(row.type+'' == '21' || row.type+'' == '5') {
				inputType = '&lt;select id='+row.uuid+' class="inputText field'+k+'" '+ setVal +' '+isDisabled+'&gt;'+_option_handler(row)+'&lt;/select&gt;';
			}
			else {
				inputType = '&lt;input class="inputText field'+k+'" type="text" value="' + row.value + '"' + setVal +' '+isDisabled+'&gt;';
			}
			*/
			var desc = '';
			if(row.description != '')
				desc = '&lt;div style="padding: 5px 1px; margin-bottom: 10px; background-color: #e8f0fa; color: #007eff; position: relative;"&gt;'+row.description+'&lt;/div&gt;';
			
			var htmlStr = '&lt;div style="padding:15px 40px;"&gt;&lt;div style="padding:1px 1px 12px 1px; width: 100%"&gt;&lt;span style="float:left;"&gt;&lt;strong&gt;' + row.question_text + '&lt;/span&gt;&lt;/strong&gt;&lt;span style="float:right;"&gt;&lt;input class="inputCheckbox" style="margin-right:2px" ' + setRun + ' type="checkbox" ' + check + ' '+isCheckBoxDisabled+'&gt;&lt;/input&gt;Runtime &lt;/span&gt;&lt;/div&gt; &lt;div style="padding-top:14px;"&gt;'+desc+' '+dependsStr+' '+inputType+'&lt;/div&gt;' + spn + '&lt;/div&gt;';

			//str = str + htmlStr;
			for(var u=0; u&lt;profile_html.length; u++){
				if(profile_html[u].profile == row.application_profile){
				    profile_html[u].html = profile_html[u].html + htmlStr;	
				}
			}

// 			if(k%2!=0)
// 				str = str + '&lt;/div&gt;';

			k++;

		}	
	}else{
		str = "&lt;p style='padding-bottom:20px'&gt;No variables are defined for this profile.&lt;/p&gt;";
	}
	$j(".bodyData").html('');
	var str = '';
	for(var a=0; a&lt;profile_html.length; a++){
		str = str + profile_html[a].html +'&lt;/div&gt;';
	}
	jslog("Final HTML body : "+str);
	$j(".bodyData").append(str);
	
	jslog(JSON.stringify(variable_data));
	onChangeTrigger(variable_data);
		_createDependencyJSON(variable_data, "onLoad");
	new GlideModal().get('loader').destroy();
		
	var second_var_run = JSON.parse((answer)?answer:g_form.getValue('variable_data'));
	
	for(var j in second_var_run) {
		if(second_var_run[j].type + '' == '5')
			$j("#"+second_var_run[j].uuid).val(second_var_run[j].value);
		if(second_var_run[j].type + '' == '21')	
			selectOption("initrun","", j);
	}
	
// 	jslog(JSON.stringify(variable_data));
// 	onChangeTrigger(variable_data);
// 	_createDependencyJSON(variable_data);
// 	new GlideModal().get('loader').destroy();
	
}

function selectOption(type, multiValOption, key) {
		//alert("selectOption ::: " + type + multiValOption + key);
    multiValOption = unescape(multiValOption);
    var variable_data = JSON.parse(g_form.getValue('variable_data'));
    var row_uuid = variable_data[key].uuid + '';
    var tmp_array = (variable_data[key].value != '') ? variable_data[key].value.split(',') : [];
	var options = variable_data[key].options;
//	console.log("==variable_data "+variable_data+" row_uuid "+row_uuid+" tmp_array "+tmp_array);

    if (type == 'addOption' &amp;&amp; tmp_array.indexOf(multiValOption) == -1 &amp;&amp; multiValOption != '') {
        tmp_array.push(multiValOption);
        $j('#' + row_uuid).find('option[value="' + multiValOption + '"]').remove();
    }

    if (type == 'removeOption' &amp;&amp; tmp_array.indexOf(multiValOption) != -1) {
        var index = tmp_array.indexOf(multiValOption);
        if (index &gt; -1) {
            tmp_array.splice(index, 1);
        }
        var option = '&lt;option value="' + multiValOption + '"&gt;' + multiValOption + '&lt;/option&gt;';
        $j("#" + row_uuid).append(option);
    }
    if (type == 'initrun') {
	//	console.log("inside initrun");
        for (var k = 0; k &lt; tmp_array.length; k++)
            $j('#' + row_uuid).find('option[value="' + tmp_array[k] + '"]').remove();
    }

    variable_data[key].value = tmp_array.toString();

    g_form.setValue('variable_data', JSON.stringify(variable_data));

    var spanOptions = '';
    for (var i = 0; i &lt; tmp_array.length; i++) {
		//alert("tmp_array ::::  " + tmp_array[i]);
		/*if(options.indexOf(tmp_array[i]) == -1)
			continue;*/
        spanOptions += '&lt;div style="display: -webkit-inline-box; margin: 3px;"&gt;&lt;span class="list-options" style="margin: 3px; padding: 5px; border: 1px solid rgba(0, 126, 255, 0.24); line-height: 13px; font-size: 12px; display: inline-block; border-radius: 2px; background-color: rgba(0, 126, 255, 0.08); color: #007eff;"&gt;' + tmp_array[i] + '&lt;a href="#" onclick="selectOption(\'removeOption\',\'' + escape(tmp_array[i]) + '\', \'' + key + '\')"&gt;&lt;i class="icon-cross" style="padding-left: 7px;font-size: 11px;margin-top: -4px;"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;';
    }
	
	//alert("spanOptions   ::::: " + spanOptions);
    $j("#span-" + row_uuid).html(spanOptions);
	var var_name = variable_data[key].name + "";
	//console.log(var_name);
	console.log('trigger_array: '+trigger_array);
	jslog('name: '+var_name);
	if(trigger_array.indexOf(var_name) != -1) {

		_createDependencyJSON(variable_data, var_name);
	}
}

function onChangeTrigger(var_data) {
	for(var i in var_data) {
		if(var_data[i].field_json.all_dep.length == 0)
			continue;
		
		var all_dep = var_data[i].field_json.all_dep;
		//console.log('trigger_arr '+trigger_array);
		//console.log("***all_dep : "+all_dep);
		trigger_array = trigger_array.concat(all_dep);
	}
}

function macroReplace(yup, value) {
	
	var macroVar = "";
	if(value.startsWith("@@{") &amp;&amp; value.endsWith("}@@"))
		macroVar = value.replace("@@{","").replace("}@@","");
	
	var form_data = JSON.parse(g_form.getValue("variable_data"));
	for(var i in form_data) {
		if(form_data[i].name + "" == macroVar)
			value = form_data[i].value + "";	
	}
	
	$j("#"+form_data[yup].uuid).val(value);
	
	return value;
}

function setVal(yup, value) {
	value = macroReplace(yup,value);
	var variable_data = JSON.parse(g_form.getValue('variable_data'));
    variable_data[yup].value = value;
    g_form.setValue('variable_data', JSON.stringify(variable_data));
	var var_name = variable_data[yup].name + "";
	if(trigger_array.indexOf(var_name) != -1) {
		console.log('line265 ');
		_createDependencyJSON(variable_data, var_name);
	}
    //_validateField(yup, value);
}

function setRuntime(yup, value) {
    var variable_data = JSON.parse(g_form.getValue('variable_data'));
    variable_data[yup].runtime_config = value;
    g_form.setValue('variable_data', JSON.stringify(variable_data));
}

function responseParse(response) {
    var answer = response.responseXML.documentElement.getAttribute("answer");
    g_form.setValue('variable_data', answer);
    render_variables(answer);
}

function getProfileVariableData() {

    var loadingDialog = new GlideModal("loader", true);
    loadingDialog.setTitle('Fetching Variables...');

    var val = g_form.getValue('variable_data');

    if (val) {
        render_variables(val);
        return;
    }

    loadingDialog.renderWithContent('&lt;div class="loading-container"&gt;&lt;div class="loading-indicator icon-loading icon-lg"&gt;&lt;/div&gt;&lt;/div&gt;');

    var type = g_form.getValue('type');

    var project = g_form.getValue('multiple_project');
   var blueprint = (g_form.getValue('type_of_blueprint')+'' == 'runbook' || g_form.getValue('type_of_blueprint')+'' == 'published_runbook') ? g_form.getValue('runbook'): g_form.getValue('blueprint');
	var application_profile = g_form.getValue('multiple_application_profile');
	var cat_item = g_form.getValue('cat_item');
	var delta_profile = g_form.getValue('delta_profiles');
	
    var ga = new GlideAjax('Nutanix_ClientServerScriptBridge');
    //	ga.addParam('sysparm_name', 'getProfileVariableDetails');
    ga.addParam('sysparm_name', 'noProfileVariableDetails');
    ga.addParam('sysparm_project', project);
    ga.addParam('sysparm_blueprint', blueprint);
    ga.addParam('sysparm_application_profile', application_profile);
    ga.getXML(ParseNoProfileVar);

	function ParseNoProfileVar(response) {
		var answer = response.responseXML.documentElement.getAttribute("answer");
		g_form.setValue('no_variables_for_profile', '');
		g_form.setValue('no_variables_for_profile', answer);
	}


	var ga = new GlideAjax('Nutanix_ClientServerScriptBridge');
	//	ga.addParam('sysparm_name', 'getProfileVariableDetails');
    ga.addParam('sysparm_name', 'getMultipleProfileVariableDetails');
    ga.addParam('sysparm_project', project);
    ga.addParam('sysparm_blueprint', blueprint);
    ga.addParam('sysparm_application_profile', application_profile);
	ga.addParam('sysparm_cat_item', cat_item);
	ga.addParam('sysparm_delta_profiles', delta_profile);
	ga.addParam('sysparm_type', type);
    ga.getXML(responseParse);
}

function tooglePassword(field, fieldspan) {
    var input = $j('.' + field);

    if (input.attr("type") == "password") {
        input.attr("type", "text");
    } else {
        input.attr("type", "password");
    }
}

function _option_handler(arr_json) {
	
	//console.log("PRINCE &lt;&lt;::::::&gt;&gt; " + arr_json);
    var options = '';
    if (!(arr_json.type + '' == '21' || arr_json.type + '' == '5')) {
        /*if (arr_json.data_type == 'EXEC_LOCAL' || arr_json.data_type == 'HTTP_LOCAL' || arr_json.data_type == 'EXEC_SECRET' || arr_json.data_type == 'HTTP_SECRET') {
            _setRequestValues(arr_json);
        } else*/
            options = arr_json.value + '';
    } else {
        /*if (arr_json.data_type == 'EXEC_LOCAL' || arr_json.data_type == 'HTTP_LOCAL' || arr_json.data_type == 'EXEC_SECRET' || arr_json.data_type == 'HTTP_SECRET') {
            g_form.addInfoMessage('Fetching values for variable "' + arr_json.question_text + '"');
            _setRequestValues(arr_json);
        } else {*/
            options = '&lt;option value=""&gt;&lt;/option&gt;';
            for (var i = 0; i &lt; arr_json.options.length; i++) {
				//console.log("AMIT KOLKAR ::: " + arr_json.options[i]);
                options += '&lt;option value="' + arr_json.options[i] + '"&gt;' + arr_json.options[i] + '&lt;/option&gt;';
            }
        //}
    }

    return options;
}

function _setRequestValues(pre_map, str) {
	console.log("PRE MAP   " + JSON.stringify(pre_map));
	new GlideModal().get('loader').destroy();
	
	var loadingDialog = new GlideModal('variable_loader', true);
	loadingDialog.setTitle('Fetching variable values...'); 
	loadingDialog.renderWithContent('&lt;div class="loading-container"&gt;&lt;div class="loading-indicator icon-loading icon-lg"&gt;&lt;/div&gt;&lt;/div&gt;');
	
	var type = g_form.getValue('type_of_blueprint');
	var blueprintSysId =(g_form.getValue('type_of_blueprint')+'' == 'runbook' || g_form.getValue('type_of_blueprint')+'' == 'published_runbook') ? g_form.getValue('runbook'): g_form.getValue('blueprint');
	console.log('blueprintSysId:: '+blueprintSysId);
	
	var gajax = new GlideAjax('Nutanix_ClientServerScriptBridge');
	gajax.addParam('sysparm_name', 'getHttpValues');
	gajax.addParam('sysparm_type', type);
	gajax.addParam('sysparm_str', str);
	gajax.addParam('sysparm_parentUuid', blueprintSysId + '');
	gajax.addParam('sysparm_preMap', JSON.stringify(pre_map) + '');
	gajax.addParam('sysparm_profile', g_form.getValue('multiple_application_profile'));
	gajax.addParam('sysparm_env_profile',g_form.getValue('environment_profile_pairs'));
	gajax.addParam('sysparm_env_sysid',g_form.getValue('environments'));
	//gajax.addParam('sysparm_bp_sysid',g_form.getValue('bluprint'));
	gajax.getXML(getResponse);
}

function setVariableData(uuid, value) {
	var var_data = JSON.parse(g_form.getValue("variable_data"));
	for(var i in var_data) {
		if(var_data[i].uuid + '' == uuid + '') {
			var_data[i].value = value + '';
		}
	}
	jslog(uuid + " : " +value + ":" +JSON.stringify(var_data));
	g_form.setValue("variable_data", JSON.stringify(var_data));
}

function getResponse(response){//var_data, loadingDialog){//, loadingDialog) {
	
	try{
	var var_data = JSON.parse(g_form.getValue("variable_data"));
	g_form.clearMessages();
	var answer = response.responseXML.documentElement.getAttribute("answer");
	
	
	console.log("GetResponse :: " + answer);
	
	var parsedAnswer = JSON.parse(answer);
	var options = '';
	for(var i in parsedAnswer) {
		/*if(parsedAnswer[i].depends_on.all_dep.length == 0)
			continue;*/
		var type = parsedAnswer[i].type + "";
		var uuid = parsedAnswer[i].uuid + "";
		var data_type = parsedAnswer[i].data_type + "";
		
		if(type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') {
			if(parsedAnswer[i].state == 'SUCCESS') {
				options = '&lt;option value=""&gt;&lt;/option&gt;';
				var val_arr = [];
				for(var j = 0; j &lt; parsedAnswer[i].value.length; j++) {
					options += '&lt;option value="' +parsedAnswer[i].value[j]+'"&gt;'+parsedAnswer[i].value[j]+'&lt;/option&gt;';
					val_arr[j] = parsedAnswer[i].value[j] + "";
				}
				
				for(var m in var_data) {
					if(var_data[m].uuid == uuid)
						var_data[m].options = val_arr;
				}
				
				$j("#"+uuid).empty();
				$j("#"+uuid).append(options);
				$j("#"+uuid+" option[value='" + parsedAnswer[i].default_value + "']").attr("selected","selected");
			}
			else {
				var msg = '';
				for(var k = 0; k &lt; parsedAnswer[i].error.length; k++)
					msg += parsedAnswer[i].error[k];
				//g_form.addErrorMessage("Failed fetching values for variable '"+parsedAnswer[i].name+"': "+msg);
			}
		}
		
		if(type == "LOCAL") {
			$j("#"+uuid).val(parsedAnswer[i].value);
			//setVariableData(uuid, parsedAnswer[i].value + '');
			for(var n in var_data) {
				if(var_data[n].uuid + '' == uuid + '') {
					var_data[n].value = parsedAnswer[i].value + '';
					break;
				}
			}
		}
		
		if(data_type == "LIST_SINGLE" &amp;&amp; (type + "" == "LOCAL" || type + "" == "PREDEFINED")) {
			
			options = '&lt;option value=""&gt;&lt;/option&gt;';
			for(var j = 0; j &lt; parsedAnswer[i].options.length; j++) 
				options += '&lt;option value="' +parsedAnswer[i].options[j]+'"&gt;'+parsedAnswer[i].options[j]+'&lt;/option&gt;';
			
			$j("#"+uuid).empty();
			$j("#"+uuid).append(options);
			$j("#"+uuid).val(parsedAnswer[i].value);
		}
		
		if(data_type == "LIST" &amp;&amp; (type + "" == "LOCAL" || type + "" == "PREDEFINED")) {
			var tmp_array = (parsedAnswer[i].value + "").split(',');
			options = '&lt;option value=""&gt;&lt;/option&gt;';
			for(var j = 0; j &lt; parsedAnswer[i].options.length; j++) 
				options += '&lt;option value="' +parsedAnswer[i].options[j]+'"&gt;'+parsedAnswer[i].options[j]+'&lt;/option&gt;';
			
			$j("#span-" + uuid).html("");
			var spanOptions = '';
			for (var k = 0; k &lt; tmp_array.length; k++) {
				spanOptions += '&lt;div style="display: -webkit-inline-box; margin: 3px;"&gt;&lt;span class="list-options" style="margin: 3px; padding: 5px; border: 1px solid rgba(0, 126, 255, 0.24); line-height: 13px; font-size: 12px; display: inline-block; border-radius: 2px; background-color: rgba(0, 126, 255, 0.08); color: #007eff;"&gt;' + tmp_array[k] + '&lt;a href="#" onclick="selectOption(\'removeOption\',\'' + escape(tmp_array[k]) + '\', \'' + parsedAnswer[i].key + '\')"&gt;&lt;i class="icon-cross" style="padding-left: 7px;font-size: 11px;margin-top: -4px;"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;';
			}
			$j("#span-" + uuid).html(spanOptions);
			
			$j("#"+uuid).empty();//$j("#id")
			$j("#"+uuid).append(options);
			for(var n in var_data) {
				if(var_data[n].uuid + '' == uuid + '') {
					var_data[n].value = parsedAnswer[i].value + '';
					break;
				}
			}
			
			//$j("#"+uuid+" option[value='" + parsedAnswer[i].value + "']").attr("selected","selected");
		}
		
		
	}
	g_form.setValue('variable_data', JSON.stringify(var_data));
	new GlideModal().get('variable_loader').destroy();
	}catch(e){
		//g_form.addErrorMessage(e.message);
		new GlideModal().get('variable_loader').destroy();
	}
}

function _createDependencyJSON(var_data, changedField) {	
	console.log('inside create: '+var_data);
    var pre_map = {};	
    var extApiFlag;	
    var str = [];	
    for (var i in var_data) {	
        if (changedField != "onLoad") {	
			
            if (var_data[i].field_json.all_dep.indexOf(changedField) != -1) {
                str.push(var_data[i].name);	
				
            }	
        }	
        var field = JSON.parse(var_data[i].field);	
        var value = (var_data[i].field_json.all_dep.length != 0 &amp;&amp; field.value) ? field.value + "" : var_data[i].value + "";	
        var type = field.type + "";	
        //var field_type = (field.data_type == "BASE" &amp;&amp; field.options.choices.length != 0) ? "LIST_SINGLE" : "LOCAL";	
        pre_map[var_data[i].name] = {	
            "depends_on": var_data[i].field_json,	
            "value": value,	
            "uuid": var_data[i].uuid,	
            "type": type,	
            "name": var_data[i].name,	
            "key": i + "",	
            "data_type": field.data_type	
        };	
        if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') {	
            pre_map[var_data[i].name].requiresApiCall = true;	
        } else {	
            if (field.options &amp;&amp; field.options.choices) {	
                pre_map[var_data[i].name].options = field.options.choices;	
                pre_map[var_data[i].name].data_type = "LIST_SINGLE";	
            }	
            if (field.data_type + "" == 'LIST') {	
                pre_map[var_data[i].name].data_type = field.data_type;	
                //pre_map[var_data[i].name].type = "LOCAL";	
            }	
        }	
    }	
    _setRequestValues(pre_map, str);	
}

/*function _validateField(index, field_val) {
	
	var variable_data = JSON.parse(g_form.getValue('variable_data'));
	var var_name = variable_data[index].question_text + '';
	var reg_exp_str = variable_data[index].regex + '';
	var is_mandatory = variable_data[index].mandatory + '';
	var reg_exp = new RegExp(reg_exp_str);
	
	$j(".error_body").html('');
	if(!reg_exp.test(field_val)) {
		var msg = var_name+"'s value "+field_val+" doesn't match with specified regex '"+reg_exp_str+"'";
		var error_str = '&lt;div class="alert alert-danger" style="padding: 5px 16px; position: relative; margin: 5px 0px;"&gt;'+msg+'&lt;/div&gt;';
		$j(".error_body").append(error_str);
	}
	
	if(is_mandatory &amp;&amp; field_val == '')  {
		var mandatory_msg =  "Variable '"+var_name+"' is marked as mandatory. Assign a value to it";
		var man_error_str = '&lt;div class="alert alert-danger" style="padding: 5px 16px; position: relative; margin: 5px 0px;"&gt;'+mandatory_msg+'&lt;/div&gt;';
		//$j(".error_body").html('');
		$j(".error_body").append(man_error_str);
	}
}*/]]&gt;&lt;/script&gt;&lt;script_name&gt;Calm_Catalog_Variable_Config_Script&lt;/script_name&gt;&lt;sys_class_name&gt;sys_ui_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-31 09:42:02&lt;/sys_created_on&gt;&lt;sys_id&gt;b7e56ae437a12300fdfc097973990e63&lt;/sys_id&gt;&lt;sys_mod_count&gt;449&lt;/sys_mod_count&gt;&lt;sys_name&gt;x_nuta2_nutanix_ca.Calm_Catalog_Variable&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_script_b7e56ae437a12300fdfc097973990e63&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-12-06 08:58:18&lt;/sys_updated_on&gt;&lt;ui_type&gt;0&lt;/ui_type&gt;&lt;use_scoped_format&gt;false&lt;/use_scoped_format&gt;&lt;/sys_ui_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>523898506</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>d002d2272fd50110e49924c62799b6a6</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb91895270000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table/>
<target_name>x_nuta2_nutanix_ca.Calm_Catalog_Variable</target_name>
<type>UI Script</type>
<update_domain>global</update_domain>
<update_guid>43d5888ded900110c19f3239a098eaf0</update_guid>
<update_guid_history>43d5888ded900110c19f3239a098eaf0:523898506,ff8941fc5c67701071675354e16224f9:68416020,c43c828445e770100f2f9a5ae87a6627:-170729420,65e18ef7c99b3010a100aaffb99016ff:-168638273,0191c6b7a39b30108da79584d7b3c151:1538032727,88e871bfb75b3010b3579b4767e9ea8c:271213879,756f29379a5b30106278d88fd90984cf:1451597162,7e3fa9376a5b30109c0c2d33318cc0fe:2015001546,d8cb61f3825b30104c4419808ec4da37:1451597162,b96565bb191b3010429483c704e6fb84:1415508219,9e0beca7b51b30103a6125364d69e031:-665375403,43bdc6fe239bb010e7cdb7ad686787df:1011679568,6dabce7e049bb010b5feabe441cf8630:-1887382053,ebff19e2dd9b70109ba9b28307597e30:216790701,f04e7062301b7010566d3837fd3503b1:-1717407869,7e66271ef6d3701000b1f4244bfbcf06:-1320628003,4fced356f2d370108449961128c27a1e:1120732628,cb4dd75217d370102d02753047da0600:2113644724,8c6cdebf970330109e792f2a49a024e1:1219936340,cd043a8f95f6701014077332cf75af30:861930758,5642ba0f6bf670100376c4eb4468f624:-1222724457,f8c0724bc5f67010254d17f02ce13297:1040929428,baaf62cbb2f670102a0b6f6dc816972f:-700795181,b53eeec770f670103b6b77760750cf05:1335082323,07cca6834ef67010a885e64c931d2f83:1634234496,d8c06c08aaa23010148ada8b9b0d850e:-27012895,339dcc0859623010d1c10f70f2c3f944:-1408884283,daeb08844f6230102a27315141a6bc85:-90471523,90f97f7759123010143717737d06c6e3:1151415742,cd8c0c3b82da3010639878c731059734:916436858,bfa8ccf3a8da30107347e3a201ddc182:-817237160,d084c07338da301025a91652f4a0505e:1087794789,a9c3403314da3010168ac398bc277bcb:69226651,2ef8cdf6c69af410263087e7c46fa0e4:1098629309,25e74976ea9af410c7f52d0ca888a7c0:-363577915,553fde3f9e0a30102de6b589821e01ea:-2027918924,25ddda7bc90a3010446b667b2ecd7354:1482725151,801812f3bf0a30106aca3c0eb80cce14:2042779529,bd3e023b69c63010af88702ca57220cb:-1984662062,92272c30c6353010a08e9888c6c59b7f:622957651,de90cf12edc5b0d065b568a5239d5aaa:2016318359,17ffb2163ac5b0d0bdec2346a0693527:388536209,59adfe12ecc5b0d0ba8dc2a78b76262e:-903436662,a5760fca3ec970d0d3b914f1436784bc:1012420508,20a0c60a60c570d033be5bdd4138046c:1036029507,5cef7dc6c4c570d0f40f4c94bf653de6:1308674540,616cd839f48130d053c6b756feceb898:1036029507,d18bd039bf8130d05141383785bfaf3d:1116584227,09894f7710b0b890413fbe79a99d7233:1036029507,dd92d5a32030789008063fc07a70ad85:1116584227,6f5f228a370db01037cf347fd0d89f88:-1488458029,92909c03c12cb05098befd01e188c125:-86280835,316fc4cb31e8b050aa081ce97b13cf46:948075003,632e40cb55e8b0503f1de0e2f4c2d201:-845655612,f008404b06e8b0507f459a11e041d335:1903401079,5065c40b0ae8b05030ccaa9596682cee:282483599,05d4040b19e8b050b76b28fea92c8202:760925656,bf6304c705e8b050d0a8daa06d954cf9:-86280835,c1effbf2a0e8b05038b452fe481e730a:1540652088,14ee33f24fe8b0507513e89cc906dbc4:748094664,daedfbb231e8b050ab61a6f285110ef2:-1291218237,bd0afb7e61a8b050c4bcfb6b1f4d3e91:938452898,6d9937fe95a8b050f99f6efa35a103e6:640916465,0af92c322760b05013f730c9548b3a11:929574281,60ea007a4bec705038fe61989436c3b9:854951714,97550436b8ec7050d778f80a58b935e4:-1529282876,b8748472d6ec705076265af4c3d943a0:224879460,ad710c7232ec70504b1a6beb27013be9:-22956082,f1d0403279ec7050e9e9d6383badaf63:-2055741401,5be9e7e2e32c705042f584d35dc7d4de:-249030206,19482b228f2c705049d29171246ad2f6:-763703732,a4b7efea66e8705028cb360514e0fc8a:-1302376551,87c627eac8e87050c95f79512dcb98eb:-647332086,9ce163ea63e870509d16f536906766e2:1475081666,74f023eac0e87050821c234df6ef0d6a:-1328974040,de7f1b6abae87050c7e1d34d53e3956c:-201483340,9bbe932a03e870508e09c377b1111feb:-31365600,331d9be6dbe870501600ffdb98050867:1692471265,57d6d7627fe87050ee137e93a6658811:-1336558222,1b709b6ea6a870504636cf94ed9c30aa:860463931,1d6fc32e3aa8705005665390b072fe7d:-1853296076,a682bc6a8ae0705042d3f64e21752846:-1783359227,5bf174eadde07050fc0044ada5ae6a2c:1705227747,97c36f923f2070502bf0cea1611590f0:1954012311,93780a8aecd530102b3bcfe170034953:1744460549,d57bbd02fdd530108f5ad0e434e1f956:14736029,4f3bbdce6f953010c9f1a3f7e3af4826:1744460549,8ff09d4e76153010886529199c32494e:1776589414,f38c7c06ccd130104c540dd96d729609:-559887840,54cb000ed811301088b3e969c61c78bf:-699921480,a89ac08ac81130100624568cfd9098d2:1131280791,8f2a48ca80113010ad42d0df3ccfc28d:-1084649071,8ab70cc67e11301014da1e11f6462fd7:-1974847545,2d14ccc2ec11301026746e04ee0d6daa:-1700863995,d6ab08384c553010db35a29d7fc867b6:-1815527693,bb5c7390e85970108b69423772c03f79:-71408501,fa5b4a48ffd530107c70c4c5feb6d385:2082515434,2c6ef8a75109b41079200b968b5eb9bc:-972937086,229f3e135081b410cca33e27ea5261af:1597301138,c8fe3a9f3d41b410ea3e5908975a2377:-792610787,27bd32dffe41b41059384f49dfdc0c95:-1987469171,8eac761b4341b41072cdace979eccd59:199051945,57bbb65b8a41b410b23ea47bddb8285d:1868417085,d55a329bed41b410a60bf0ca81e90683:874237548,ad25369bd701b4104f50e4d7cffe6362:-244373672,aae560f5dee320108999851ceb4c9f31:1568245047,5485a47569e3201060628338aad02d85:-1963065388,fbe5d5159ce7a85004f3cfb1d0b2e922:1652922889,b68426537553e050f7c37dd92ad53b23:-682116495,69a3e61fed13e0500ea8f575eae35a5f:1260429305,058d161f129fa05049d0941c823f22a6:-849868707,119d26870b136010035d89618641d903:1432250926,b1c96ac3d4136010d39ad09b3a33077f:-127493412,a069a2c3dd1360106874ff188f3e4ea7:-1691509764,41a06acbfbdf201045b2b66a5793d0cf:521271688,fe4bd2c71edf2010e30e092787431480:1621495448,5c651203f1df20101ddaa09d308d678d:-11352616,e1b396c3b6df2010989bdeba7eb047e6:-983787157,4c5fa51f439fa05092f9fd521240ba06:1582078857,012feddb919fa050efb84f4749c1b364:676122984,ea2f1272485b60504df3d3b4a53b67df:-244677298,0abe9e32af5b6050c98af16f9fd81007:-1821279070,0ff29e769f1b605026976ac2869eb437:-1189716373,550f5dfe90576050bb83e73225ff110b:1280763954,e87c5dfa39576050ff2c1d9518e39bb8:-1832239066,c34a99fad4576050460eb424076a3c1a:-1855341756,ed9f45f2e4576050846c259456b049d2:1512597924,4361b2010d5f2410e28b5746c9143312:781679176,b21a052c8517a010ca9a81a8f61c08f1:-685123544,b6f3c9a8d117a010c5a6e99c2e5502e4:-218771200,64e7706c37d3a01022a889d6dc308096:-1072616830,34c4fce858d3a0103426402ef7a8bbf7:-1227258094,5033f4a83bd3a010aa0774c3b29027dd:-1984404715,8b427464edd3a0108db7bff3939509bd:-1420410207,b5e1ac54cd1760100be001ad32a1b2cb:-1229427,218344503d93601064dcbc67f26e666a:2002637827,17b7c3b2b6836010b404c56b651e68d4:347371026,c8b78fb2188360105b3fad4e5f8c03b3:-1306364361,52d587b2bb83601040825f5cf5b92237:-980301320,3ee40732df8360102de4c204e73596bc:198657087,6d93c332cc8360100b343526f00f847c:-980301320,55c2c3328e836010d93aa4141de81475:333730273,70720bfee1436010a9ecafd2c454894d:-1263708607,ca90037e8f4360106df6401816ca715c:656458945,f90ffe3eeb436010e2ff8ef06508325f:693699350,13ee763e6c43601005cfb17c2a191a18:-971945299,472eb27a92436010e4733e53915e6e55:1761819597,935df27ae943601021049dc28337b3b9:1810917135,8e2cf27a0443601002f4a96f4195f754:1141659332,ecebb27a0143601050bb3dbe36475a43:-293207819,0f5a72f6a94360108902d0b6735bfb9c:1732442545,a968b6fe2f036010a8b67024324462dd:-1402361012,f85e57669d872010508ca946663f616d:946093826,cfca9ba2f18720101b440eb76f74400b:960380662,2b1c9aeeed8320100ca470fafe398c9b:676469852,0466526e3b832010fc2cc1db55899354:-280858074,207596ea4083201049a9631bc8380cfe:362941002,d274da2a9d8320102e5068861ca20665:1583464074,9192da2acb8320107450e40c2134ca96:1219744167,de419a2ab583201034c22717735887f0:1639796096,e0b05ea6ee832010cf22efaa0d739967:1017927856,b22d8a26d4832010a3504620a9481bd0:105474019,e66c862647832010f5f929d9377613a5:312835626,03670aeabf43201093ac71b4a5d8d687:-1621171341,e211c6aa4a432010c32e1874a8a37d63:-504910506,03e1f16e65032010c603463e272db974:-1144030212,a8a1bdeaca03201044a24ac28adff92f:-1550032976,6f90fdaa55032010467471f2577041ad:-1306308446,218b0b75d34364500aba2568399730e4:984877583,d9714b6195c32450370051d84f58a6fc:597966019,9e00832175c324505f5d1132d53335e6:1585023461,f9ad722d838324504cbd237d1a28eb73:1098973012,ed4272e1b88324508727bd6361825c9c:-402416165,e55032ed7d4324505b396ee937634f95:-52145957,bce42b1433cfac104fac378f6952b9bb:325952880,c99c971c8f8fac10ba4db8a23c01be2e:-569717136,a365ae48414f6c106ade55b71885ecb5:-126794288,3b536e84544f6c105645198d1a5cdec8:-1298037407,6a1226c4394f6c109392c3365cd3a1aa:-2097426599,cf912208e24f6c10f7db3784c38058ce:-255151375,932062448d0f6c10c27c37f4b2b591f9:-1859702803,93e840bd0cbaa05028e94acedce9fb2b:957145293,4c2182b3e02ee810d0017500bac771a4:622495973,945510750c81a8504bb2b3d9485b429b:-124936373,0e145c35ad81a850e0c6ab0ffe82b3ff:1434077992,3f2c08fd2c41a850dcba4697d1a2ae58:-1929498512,5596bb612141a850b2121a370233d65e:1662618628,a573ffad0701a8501c8ac4f0cef54d96:1425345436,d6a0bbe96301a85014aa3d0d9b0566a5:1216390289,b83bafe52901a8503d6c79e80c7a4d19:1010953739,9dc5aa69004d68502cda0586384ee0e6:241058488,8484a2e5084d6850f382ef3de53f77de:2060129837,b9a162e5fd4d68508b0dda0a9a526260:1744425755,cd87cf1d64852850df4ce769be904ec2:-12646392,7cafda91db4528505aeee3a5964e1fbc:1037434735,d5667af098c9a4506c37c62c832636fb:-1342222153,154738b8ae45a450f62748f12c46824a:364850711,0044f8f0a5092010003a30629eb241e9:-1351397579,52fba4f0010920100bb273c3f437bb76:364850711,112560fc58c52010bdc463375a3298e1:1410632425,163a612ef97cac10b3c0bac2b3e74969:247417313,dc76a9a6d47cac10c85af0c199dd54ce:1166291881,c543f43583a460107548d777908f8334:1678867835,ea6f20f1b3a46010f24163b5bb7207c6:1208581513,352420f5906460101ecc03dbd818989a:1117942685,a45328f5f16460105b21db356246ee21:868507560,7303e8b573646010318eb1e4d936ae6c:1753193272,d3912435a7646010984da8dcb9595417:-2115962806,3c5068b1d76460109b954e01b943cdc0:-1281403302,cbce14711d6460103a229df0381524dc:-2001415989,79cdd4fd4124601077e563af8c7228fc:-1596085137,93c614b1062460103b6cc038fda6aaa6:305477520,f9975dee3b3420500b08905d034b2c7c:1410632425,f1ecc1265934205074a303cacb3f7eae:-336161975,71f84d223d34205044416c06b1f7a2b0:1042052784,c03e7c2630f02050cba78d40b4394797:-336161975,2d42c7caa2fcac1079733c0ae0eaa849:-146771095,f3c25c0edc38ac10e7f3704ba526d76e:-278979842,fe015c8a5338ac107a1225fc207a7527:-369333460,df6f4c4ad138ac1091301cdfe638f97d:-275545172,750e0006b138ac10bf07c22d2715a38b:-744247852,cff40082df38ac1013309c76c952212a:1836741146,3bf348425b38ac10ee2cb001bba15b1d:487924234,37c20cce22f4ac109683c3cc8056c520:-325714103,58d0cc8eb7f4ac10901cff506c45aa18:-1440888544,567f7b791af4ac10dae27b00d8f6a62c:-776428017,7fe73b3939f4ac10a8a5ab91657a9e6b:162142639,d033337522f4ac1067088818588d87da:-776428017,1ddd637112f4ac10e88baab6fc6ee71b:162142639,c59c6bfd7db4ac10da2cfcf8d4bec7f5:-776428017,08fa277dabb4ac10f6194876446bc7ed:140793180,c4e8237db2b4ac10b349d08c46d65b9f:-776428017,5af76ff97fb4ac105d97ff1cf5186372:1123210981,59c32b79f8b4ac10228ec91b273e21b3:-1162335902,9992eb39a8b4ac1057a11e21459c5a7c:-1342222153,3a02abb519b4ac10983c067cedd59520:-1884456057,3e6ed735e2b4ac109758f2bc04153288:1194035201,c4eefeb9cd34ac10b02489c771b6b5c3:766886768,5a8dba79fa34ac10e7238f4b379308ba:1870502654,94f17c92d1a02410f5f5fccd68a7c7f2:-1342222153,1d73fd020168e01092a0e030000974b0:-330003897,0e9ba5ceeb28e0105667d5b78bce8427:2027117386,89e1a1c66a28e010f9f1cd644450b3c0:-224166313,6ea6dd42b428e0102cd052dd3a71dcf3:1039876893,8af0914e2ae4e010b4b4ad8a6cc78c44:-1584458480,99449042b664e01039836817ecd86bea:528220477,72c390421164e010ab33be9a2327b99f:-1102105804,aa900406db24e010068c3a0070073e6b:528220477,28108cc24224e010614284e5538796d7:-1731078883,498380b1bba8a010a8fcd0563c4809da:-1090209548,f9114c319ca8a010ef0e4f182bdfc81e:107320566,812937153f146010448d5a2b8e57bf62:-486574368,1cf9a999409c20102a9adecba4b94123:-472294419,92544d11f25c20104ccc43d46d9facde:1664252067,59a0c89183982010631148e450a6275e:1350931667,edbeffcd2858201004848cdbe6722cbb:-1762509766,86db370102982010400364b49fcab6a8:404504477,517b7b8d44582010fc077e8f357c1323:-687407164,3f12f7c5065820103f590731285059ef:576900291,a8cf6b8596582010c53417700c582d1d:774882051,1469a34d7e182010d1587a10c6a0eb28:905891560,122bd7818b182010b6d5b85498544204:905891560,07a89fcd73d4201029e4d47d7593575a:-941295275,608793010e18201082b59673e7ffc4ae:1840289923,0da45f4d0ad42010269f225b7e05cf92:-1864680603,d59b0bc5cc942010b39882dda894e9d2:-513899452,d9f8004d3504a0101d53f0dbf73fa1f8:364850711,a76c459e14a3541084bacd0ecdfb1d79:-759080581,ea8d104e9527141020f2728b35b5dad5:1570571547,daf973b51d63141011df9d3b8a4c8f63:-659085603,f9e54ba54ba3d010215f3b767992379b:114946691,c34dfeed6163d01080615f7907ab1f6b:1035742795,4afb7a2ded63d010aff9edbd17f565db:-469500900,f328762d8663d010b0e30d0cfadfa473:1347325463,69a41f9cedab5850823fbf2756ae57ed:1588135423,9012df1c1eab5850131039473047865c:-303183310,845e0f98c5ab58509dea78d94b1015d5:1104293498,a13c4b1813ab585003c32309abc91fe4:1038028701,8cea83188aab5850712e85145a96ac61:-819791179,06054714c5ab5850bc6a9b7372540c37:474776351,d854be58c32b5850dd989acbab1733fe:573319532,4442f0ff021bd4501c15a6ccf660a289:1038028701,c412f0ffb01bd450f54d2794a81ac150:-960080067,9bcde0f05e135c109b31fa74f2648bfb:1955665417,6b11447c505f1c103d7f169fb2efe259:-1033193669,4ec0047cf95f1c109136169eeabeb31e:314225039,835f99ec2e971c1017c381fc9b8b35a1:71537527,437cd56cb0971c10a19b59197db9f3fc:-1595720922,14ea992cb0971c100b65f01ff2a86044:-603512383,b37b8daaebcf5410f7903742b1ed64e7:-1756318587,bb68056a1fcf5410ba9ce20856c02450:1300882515,4eea8350661f10109dbb161602a60ef9:-961849528,83739e67e00b14d0dd70e3750add4e1a:-424363036,a752d667cf0b14d0688ac4fe3b113e5f:-1342736470,78319627aa0b14d0d0498e96a7a44c35:131263944,552b86ef9ac714d0a179e3c1c20ba4f5:-1628549292,585a06af8ec714d012ea671967340aa2:292418102,c55206e760c714d0d164bcedfa3ad80d:58955094,98d771af5d8714d048361fa336e29f5b:732574808,4279012f900714d03e22dc7479ff4b6a:772779061,9b783863760714d016a640be8737c4ba:-431679506,58a36863f6ae5850a7e30ee6d6aa5afc:772779061,bf632827f0ae58500e336f291ad301ba:1095117372,c0814687bee21850c11f5e120d8bbcc6:-1671156618,84000a477ce218501be4354b439089ff:-1970503793,6ad73dcf1ca21850c140a305fe04c472:700803310,a67ded0b16a2185084f418ec6591fce5:-1733010158,3fcae1077aa21850f7553906c56cbf4a:700803310,6b6529c319a218505f36efbdf9ee370e:-1733010158,7f24a1cfd5621850e02b554ef3aa55fb:-1995734597,f573694ffe621850d936779bcb490d2e:-450774637,fac269b9362e905085fce9461a321923:963027690,7795787ddd6a9050ea525875a2191f8c:1475466203,2d416fec02a21050dc5aba4e90d86bc4:-2005138552,bf8f53204ae21050c5b4321c9d275865:-349922106,4f5d9b6c58a210501653888b35270cf1:532483338,fb4b93a85ca210501f20c87fd58c17ba:836260555,0bb713a854a2105081093f568ac28808:310978825,b113dba409a21050854229df49245bf2:-128718938,9b315b60f7a210503598f913257b4c25:-443771688,e2d0d32421a210508f93477d3a06d732:-367518593,17114b682f62105042a9699152b4fc07:188628008,ed37322469621050905490232ae71b52:-619368226,eac4fa205a621050407791cb1a3407ee:188628008,5f91b220906210508c98fcebb29bc79f:-856368793,ceeda26c8f221050c5f97205abf3e013:1564946959,e8cca22c4c221050ce7bd4be92f53c51:697721594,aafaea68f0221050a7625942b07cf39a:1387066393,53e76ee4392210502f6e97a84fe34f92:1045967694,02f6e2287f221050014ce52c64814f62:223621847,565662e442221050f6da92b9de282357:1084229711,c7d56ea4bb22105055d44ec7244222d7:-1725369489,e704a6640b22105049667a6d3dfd7adf:1092003810,8f63e26499221050415b613d3b2d1dcb:223621847,ea916ae0bd221050fd774e14982ad5d9:-777867187,cbce12a0f1221050723d0437f010200b:223621847,6b5ad2a8eaeedc10b60975448c5d04de:1546021647,d9b352e8aceedc10dd3c4a5c71d8b8d8:1865708828,7621126853eedc104b596167ac25a016:760192236,b27fc6e4d7eedc10ae66d8ecf9f72b05:-539334212,0acd06a407eedc10d792701ff9c20482:-350007055,9f4c4a64bfeedc10f867d5346e66cde9:-1525128140,d2c90ee0a2eedc106bf296140121d053:-957462160,5d588aa096eedc10da7b14fe105180de:758308440,7e654a20f1eedc10e27e8f7e0f626103:-1394022376,eb33ceacb3aedc10b3c06c2370398c66:-1791426522,a2bd39686eaedc10f9dd8d1fee613268:959797833,483b3928cdaedc1012f0b055a2578ee4:954233802,55dc292cfc6edc10cf04e23420510369:-443771688,5d5be52c3c6edc10cea9443c632fba70:-1984207408,ccc66da8886edc10d5101c3c1eba39f8:-443771688,b0b521a8296edc10f66962b20d93f7f5:540366047,806421687b6edc10819a63cd705388d3:-1827224385,0e899dec4b2edc10e23b35f18cd23278:1140840678,780115a4fd2edc1072334f6b46492f9d:-118200845,dffbc9289b2edc100d3627fff8adc518:-221669944,505b0da4592edc1006bf087ff98e721f:-793671532,85c209da7f161810545127d7aa8937c5:-443771688,43d10d1ea6161810e80c8d5cb606989b:848489912,653bfc5e48d218107d5782961afb59be:-443771688,afc5385e01d21810e0d91b1db5a00cb0:1934870460,b779e41e37d2181098ee0b0b05558eff:-443771688,7c4920da3ed21810bc9cd2ea629a743a:-4762827,e34828da80d21810695a05e09dc5359b:-1703310554,bb96e05a18d218104de326d999a16490:1103369342,0b64a81a9ed21810b8f370b583b9ac4c:-969320260,88a2e0d6fad21810f420666df78662a8:-782838937,408d6506ec1ed410ed910b94a8da3821:32420899,f2466102ca1ed41004a660e9ee476aa0:327305795,5c4169ca4ddad41030ce9c976d4542d3:-1119313158,a32f59ca55dad41049a3585477609a14:369632382,949cd54a6bdad4103e95b5e7392f91b6:-1889402583,adca11c698dad4104428f630d3cb6e8f:-618400863,fcf724863f5ad41078f0809c3e4729b1:556436590,6358d9ddaa96141094e9b4f1ce646f40:-302445085,0125d15de4961410d50ac4dd87bf6c34:319365036,5e5df41d1e561410a1c67ccb4fa23a92:971680876,0d4cc645589ed010245c2fb3207e7a78:-2027441562,264419f0a452d010e0cc89b22244da21:-1477156202,26c01d307352d010f1a4355854e4519f:-1662907954,0cfc09f89912d010d3edbcb963407015:-402594845,d3380db85812d010bac609e573366ccb:1910711537,459481f4f812d0109a2f23efdb48822c:-373849509,214ef0f0d512d01093aa4a578b07d6b0:-94817655,defb78702e12d010cb8e87b9264af944:1135954615,f6da7470dd12d0109e56fed5fb7177a1:-1626033581,269938fceede90105338e1943d5b5e39:-516342780,2668f4bc6bde9010a888f45e7f3b9f1f:-120791025,f226f47c75de90105b1bcb579bcd303a:-1633389534,91162f68831e901042cf919b642b59a0:2079319554,0d44eb28ce1e90102d181d6054a045d1:32741029,b342aba43c1e901003fe106cf2609896:980877329,aa302ba4fd1e901063e1938ca41a55eb:-929593994,5700aba4f61e9010aed0f8387e4f3b43:1444887561,1b5e17e0811e901043c153f09d50a9fa:-234526537,a4369f2032da9010247df3256774f3f0:2124417765,d900d7a0165a901077275d19956e3de3:-1077829402,3d8d4320255a9010f5d1899ecfdefd6f:1058954304,966c87ec291a90105d8ba886babd5d63:366339545,f5b94f204b1a9010902f4c8741fcad03:299700431,03a536e8ddd690102927e032820d5f49:-1504893068,9a7ee390fb12901029d6b7dafdff8d34:-2006744134,7456e39cc0de5010445a4c25e80bcb17:1260132326,c8df575808de50108a23f6ee6d5f2122:1595163672,acde53185ede5010d9152e1eaff60b2c:-93971704,090d97d4cfde501058c279c15a7e074d:-441523557,e5cbd39452de50108b9f94e43c0eb184:-1707661207,cb695bd068de501020f51d72e92e6306:-32661674,eb340b94e39e5010e6127405bf1342c7:1346646433,74830b946b9e5010d9d98ec639c11c17:-1736755557,fa1e9a98221e5010149bc25b3d6b6be2:-1046945845,64da4409384c5c100461fe416f2ac9a6:1457954112,8af98409014c5c10fb12877a75aecd3a:630123296,f3857bb49a0c5c109119a13c5fc1678e:-2023147150,f3291da4293f4010d0314c6ca937ee39:239784530,6842efae6497401090fcc49e119289f8:1426157202,2da1ebae0f97401098ebce257f68be8a:1241742694,7d8da7af46028490a78a186306e2513e:-979984116,9e30adf2b4910010f86e6370fc8d7d74:2119676966,9e30adf2b4910010f86e6370fc8d7d74:2119676966,d993cb8793b90c10a81e37065c1a56ed:1967862980,32f89d2c5f950810d3b20a373a7ec855:2119676966,cc74d9e01d950810d48fbd9799eb06fe:-575043568,1a8359a0ef950810d58216d5b0f2a63f:2119676966,4594c99072d9c4108e32c14ea84d9250:-575043568,77ad66c4efbf73000f9ad5934fa73274:653197949,bedc2a0459bf7300ffadd4ca6c18d02e:527202197,92efb47f4cef33006d6e2b2ee56d0cfe:-797846945,aaaff07fcaef3300edb471ed508cf2d2:1020976701,d5eeb43fd1ef330020bb9fb3946aded4:400827039,16087c7330ef3300b8e9db95ff0dcb2b:-245489976,2041acb76baf33001f1304c7e5a44356:1877858645,ae402037d3af3300300a4c702b2a44ad:-690548779,fa7f987751af3300547f8edabdb8545b:684323477,0bee1837cbaf3300c79a865d42a38d8a:-1646627083,921e14bf936f3300a252379ac442a37b:79264637,efadd8bff76f33004f54a1bba4a45bda:684323477,62599c3f8b6f3300648357e6f6df6d03:-1921714859,7a76d8bb236f3300bb28cfc693c14ec0:1283178837,d21e487fc52f330030709e0b3aabbcbf:-1856439002,02669716fea33700b0a4b5a528c5058a:-999447415,73455f9277a33700460da4d1944c526a:1171777011,b21c5fc6c22bf30052e2645491d0ff3d:-622472980,74da1fc6682bf3007bc956557024ef02:-1806621591,56651bc2462bf3006bb328ffe2c4ceb8:-1308618076,f4619fce0be7f3003882ab02003143d4:-533319088,11f7cbc6a9e7f300e680fd85dcb92cb7:-2012640722,9a87cf461de7f300787c291d3189b0aa:590302490,d0048b8211e7f300f88ce309aa6828dc:-512238208,ab052f308ca7330031c8c0be7a7a5dbb:1473030049,ca81caef419b7300d5cd86e4ddef61ea:222033794,a0010aafc89b7300d0771b152952a1b0:-2126690521,5ae0c2efcb9b73006278315ab7a00f51:-492520079,dafff16f129b7300a34b00f59ddcb8de:1820175659,427fb56fa99b73003bce3c2e5088e666:-899705051,4698bd2bb59b730017310bf21db4de8f:-1203619502,ae18f52b539b7300086b836816409f8e:-1431643442,4cd7f9e7499b7300d71ab2f3bbb00515:-1334393333,fd1771e7cd9b73009d95dffc967f66ce:-1346814695,5776f967299b7300249bed85bf23659f:841536629,4e16f9670e9b7300ae99af550df3d4c6:-222451105,08a5f9638d9b7300c66465ec54350d67:-1961112359,2d664d45f0df3300b7cf82e6dee63ad1:1828153509,fe4c463bbc72330087b4c4b4a0252181:-277034093,8030e89ac8723300350c0b3a3f212f07:-777017347,cccf545a53723300bd4adfd21843e31e:-1848332899,ea5f5c5a2272330045efa17e512f753b:-651668099,67de509ad57233000b9cee96002d8432:104753117,6a8e5c5ad672330089c09837ad27c11e:-651668099,c6dd545a417233006e298fbd8b71bd00:-139539463,931ddc1698723300635f74bbb29de766:1253391673,23acd41a6e72330034da8d1c1b531766:1838217846,97b9d412c27233003429cad1f4980033:-359935294,72f69412ab723300a30b15597c5b428b:1860171336,83461816db723300fb7c9eeaa87c1a7c:1533467491,913654162b723300b4c436f2faf1e301:-1863832799,ade590de463233008a17b88d69b03be7:-1730453810,5180941294723300e0c07ee848ae5781:-203153093,74f403280cb2330068b46324c9d029cb:1207310939,4d940b2c13723300d835d5d5a04bb84c:1420267932,c1a38f2469b233001b78d93f290c0ef7:-938064750,64034f6473b23300e986d461d27dc79c:-852095737,4b714b6438b2330021f368dff6e07c94:610260374,8f11cfe88172330070a1e16405c861a4:1862408242,fce00b2c1372330011b707bf7602a045:-1333728444,9020cfe0dab23300c6887c703482ded1:-1034664747,00ff7620bcb233005532b6962b98bdd2:-7804381,507eb22c3f7233004e114d0228b8bd42:1405927611,5395b22cd3723300557ce22260e0793e:-7804381,2cb07ea8e6723300c2f542d052380e17:-526996572,b70076a4d5723300dbbd45afb7f2a5e8:5567748,c2cea6a40772330057db5c083026a8eb:-526996572,b48da6a452723300289d55cb264bf430:-1822870006,90eba6a48d723300f465118099bc0ee0:216079738,2aa926a4e872330089fdfea41eebdc32:546776629,9499aae8ac323300a2a9ae0e2ac67c80:-250385679,d9aeca541cf23300d1aa26c6e4f6a291:1338924191,e0bcca54f5f2330025d6c13e4d8f3c9b:1034441724,517c06948bf23300cb7f56d8a47ef08b:-1061895673,c0cb82d469b23300e8cfec3ad20bbbaf:1034441724,a3960550793233006022f8cfbe53f34c:-185654525</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>catalog_script_client_74c0a8d10778b010c5a7f16c7c1ed04c</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="catalog_script_client"&gt;&lt;catalog_script_client action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;applies_catalog&gt;true&lt;/applies_catalog&gt;&lt;applies_extended&gt;false&lt;/applies_extended&gt;&lt;applies_req_item&gt;false&lt;/applies_req_item&gt;&lt;applies_sc_task&gt;false&lt;/applies_sc_task&gt;&lt;applies_target_record&gt;false&lt;/applies_target_record&gt;&lt;applies_to&gt;item&lt;/applies_to&gt;&lt;cat_item display_value="Configure Calm Settings"&gt;6ddd772a37112300fdfc097973990e01&lt;/cat_item&gt;&lt;cat_variable&gt;IO:fe9edc510778b010c5a7f16c7c1ed007&lt;/cat_variable&gt;&lt;condition/&gt;&lt;description/&gt;&lt;field/&gt;&lt;global&gt;true&lt;/global&gt;&lt;isolate_script&gt;true&lt;/isolate_script&gt;&lt;messages/&gt;&lt;name&gt;onChange of Environment&lt;/name&gt;&lt;order/&gt;&lt;script&gt;&lt;![CDATA[function onChange(control, oldValue, newValue, isLoading) {
    if (isLoading || newValue == '') {
        return;
    }

    g_form.setValue("multiple_profile", "");
    var performAction = (g_form.getValue('type')) ? g_form.getValue('type') : getParameterValue('performAction') + '';
    g_form.setReadOnly('multiple_application_profile', false);
    g_form.clearValue("multiple_application_profile");
	if( performAction == 'new'){
		var loadingHTML = "&lt;div class='loading-container'&gt;&lt;div class='loading-indicator icon-loading icon-lg'&gt;&lt;/div&gt;&lt;/div&gt;";
		var loadingDialog = new GlideModal("loader", true);
		loadingDialog.setTitle('Fetching Validated profiles...'); //Set the loading dialog title here...
		loadingDialog.renderWithContent('' + loadingHTML);
	}
    var ga = new GlideAjax('Nutanix_ClientServerScriptBridge');
    ga.addParam('sysparm_name', 'gettingValidatedProfiles');
    ga.addParam('sysparm_Env', newValue);
    ga.addParam('sysparm_bpType', g_form.getValue("type_of_blueprint"));
    ga.addParam("sysparm_bpsysID", g_form.getValue("blueprint"));
    ga.getXML(processProfilesResponse);


    function processProfilesResponse(response) {
        var answer = response.responseXML.documentElement.getAttribute("answer");
        var ans = answer;
        answer = JSON.parse(answer);
        var profiles = (g_form.getValue('selected_profiles'));
        var environment_profile_pairs = g_form.getValue("environment_profile_pairs");
        var environment_profile_pairs_arr;
        if (environment_profile_pairs == "")
            environment_profile_pairs_arr = [];
        else
            environment_profile_pairs_arr = JSON.parse(environment_profile_pairs);

        if (profiles.length &gt; 0) {
            profiles = profiles.split(",");
            for (var a = 0; a &lt; profiles.length; a++) {
                if (answer.indexOf(profiles[a]) == -1) {
                    for (var env = 0; env &lt; environment_profile_pairs_arr.length; env++) {
                        if (environment_profile_pairs_arr[env].value.includes(profiles[a]) &amp;&amp; newValue.includes(environment_profile_pairs_arr[env].key)) {
                            answer.push(profiles[a]);
                        }
                    }
                }
            }
        }

        var env = newValue;
        env = env.split(",");
        var obj = new Object();
        obj["key"] = env[env.length - 1];
        obj["value"] = ans;
        environment_profile_pairs_arr.push(obj);
        g_form.setValue("environment_profile_pairs", JSON.stringify(environment_profile_pairs_arr));
        g_form.setValue('selected_profiles', (answer));

        if (answer.length == 1) {
            var ga = new GlideAjax('Nutanix_ClientServerScriptBridge');
            ga.addParam('sysparm_name', 'setProfileOnChangeOfEnv');
            ga.addParam('sysparm_blueprint', g_form.getValue("blueprint"));
            ga.addParam("sysparm_profileName", answer);
            ga.getXML(processProfileResponse);

            function processProfileResponse(response) {
                var answer = response.responseXML.documentElement.getAttribute("answer");
                var profie_sys_id = answer.replace("sys_idIN", "");
                g_form.setValue('multiple_application_profile', (profie_sys_id));
                g_form.setReadOnly('multiple_application_profile', true);
            }
        }
        //if(performAction == "update"){
        //g_form.setValue('multiple_application_profile', (answer));
        //}
		if( performAction == 'new'){
        new GlideModal().get("loader").destroy();
		}
    }
}]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;catalog_script_client&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2021-06-16 06:21:18&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;74c0a8d10778b010c5a7f16c7c1ed04c&lt;/sys_id&gt;&lt;sys_mod_count&gt;94&lt;/sys_mod_count&gt;&lt;sys_name&gt;onChange of Environment&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;catalog_script_client_74c0a8d10778b010c5a7f16c7c1ed04c&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-12-30 08:40:42&lt;/sys_updated_on&gt;&lt;table/&gt;&lt;type&gt;onChange&lt;/type&gt;&lt;ui_type&gt;0&lt;/ui_type&gt;&lt;variable_set/&gt;&lt;view/&gt;&lt;/catalog_script_client&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1429189140</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>d4021aa32fd50110e49924c62799b6cf</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb91896040000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table/>
<target_name>onChange of Environment</target_name>
<type>Catalog Client Scripts</type>
<update_domain>global</update_domain>
<update_guid>d3f7ab64ffb805105a73f256001357b7</update_guid>
<update_guid_history>d3f7ab64ffb805105a73f256001357b7:-1429189140,f4074768143805108434e41c1188b807:1384416224,59ebba243ff40510f639bebee7437a15:-2063711402,d3e9f6e0c8f40510014f5024ce85d763:-1689799562,0116a79096bcc110351830fb0361e41c:-1437704682,aa652f50f8bcc110ae44b14eba63cc4b:484973910,39052750dfbcc110d81a83c9cd2a0363:-1437704682,2ae1af9cd67cc1107ee66b0a186844cf:2097177644,1cdd8ed0f578c110b0edf7f57c680743:-1437704682,adbd4ad08f78c110cce5a427bf1a0dff:278391853,a420ca38bd7630103961777210561645:-1284201950,811046788c763010e28670a6ca79f6da:1992065531,bcf0d97cac32301042b3069d2a519a32:1875036634,92aa853ce73230102dcafa859242edef:912555154,841a41f8e9323010697cac50b220c3f4:528043218,4988cdb83b323010492a8d92ae9bb226:564791040,e3d7cd38bc3230105150f0de09bb05fe:99877184,655245b4103230105cab4ce75f59a043:-1314578116,5c0f70b0113230106ded9906ec64b84d:1184105731,524c3c70cf3230104cb26423065be419:11707203,3023596043fa701070be5bae29bc2011:611712029,f7f09dac21ba70101448725b14f12dfd:515789599,5afe81a8f7ba70106710c2261a01a283:1156851136,32e84d2875ba7010619cd112848d69b3:-417726588,4d07092871ba701031c4210a97f37196:2005137250,1873cd64e6ba7010bba75d42f23a8d54:-417726588,1f924524c9ba701013d06d2f58fd2243:-73443520,e9dfb4a4017a7010a5a31018982de73c:-1856838057,bb4fb86c837a701059459b6a108d18b0:-931321389,9deef0a013ba70107b421952eb47cc35:-752901699,c078a820287a7010e42a479b44ace6c2:-12904575,8c572cec8e3a7010d4dffeb00241e1de:-1081010150,f3d5ac6ce33a701034667388d5a5d2a2:-1455792557,9e32646812f67010965da0e2beef4241:-2142119661,8b9fd0ec17767010c797d5e5535fd305:2039147503,24be90ec1e76701087a15e3f394ae7fb:-842314004,a18d9c6cdc767010badbde02b749dad8:1118289065,aa0d986ce47670100a0281ecb6b67ca6:41511499,695cd8e8bb767010c8d94eb69a390ab5:-984683615,d3e950e89d7670100660ff43a7d4dbd9:2031473597,bfd998a8b87670109a7834f95379ffc1:765776669,85e81868b87670106f4b03514d19e9d6:-1977330371,5aa7d8284176701009378060fcaaf557:1452363399,0797d4683b767010326ed6a4592f2e2a:506301399,b278442cce367010a12012b2a55d95b1:1452363399,b897042c243670107ac2211dd656bf4d:-726215795,ab72c4e4bd367010b6318d4436b3ca49:1452363399,848cf435791a701097a4f8cdb71d32f7:-219448086,601cbcf1381a701083e6169bfbe0b811:-861660701,20c5fc3d89d670104971dcb0c7c39fc8:-1763069391,b413747ddfd67010f391ab16f139e292:-1471084711,8a52743de2d67010fd4d3b47a16a9d05:1352842105,b78f6039cbd67010cb04023120e2e0ce:-199774249,0b2cacb548d67010f6fd0f195822241e:-1477441362,6b4924359bd670103bc4622fcad082b5:-242684709,2df5a071ebd67010feecfe8a534af791:-1834952455,73877f55b4d63010760975d369b67a82:-2130003239,2da0fb9dfd963010a6e636683a705abd:-664373575,3d0febd9ea96301010305976326719c1:699614736,3f3eafd95d963010cb8644a3335596fe:-985280197,136b27d537963010285dc2ce67602aac:1310450748,1d35abd1b496301031d82c148ed23f91:-488314931,9783a3511896301099b23d7ba18a6c58:1331247830,8ed2a3519f963010f85f95ff2be3b9ea:1741856057,92b26391d9963010ce650d627ed14d2d:1800969306,6cd683111a9230104e7758e8bba62a13:-1395437,7fd4cf5d4d5230102fbd8b3d85fcc238:-1265991366,66a3ea73674a30106ff3dd6e6fba6b3a:1800969306,a4336a73e74a30105987daf3bff4d1cf:-847379550,61b2ee33aa4a3010a3dc6ecb76f99f2d:190268619,895166ff9d0a3010b2f40a223cbdeb90:1723195529,6fb39fa8e121301045337b6cc1b19ea5:-1775677505,0c42403a63d1701049665aac8e621feb:-1791934720,d2cae3a1ef95301047cbe795c0a04ac0:-64135771,380fd7a53a55301088e5b4c8cdad4f76:-823163745,7f1e5fa5395530100c45a7cea2a351fe:-755896377,1a02576d441530109bf0e6afe6badde0:112280937,7a4e47e11b153010ea99e22d29ef111a:893259814,e25d43e5ea153010475ebaae4a092cae:1121995586,282b43e5f01530104e211b84f179dfde:1172468807,1e1a07a1de1530107b0e7de9538b30ea:964132485,f9d3c3a164153010a0ade358faef99be:-1927263051,12417ee96c51301003561dda91046470:2099843781,56f132d8ed11b010eed28d091372b571:-1908663403,a25132984011b010d909a2bba05e27d7:-2102466363,2a117698d811b01056aaafc6b4a62af7:-1465694625,c1803a581a11b01097e648f0f2682f2c:-2043683590,2d003a58aa11b010ed912b84372debd9:-573433758,9e6f2a107411b0100b042e260f1dada1:1577669802,9cd5aa102311b010711147c650b6455f:561659214,b3352edc70dd7010e14991ee4082b860:871288974,20930a10af5d7010fde1cf6b15f15aed:-2020107799,cd03069ce61d70104780522899e24737:-1562362747,957012e9b03030105c291763bfdf0ce5:-351855028,f0e6a419fc78b010c5c0feec86d2ea9d:-703739689</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_bbb0915f37896300fdfc097973990eaf</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;&lt;sys_script action="INSERT_OR_UPDATE"&gt;&lt;abort_action&gt;false&lt;/abort_action&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;action_delete&gt;false&lt;/action_delete&gt;&lt;action_insert&gt;true&lt;/action_insert&gt;&lt;action_query&gt;false&lt;/action_query&gt;&lt;action_update&gt;true&lt;/action_update&gt;&lt;active&gt;true&lt;/active&gt;&lt;add_message&gt;false&lt;/add_message&gt;&lt;advanced&gt;true&lt;/advanced&gt;&lt;change_fields&gt;false&lt;/change_fields&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;collection&gt;x_nuta2_nutanix_ca_nutanix_process_queue&lt;/collection&gt;&lt;condition/&gt;&lt;description/&gt;&lt;execute_function&gt;false&lt;/execute_function&gt;&lt;filter_condition table="x_nuta2_nutanix_ca_nutanix_process_queue"&gt;state=ready^EQ&lt;item display_value="Ready" endquery="false" field="state" goto="false" newquery="false" operator="=" or="false" value="ready"/&gt;&lt;item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/&gt;&lt;/filter_condition&gt;&lt;is_rest&gt;false&lt;/is_rest&gt;&lt;message/&gt;&lt;name&gt;CALM Queue Post Insert BR&lt;/name&gt;&lt;order&gt;100&lt;/order&gt;&lt;priority&gt;100&lt;/priority&gt;&lt;rest_method/&gt;&lt;rest_method_text/&gt;&lt;rest_service/&gt;&lt;rest_service_text/&gt;&lt;rest_variables/&gt;&lt;role_conditions/&gt;&lt;script&gt;&lt;![CDATA[(function executeRule(current, previous /*null when async*/ ) {
    this.logger = new Nutanix_Calm_Logger();

    // Add your code here
    try {

        var topic = current.topic + '';
        current.state = "processing";
        current.update();

        var call = "";
        var callFunction = "";
        switch (topic) {

            case "startMigration":
                call = new Migration_Script();
                callFunction = call.updateCatalog();
                current.comments = "Migration Completed.";
                current.state = "complete";
                break;
			
			case "startMigration_1_5_1":
                var appUtil = new Migration_Script();
                appUtil.updateTheCatalogClientScriptForOneDotFiveDotOne();
                current.comments = "V_1_5_1_Migration Completed.";
                current.state = "complete";
                break;
				
            case "startMigration_1_4_5":
                var appUtil = new Migration_Script();
                appUtil.updateTheFetchOnChangeClientScripts();
                current.comments = "V_1_4_5_Migration Completed.";
                current.state = "complete";
                break;


            case "startMigration_1_4_4":
                var appUtil = new Migration_Script();
                appUtil.addEnvironmentVariableToAllCatalogs();
                current.comments = "V_1_4_4Migration Completed.";
                current.state = "complete";

                break;

            case "start1_4_3_Migration":
                var appUtil = new Nutanix_Calm_Utils();
                appUtil.migrateV1_4_3();
                current.comments = "V_1_4_3Migration Completed.";
                current.state = "complete";

                break;

            case "startInventorySync":
                call = new Nutanix_ImportUsers();
                call.startUsersImport();

                call = new Nutanix_ImportUsers();
                call.startGroupsImport();

                call = new Nutanix_Import_Subnets();
                call.startSubnetImport();

                call = new Nutanix_ImportProjects();
                call.startImportProjects();

                //call = new Nutanix_Categories();
                //call.importCategoryData();

                call = new Nutanix_ImportBlueprints();
                call.startImportBlueprints();

                call = new Nutanix_ImportRunbooks();
                call.startImportRunbooks();

                call = new Nutanix_Import_Marketplace_Items();
                call.startImportMPI();

                call = new NutanixAppIntermediateDao();
                call.startAppImport();
                call.startDeletedAppImport();

                current.comments = "Imports Started.";
                current.state = "complete";

                break;

            case "ProcessApplicationProfiles":
                call = new Nutanix_ImportApplicationProfiles();
                callFunction = call.processApplicationProfiles(current);
                current.comments = "Application Profiles processed";
                current.state = "complete";

                current.process_name = 'Process application profiles';
                current.description = 'This process invokes the import of application profiles.';
                break;


            case "importApplications":
                call = new NutanixAppIntermediateDao();
                call.importApplications(current);
                current.comments = "Aplications imported";
                current.state = "complete";

                break;

            case "processImportedApp":
                call = new NutanixAppIntermediateDao();
                current.comments = "Imported Applications processed";
                call.processImportedApp(current);
                current.state = "complete";

                break;

            case "importDeletedApplications":
                call = new NutanixAppIntermediateDao();
                call.importDeletedApplications(current);
                current.comments = "Deleted Aplications imported";
                current.state = "complete";

                break;


            case "importProjectData":
                call = new Nutanix_ImportProjects();
                callFunction = call.importProjectData(current);
                current.comments = "Projects imported";
                current.state = "complete";

                break;

            case "processImportProjectData":
                call = new Nutanix_ImportProjects();
                current.comments = "Imported Projects processed";
                callFunction = call.processImportProjectData(current);
                current.state = "complete";

                break;

            case "importBlueprintDataByUUID":
                call = new Nutanix_ImportBlueprints();
                callFunction = call.importBlueprintDataByUUID(current);
                current.comments = "Blueprint details imported";
                current.state = "complete";

                break;

            case "processImportBlueprintData":
                call = new Nutanix_ImportBlueprints();
                current.comments = "Imported Blueprint processed";
                callFunction = call.processImportBlueprintData(current);
                current.state = "complete";

                break;
            case "importMPIData":
                call = new Nutanix_Import_Marketplace_Items();
                callFunction = call.importMPIData(current);
                current.comments = "MarketplaceItem imported";
                current.state = "complete";

                break;

            case "processImportMPIData":
                call = new Nutanix_Import_Marketplace_Items();
                current.comments = "Imported MarketplaceItem processed";
                callFunction = call.processImportMPIData(current);
                current.state = "complete";

                break;

            case "processImportRunbookData":
                call = new Nutanix_ImportRunbooks();
                current.comments = "Imported Runbook processed";
                callFunction = call.importRunbookDataByUUID(current);
                current.state = "complete";

                break;

            case "processImportRunbookDataByUUID":
                call = new Nutanix_ImportRunbooks();
                current.comments = "Imported Runbook by UUID processed";
                callFunction = call.processImportRunbookDataByUUID(current);
                current.state = "complete";

                break;


            case "processEndpoint":
                call = new Nutanix_ImportRunbooks();
                current.comments = "Imported Endpoin processed";
                callFunction = call.processRunbookEndPoint(current);
                current.state = "complete";

                break;

                /*case "createUserCriteria" :             call = new Nutanix_ImportBlueprints();
                									current.comments = "Adding User Criteria.";
                									callFunction = call.createUserCriteria(current);
                									current.state = "complete";
                									break;*/

            case "MapCatItemToProject":
                if (current.payload != "") {
                    call = new Nutanix_ImportProjects();
                    current.comments = "Mapping Catalog Items to Projects";
                    callFunction = call.MapCatItemToProject(current);
                    current.state = "complete";

                    break;
                } else {
                    current.comments = "No Project reference list for SysId:" + current.parameter;
                    current.state = "complete";
                    break;
                }

            case "ProcessingCredentials":
                call = new Nutanix_ImportCredentials();
                current.comments = "Imported Credentials processed";
                callFunction = call.ProcessingCredentials(current);
                current.state = "complete";

                break;

            case "processCatalogVariables":
                call = new Nutanix_CreateCatalogVariables();
                callFunction = call.processCatalogVariables(current);
                current.comments = "Blueprint/MPI variables created.";
                current.state = "complete";

                break;

            case "processingIcon":
                call = new Nutanix_Import_Marketplace_Items();
                callFunction = call.processingIcon(current);
                current.comments = "Imported MarketplaceItem Icons processed.";
                current.state = "complete";

                break;

            case "startImportEnvironment":
                call = new Nutanix_ImportEnvironment();
                callFunction = call.startImportEnvironment(current);
                current.comments = "Import of environments";
                current.state = "complete";

                break;

            case "processImportedEnvironment":
                call = new Nutanix_ImportEnvironment();
                callFunction = call.processImportedEnvironment(current);
                current.comments = "Processing of environment";
                current.state = "complete";

                break;

            case "processEnvCredentials":
                call = new Nutanix_ImportCredentials();
                callFunction = call.processEnvCredentials(current);
                current.comments = "Processing of environment credentials";
                current.state = "complete";

                break;

            case "importUsers":
                call = new Nutanix_ImportUsers();
                callFunction = call.importUsers(current);
                current.comments = "Updates the UUID of imported users to those of calm";
                current.state = "complete";

                break;

            case "importGroups":
                call = new Nutanix_ImportUsers();
                callFunction = call.importGroups(current);
                current.comments = "Updates the UUID of imported groups to those of calm";
                current.state = "complete";

                break;

            case "processProviders":
                call = new Nutanix_ProcessProviders();
                callFunction = call.processProviders(current);
                current.comments = "Processing of environment providers";
                current.state = "complete";

                break;

                // 			case "processAWStorage" :               call = new Nutanix_ProcessProviders();
                // 													callFunction = call.processAWStorage(current);
                // 													current.comments = "Processing of AWS storage";
                // 													current.state = "complete";

                // 													break;   

                // 			case "processTags" :                    call = new Nutanix_ProcessProviders();
                // 													callFunction = call.processTags(current);
                // 													current.comments = "Processing of Tags";
                // 													current.state = "complete";

                // 													break;    
                // 			case "processBlankDisk" :               call = new Nutanix_ProcessProviders();
                // 													callFunction = call.processBlankDisk(current);
                // 													current.comments = "Processing of BlankDisk";
                // 													current.state = "complete";

                // 													break;    
                // 			case "processNetworkInterfaces" :       call = new Nutanix_ProcessProviders();
                // 													callFunction = call.processNetworkInterfaces(current);
                // 													current.comments = "Processing of NetworkInterfaces";
                // 													current.state = "complete";

                // 													break;  

                // 			case "processDisks" :                   call = new Nutanix_ProcessProviders();
                // 													callFunction = call.processDisks(current);
                // 													current.comments = "Processing of Disks";
                // 													current.state = "complete";

                // 													break; 

                // 			case "processOSProfile" :               call = new Nutanix_ProcessProviders();
                // 													callFunction = call.processOSProfile(current);
                // 													current.comments = "Processing of OS Profile";
                // 													current.state = "complete";

                // 													break;    

                // 			case "processNetworkProfiles" :         call = new Nutanix_ProcessProviders();
                // 													callFunction = call.processNetworkProfiles(current);
                // 													current.comments = "Processing of Network Profiles";
                // 													current.state = "complete";

                // 													break; 

                // 			case "processDataDisk" :                call = new Nutanix_ProcessProviders();
                // 													callFunction = call.processDataDisk(current);
                // 													current.comments = "Processing of Data Disk";
                // 													current.state = "complete";

                // 													break; 

                // 			case "processNutanixDisk" :             call = new Nutanix_ProcessProviders();
                // 													callFunction = call.processNutanixDisk(current);
                // 													current.comments = "Processing of Nutanix Disks.";
                // 													current.state = "complete";
                // 													break;

            case "processSubnets":
                call = new Nutanix_Import_Subnets();
                callFunction = call.processSubnets(current);
                current.comments = "Processing of Subnets.";
                current.state = "complete";

                break;

            case "importRecoveryPoints":
                call = new Nutanix_ImportRecoveryPoints();
                callFunction = call.importRecoveryPoints(current);
                current.comments = "Import of Recovery Points.";
                current.state = "complete";

                break;

            case "processAzureRecoveryPoints":
                call = new Nutanix_ImportRecoveryPoints();
                callFunction = call.processAzureRecoveryPoints(current);
                current.comments = "Processing of Azure Recovery Points.";
                current.state = "complete";
                break;

            case "processAhvRecoveryPoints":
                call = new Nutanix_ImportRecoveryPoints();
                callFunction = call.processAhvRecoveryPoints(current);
                current.comments = "Processing of AHV Recovery Points.";
                current.state = "complete";

                break;

            case "processAwsRecoveryPoints":
                call = new Nutanix_ImportRecoveryPoints();
                callFunction = call.processAwsRecoveryPoints(current);
                current.comments = "Processing of AMIs.";
                current.state = "complete";

                break;

            case "processVmwareRecoveryPoints":
                call = new Nutanix_ImportRecoveryPoints();
                callFunction = call.processVmwareRecoveryPoints(current);
                current.comments = "Processing of VMWare Recovery Points.";
                current.state = "complete";

                break;

            case "startInventoryDelete":
                call = new Delete_Inventory();
                call.deleteInventory();
                current.comments = "Starts the deletion of calm snow data.";
                current.state = "complete";
                gs.setProperty('x_nuta2_nutanix_ca.Delete_Flag', '0');
                this.logger.info("Inventory deletion has successfully completed.");
                break;

            default:
                this.logger.error("Method :: " + topic + " not found inside CALM Queue Post Insert BR.");
                break;

        }

    } catch (e) {
        current.state = "error";
        current.comments = "Exception caught inside CALM Queue Post Insert BR : " + e;
        this.logger.error("Exception caught inside CALM Queue Post Insert BR : " + e);

    } finally {
        current.update();
        this.logger.info("CALM Queue Post Insert BR ran sucessfully");
    }

})(current, previous);]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-14 19:58:34&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;bbb0915f37896300fdfc097973990eaf&lt;/sys_id&gt;&lt;sys_mod_count&gt;98&lt;/sys_mod_count&gt;&lt;sys_name&gt;CALM Queue Post Insert BR&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_bbb0915f37896300fdfc097973990eaf&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-12-23 13:58:11&lt;/sys_updated_on&gt;&lt;template/&gt;&lt;when&gt;async&lt;/when&gt;&lt;/sys_script&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=bbb0915f37896300fdfc097973990eaf"/&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1596808913</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>d4021aa32fd50110e49924c62799b6d2</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb918957c0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table>x_nuta2_nutanix_ca_nutanix_process_queue</table>
<target_name>CALM Queue Post Insert BR</target_name>
<type>Business Rule</type>
<update_domain>global</update_domain>
<update_guid>698d6ca223a4411099be226d09af2cde</update_guid>
<update_guid_history>698d6ca223a4411099be226d09af2cde:-1596808913,05014346e3a00110cbe56acfc5d0eba3:-1068005728,6a227e4af260011045a334d96edc2ef0:-2146883582,ed0545584e600110df92883bc6ca5dca:1576427589,b743b05c0120011019a702feefd38857:170423434,cef23c1c0620011040c6d2ad1ecfd87d:1854116426,39ac5fc77ac23010c2a080e895c89ad8:932129879,e5ebe8f0bf353010b831087fc8ebc3b0:1149949279,bf5ff2b8c73030105d2a489f532824fe:1109753876,941ff2b8c9303010ffebd9f9674587a6:1191961138,b54e7a78d4303010716b8a01437c7198:1076177624,7cc46d0e3868bc10c2d4c0b8dbffb2e3:2133410602,3f22a902e664bc10a07121b5ca19b89e:850639531,b5e481c2c2287c101aa5e52616bfd020:611827908,6709b32080a03810971f893f7ffb137c:-601110856,3737fbec0e6038108eae6b9ca38d8794:1989500344,c7a80d64c0a8b41006761ae796b17615:657374893,4cd5531ce5a0b41083c0ee23da1fd8d1:-648178676,d502d75829a0b41008d1d8bab3f550f9:941103053,b37748acba68b0105586b26ebd4b0bd6:1579148322,52af46230fd030109b53042d8932e867:2093997854,ed5f0ea3e4d03010eb99ff01d26455c7:-650016090,9adbc28873d530102de45d6ad1a27ece:1546574397,36aefca7bb09b4104f26ad7704ac79d8:1027236733,3c3f3315a3453010faab3d493d4951a1:-1087638242,e71998a4b60ba41034a118ff5a8e5651:-1786798839,623a85d3b781601016e92fb35dc699f8:850604808,fad1a024a013501032408c827ab59a01:-860939647,566a6c7be3219410dbbead8ca62ff506:1555223931,6dc9283bfc21941033f1b5864d1d4ec2:810007801,a1fe59c64c255010bd664dca27b981a6:810007801,2dd3a5adab3944103b4409a210808b90:1442195893,072da9eac73bb300ba488f9282721c28:1828341754,b5a5818575df330064cc8be698d53c84:-1264698420,0ae9a550edb2330083ac781245d72418:-1790012302,ca99f6de7b623300810be0bba9d52cc0:347639304,65aa86330a3a3300394108f0158f806a:-218226572,ff131311ffa23300901b0b72d7ba7560:182684174,5aeb611b15bc3300b435a8e4e3d31175:2058851827,f6790cdac2e033007dc047d33e0acdf6:1329591928,6f2572e34e143300a219428e0d6cdf12:-1560476379,23d0fe6ba5d033002a9730c6a1b597b6:-298398622,7f41802c095033006cfb04bc310016bf:-1808920150,eb64f1c3840c3300b58be800684825d8:-1082137276,e332b54fb0c833004eea7a624cfec946:-2046263791,373231c120832300baa39ec469345073:-957216339,bde079cd924323002aceaca4fa18eb40:-831597633,36e5e2447f322300ad16271df493a507:-146187127,faaaa5933faa63002138751fe281ba61:864117116,8b9dca8bcaa26300161c0d5a0fc06b47:-117261664,ad26380b71ee23000794f68dc71f9f99:-960480305,f220b32636262300b19720b55e3fbfd5:-256310908,ae10b326ee26230094d58cb6ecf00fce:-1648393065,bcff6326172623005f7ce39bba763d12:1079254834,522563ae76e223007bc54dd706d17880:977754310,c34fdc86dda26300db8df302509e9f82:794859114,4e355d8cc662230032aa216cf016d33f:-1497518300,d371d1880b6223005550ea114a9b2838:-56043395,674a490402622300cc98dc2eb301a13c:-1456565443,f183113dd4122300d6929e92d60ce594:-1651936013,6c1b8d1068522300b0cd1b1d0f8ba992:923013573,e896541f9d02a3007e1a8ae3c8c1eac2:-1408485879,48151c5bde02a30013fb51a54999f2d2:-494754017,23a6ddcd91466b0059c15a7fcc2c6da0:-936893512,0e848941d8466b00634093d4a600b5ef:1063480246,7764494153466b00bbd24126f39a3da0:-175139695,aaec3cc956066b008408246d162573dc:2130389375,dd04644989c26b00f09ef8706f818400:-1294107837,b7e8adc717f5a300fbc71e061366abfd:2029954177,f8ab741e0ff5230052cd48b7d5b0655d:-1874103587,76a465394635e300ea845393180b83f9:54423497,0cc40db16ef1e3007f961be3efcdcd7f:1280628513,1defe0a910f5a300b828d67214b241be:-662906672,2c0ee4e50cf5a3008765e45f25dacf76:-1450709752,b07724e1c4f5a3002956ea81facbb776:-1529791267,94ee5f0187b9630090f940471cfff6de:-1162330319,138e570154b96300d69ddbfec5c20494:1533409521,c015e4554e6d2300f651b69bb1a8c8cc:-148526255,f4041b28c32523003de907be98b7ab1f:1784191909,88ebda3765152300d7aaa6f973f16827:1836702593,5e5b5a37c81523006cf79b390043662c:-905503957,5cb5bc4fe05123005424628ebeb4aa27:-2141048635,f967ccc3c2112300f0042e4a11e8a592:-279721595,92f38843351123009dbef46787a137fb:237522898,84a3213e979523005430521238d53412:-1445107717,d38559b273952300a5ea3b920f6857ab:1269245409,ff2845ba0a552300110193f58d36ad91:1753065237,8a91c47ede9123009978778665e3f706:996518732,3d0a7be67d91230011625b289c3f7bdd:-129430740,4ac9f3e6999123008b22c910895032bc:1810600742,2ea97be68391230020a3722b45a1b1d3:53090790,a1f83f660f9123005cc457e3aca10a9f:-559054214,e8e8ff663c912300cb3d49e9d9d47f61:1336326260,78fa8be6e7112300a803b0e766a363f6:7505214,07d717927f9d2300dbfdea8c98ac472b:-429338116,aae18c7a2ad1230000a18e692b7ecdd1:-1373919756,b35ff7e63fd12300a1be23ee7265877a:-1120294527,db13ff66469123001f1f82f21e4dee96:350511550,e936ef667a9123003153d10f3932ff0f:396412953,2fe607620b512300d44964d0aafe890c:604204092,2dce5756ac55230029c24c930f4d6ceb:-1593874500,e45e9792715523006846a6ded6c483a4:190119948,75d6531278552300f50b3d075b82ca69:2023833913,609c0f96481523000ff28285411be7a4:234303908,74cbc39642152300e1eb38d8f6bc6e85:448758465,0c3bc35655152300c9b979bec4612d4b:1417140707,993a8bd299152300b985f39505e4e97e:-396633100,62a84bd2ca15230063aa7c0b8c0a349f:1062555803,850ffe1e4bd12300b7dfb7e1bfda5e0d:2126984610,cf9a1608b451230017a907bb61523936:-868424183,b8dccd2b5a4523000669646534f2bdf1:360327139,be5b416b10452300a5707f7bfd346df9:-702058998,7e72615b28c96300600a575a54685303:980471509,554fd59727c96300f2ff10e8d12ffa8d:213021568,6f1f5597bcc96300b0639a63798eac53:1147603682,7fae9d57f7c963009ae232f26b6a4860:-1194791625,9372519ffc896300075f5bebdbd6619c:131003476,1c42d55f318963006dd01eb3259dfd5c:-1921484377</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_properties_c01af8972f42301071abd6c6f699b63c</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties"><sys_properties action="INSERT_OR_UPDATE"><choices/><description>System property of v1.5</description><ignore_cache>true</ignore_cache><is_private>false</is_private><name>x_nuta2_nutanix_ca.1_5</name><read_roles>x_nuta2_nutanix_ca.calm_admin</read_roles><suffix>x_nuta2_nutanix_ca.1_5</suffix><sys_class_name>sys_properties</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2021-08-23 16:11:48</sys_created_on><sys_id>c01af8972f42301071abd6c6f699b63c</sys_id><sys_mod_count>5</sys_mod_count><sys_name>x_nuta2_nutanix_ca.1_5</sys_name><sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_properties_c01af8972f42301071abd6c6f699b63c</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2021-12-22 11:05:10</sys_updated_on><type>string</type><value>1</value><write_roles>x_nuta2_nutanix_ca.calm_admin</write_roles></sys_properties><sys_translated_text action="delete_multiple" query="documentkey=c01af8972f42301071abd6c6f699b63c"/></record_update>]]></payload>
<payload_hash>278205016</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>d8021aa32fd50110e49924c62799b6d1</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb91895650000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table/>
<target_name>x_nuta2_nutanix_ca.1_5</target_name>
<type>System Property</type>
<update_domain>global</update_domain>
<update_guid>e15c7a020fa0011060f3a86481b696c2</update_guid>
<update_guid_history>e15c7a020fa0011060f3a86481b696c2:278205016,efd3e69517940110d024007214ca1c2e:717338879,abe9a3b98703301085762401d94ffafa:1670540512,930348e23e3630108a925d7903e11a0d:717338879,834abc9754423010d06193591f020147:1670540512,2d2a3c971c423010daaa63361fd41457:-1489366353</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_documentation_x_nuta2_nutanix_ca_calm_plugin_configuration_select_service_portal_en</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update><sys_documentation element="select_service_portal" label="Enable Service Portal" language="en" table="x_nuta2_nutanix_ca_calm_plugin_configuration"><sys_documentation action="INSERT_OR_UPDATE"><element>select_service_portal</element><help/><hint/><label>Enable Service Portal</label><language>en</language><name>x_nuta2_nutanix_ca_calm_plugin_configuration</name><plural>Enable Service Portals</plural><sys_class_name>sys_documentation</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2021-08-11 11:59:54</sys_created_on><sys_id>ea6d46931bb1301098a61f4a234bcbc2</sys_id><sys_mod_count>1</sys_mod_count><sys_name>Enable Service Portal</sys_name><sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_documentation_x_nuta2_nutanix_ca_calm_plugin_configuration_select_service_portal_en</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2022-01-24 12:04:26</sys_updated_on><url/><url_target/></sys_documentation></sys_documentation></record_update>]]></payload>
<payload_hash>-2100030835</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>dc021aa32fd50110e49924c62799b6d0</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb91c1f7e0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table>x_nuta2_nutanix_ca_calm_plugin_configuration</table>
<target_name>Plugin Configuration.Enable Service Portal</target_name>
<type>Field Label</type>
<update_domain>global</update_domain>
<update_guid>5f5641b45f59c1107a054779aead032d</update_guid>
<update_guid_history>5f5641b45f59c1107a054779aead032d:-2100030835,e26d469324b1301080a09ae568be36dd:-927666209</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_cc07c62137412300d27b8cf6c3990e83</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Nutanix_Calm_Utils&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description&gt;DAO util and changes&lt;/description&gt;&lt;name&gt;Nutanix_Calm_Utils&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Nutanix_Calm_Utils = Class.create();
Nutanix_Calm_Utils.prototype = {
    initialize: function() {
        this.logger = new Nutanix_Calm_Logger();
        /*
		How to use alias in script
		1. Add new alias in either of table,api,property
		2. In respective script includes, instantiate Nutanix_Calm_Utils var apputil
		3. Referance specific value as apputil.configuration.&lt;api/table/property&gt;.&lt;key-name&gt;
 		*/
        this.version = gs.getProperty('x_nuta2_nutanix_ca.calm_version');
        this.configuration = {
            "api": {
                "getProjectList": "/projects/list",
                "getBlueprintList": "/blueprints/list",
                "getBlueprintDetail": "/blueprints/",
                "getAppList": "/apps/list",
                "getAppDetail": "/apps/",
                "getMarketplaceItemDetail": "/calm_marketplace_items/",
                "getCategories": "/categories/AppFamily/list",
                "getIcon": "/static/app_icons/",
                "getEnvironment": "/environments/",
                "getUsersList": "/users/list",
                "getRolesList": "/roles/list",
                "projectInternal": "/projects_internal",
                "directoryServices": "/directory_services/list",
                "getMarketplaceItem": "/calm_marketplace_items/list",
                "getGroupsList": "/user_groups/list",
                "proxyLogin": "/proxy_login",
                "getSubnets": "/subnets/list",
                "getRunbooksList": "/runbooks/list",
                "getRunbookDetail": "/runbooks/",
                "getEndpointsList": "/endpoints/list"
            },
            "table": {
                "NutanixStagingApplication": "x_nuta2_nutanix_ca_nutanix_staging_application",
                "NutanixCalmAction": "x_nuta2_nutanix_ca_nutanix_calm_action",
                "NutanixCalmApplication": "x_nuta2_nutanix_ca_nutanix_calm_application",
                "ActionWorkflowStaging": "x_nuta2_nutanix_ca_app_action_workflow_trigger",
                "AppDeployment": "x_nuta2_nutanix_ca_application_deployment",
                "Blueprint": "x_nuta2_nutanix_ca_nutanix_blueprint",
                "Project": "x_nuta2_nutanix_ca_nutanix_project",
                "CalmPluginConfig": "x_nuta2_nutanix_ca_calm_plugin_configuration",
                "stagingProject": "x_nuta2_nutanix_ca_nutanix_staging_project",
                "stagingBlueprints": "x_nuta2_nutanix_ca_nutanix_staging_blueprints",
                "processQueue": "x_nuta2_nutanix_ca_nutanix_process_queue",
                "applicationProfiles": "x_nuta2_nutanix_ca_application_profile",
                "varaiblesTable": "item_option_new",
                "variableSetTable": "io_set_item",
                "stagingMarketplaceItem": "x_nuta2_nutanix_ca_nutanix_staging_marketplace_items",
                "catalog": "sc_catalog",
                "category": "sc_category",
                "sysUiAction": "sys_ui_action",
                "catalogProfileRelation": "x_nuta2_nutanix_ca_catalog_item_and_application_profile_relation",
                "variablesProperties": "x_nuta2_nutanix_ca_catalog_variables_properties",
                "catalogUserCriteria": "sc_cat_item_user_criteria_mtom",
                "userCriteria": "user_criteria",
                "catalogProjectRelation": "x_nuta2_nutanix_ca_nutanix_calm_projects_blueprints_relationship",
                "Credentials": "x_nuta2_nutanix_ca_nutanix_calm_credential",
                "appRunlogs": "x_nuta2_nutanix_ca_nutanix_calm_app_runlogs",
                "stagingEnvironment": "x_nuta2_nutanix_ca_nutanix_staging_environment",
                "runtimeConfig": "x_nuta2_nutanix_ca_nutanix_runtime_configuration",
                "catalogClientScript": "catalog_script_client",
                "catalogUIPolicy": "catalog_ui_policy",
                "catItem": "sc_cat_item",
                "awsStorage": "x_nuta2_nutanix_ca_nutanix_storage",
                "awsTag": "x_nuta2_nutanix_ca_nutanix_aws_tag_list",
                "StagingGCP": "x_nuta2_nutanix_ca_staging_gcp",
                "blankDisks": "x_nuta2_nutanix_ca_blank_disks",
                "networking": "x_nuta2_nutanix_ca_networking",
                "disks": "x_nuta2_nutanix_ca_disks",
                "stagingAzure": "x_nuta2_nutanix_ca_staging_azure",
                "security": "x_nuta2_nutanix_ca_secret",
                "nw_profiles": "x_nuta2_nutanix_ca_network_profiles",
                "dataDisk": "x_nuta2_nutanix_ca_data_disk",
                "subnet": "x_nuta2_nutanix_ca_subnet",
                "dropDownTable": "x_nuta2_nutanix_ca_generic_table_for_dropdown",
                "recoveryPoints": "x_nuta2_nutanix_ca_restore_points",
                "marketplaceItem": "x_nuta2_nutanix_ca_nutanix_marketplaceitems",
                "NutanixStagingRunbooks": "x_nuta2_nutanix_ca_nutanix_staging_runbooks",
                "Runbooks": "x_nuta2_nutanix_ca_runbooks",
                "Endpoint": "x_nuta2_nutanix_ca_endpoints",
                "NutanixStagingEndPoints": "x_nuta2_nutanix_ca_nutanix_staging_endpoint"
            },
        };
    },
    // Get credentials

    _getApiToken: function() { //Orchestration api token call
        try {
            var credential_alias = "";
            var calmInstanceURL = "";
            var midApplication = "";
            var retries = 0;

            var grConfig = new GlideRecord(this.configuration.table.CalmPluginConfig);
            if (grConfig.get(gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id') + "")) {
                grConfig.query();
                if (grConfig.next()) {
                    credential_alias = grConfig.credential + "";
                    calmInstanceURL = grConfig.calm_instance + "";
                    midApplication = grConfig.mid_application + "";

                }
            }

            while (retries &lt; 3) {

                var inputs = {};
                inputs['endpoint'] = calmInstanceURL + gs.getProperty('x_nuta2_nutanix_ca.API_Prefix') + '/users/me';
                inputs['midapplication'] = midApplication + "";
                inputs['credentialalias'] = credential_alias + "";

                var outputs = sn_fd.FlowAPI.executeAction('x_nuta2_nutanix_ca.nutanix_refresh_token', inputs, 10000);

                var response = outputs['response'] + "";
                var statuscode = outputs['statuscode'] + "";
                var headers = outputs['headers'];

                if (statuscode == '200' || statuscode == '201') {
                    var parse_headers = JSON.parse(headers);
                    var cookie = parse_headers["Set-Cookie"][0];
                    gs.setProperty("x_nuta2_nutanix_ca.nuta_session_token", cookie + "");
                    this.logger.info("Refreshing Nutanix session.");
                    break;
                    //return "200";
                }

                retries++;
            }
            //return "401";
        } catch (err) {
            this.logger.error("Failed getting token. Error: " + err);
        }
    },

    // Use this method to make Calm API client call to the Nutanix for JSON response
    makeCalmApiCall: function(httpMethod, endpoint, body) { //Original makeCalmApiCall
        try {
            var credential_status = "";
            var cookie = "";

            var grConfig = new GlideRecord(this.configuration.table.CalmPluginConfig);
            grConfig.addQuery('sys_id', gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id'));
            grConfig.query();
            if (grConfig.next()) {
                //this.Catalog = grConfig.service_catalog;
                this.midServer = (grConfig.mid_server) ? grConfig.mid_server.getDisplayValue() + '' : "";
                this.midApplicationServer = (grConfig.mid_application) ? grConfig.mid_application.default_mid_server.name + "" : "";
                this.calmInstanceURL = grConfig.calm_instance + '';
                this.userName = grConfig.calm_admin_username + "";
                this.password = grConfig.calm_admin_password.getDecryptedValue() + "";
                cookie = gs.getProperty("x_nuta2_nutanix_ca.nuta_session_token") + "";
            }

            var endpointURL = this.calmInstanceURL + gs.getProperty('x_nuta2_nutanix_ca.API_Prefix') + endpoint;
            //gs.info("Parth endpointURL :" + endpointURL);

            var request = new sn_ws.RESTMessageV2();
            request.setEccParameter('skip_sensor', true);
            request.setRequestHeader("Accept", "application/json");
            request.setRequestHeader("Content-Type", "application/json");

            if (gs.getProperty("x_nuta2_nutanix_ca.use_external_credential_system") + "" == "false") {
                request.setBasicAuth(this.userName, this.password);
                if (gs.getProperty("x_nuta2_nutanix_ca.Calm_SaaS_and_ServiceNow") + "" == "false") {
                    request.setMIDServer(this.midServer + '');
                }
            } else {
                request.setMIDServer(this.midApplicationServer + "");

                if (cookie + "" == "") {
                    gs.eventQueue("x_nuta2_nutanix_ca.refresh_token", "", "", "");
                    request.setRequestHeader("Cookie", cookie);
                } else {
                    var preset_cookie = cookie + "";
                    request.setRequestHeader("Cookie", preset_cookie);
                }
            }

            request.setHttpMethod(httpMethod);
            request.setEndpoint(endpointURL);
            if (body)
                request.setRequestBody(body);

            request.disableForcedVariableSubstitution();

            //if(this.midServer.status =='Up' &amp;&amp; this.midServer.validated == 'true') {
            var response = request.execute();
			
            if (gs.getProperty("x_nuta2_nutanix_ca.use_external_credential_system") + "" == "true" &amp;&amp; response.getStatusCode() == "401") {
                this.logger.info("Nutanix session has expired.");
                //credential_status = this._getApiToken();
                gs.eventQueue("x_nuta2_nutanix_ca.refresh_token", "", "", "");
                //if(credential_status != '401')
                return this.makeCalmApiCall(httpMethod, endpoint, body);
            }
            //this.logger.debug(' MID Server '+this.midServer.getDisplayValue()+''+ ' is Up ');
            this.logger.debug("====makeCalmApiCall \nhttpMethod: " + httpMethod + "\nendpointURL:" + endpointURL + "\nrequest body" + JSON.stringify(body) + "\nresponse StatusCode: " + response.getStatusCode() + "\n response body:" + response.getBody());
            return response;
            //} else {
            //this.logger.error(' MID Server '+this.midServer.getDisplayValue()+''+ ' is Down / Not Validated ');
            //return false;
            //}
        } catch (err) {
            this.logger.error("Make Calm API Call [makeCalmApiCall] Error: " + err);
        }
    },
    makeAsyncCalmApiCall: function(httpMethod, endpoint, body) { //Original makeCalmApiCall
        try {
            var credential_status = "";
            var cookie = "";
            var grConfig = new GlideRecord(this.configuration.table.CalmPluginConfig);
            grConfig.addQuery('sys_id', gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id'));
            grConfig.query();
            if (grConfig.next()) {
                this.midServer = (grConfig.mid_server) ? grConfig.mid_server.getDisplayValue() + '' : "";
                this.midApplicationServer = (grConfig.mid_application) ? grConfig.mid_application.default_mid_server.name + "" : "";
                this.calmInstanceURL = grConfig.calm_instance + '';
                this.userName = grConfig.calm_admin_username + "";
                this.password = grConfig.calm_admin_password.getDecryptedValue() + "";
                cookie = gs.getProperty("x_nuta2_nutanix_ca.nuta_session_token") + "";
            }
            var endpointURL = this.calmInstanceURL + gs.getProperty('x_nuta2_nutanix_ca.API_Prefix') + endpoint;
            var request = new sn_ws.RESTMessageV2();
            request.setEccParameter('skip_sensor', true);
            request.setRequestHeader("Accept", "application/json");
            request.setRequestHeader("Content-Type", "application/json");
            if (gs.getProperty("x_nuta2_nutanix_ca.use_external_credential_system") + "" == "false") {
                request.setBasicAuth(this.userName, this.password);
                if (gs.getProperty("x_nuta2_nutanix_ca.Calm_SaaS_and_ServiceNow") + "" == "false") {
                    request.setMIDServer(this.midServer + '');
                }
            } else {
                request.setMIDServer(this.midApplicationServer + "");
                if (cookie + "" == "") {
                    gs.eventQueue("x_nuta2_nutanix_ca.refresh_token", "", "", "");
                    request.setRequestHeader("Cookie", cookie);
                } else {
                    var preset_cookie = cookie + "";
                    request.setRequestHeader("Cookie", preset_cookie);
                }
            }
            request.setHttpMethod(httpMethod);
            request.setEndpoint(endpointURL);
            if (body)
                request.setRequestBody(body);

            request.disableForcedVariableSubstitution();

            var response = request.execute();
            if (gs.getProperty("x_nuta2_nutanix_ca.use_external_credential_system") + "" == "true" &amp;&amp; response.getStatusCode() == "401") {
                this.logger.info("Nutanix session has expired.");
                gs.eventQueue("x_nuta2_nutanix_ca.refresh_token", "", "", "");
                return this.makeCalmApiCall(httpMethod, endpoint, body);
            }
            this.logger.debug("makeCalmApiCall \nhttpMethod: " + httpMethod + "\nendpointURL:" + endpointURL + "\nresponse StatusCode: " + response.getStatusCode() + "\n response body:" + response.getBody());

            return response;
        } catch (err) {
            this.logger.error("Make Calm API Call [makeCalmApiCall] Error: " + err);
        }
    },
    //===========================API call to get CALM version=========================//
    makeCalmApiVersionCall: function(httpMethod, endpoint, body) {
        try {
            var cookie = "";
            var grConfig = new GlideRecord(this.configuration.table.CalmPluginConfig);
            grConfig.addQuery('sys_id', gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id'));
            grConfig.query();
            if (grConfig.next()) {
                this.userName = grConfig.calm_admin_username + ""; //added authentiction check
                this.password = grConfig.calm_admin_password.getDecryptedValue() + "";
                //this.Catalog = grConfig.service_catalog;
                if (gs.getProperty("x_nuta2_nutanix_ca.use_external_credential_system") + "" == "false")
                    this.midServer = grConfig.mid_server;
                else
                    this.midServer = grConfig.mid_application.default_mid_server;

                this.calmInstanceURL = grConfig.calm_instance + '';
            }

            var endpointURL = this.calmInstanceURL + endpoint;

            var request = new sn_ws.RESTMessageV2();
            request.setEccParameter('skip_sensor', true);
            request.setRequestHeader("Accept", "text/html");
            request.setHttpMethod(httpMethod);
            if (gs.getProperty("x_nuta2_nutanix_ca.Calm_SaaS_and_ServiceNow") + "" == "false") {
                request.setMIDServer(this.midServer.getDisplayValue() + '');
            }
            request.setEndpoint(endpointURL);
            // 			request.setBasicAuth(this.userName, this.password); //basic Authentication.



            if (gs.getProperty("x_nuta2_nutanix_ca.use_external_credential_system") + "" == "false") {
                request.setBasicAuth(this.userName, this.password); //basic Authentication.
            } else {
                cookie = gs.getProperty("x_nuta2_nutanix_ca.nuta_session_token") + ""; //cookie status
                request.setMIDServer(this.midApplicationServer + "");
                if (cookie + "" == "") {
                    gs.eventQueue("x_nuta2_nutanix_ca.refresh_token", "", "", "");
                    request.setRequestHeader("Cookie", cookie);
                } else {
                    var preset_cookie = cookie + "";
                    request.setRequestHeader("Cookie", preset_cookie);
                }
            }

            if (body)
                request.setRequestBody(body);

            if ((this.midServer.status == 'Up' &amp;&amp; this.midServer.validated == 'true') &amp;&amp; (gs.getProperty("x_nuta2_nutanix_ca.Calm_SaaS_and_ServiceNow") + "" == "false")) {
                var response = request.execute();
                this.logger.debug("makeCalmApiVersionCall \nhttpMethod: " + httpMethod + "\nendpointURL:" + endpointURL + "\nresponse StatusCode: " + response.getStatusCode() + "\n response body:" + response.getBody());
                this.logger.debug(' MID Server ' + this.midServer.getDisplayValue() + '' + ' is Up ');
                return response;
            }
            if (gs.getProperty("x_nuta2_nutanix_ca.Calm_SaaS_and_ServiceNow") + "" == "true") {
                var response = request.execute();
                this.logger.debug("makeCalmApiVersionCall \nhttpMethod: " + httpMethod + "\nendpointURL:" + endpointURL + "\nresponse StatusCode: " + response.getStatusCode() + "\n response body:" + response.getBody());
                return response;
            } else {
                this.logger.error(' MID Server ' + this.midServer.getDisplayValue() + '' + ' is Down / Not Validated ');
                return false;
            }

        } catch (err) {
            this.logger.error("Make Calm API Version Call [makeCalmApiVersionCall] Error: " + err);
        }
    },
    //===========================End of API call to get CALM version==================//

    makeProxyCall: function(httpMethod, endpoint, body, userId) { //API Proxy Call
        try {
            var userGr = new GlideRecord('sys_user');
            if (userGr.get(userId)) {
                var proxyURL = this.configuration.api.proxyLogin + '';
                var calmUserName = userGr.email + '';
                calmUserName = calmUserName.toLowerCase() + '';
                var proxyBody = {
                    "proxy_for_username": calmUserName
                };
                var proxyResponse = this.makeCalmApiCall('POST', proxyURL, this.stringify(proxyBody));
            }
            if (proxyResponse.getStatusCode() == '200' || proxyResponse.getStatusCode() == '201') {
                var parsedProxyResp = this.parse(proxyResponse.getBody());
                var sessionId = parsedProxyResp.ntnx_igw_session + '';
                var idExpiresIn = parsedProxyResp.expires + '';
                var grConfig = new GlideRecord(this.configuration.table.CalmPluginConfig);
                grConfig.addQuery('sys_id', gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id'));
                grConfig.query();
                if (grConfig.next()) {
                    this.midServer = (grConfig.mid_server) ? grConfig.mid_server : grConfig.mid_application.default_mid_server;
                    this.calmInstanceURL = grConfig.calm_instance + '';
                }

                var domain = this.calmInstanceURL.replace('https://', '').replace(':9440', '');
                var cookie = 'NTNX_IGW_SESSION=' + sessionId + '; path=/; domain=' + domain + '; Secure; HttpOnly; Expires=' + this.proxyUTCConverter(idExpiresIn) + ';';
                var endpointURL = this.calmInstanceURL + gs.getProperty('x_nuta2_nutanix_ca.API_Prefix') + endpoint;

                var proxyRequest = new sn_ws.RESTMessageV2();
                proxyRequest.setEccParameter('skip_sensor', true);
                proxyRequest.setRequestHeader("Accept", "application/json");
                proxyRequest.setRequestHeader("Content-Type", "application/json");
                proxyRequest.setRequestHeader("Cookie", cookie);
                proxyRequest.setHttpMethod(httpMethod);
                if (gs.getProperty("x_nuta2_nutanix_ca.Calm_SaaS_and_ServiceNow") + "" == "false") {
                    proxyRequest.setMIDServer(this.midServer.getDisplayValue() + '');
                }
                proxyRequest.setEndpoint(endpointURL);
                if (body)
                    proxyRequest.setRequestBody(body);

                proxyRequest.disableForcedVariableSubstitution();

                if (this.midServer.status == 'Up' &amp;&amp; this.midServer.validated == 'true') {
                    proxyResponse = proxyRequest.execute();
                    this.logger.debug("makeProxyCall \nhttpMethod: " + httpMethod + "\nendpointURL:" + endpointURL + "\proxyResponse StatusCode: " + proxyResponse.getStatusCode() + "\n response body:" + proxyResponse.getBody());
                    this.logger.debug(' MID Server ' + this.midServer.getDisplayValue() + '' + ' is Up ');
                    return proxyResponse;
                }
                if (gs.getProperty("x_nuta2_nutanix_ca.Calm_SaaS_and_ServiceNow") + "" == "true") {
                    proxyResponse = proxyRequest.execute();
                    this.logger.debug("makeProxyCall \nhttpMethod: " + httpMethod + "\nendpointURL:" + endpointURL + "\proxyResponse StatusCode: " + proxyResponse.getStatusCode() + "\n response body:" + proxyResponse.getBody());
                    return proxyResponse;
                } else {
                    this.logger.error(' MID Server ' + this.midServer.getDisplayValue() + '' + ' is Down / Not Validated ');
                    return false;
                }

            }
            if (proxyResponse.getStatusCode() == '403') {
                return this.makeCalmApiCall(httpMethod, endpoint, body);
            } else {
                this.logger.error("Error in makeProxyCall API Call [makeProxyCall] Error: " + proxyResponse.getBody());
            }
        } catch (err) {
            this.logger.error("Make Proxy API Call [makeProxyCall] Error: " + err);
        }
    },

    makeIntermediateApiCall: function(httpMethod, endpoint, body, userId) { //API intermediate Proxy Call

        var local_groups_flag = "";
        var grConfig = new GlideRecord(this.configuration.table.CalmPluginConfig);
        grConfig.addQuery('sys_id', gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id'));
        grConfig.query();
        if (grConfig.next()) {
            local_groups_flag = grConfig.use_local_groups + "";
        }

        if (!this.versionNewCheck() || local_groups_flag == "true") {
            return this.makeCalmApiCall(httpMethod, endpoint, body);
        } else {

            var grUser = new GlideRecord('sys_user_has_role');
            grUser.addEncodedQuery('role.name=x_nuta2_nutanix_ca.calm_admin^ORrole.name=admin^user=' + userId);

            grUser.query();

            if (grUser.next()) //user_name.hasRole("x_nuta2_nutanix_ca.calm_admin")) 
            {
                return this.makeCalmApiCall(httpMethod, endpoint, body);
            } else {
                return this.makeProxyCall(httpMethod, endpoint, body, userId);
            }
        }
    },

    makeCalmApiCallForIcon: function(httpMethod, endpoint, body, sysId) {
        try {
            var grConfig = new GlideRecord(this.configuration.table.CalmPluginConfig);
            grConfig.addQuery('sys_id', gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id'));
            grConfig.query();
            if (grConfig.next()) {
                //this.Catalog = grConfig.service_catalog;
                this.midServer = grConfig.mid_server;
                this.calmInstanceURL = grConfig.calm_instance + '';
                this.userName = grConfig.calm_admin_username + '';
                this.password = grConfig.calm_admin_password.getDecryptedValue() + '';
            }

            var endpointURL = this.calmInstanceURL + gs.getProperty('x_nuta2_nutanix_ca.API_Prefix') + endpoint;
            var tablename = 'sc_cat_item';
            var recordSysId = sysId;
            var filename = 'picture';
            var request = new sn_ws.RESTMessageV2();
            request.setEccParameter('skip_sensor', true);
            request.setBasicAuth(this.userName, this.password);
            request.setHttpMethod(httpMethod);
            if (gs.getProperty("x_nuta2_nutanix_ca.Calm_SaaS_and_ServiceNow") + "" == "false") {
                request.setMIDServer(this.midServer.getDisplayValue() + '');
            }
            request.setEndpoint(endpointURL);
            request.saveResponseBodyAsAttachment(tablename, recordSysId, filename);
            if (body)
                request.setRequestBody(body);

            request.disableForcedVariableSubstitution();

            if (this.midServer.status == 'Up' &amp;&amp; this.midServer.validated == 'true') {
                var response = request.execute();
                this.logger.debug("makeCalmApiCallForIcon \nhttpMethod: " + httpMethod + "\nendpointURL:" + endpointURL + "\nresponse StatusCode: " + response.getStatusCode() + "\n response body:" + response.getBody());
                this.logger.debug(' MID Server ' + this.midServer.getDisplayValue() + '' + ' is Up ');
                return response;
            }
            if (gs.getProperty("x_nuta2_nutanix_ca.Calm_SaaS_and_ServiceNow") + "" == "true") {
                var response = request.execute();
                this.logger.debug("makeCalmApiCallForIcon \nhttpMethod: " + httpMethod + "\nendpointURL:" + endpointURL + "\nresponse StatusCode: " + response.getStatusCode() + "\n response body:" + response.getBody())
                return response;
            } else {
                this.logger.error(' MID Server ' + this.midServer.getDisplayValue() + '' + ' is Down / Not Validated ');
                return false;
            }
        } catch (err) {
            this.logger.error("Make API Call [makeCalmApiCallForIcon] Error: " + err);
        }
    },

    ///changes

    generateRequestBody: function(name, version, presetOffset, pageBreaker) {

        if (!this.versionNewCheck()) {
            var responseBody = "";
            switch (name) {

                case "startImportMPI":
                    responseBody = {
                        "kind": "marketplace_item",
                        "offset": 0,
                        "length": 1
                    };
                    return responseBody;

                case "importMPIData":
                    responseBody = {
                        "kind": "marketplace_item",
                        "offset": presetOffset,
                        "length": pageBreaker
                    };
                    return responseBody;

                default:
                    this.logger.error("Inside Nutanix_Calm_Utils.generateRequestBody :: " + name + " not found");
            }
        } else {
            var responseBody = "";
            switch (name) {

                case "startImportMPI":
                    responseBody = {
                        "kind": "marketplace_item",
                        "offset": 0,
                        "filter": "app_state==PUBLISHED",
                        "length": 1
                    };
                    return responseBody;

                case "importMPIData":
                    responseBody = {
                        "kind": "marketplace_item",
                        "offset": presetOffset,
                        "filter": "app_state==PUBLISHED",
                        "length": pageBreaker
                    };
                    return responseBody;

                default:
                    this.logger.error("Inside Nutanix_Calm_Utils.generateRequestBody :: " + name + " not found");
            }
        }
    },

    ///
    //Show/Hide 'Sync' ui action on authentication success or failure
    showHideSyncUiAction: function(SyncStatus) {
        try {
            var grAction = new GlideRecord(this.configuration.table.sysUiAction);
            grAction.addQuery('action_name', 'nutanix_sync');
            grAction.query();
            if (grAction.next()) {
                grAction.form_button = SyncStatus;
                grAction.update();
            }
        } catch (e) {
            this.logger.error("Inside Nutanix_Calm_Utils.showHideSyncUiAction Error: " + e);
        }

    },

    //Show/Hide 'Save Properties' ui action on MID Server Down/not validated
    showHideSaveUiAction: function(SaveStatus) {
        try {
            var grAction = new GlideRecord(this.configuration.table.sysUiAction);
            grAction.addQuery('action_name', 'save_properties');
            grAction.query();
            if (grAction.next()) {
                grAction.form_button = SaveStatus;
                grAction.update();
            }
        } catch (e) {
            this.logger.error("Inside Nutanix_Calm_Utils.showHideSaveUiAction Error: " + e);
        }

    },


    updateCatalogName: function(name) {
        var gr = new GlideRecord(this.configuration.table.catalog);
        gr.addQuery('sys_id', gs.getProperty('x_nuta2_nutanix_ca.nutanix_catalog_sysId') + '');
        gr.query();
        if (gr.next()) {
            gr.title = name + '';
            gr.update();
        } else {
            gr.initialize();
            gr.title = name;
            //gr.desktop_image = '';   //Image needed to be added.
            gr.insert();
        }
    },

    //('importApplications', 'POST', '/apps/list', 'payload');
    insertIntoQueue: function(topic, method, parameter, payload, process, desc) {
        var gr = new GlideRecord(this.configuration.table.processQueue);
        gr.initialize();
        gr.topic = topic + '';
        gr.method = method + '';
        gr.parameter = parameter + '';
        gr.payload = payload + '';
        gr.process_name = process + '';
        gr.description = desc + '';
        gr.state = "ready";
        gr.insert();
    },

    // Inserts app run logs into App Runlogs table
    insertAppRunlogs: function(parsedJson) {
        try {
            var grRunlogs = new GlideRecord(this.configuration.table.appRunlogs);
            grRunlogs.initialize();

            //grRunlogs.name = parsedJson.status.action_reference.name;
            var action_name_vars = ['action_install_ngt', 'action_manage_ngt', 'action_uninstall_ngt', 'action_update'];
            var action_name = parsedJson.status.action_reference.name + '';
            if (action_name_vars.indexOf(action_name) != -1) {
                var action_name_json = {
                    'action_install_ngt': 'Install NGT',
                    'action_manage_ngt': 'Manage NGT',
                    'action_uninstall_ngt': 'Uninstall NGT',
                    'action_update': 'App Edit'
                };
                action_name = action_name_json[action_name];
            } else {
                var aname = action_name.replace('action_', '').replace('_', ' ');
                aname = aname.split(" ");
                for (var j = 0, x = aname.length; j &lt; x; j++) {
                    aname[j] = aname[j][0].toUpperCase() + aname[j].substr(1);
                }
                action_name = aname.join(" ");
            }
            grRunlogs.name = action_name + '';

            grRunlogs.uuid = parsedJson.metadata.uuid;
            grRunlogs.description = parsedJson.status.description;
            grRunlogs.app_uuid = parsedJson.status.application_reference.uuid;
            grRunlogs.app_name = parsedJson.status.application_reference.name;
            grRunlogs.is_runlog_archived = parsedJson.status.is_runlog_archived;
            grRunlogs.is_critical = parsedJson.status.is_critical;
            grRunlogs.state_reason = (parsedJson.status.reason_list).toString(); //stringify
            gs.addErrorMessage("Prince Arora");
            grRunlogs.state = parsedJson.status.state;
            grRunlogs.type = parsedJson.status.type;
            grRunlogs.kind = parsedJson.metadata.kind;
            grRunlogs.last_update_time = this.calmDateConvertor(parsedJson.metadata.last_update_time);
            grRunlogs.creation_time = this.calmDateConvertor(parsedJson.metadata.creation_time);
            grRunlogs.insert();

        } catch (e) {
            this.logger.error("Error occured while inserting app run logs, Nutanix_Calm_Utils.insertAppRunlogs: " + e);
        }
    },

    // Calm "last_update_time", "creation_time" date convertor specific to SNOW datetime format
    calmDateConvertor: function(getdate) {
        try {
            var date = new Date(getdate / 1000);
            var year = date.getUTCFullYear();
            var month = date.getUTCMonth() + 1; // getMonth() is zero-indexed, so we'll increment to get the correct month number
            var day = date.getUTCDate();
            var hours = date.getUTCHours();
            var minutes = date.getUTCMinutes();
            var seconds = date.getUTCSeconds();
            var lastUpdate = year + '-' + month + '-' + day + ' ' + hours + ':' + minutes + ':' + seconds;
            return lastUpdate;
        } catch (e) {
            this.logger.error("Error occured inside Nutanix_Calm_Utils.calmDateConvertor: " + e);
        }
    },

    parse: function(str) {
        if (str)
            return JSON.parse(str);

        return '';
    },

    stringify: function(str) {
        if (str)
            return JSON.stringify(str);

        return '';
    },

    proxyUTCConverter: function(timeStamp) {
        var d = new Date(timeStamp * 1000);
        return d.toGMTString();
    },

    markdown_renderer: function(markdown_string) {
        try {

            if (markdown_string == '')
                return '';

            x_nuta2_nutanix_ca.Markdown_lib;
            var converter = new showdown.Converter();
            var html_string = converter.makeHtml(markdown_string);
            var markdown_desc = (html_string + '').replace(/(&lt;h[1-9])/g, '&lt;strong').replace(/(&lt;\/h[1-9]&gt;)/g, '&lt;/strong&gt;').replace(/&lt;ul&gt;/g, '&lt;ul style="list-style-position: inside;"&gt;');

            return markdown_desc;
        } catch (e) {
            this.logger.error(e);
        }
    },

    versionNewCheck: function() {
        var old_version_array = ["2.4", "2.5", "2.6"];

        if (old_version_array.indexOf(this.version + "") == -1)
            return true;
        else
            return false;

    },

    _createMacroArray: function(macro_string) {

        var split_macros = macro_string.split("@@{");
        var macro_array = [];
        for (var i = 0; i &lt; split_macros.length; i++) {
            if (split_macros[i].indexOf("}@@") != -1)
                macro_array.push(split_macros[i].split("}@@")[0] + "");
        }

        return macro_array;
    },

    getMacroDependencies: function(field) {

        try {
            //gs.info("Parth field1 :" + field);
            var field_json = (field) ? JSON.parse(field) : {};
            var dep_json = {};
            var all_dep = [];

            var type = field_json.type + "";
            if (type == "EXEC_LOCAL" || type == "EXEC_SECRET") {
                var attrs = field_json.options.attrs;
                dep_json.script = {
                    "dependencies": this._createMacroArray(attrs.script + ""),
                    "value": attrs.script
                };
                dep_json.all_dep = dep_json.script.dependencies;
            } else if (type == "HTTP_LOCAL" || type == "HTTP_SECRET") {
                var supported_fields = {
                    "content_type": "",
                    "url": "",
                    "request_body": ""
                };
                var attrs = field_json.options.attrs;

                for (var i in supported_fields) {
                    dep_json[i] = {
                        "dependencies": this._createMacroArray(attrs[i] + ""),
                        "value": attrs[i]
                    };
                    all_dep = all_dep.concat(dep_json[i].dependencies);
                }
                dep_json.response_paths = {
                    "dependencies": this._createMacroArray(JSON.stringify(attrs.response_paths)),
                    "value": attrs.response_paths
                };
                dep_json.all_dep = all_dep.concat(dep_json.response_paths.dependencies);
            } else if (field_json.data_type + "" == "LIST_SINGLE" || field_json.data_type + "" == "LIST") {

                var choice_arr = field_json.options.choices.toString();
                dep_json["local"] = {
                    "dependencies": this._createMacroArray(choice_arr + ""),
                    "value": field_json.value + ""
                };
                dep_json.all_dep = dep_json.local.dependencies;

            } else {
                //gs.info("Parth field2 :" + field);
                dep_json["local"] = {
                    "dependencies": this._createMacroArray(field_json.value + ""),
                    "value": field_json.value + ""
                };
                dep_json.all_dep = dep_json.local.dependencies;
            }

            return dep_json;
        } catch (e) {
            gs.info(e);
        }
    },

    createPreMap: function(field, type) {

        try {
            var pre_array = [];

            if (type == "LOCAL" || type == "SECRET" || type == "PREDEFINED")
                return field.local.dependencies;

            if (type == "EXEC_LOCAL" || type == "EXEC_SECRET") {
                return field.script.dependencies;
            }

            if (type == "HTTP_LOCAL" || type == "HTTP_SECRET") {
                var supported_fields = {
                    "content_type": "",
                    "url": "",
                    "request_body": "",
                    "response_paths": ""
                };
                for (var i in supported_fields) {
                    var sup_array = field[i].dependencies;
                    for (var j = 0; j &lt; sup_array.length; j++) {
                        if (pre_array.indexOf(sup_array[j]) == -1)
                            pre_array.push(sup_array[j]);
                    }
                }
                return pre_array;
            }
        } catch (e) {
            gs.error(type);
        }
    },

    createDependencyMap: function(var_array) {
        var arr = JSON.stringify(var_array);
        arr = JSON.parse(arr);
        return this._tsort(arr);
    },

    _tsort: function(map) {

        var error_map = {};

        function tsort(edges) {
            var nodes = {},
                sorted = [],
                visited = {};

            var Node = function Node(id) {
                this.id = id;
                this.afters = [];
            };

            edges.forEach(function(v) {
                var from = v[0],
                    to = v[1];
                if (!nodes[from]) nodes[from] = new Node(from);
                if (!nodes[to]) nodes[to] = new Node(to);
                nodes[from].afters.push(to);
            });
            Object.keys(nodes).forEach(function visit(idstr, ancestors) {
                var node = nodes[idstr],
                    id = node.id;
                if (visited[idstr]) return;
                if (!Array.isArray(ancestors)) ancestors = [];
                ancestors.push(id);
                visited[idstr] = true;
                node.afters.forEach(function(afterID) {
                    if (ancestors.indexOf(afterID) &gt;= 0) error_map[afterID] = id;
                    visit(afterID.toString(), ancestors.map(function(v) {
                        return v;
                    }));
                });
                sorted.unshift(id);
            });
            return sorted;
        }

        var createEdges = function createEdges(dep) {
            var result = [];
            Object.keys(dep).forEach(function(key) {
                dep[key].forEach(function(n) {
                    result.push([n, key]);
                });
            });
            return result;
        };

        var list = createEdges(map);

        var sorted_array = tsort(list);

        for (var i in map) {
            if (!map[i].length &amp;&amp; sorted_array.indexOf(i) == -1)
                sorted_array.unshift(i);
        }

        return {
            "Dep_array": sorted_array,
            "error_map": error_map
        };
    },

    _tsort2: function(map) {
        var error = "";

        function topologicalSortHelper(node, visited, temp, graph, result) {
            temp[node] = true;

            var neighbors = graph[node];

            for (var i = 0; i &lt; neighbors.length; i += 1) {

                var n = neighbors[i];

                if (temp[n]) {
                    error = 'Circular dependency detected for variable: ' + n;
                    this.logger.error(error);
                    return;
                }

                if (!visited[n]) {

                    topologicalSortHelper(n, visited, temp, graph, result);

                }

            }

            temp[node] = false;

            visited[node] = true;

            result.push(node);

        }

        function topsort(graph) {

            var result = [];
            var visited = [];

            var temp = [];

            for (var node in graph) {

                if (!visited[node] &amp;&amp; !temp[node]) {

                    topologicalSortHelper(node, visited, temp, graph, result);

                }

            }

            return result;

        }

        return {
            "Dep_array": topsort(map),
            "error_map": [error]
        };
    },

    checkForShowbackStatus: function() {
        try {
            var getResponse = this.makeCalmApiCall("GET", "/app_showback/status", "");
            if (getResponse.getStatusCode() + "" == "200") {
                var jsonParse = JSON.parse(getResponse.getBody());
                if (jsonParse.current_status + "" == "enabled") {
                    return true;
                } else {
                    return false;
                }
            } else {
                this.logger.error("Inside Nutanix_Calm_Utils.checkForShowbackStatus : Error during retrieval of checkForShowbackStatus Error: " + getResponse.getBody() + " Status code :: " + getResponse.getStatusCode());
            }
        } catch (e) {
            this.logger.error("Exception Inside Nutanix_Calm_Utils.checkForShowbackStatus : Error during retrieval of checkForShowbackStatus Error: " + e);
        }
    },

    calculatePriceForInventory: function(parsedJson, param) { ///app_showback/status
        try {
            if (this.checkForShowbackStatus()) {
                var endPoint;
                if (param == "applications")
                    endPoint = "/apps/consumption_list";
                else
                    endPoint = "/projects/consumption_list";
                parsedJson = JSON.parse(parsedJson).entities;
                var jsonEntity = {};
                var entity_ids = [];
                for (var p = 0; p &lt; parsedJson.length; p++) {
                    entity_ids.push(parsedJson[p].metadata.uuid + "");
                    jsonEntity[parsedJson[p].metadata.uuid + ""] = parseFloat("0");
                }

                var body = new Object();
                body.time_unit = "month";
                var filter = {
                    "entity_ids": entity_ids
                };
                body.filters = filter;
                var getResponse = this.makeCalmApiCall("POST", endPoint, JSON.stringify(body));
                if (getResponse.getStatusCode() == '200' || getResponse.getStatusCode() == '201') {
                    var parsedgetResponse = JSON.parse(getResponse.getBody());

                    for (var j = 0; j &lt; parsedgetResponse.data.items.length; j++) {
                        for (var k = 0; k &lt; parsedgetResponse.data.items[j].data.length; k++) {
                            jsonEntity[parsedgetResponse.data.items[j].data[k].key + ""] = parseFloat(jsonEntity[parsedgetResponse.data.items[j].data[k].key + ""] + parsedgetResponse.data.items[j].data[k].value + "");
                        }
                    }
                } else {
                    this.logger.error("Inside Nutanix_Calm_Utils.calculatePriceForInventory : Error during retrieval of consumtion price Error: " + getResponse.getBody() + " Status code :: " + getResponse.getStatusCode());
                    return false;
                }
                return JSON.stringify(jsonEntity);
            } else {
                this.logger.error("Showback feature is not enabled at configured CALM PC, please enable the showback and try again later..");
                return false;
            }
        } catch (e) {
            this.logger.error("Exception Inside Nutanix_Calm_Utils.calculatePriceForInventory : Error during retrieval of consumtion price Error: " + e);
        }
    },

    migrateV1_4_3: function() {
        try {
            var delete_blueprint = {};
            var str = [];
            var answer = '';

            var blueprint = new GlideRecord('x_nuta2_nutanix_ca_nutanix_blueprint');
            blueprint.addQuery('state', 'ACTIVE');
            blueprint.query();
            while (blueprint.next()) {
                var final_var_list = [];
                var response = this.makeCalmApiCall("get", '/blueprints/' + blueprint.uuid, "");
                if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {
                    var app_profile_list = JSON.parse(response.getBody()).spec.resources.app_profile_list;
                    if (app_profile_list.length &lt; 1)
                        continue;

                    for (var i in app_profile_list) {
                        var variable_list = app_profile_list[i].variable_list;
                        if (variable_list.length &lt; 1)
                            continue;

                        for (var j in variable_list) {
                            var var_index = final_var_list.indexOf(variable_list[j].name);
                            (var_index == -1) ? final_var_list.push(variable_list[j].name): delete_blueprint[blueprint.name] = {
                                "sys_id": blueprint.sys_id + '',
                                "variables": variable_list[j].name + ''
                            };
                        }
                    }
                }
            }
            gs.info("V1_4_3 migration , blueprint to be deleted : " + JSON.stringify(delete_blueprint));


            var delete_mpi = {};
            var mpi = new GlideRecord('x_nuta2_nutanix_ca_nutanix_marketplaceitems');
            mpi.addQuery('state', 'active');
            mpi.query();
            while (mpi.next()) {
                var final_var_list = [];
                var response = this.makeCalmApiCall("get", '/calm_marketplace_items/' + mpi.uuid, "");
                if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {
                    response = JSON.parse(response.getBody());
                    var app_profile = (response.status.resources.app_blueprint_template.status.resources.app_profile_list);
                    if (app_profile.length &lt; 1)
                        continue;
                    for (var i in app_profile) {
                        var variable_list = app_profile[i].variable_list;
                        if (variable_list.length &lt; 1)
                            continue;
                        for (var j in variable_list) {
                            var var_index = final_var_list.indexOf(variable_list[j].name);
                            (var_index == -1) ? final_var_list.push(variable_list[j].name): delete_mpi[mpi.name + " " + mpi.version] = {
                                "sys_id": mpi.sys_id + '',
                                "variables": variable_list[j].name + ''
                            };
                        }
                    }
                }

            }
            gs.info("V1_4_3 migration, MPI to be deleted : : " + JSON.stringify(delete_mpi));

            var str = [];
            for (var z in delete_blueprint) {

                var count = 0;
                var cat_item = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
                cat_item.addQuery('blueprint', delete_blueprint[z].sys_id);
                cat_item.query();

                while (cat_item.next()) {
                    count++;
                    cat_item.state = 'deleted';
                    cat_item.update();
                    var catItem = cat_item.item_name.getRefRecord();
                    catItem.active = false;
                    catItem.update();
                    gs.info(" Deactivated catalog " + cat_item.item_name.name + " in V1_4_3 migration ");
                }

                var variable = new GlideRecord('item_option_new');
                variable.addQuery('cat_item', delete_blueprint[z].sys_id + '');
                variable.query();
                while (variable.next()) {
					var column_fields = {};
                    column_fields.cat_item = "";
					var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable(variable.sys_id, column_fields, 'update');
                }
                var variables_properties = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
                variables_properties.addQuery('catalog_item', delete_blueprint[z].sys_id + '');
                variables_properties.query();
                while (variables_properties.next()) {
                    variables_properties.deleteRecord();
                }
                if (count &gt; 0)
                    str.push(z);
                gs.info("Blueprint " + z + " is migrated to V1.4.3");
            }
            for (var k in delete_mpi) {
                var count = 0;
                var cat_item = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
                cat_item.addQuery('blueprint', delete_mpi[k].sys_id + '');
                cat_item.query();

                while (cat_item.next()) {
                    count++;
                    cat_item.state = 'deleted';
                    cat_item.update();
                    var catItem = cat_item.item_name.getRefRecord();
                    catItem.active = false;
                    catItem.update();
                    gs.info(" Deactivated catalog " + cat_item.item_name.name + " in V1_4_3 migration ");
                }
                var mpi = new GlideRecord('item_option_new');
                mpi.addQuery('cat_item', delete_mpi[k].sys_id + '');
                mpi.query();
                while (mpi.next()) {
					var column_fields = {};
                    column_fields.cat_item = "";
					var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable(mpi.sys_id, column_fields, 'update');
                }
                var variables_properties = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
                variables_properties.addQuery('catalog_item', delete_mpi[k].sys_id + '');
                variables_properties.query();
                while (variables_properties.next()) {
                    variables_properties.deleteRecord();
                }
                if (count &gt; 0)
                    str.push(k);
                gs.info("MPI " + k + " is migrated to V1.4.3")
            }
            gs.info(str);


            gs.setProperty('x_nuta2_nutanix_ca.1_4_3', "1");
            str.length &gt; 0 ? gs.setProperty('x_nuta2_nutanix_ca.1_4_3_bp', str) : '';

            var var_property = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
            var_property.addEncodedQuery('isprofilevariable=true');
            var_property.query();
            while (var_property.next()) {
                var base_var = new GlideRecord('item_option_new');
				var column_fields = {};
                    base_var.get(var_property.variable);
                    column_fields.description = var_property.uuid;
					var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable(base_var.sys_id, column_fields, 'update');
            }
            this.insertIntoQueue('startInventorySync', '', '', '', 'Start inventory sync', 'This process is invoking the import of all the inventories.');
        } catch (err) {
            gs.error("V1_4_3 migration ," + err);
        }
    },

    type: 'Nutanix_Calm_Utils'


};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;mumtaz.ansari&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-09 13:20:11&lt;/sys_created_on&gt;&lt;sys_id&gt;cc07c62137412300d27b8cf6c3990e83&lt;/sys_id&gt;&lt;sys_mod_count&gt;367&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_Calm_Utils&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_cc07c62137412300d27b8cf6c3990e83&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2022-01-14 14:04:28&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>-134279419</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.5.1 Complete Full Build with certification changes">80021aa32fd50110e49924c62799b6ce</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-02-02 06:38:11</sys_created_on>
<sys_id>dc021aa32fd50110e49924c62799b6d3</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17eb91c1f200000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-02-02 06:38:11</sys_updated_on>
<table/>
<target_name>Nutanix_Calm_Utils</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>90f1caa1b4810110011fb09c99c5e399</update_guid>
<update_guid_history>90f1caa1b4810110011fb09c99c5e399:-134279419,465eb1ed6d4101109b26406209ac70e6:-1590499635,df5b6370e60d011067dcc8fc63200aeb:-1384812348,4ee9affc44c90110d4914bc9e8fccb6b:189988848,f010db7819490110fb140b566497494d:1931237195,544b0738f0490110fb101f4258873b14:-1799820253,d326f2b42a8501103ee9ece263990545:-639920381,12b722b878450110474830c372a620a2:195611727,71ad9614e5f80510c58a895df5800d44:-1991315004,355a9a501af805100dfa6e350f65051d:-1363041168,93673544a87c811012a6b7f623ff5a54:-660863414,4102bd8ce3b8811015d58ccee95d3faa:1667376610,a9c34dc0fc348110ec223a44942f575b:1918418910,56a2543784e80110f4daff106c38d987:2006848122,6322d43babac01108cef4877761abb3c:-1201456184,2a6cfb6f856401107245790bf7154011:471048034,55a3bd7a0ea8c110987876faed86cdff:-695600862,9717213acea8c1104811aa50978bb9b6:-1523731308,c9d2697a2964c11020da3f2bc0fca082:-2144914685,77e02d7ab364c110107f4130c7429d27:768971736,7f7c55b670a0c1109085fcbcda67d42f:369179283,2337dd7a9e2c8110ee1ecd1ceb3c85d8:-1126508926,5c279dfa1ce8811070e114d541332e3f:604603457,1492d9b6f6288110ce11a777c3ab2bdc:1091209402,e2c4484dc3900110db6ed8859e8c7768:-974771789,09423d247b7330109b9bcd0267125034:1811889491,63e3fe10d6a3301083bfe974d96e57fb:-1070643101,91c45b1785b2701031d2b00ba1c39f79:1448160998,ac12bedfdf327010a0ec378d8f9e3842:-989489775,da4abfb7d835701075bedf1c3ee15102:-1380172849,d33c8bbf39313010aec78ea3cdb1c3ac:-1508525215,fa42d353217530100ca9c36636ac0c24:-1380172849,1e3e3c139071301060516879e6eb2697:-1928159377,922a6cfc37f130102cb7d8ec6f34bdcb:-725408461,9778ffda758130109a7c3a28fbe3754b:-789324133,28e63b9a33813010c684bc979e622de0:1640382956,b2e3ff1641813010170c00c8f9482982:-1921663936,1ddc2f16c401301097a5fda0e1a15bb4:-1192223594,c7b49d50dbc530103e7bf965e8ef52f3:-272997184,295f495cfe853010da1549ce73c57e4f:806481855,f618e49b57b07010187a8a4d34e7bcb7:2031540582,10b783fafbb03010e47cc9a2e1248679:-252922017,4cc34b7a42b03010cee41848b84a0315:-671080337,44330b366ab030103a899c26f19b0a82:-993236100,f77a327296b03010204a837a03a7fc44:874157611,a8c9f27ec47030108bea7e3973aa1908:1041355917,45f8bebe10703010d8ff37642b4512be:-1001872326,53883efa3c703010b53c7cfaba2e032e:-116766160,4997ba7a56703010cb6bfb305cf0f861:1743540753,7a04f6f66770301096d50bb367e120a6:400561248,d261b6f66370301071311a060d4c7f9a:248151933,cbd2dd0a42287c107ce5dbfa6d6bfdff:521784103,56c949c280287c1074a498639bfd5f30:1758308741,910a5f9c12a0b410a802140ffbe504f0:-1292568129,2e3d0354c4a0b410fedc42a8c8487282:-894564608,e2d39f0003e47410c16f46ee79f56fe9:-1343060169,6fc9664c53e074109a7938fa2a1a03f2:-864380277,2b1c4fd230213010a081fa88501e42e7:1216488432,0ba88a8aa6d53010b94297b56d813747:-385514916,049b04382f553010473ece7f66028198:-1632598290,f32ec32ca711301063c2fc2864bd9336:1803006346,1dcd0fe8d8113010154ac70ca3564287:-91467592,9de595151ee7a8505347a3f199717e4c:1991498067,23451e0d1fab685032e2366996d61330:-1359795341,07141689e7ab685095ad1318ca4808a4:-1385154366,b0c30a09ce2b685066c2f7d5b1a42a11:-1916675437,f0ef75c1622b685065e3160536d33cb2:-2106372668,224f3981632b6850c02c833327e244e5:-629982135,a43dbd01262b6850bd2218c44f87bbec:-795623122,806b3d4d96e768501368abc37619395f:897437648,38bc3760d6afe450a2d271bfad8dd0f9:-559306764,d94ab4af5ddbe050e26c2dc61e953c66:1065383329,8a8008a38a1be050b61660fbc7c4789b:995871067,059bff9fdbd7e050dba7cc0fbec7bdf1:-1074102222,162bffdb72d7e05091d122298845fbb1:-807041294,f1a60cd1329b6c1038865661009aa206:670733650,57cf3f4df45b6c10350126492e79719d:1748392096,e89cf30d105b6c10387793fb7958c3f0:-1718538466,39c97309285b6c1068d9502b89716476:9683510,ed13449514536450a3a3946e8b492b62:-625154092,32260bc9b75f24105916309bcf972ab1:-1718538466,98fdf6895f5f2410eb012f80f603cb48:1142123488,64a9bc208717a010b2bcff37c99b18d3:1500248117,e7612b50a2cfac1042622df762ae411c:433819442,25ac16c0d44f6c104378d93fa48dd49b:1261537780,3cae7478081fe05040def7fb88c0b674:372130242,19f4c6ac6b17e0504d37b76081a745e6:-760913758,57289782b5032c105c060ff3e73cf32a:1470504511,ff6c692da74f6810d4a0459a4ac89959:9683510,904721e58e4f6810fa7abb18b9ca0c54:-1924842460,a763d7141347a4108c5baad1ce0122ec:-1221580520,b9c1b8d8510764108e60fceab68f1a76:1201879943,5629824f6d2ea410fb8b80c0d7daefa9:-580514552,e4f7028b5b2ea4102f366f2ed3a2f388:-1308439452,40d4028b1e2ea4102c6c6d6df3562682:-419389598,90f3064ba52ea4106ad9c61071e8ce2b:-138399324,a183420b382ea4109be9398356ce9931:-1101507772,cb434ac7502ea4107a7decb3a75e19c1:2118783886,7e92020b742ea410d6eb30a7bc59c0ef:-517713638,47f1c6c7cd2ea410ed4ca53826443c98:-1167147846,c1f904c3fba6a4105a2f971cb9974bca:31064640,922900439aa6a41037809b8f1ea161fb:-2076634797,b948844319a6a410e727e195e4f1cbe6:-1986833347,0589fabe0d22a410eeefdca56dd71236:274081148,b784f63a7422a41025486df3e759438c:1095628317,45d3363a8b22a41096d36d392a50e085:519817271,5460faf24c22a4104320798e1a00c746:1757579613,47ccaa328222a410500dee141c329cc1:-2044115447,0ca2c08f1f2260103ebc7a74de47bfc4:-602151229,69fe76baaa6a201048e556890250f36f:844487474,b71a853e3d82e410ad7b9df8768b2e96:-1308439452,3ca3013ac382e410a67872e29b291587:-184484956,81a1fcba7c42e4103fef008e496072c6:-1859996223,7d9ca4763d42e4109cb9619a27ce7eeb:-700746788,edc15fca180a6410531c73723450582b:-1537827042,37b60b0633c66410ff4a70a3074ebb8b:-844126338,f71d5b78008a28505383ea8e2bfa6967:-1629203490,6e0d5b78308a2850e6b7f1d33d266360:-1303240130,74e8073c6f4a28501db68eea3bd3353c:-1656482562,c57f71fc37822850c5e3323d1b83d7f7:618512356,467a317c9042285086754e058e802eb1:2038663202,dc9b3d1895c62450269f5605485e5ba0:2068391738,8f2eac98e7c22450e2c706a48984e05b:381450646,37d8e45070c2245012de7f6602af0082:1072730093,8b04a81480c224507b89c3f7faa1d6ff:1526717229,3acedc1098c22450e0712ead4fc7fa29:1386446374,7e6e181075c22450aca7fad2f0b7a25c:819833986,572d18dc258224506de2a689fbe8d26f:70328679,e1fbbe9c51396810c701e13243aef399:2068391738,1ad3715825756810c8305f6a20bd9e1c:1299782207,f64637178cc5a010e5d6cce191e1ed7c:794574022,41fe27977641a010cf52bb19ebdf8e49:-1162172460,3a382317390d60100cdd3a22a1e31756:-1720968745,8506ab9ff5c960109dd527d5a27ebac0:-1480299067,87949b5b6749201019d4fd7f75f1feac:2047460462,bc54535b7d492010ece97d36b9cbbed2:197412046,09241b5ba149201083275892119a1674:-2112234879,9ed3135b9c492010534b1dd8d10a593c:-1154098148,b1a01f9745492010e48f2483f6539b94:-2112234879,1f00d7171e49201082c83bc0dd7ebe75:477655778,0f0efe5f14852010490bfd543f0bccc4:2058676548,7c187697ca452010ae72bf3880244b71:554753000,4d37fa57294520108d8eb1cb81f9a60c:-2092582353,c2073e179c452010525c8d6d97d321ff:134978440,1ca56a9bb681a01009dedc90c2f99c17:-84550483,0e65669b5781a0109bed58c6b6518001:508288653,6df4ea1bce81a010079fe8e6008460b4:-1018148627,6fc1ae93e281a010619c04c34b182966:-1219859515,f32c169b6941a0105f30bc98a77d5409:813996737,c2f75ad38f41a010a7af3057ee4eece1:-1837960032,aa6f8edba8cd6010b343d3764bba5c08:-1371065259,b2a78693388d6010ee036641d628daf4:1984564746,49c04617854d60104bd75a79ac2e510e:-929198226,d1deb55bf54d6010313280802ab37219:-1034966017,6266ed972d0d6010b90c5a399c85f090:-2143074387,586f4d1b3b816010e2ced8921e181342:-894455589,2d3a8dd36e8160108caf92b1f96575ba:-1158615153,ec3785dfc1416010665ef0c3a1f27f9a:-238751210,ba1c285b96412090fefffdd307ec57b6:-1778960937,ba1c285b96412090fefffdd307ec57b6:-1778960937,0a7b20179f4120905cf41071b14fbf83:-398606045,0a39e4979b412090e067809b2dcb35cc:77506037,0af7044fcac1ec508a6f5cdaa82decbb:1592236647,730fceb22589ac50cd78e0e9dce6223a:778679874,a70f2c729f8d6c5045ce341e804e640e:212524770,ea9da872df8d6c501d4988219d683538:-1491054638,44eae4fe2b4d6c50798bbdfd4cbc7921:-450531328,9e8d50767e4d6c500a371182a25bbe39:-22926363,a71d1076884d6c508442605ada56a24b:305593674,69d654724a4d6c501a048397cafd45c0:-516026927,d5c07fea70496c508943bc94829a0afd:-1159142025,2c9f936eb2096c505908be516d9da3de:1172023152,a9c9bc625d816c500a77c0a4cbfdc85e:-1465992257,bca8346237816c5049e437d83df2c89c:-856285477,4616e7aad0812c1074a33dc8c5a820f2:2062547225,80c487d228c1e8109ec625f9e780030a:-1003074713,4e996830c445a450eca50157b2880fa6:-280436743,aa6a9ea21e382050005619f32755e906:-475985189,adb524fc45c5201048ff31fb68ac73df:1207511384,ef319d6abe3420508bf04da864f03bed:-1725784686,664e4d66fd342050933f61b8e03dd607:-1246111289,783dc566dc342050ab32ff484b89f4f3:308438742,7fb9c16261342050d8fab77c5209653b:-268475562,9c6889229e342050714d409cfd9c4975:-660742223,aab605ee4ff020504095c545dddbd7f4:308438742,77f5c9ae18f020502a51361cedf8792b:1182541328,9cb44dea6ff02050db45fd691dc71e00:965727796,03a2cdaa6ef02050d40509997d2f69dd:-499249684,6cb1056abaf020508d1890a522c8bd07:2022299203,3d204d2a49f02050c2174a60f04894c9:-1369079489,e6ff7c2a4ff02050d993570ec85a6063:-499249684,e5bd34a2ebf020504432617877b0c9a6:-1388073913,eb5c145af034ec10936c67cd8ee6b8e6:-499249684,695d401e18f0ec100512c82c2592f684:-1179768822,c3d9c41ab5f0ec10e52906a190f206d4:135236869,bef640d68cf0ec10bef1772414387b10:1932028713,ef6227c2af70ec1009f5faaf23a093be:1282268883,840fd7ced830ec108043f8092bd206f5:2024070210,d9dcdf06e930ec108d82502f0a59dff3:1527963938,69190fcea3fcac1067977c0633878efd:1706282203,3b61c7cafdfcac1067865cdf3d2e9342:1527963938,fe3b93f1b8b4ac101c4d9d052b195bad:1706282203,275bc7f58e74ac103a9dc4aa6bbb4e36:1628799004,3c86c731cb74ac10dc4912209726248d:1710239481,b014811227e0241053c316f8c50c840b:-2038794393,8f62c15e1ba02410d9d7db84eb1fb300:1467487879,1feef41e63a024101ec0d813b73dd9f1:29603083,d5f82d56bb64e010d6d9c30cc76a1432:1207511384,1eb6691a6b64e01004ee8fda70dae3e3:-698584641,599425968c64e01011efb56f339e08af:-1546385751,ccb8a84a30a0a010be3e8cabb28f20e2:1157381549,b9bd308260a7141009d1a45f65333aef:1883650057,ae4dfc423ba71410755cb0187edb18b6:-1504345741,84ac7082f5a7141033f36764a0cbfa04:-665294929,42ea740223a714100ee8f7300e1958a4:1011490111,c7f9fc02bca71410f23255dd2fadec75:1076727468,84293402e9a7141023bcea8a8a315394:378531725,922838ce1e6714101b2bc737f1d7cc95:746374128,cc46f48a026714106c4b63154c121488:-2093866599,3be470ca53671410c70373eabda272aa:-62248380,6a343c0e326714106af4676e2abcd309:-157584389,8dd1f0ca8e671410457e5f5bf6a34196:-1951128383,df91b48a7167141041ccae93473b4027:-1442617945,4090f84a8367141075e24a5cc8fc186a:2050462117,019fecc6c067141072f79593cd328328:-1831188795,787facc6e267141095a2fa898eab22f3:-218743293,58eee04a196714102fed89dcddcc4bc5:-1831188795,c39da40a5f671410bf7a7efc07465413:2048920037,39a6dc71c1e7d010d18e0169c755ea52:906781525,01a210fd70a7d01056a5355ec799143f:505886764,e302d4b9cfa7d010d107acb81f0e6d80:-1764571886,8370587d02a7d01037da4132ed10955e:2078562337,850c88b3a7d7d450242a3035b659c654:597391151,e44639ecb4d71c1063aca00e8a2cf4eb:-892405644,5c3c6928d4d71c105171f27959a3e2b4:2040406697,6a2b29e452d71c10c9b6c626159f1adf:404193919,f75a1c2cf2931c103b5419dd938fcab0:-1492400141,7375493dbfaa9050eb4055ce77b52673:1225862913,d03438bd7e6a9050267746c54d050d1b:-8613182,f7687716af14d010bcb3dc3d7f5255a5:1841950767,46efa875b8985010ad2d948d2c50ce80:1917529601,fdfe6cb52b985010fc4c97c57e5f6696:391584771,0aef32028a5814103f20b1da6538f7c6:-1054649825,2d41f51d98c49450008c80112298fa8d:7024653,3a0fe119cb849450bf9a6f99acb82c9d:-2063652868,c9ad2dd567c494503668444ff5f39e39:-1926451537,91ce64110880945028378435b33559b4:-419128519,756e2cdd4d409450eb98f96c1242652a:-726268620,626b6cd5804094502b6fddbca3bbbe78:1350530146,00eaa0115c4094503f974a1e6ed0283c:1097110424,aeaaa4153a4094502a868a18349e1d89:1072866694,ca62a859c700945099506bcc27cf92e6:1105396883,1de9a07f4a3b8c1080924c17a1acccee:-1473050218,8df8683b8e3b8c10235d6d8d92e6a943:-416441710,cf9e33eb90378c1037ac6db56c02befa:-1224839798,bf76f32b08f38c10d10c1fc4af1a8b85:1156754090,11a373a3a8f38c105212ca069ab67dad:-674292436,e1d177ef9ab38c10e01bcb24eb3ca703:478526910,61ecb8edbef3c010e0eba1d4d19aa376:-1705682866,852311e6e2230010745fac29bfba6d75:1018307385,6081fb01ded34010e3fc2b3f1c8d3ac9:681981532,31e0ff4105d34010ccc3f135f620b248:16326279,24ef234193d340106aff90c439e2e0e9:-1988975767,27cfaf012ad340107a0c037c1e1b3f1a:-1528290642,e54fa78d3e934010cf980a60a5a432ff:-1261945501,0b7d2f4daf9340100679e7a4d7f62205:108306278,fadca78d55934010f8f5145b83a714fa:-1722235142,363ceb4dbe934010e3ad284585ebbafe:1730098361,ef4967890a93401099a2d34620d270bc:6821147,3ddfd64d71db0010122d2bf85192c8c1:-185829358,e1de9e0d26db00108957f9579c60326c:-101961738,10bf8e4da39b0010e908e837057801e3:154883992,50a9d4385fd3001045f360f74dc4020a:1372376674,a7d814f491d300104b0899e0e507aaa5:805872783,fbbb3360ed5f0410688e9d2e798e78d5:2063878629,f54cebda5d4fc010b8505077f002b494:-1354894918,e276d419e3c70010a0df446941e8e443:-1214763492,f6e7c88a2c7e4010868929a9593f346d:-37487785,5a1db85ae16000106ebce4d45ef5fe78:-468448675,d564843aadbbf3007a09a34adcf81312:2134306854,2ebc7fee6d3bf300f6047d8b9c4c2949:-463460632,2397eb6948b333001f5e9b426982e8db:-1430333070,9b9b87d1b077330020578a6fe81eceb9:404727060,be52f4c95f2b3300175a1fa3c5cd42a1:-1241190103,28b5c2b00e63330004a1081af9a80ae5:-1014061663,c906858573df330050af5efb86a6464f:1416748225,6dea86f75172330010ef5f8bdfa564bb:195597801,6d1bb84c35b2330004e67592b96aab81:2101651716,4dcafc4c50b23300beed94d3d4e67ae9:-1274462870,789ab44c12b233005466861233c15aa5:-1097618369,5be9344c0db2330091e3f5ff46a55667:-1861443188,4659fc0cf5b23300e198857bcdddf091:1441827055,bbe5879ae3a2330038043fee8bec790c:1967914857,8c85ba1ebe623300f603b202b20e4824:-1245825130,ebe0365e87623300913d753ed7d89702:344087215,e298a6db2acff3004c51d146d6331c19:-352558727,da6a86b3a6723300395edec4c356b718:601796858,e9c463b511b233008dcab6efdd042a05:1396697269,73709df76d7633006d6c9f987ad87b00:240563474,19690d73bc763300c270f630fe3c62a4:1062521728,1f35f887258233000aa19fe78028382b:1388854173,ea253cc71d82330023ba1a8cc933652c:327979110,02e4f44762823300e09356ead0fa5b48:-1811692405,dfb370c736823300e983ef303f01b514:1388854173,54b3b88767823300aba696f0ad315d42:-273468163,67833447c8823300897b2db4f67aaa99:-682300393,eb065d009f0e3300fa77911fa5c1599d:1388854173,7283d104120a33009647acb2516f24f8:-1520857,8f9800097d1f3300bf88a72f79e2bceb:1990703629,74c9e6270c893300fe19e1421a433a34:344087215,2b99eee3c48933000713f06a20c9a609:445303032,5978a6a3fe89330096387f43539eae04:1542210748,adf722a3838933008f241867543b31cd:320182338,b41766a36d893300e3e2fbc39b268382:245319624,17c5a66326893300578b9b715e31256a:2128763330,e86566ef6a4933006f22e2b300d58bae:1141746189,c615e623c889330066507d26488846c2:-888239665,b3f46a23d68933000353fce10a876dca:999585783,93d46a23aa893300ae8c3095c71b0adf:-156386778,495b9e674a4933004ed85a7b14019c65:-1075560250,268ade67f7493300813cf1768cd324ab:1468239795,ba5112af16093300dbecd05e833c5b61:2025756305,3a0f822fac0933004b135db2b3060e04:1525564970,1ced82eb87093300cbc203fcdf827bcc:-1595414578,f30cc26b4a0933004f07d83343fa1a3e:-1841920116,fb954667ab093300d3228e896106645f:139672442,89714263d10933002764995614ee778a:-2047818780,783947d7ccb073009f7b9a289d845243:1664189231,5f2ce15b78bc330019c1251dbce2db99:1344231297,8c8c626e5f7833005f146d29009880b8:2048893628,67cbf8783430b300e0cf6eb80848396e:-183637656,d92aa4bc39fc7300ddf50098b1044c46:756771976,79201cf083bc73006e6188847af07bab:683982105,ab890ce464b0730075b92922ba008d3b:1890913806,e87980e48db0730055d55c279ef362d2:-2055294049,240580ece1707300239bbdc475446560:-1897943010,12c783458438330042985007636a30b3:1890913806,e7da35386ef0f30045d878d6d2467b7e:-1322583702,048c3944163033007ce5954103de6f3a:-1281797981,ede97d00cb30330037db91f69e20a6d2:1554116198,af1695f7f0a03300d9aa26f55bbe36be:1960442693,63a91973e9e033008ca1ca8c349b9fd0:827788452,49296a23085033004c28815ffecaa6b6:-44464157,74c8a62380503300fbf7a8741f16ac35:-837492737,9d70e34bf76c33008cf942a5df7b8de9:1669009267,87d69b83a06c330042b12e79012e8ebf:1983010569,67c657c30a6c3300feba6e17aa99f4f1:-2063810673,52e1e28b4da83300414d69d7b5da69c2:-843339734,5ca42676536033006e1450d3c431cf38:-1379735095,972ef5fed3c033002f04b7fd660f11d6:916214372,2bad4a53c52e6300949200b0b467c7e0:1289926590,67eae517c7aa63008d5f4aabbfb0f8a2:-1564236883,358d0ecb49a26300d3aa690585619951:1065150832,de140e4731a26300acbb850ae0d66447:-504486437,cd0e4c03b0ae23003a38fa08f0800ebd:-2112665817,3c91b07a5ca62300c60ae243592de180:1885335981,b7a077261c2623009110b85c0d7e57f6:240199054,f6b0ebd00ce223002b72eb45598e3833:-587797936,2d4cd39cf8a22300f2f5de9d038ba596:1159552271,84535b90fb2663008e74faa51946d5c0:817947824,75916acc3a66230082d51178c6f97c03:1483891257,99fd6d003fe22300bafbde99866909ef:-484971044,4b3a6d005ce2230035ed8ec2cf47b0c4:-1052171364,18a78d8c262223003ffa7e78914b8197:-484971044,2b9926ff058223002c8bb8125f154ca5:796385693,211b5277db822300a3ee96183503e821:472942619,8f999af3028223003a4046a92220fb02:-503582359,b29ac6776b422300d71ace5fbd006d53:31732372,d0623de3230623002733c8bd4a177f8e:-372205656,c2a1495bd782a30086b29ba9c9cc7c4f:1912644188,e95cb8938082a300ab069bc1400f4dda:1985826361,a3e39c1bed02a300c11af68991e3ae4f:167991996,b2301817a502a3005838bf32b8a758b1:-990520716,637761a1628a2300ff8d0078b953da1c:1688517324,a8e2e0ad1f06230089145ac71a53bed7:-1776621505,d8976159ecc223004ad254ff2c79c981:-1842019564,ed8970d1f8422300321da662a2b968ce:-97848339,29dcfcc967066b009a3858610083f71e:-1042701577,b24f680110066b00185c500e1a19d4de:1951309313,60f5ec494cc26b00556b49d1edbb536d:1891592437,f5309950408e2300740ce55e25eef619:-2060227712,f63ec110f38e2300adafa9339b24e002:810742891,7ead89dc254e230068662e8043188a9c:1136719629,d6da815cfd4e23004ea3f265eddf7a2b:-776447500,c5e349d0924e2300b2f2673f7e59316d:-549523885,f82d0e8c56862300f9d646448cd53a9a:866126304,301d5283e87523003448ccb4b988e599:-666693685,afeb1e434d75230008806ce877096361:253922448,07c3864f1ef123004c8f82c95e4d1b3e:-607216006,b83382cb24f123001a04ed3380b83fa6:1939680493,106ab9c7bef1230009502141c93898a8:-1666048103,3dcee98fcab12300c5aed6fc3061b722:-58668486,937e218f1eb12300e623e9d74ce493a8:-607216006,86bc61cb06b12300a1d6ce1dbf58c88b:-569454194,d0a91e07f0b9a3005b4269817e7e18f9:-1104963394,d0b6e1c362f5a300466dd1b345efe6da:992225794,45f4a1039cf5a300fefa76ecc6920ca0:-1136790922,5bad9dcb82b5a30025783ef4baa2348f:873845548,677a7faec039630023d03a479bc97558:1438022542,3e6a7fae4c3963006bc70b2aeed3b951:1302355598,737f12da12f9230017cfd0f7cf2cec38:1438022542,fd0431f11f75e300819956b957d0c1d8:-1614843276,8f88c57519f1e30032cd16d5f949c3fe:-1708585935,97b749fd57fd2300e0fd7c565308b068:862696279,92974d715c3163001543d85471f42df9:-379608796,2e77cd71b43163002a19ecb73e54efde:854484825,b47ef7edc13d23005468f7f185ed4d9c:-1587995975,e51ef3edea3d230043db7e7fce3b797a:1161824316,a77dff6d2a3d2300a740b15b7e288747:-606199214,7a2c732dd73d2300b24c984b837ff56c:-1025347161,1adffb156ef1230075f7e851ee4ae3c6:1241088169,5fa5bc6dfff5a30086193c6125c8e866:-754602674,6018a8d5836d2300d957e536e5a08c64:1786128469,002f110187652300c3ccf79fd27c3ddc:244504230,bce4a48501e1230012691220b880aa0c:-676849501,e7464ae801212300ae40b489254314bb:-77708988,32406d14722963008c76d6a26c36ad92:-1015307147,117bb543eed12300947a461f60646cb0:-1801119527,4216fd4fd79123007b8c6f028117403f:-1093476056,60a4cdcf62112300552423ab2aecb411:376767278,4de530ba45912300a90b840b65fac61d:381494677,e1424b56a75123000bdde251181f97ef:1741981683,9cd8f054a42d23000bb4ac24e1c1baf7:1731031146,3e98f410242d2300b5cc05fdaac488e1:-1100326519,3952a5fa6e952300560b977d79c58e0b:1727849333,2d3ed03233152300ee301914f1975060:1093139738,69182b5efb9d230049dd02f69eeb675a:820698938,23d72b5e509d2300d8e45d9218844f40:-498397573,3f77eb1ec29d23007dac6230dabe50fb:1746460774,4a342f5ab99d2300789741e24ee9f4fc:1570937844,f15f1f56b19d23000c863cb1d50c1697:1878383819,13447ed6741d230090969f346b3610fb:583572587,f77e3fe61ad12300d526fe1ddd30df69:1783218942,59e4875264152300a67a293efd0bddbe:-85140564,3e6b6612eed123003af199fb13803785:-2052516138,32ac688eb61d2300fa8c57c23fcedd3f:1586355424,c86ca08e4f1d2300c50fdf92f108640d:-1564394133,86abe80e431d2300279dba1e95e70ddd:-1770319341,4a9a600e501d23000540f6502e3c43e9:-641103501,c9e9280ece1d230021e93ead6f92b6e1:-182189005,1e49acca5c1d23009febb302fc45abd6:-1199287213,503920ca7a1d2300f26521753167f4d7:-1384747517,2cb86c4a701d23007ac317fe2d05536b:-1036576009,83956c4ad41d2300a0627e1b1cb1f763:895067125,8705e80a351d230090244b7565da2d22:-1517002870,2d179f2547112300083bdec5aed8d716:619773215,ec868cf97c512300e4a968dbc749d045:339057694,46ddb938c4d12300fa0005d8527a01eb:-530584369,697cfdb453d1230053fe2423b1efbe8f:617939878,cee8f4b0e4dd23009e7d64cf60c3dca0:-754938354,4e073cfcf29d2300bf5149956108dac3:1186470154,a1a534fc1a9d2300add3f80cafd222f8:1368592038,7b6534fc259d2300fca491e5e0a25a6d:-1971579545,d663b87cb59d2300846ef2c70e22c27a:-663801934,0643f83c099d230071278aa97e645704:-173218921,7933b0b86d9d2300811dca0446bfb299:-267801899,691ee0783b9d230079028fdaccad2598:735034123,f46554786d5d230070d150bd261ef15e:1929433413,fe4358349f5d2300edc8abf7812e377d:-593066623,8c015434ea5d230092b3900f6bf0e241:-1163449663,86fd0830d75d23001d12b554d2ac2558:-1751284441,69757b60bc1d2300000eca5130f5d7c5:-1772029879,af29be58771123002e6424df3a6bba11:-316090238,41c33ed0901123006cceabb949f4c600:831224956,d6a6917795cd23005f104d772b853f86:268008152,4c5070771e4d2300ce01a17ffe33909c:151205789,dcd2a227c0c5a300193c273ededccea7:40333851,9ef0e2e326c5a300d472157d00e4ce1e:56452773,1f3f1e638bc5a3009eea9ea80ea96eff:-1893247731,25ac11a7e88523007642c4635d2b6001:-915065046,1b7cdd67c38523001d0a29181f8122de:1001649820,664cd967e5852300e24ba755b2e62f31:-1378107027,4dbb196799852300f425cd24d3bf51a7:1129056810,1f5bd16724852300ce3f1e4494124ad9:-683076092,04fa1d2714852300d936f10dae5456eb:301120033,714755a3ce852300b25327aa96e76d1b:810830716,5cd9c9a74f452300c4904d9f7cf0c98b:-683076092,e4c398a3f1c12300d81b41b84f862e49:1234535235,a95354a3d8c12300df0b56605532303e:1739961597,1652146300c1230040aa7ffcbbee26b2:-510357201,15e114639dc12300fe6a692e482357ad:-1593936654,4321d4efa78123008eff1be4b522d199:-151142886,58de44afaa8123006894176fbc006807:1039072466,d6a970efbc052300159fbad5d7aadee9:382554143,74897c6fa8052300d5c8bdb0279a5659:-2095677452,2569bcaf9e0523003137d910f11458e6:593806146,35d7fc2fad0523003985f6bcc680d7ba:-1921525184,6797346fb00523006adbc1637fc9a408:-1554795412,2537fc2faf05230049da6bf3c1a543b5:-754857388,8be634abcb0523002962446fea483e73:-617809692,2a56b0ab9e0523008e8d4ba31010995c:718925376,7eaba8e3c4052300d238013ffb647002:1003504369,02b23f9ffb412300f840e6c9a2eaae15:1471106428,0092fb9f704123002c128187d875e2e8:1312140642,78a0bf5fa9412300bbd493677413a326:-383440449,3b7eeb1ff0412300e9a4798c23f70661:-648995161,fa3ea75b8d412300edd20469b7ccbf1b:51835091,6bac635b50412300bdadf0aec5163f6a:1091477255,735f73930041a300f6f8bb46ff326fa3:249568305,568f201b3c49630074a0e400c0aa7fc0:-1931523059,83cf07cf33456300855103455ae8ded5:-2070930081</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
</unload>
