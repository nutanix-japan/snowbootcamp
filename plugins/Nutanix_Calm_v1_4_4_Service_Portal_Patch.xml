<?xml version="1.0" encoding="UTF-8"?><unload unload_date="2021-05-18 07:53:50">
<sys_remote_update_set action="INSERT_OR_UPDATE">
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<application_name>Nutanix Calm</application_name>
<application_scope>x_nuta2_nutanix_ca</application_scope>
<application_version>1.1.2</application_version>
<collisions/>
<commit_date/>
<deleted/>
<description>Release on 18-05-2021
</description>
<inserted/>
<name>Nutanix Calm 1.4.4 Service Portal patch</name>
<origin_sys_id/>
<parent display_value=""/>
<release_date/>
<remote_base_update_set display_value=""/>
<remote_parent_id/>
<remote_sys_id>0e71eff307003010f76cfdac7c1ed04d</remote_sys_id>
<state>loaded</state>
<summary/>
<sys_class_name>sys_remote_update_set</sys_class_name>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2021-05-18 07:53:49</sys_created_on>
<sys_id>05f5233707003010f76cfdac7c1ed0c0</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2021-05-18 07:53:49</sys_updated_on>
<update_set display_value=""/>
<update_source display_value=""/>
<updated/>
</sys_remote_update_set>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_caeab4864f337300d8494ebf9310c73e</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;public&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Migration_Script&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;true&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Migration_Script&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Migration_Script = Class.create();
Migration_Script.prototype = {

    initialize: function() {
        this.appUtil = new Nutanix_Calm_Utils();
        this.logger = new Nutanix_Calm_Logger();
        this.createVariable = new Nutanix_CreateCatalogVariables();
        this.appScriptInstance = new Nutanix_ImportApplicationProfiles();
    },
	
    addEnvironmentVariableToAllCatalogs: function() {
    try {
		if((parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2")) &amp;&amp; (gs.getProperty('x_nuta2_nutanix_ca.1_4_4') == '0') ){
			gs.info("13");
			var mpi_cat_item = new GlideRecord('x_nuta2_nutanix_ca_nutanix_marketplaceitems');
			mpi_cat_item.query();
			while(mpi_cat_item.next()){
				var grItem = new GlideRecord("item_option_new");
				grItem.addQuery('name','default_environment');
				grItem.addQuery('cat_item',mpi_cat_item.sys_id + "");
				grItem.query();
				if(!grItem.hasNext()){
					grItem.initialize();
					grItem.type = 5;
					grItem.cat_item = mpi_cat_item.sys_id + "";
					grItem.active = true;
					grItem.question_text = 'Environment';
					grItem.name = 'default_environment';
					grItem.order = 2;
					var env_SysID = grItem.insert();  
				}
			}
			gs.info("32");
			var bp_cat_item = new GlideRecord('x_nuta2_nutanix_ca_nutanix_blueprint');
			bp_cat_item.query();
			while(bp_cat_item.next()){
				var grItem = new GlideRecord("item_option_new");
				grItem.addQuery('name','default_environment');
				grItem.addQuery('cat_item', bp_cat_item.sys_id + "");
				grItem.query();
				if(!grItem.hasNext()){
					grItem.initialize();
					grItem.type = 5;
					grItem.cat_item = bp_cat_item.sys_id + "";
					grItem.active = true;
					grItem.question_text = 'Environment';
					grItem.name = 'default_environment';
					grItem.order = 2;
					var env_SysID = grItem.insert();
				}
			}
			gs.info("52");

			var cat_items = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
			cat_items.query();
			while (cat_items.next()) {
				var grItem = new GlideRecord("item_option_new");
				grItem.initialize();
				grItem.type = 5;
				grItem.cat_item = cat_items.item_name + "";
				grItem.active = true;
				grItem.question_text = 'Environment';
				grItem.name = 'default_environment';
				grItem.order = 2;
				grItem.sys_scope = "global";
				var env_SysID = grItem.insert();
				gs.info("67");



				//Creating new scripts:
				var projectSysID = "";
				var profileSysID = "";
				var app_name_SysID = "";
				var env_variable_SysID = "";
				gs.info("76");
				var grItemProf = new GlideRecord("item_option_new");
				grItemProf.addQuery("cat_item", cat_items.item_name);
				var qc = grItemProf.addQuery("name", "default_project");
				qc.addOrCondition('name', 'default_profile');
				qc.addOrCondition('name', 'default_app_name');
				qc.addOrCondition('name', 'default_environment');
				grItemProf.query();
				gs.info('grItemProf '+grItemProf.getRowCount());

				while (grItemProf.next()) {
					if (grItemProf.name + '' == "default_project")
						projectSysID = grItemProf.sys_id + "";
					if (grItemProf.name + '' == "default_profile")
						profileSysID = grItemProf.sys_id + "";
					if (grItemProf.name + '' == "default_app_name")
						app_name_SysID = grItemProf.sys_id + "";
					if (grItemProf.name + '' == "default_environment")
						env_variable_SysID = grItemProf.sys_id + "";
				}
				gs.info("92");
	//             gs.info("**************** projectSysID " + projectSysID + " profileSysID " + profileSysID);


				     var onChangeCatalogProject = new sn_sc.CatalogClientScript();
                    onChangeCatalogProject.setAttributes({
                        "name": "On Change of Project",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": cat_items.item_name + "",
                        "cat_variable": "IO:" +projectSysID,
                        "active": true,
                        "order": 700,
                        "description": "This script is auto created thorugh runtime module for getting variables on change of project.",
                        "applies_catalog": true,
                        "ui_type": "10",
                        "applies_req_item": false,
                        "applies_sc_task": false,

                    });
                    onChangeCatalogProject.appliesToCatalogItem(true);
                    var onChangeProjectScript = "function onChange(control, oldValue, newValue, isLoading){if (isLoading || newValue == ''){return;}var project = g_form.getValue('default_project');var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchEnvironments');ga.addParam('sysparm_project', project);ga.getXML(parseResponse);function parseResponse(response){var answer = response.responseXML.documentElement.getAttribute('answer');var result = JSON.parse(answer);if (result.length == 0) {g_form.hideFieldMsg('default_environment', true);g_form.clearOptions('default_environment');g_form.showFieldMsg('default_environment', 'This Project has no valid Environments configured, you cannot proceed with the launch.  Please contact your administrator'); g_form.hideFieldMsg('default_profile', true);g_form.clearOptions('default_profile');var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + '' === 'default_profile' || elemen[i] + '' === 'default_project' || elemen[i] + '' === 'default_environment' || elemen[i] + '' === 'default_app_name') g_form.setDisplay(elemen[i], true); else { g_form.setMandatory(elemen[i], false); g_form.setDisplay(elemen[i], false);}} g_form.setMandatory('default_profile', true);g_form.showFieldMsg('default_profile', 'There are no applicable Profile(s) that match the selected Environment.  Please choose a different Environment to proceed.'); g_form.setDisplay('default_profile', true);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setMandatory('default_profile', true);}else{g_form.clearMessages();g_form.clearOptions('default_environment');for (var i = 0; i &lt; result.length; i++){var jsonObj = result[i];g_form.addOption('default_environment', jsonObj.UUID + '', jsonObj.Name + '');} var jsonobj = result[0]; g_form.setValue('default_environment',jsonObj.UUID);}}}";
                    onChangeCatalogProject.addScript(onChangeProjectScript);
                    var OnChangeCatalogScriptId = onChangeCatalogProject.create();
                 
					var gr = new GlideRecord('catalog_script_client');
					if (gr.get(OnChangeCatalogScriptId)) {
						gr.setValue("sys_scope", "global");
						gr.update();
					}
	
				gs.info("123");


				var onChangeCatalogEnvironment = new sn_sc.CatalogClientScript();
                    onChangeCatalogEnvironment.setAttributes({
                        "name": "On Change of Environment variable",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": cat_items.item_name + "",
                        "cat_variable": "IO:" + env_variable_SysID,
                        "active": true,
                        "order": 700,
                        "description": "This script is auto created thorugh runtime module for getting variables on change of project.",
                        "applies_catalog": true,
                        "ui_type": "10",
                        "applies_req_item": false,
                        "applies_sc_task": false,

                    });
                    onChangeCatalogEnvironment.appliesToCatalogItem(true);
                    var onChangeEnvironmentScript = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') {return;}var def_project; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchProfilesBasisOnEnvironment');ga.addParam('sysparm_env', g_form.getValue('default_environment'));ga.addParam('sysparm_proValue', g_form.getValue('default_project'));ga.addParam('sysparm_sysID', g_form.getUniqueValue());ga.getXML(parseData);function parseData(response) {var answer = response.responseXML.documentElement.getAttribute('answer');answer = JSON.parse(answer);if (answer.length == 0) {g_form.hideFieldMsg('default_profile', true);g_form.clearOptions('default_profile');g_form.showFieldMsg('default_profile', 'There are no applicable Profile(s) that match the selected Environment.  Please choose a different Environment to proceed.');var elemen = g_form.getFieldNames();for (var i in elemen) {if (elemen[i] + '' === 'default_profile' || elemen[i] + '' === 'default_project' || elemen[i] + '' === 'default_environment' || elemen[i] + '' === 'default_app_name' )g_form.setDisplay(elemen[i], true);else{g_form.setMandatory(elemen[i], false);g_form.setDisplay(elemen[i], false);}}g_form.setDisplay('default_profile', true);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);     g_form.setMandatory('default_profile', true);} else {g_form.setReadOnly('default_profile', false);var elemen = g_form.getFieldNames();for (var i in elemen) {g_form.setDisplay(elemen[i], true);}         g_form.hideFieldMsg('default_profile', true);g_form.clearOptions('default_profile');for (var i = 0; i &lt; answer.length; i++) {g_form.addOption('default_profile', answer[i], answer[i]);}g_form.setValue('default_profile', answer[0]); if (answer.length == 1) {g_form.setReadOnly('default_profile', true);}}var cat_sys_id = g_form.getUniqueValue();var profile = g_form.getValue('default_profile').trim();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse);}function varResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service;var sess_json = {};var var_array = [];for (var i in prof_json) {var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = i + '';sess_json['IO:' + i] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);for (var j in serv_json) {var_array = [];for (var k in serv_json[j]) {var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:' + k] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(sess_json);}}function getAdvancedVars(variable_json) {var act_var_JSON = JSON.stringify(variable_json);var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name', 'variableArrayParser');gajax.addParam('sysparm_type', 'catalog');gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + '');gajax.addParam('sysparm_varJson', act_var_JSON);gajax.getXML(getVarResponse);}function getVarResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');if (answer + '' == '' || answer + '' == 'undefined' || answer + '' == 'null') return;var parsedResponse = JSON.parse(answer);for (var i in parsedResponse) {var row = parsedResponse[i];var sys_id = 'IO:' + row.sys_id;var type = row.type + '';if (row.state == 'SUCCESS') {if (type == 'LOCAL') g_form.setValue(sys_id, row.value);if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') {g_form.clearOptions(sys_id);for (var k = 0; k &lt; (row.value).length; k++) {g_form.addOption(sys_id + '', row.value[k], row.value[k]);}}}if (row.state == 'ERROR') {g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}}}";
                    onChangeCatalogEnvironment.addScript(onChangeEnvironmentScript);
                    var OnChangeCatalogScriptId = onChangeCatalogEnvironment.create();
					var gr = new GlideRecord('catalog_script_client');
					if (gr.get(OnChangeCatalogScriptId)) {
						gr.setValue("sys_scope", "global");
						gr.update();
					}
				gs.info("152");

				
				var catalogScriptGR = new GlideRecord('catalog_script_client');
				catalogScriptGR.addQuery('cat_item', cat_items.item_name + '');
				catalogScriptGR.query();
				while (catalogScriptGR.next()) {
					if (catalogScriptGR.name + '' == "Check Catalog Item Validity") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Get Project and Profile List onLoad") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Get Credentials OnLoad") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Fetch dynamic value for advance variables onload") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Fetch form data on change of profile") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Get Subnet Info") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Check AppName OnSubmit") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Hide Order details on request") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Get Subnet Info on project change") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Check Catalog Item Validity project") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Check Catalog Item Validity profile") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Set Session Vars") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Fetch dependencies on change of profile") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Service portal fixes") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
				}
				gs.info("174");
				var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Check Catalog Item Validity",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": cat_items.item_name + "",
                    "active": false,
                    "order": 1,
                    "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = "function onLoad() {  var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+''; var projectUUID = getParameterValue('projectUUID') + ''; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; } if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName); } 				 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true'; 				 }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   } }";
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
			    var gr = new GlideRecord('catalog_script_client');
				if (gr.get(onLoadCatalogClientScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
 			   gs.info("326");
			
				 var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Get Project and Profile List onLoad",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": cat_items.item_name + "",
                    "active": "true",
                    "order": "100",
                    "description": "This script is auto created thorugh runtime module for getting projects and profile list.",
                    "applies_catalog": "true",
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = "function onLoad() {var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchProjectAndProfileList');ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse);function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var parsed = JSON.parse(answer);var projectList = parsed.projectList;g_form.clearOptions('default_project');for (var i = 0; i &lt; projectList.length; i++) {var project = projectList[i];g_form.addOption('default_project', project.uuid, project.name)} var project = projectList[0]; g_form.setValue('default_project', project.uuid);if (projectList.length == 1) { g_form.setReadOnly('default_project', true)}}}";	
                
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();		
			    var gr = new GlideRecord('catalog_script_client');
				if (gr.get(onLoadCatalogClientScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
 				gs.info("353");
				
				var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Get Credentials OnLoad",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": cat_items.item_name + "",
                    "active": true,
                    "order": 900,
                    "description": "This script is auto created thorugh runtime module for getting Credentials list.",
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);          	
                var onLoadScript = "function onLoad() { var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchCredentialsList');ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse, null); function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer'); var credArr = {}; var parsed = JSON.parse(answer);for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + '').toLowerCase().replace(/ /g, '_');g_form.setValue(name + '_credential_name', credential.name + ''); g_form.setReadOnly(name + '_credential_name', true); g_form.setValue(name + '_secret_type', credential.type + '', (credential.type + '' == 'KEY') ? 'SSH Private Key' : 'Password'); g_form.setReadOnly(name + '_secret_type', true); g_form.setValue(name + '_username', credential.username.value); g_form.setReadOnly(name + '_username', credential.username.readOnly); g_form.setDisplay(name + '_username', !credential.username.readOnly); if ((credential.type == 'KEY')) {g_form.setValue(name + '_ssh_private_key', credential.ssh_private_key.value); g_form.setReadOnly(name + '_ssh_private_key', credential.ssh_private_key.readOnly); g_form.setValue(name + '_passphrase', credential.passphrase.value); g_form.setReadOnly(name + '_passphrase', credential.passphrase.readOnly); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_ssh_private_key', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + '_passphrase', !credential.passphrase.readOnly); } else { g_form.setValue(name + '_password', ''); credArr[name + '_password'] = credential.password.value; g_form.setReadOnly(name + '_password', credential.password.readOnly); g_form.setDisplay(name + '_password', !credential.password.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false');}g_form.setDisplay(name + '_credential_reference', 'false'); if (credential.credential_reference &amp;&amp; credential.credential_reference.name) {g_form.setDisplay(name + '_credential_reference', 'true');g_form.addOption(name + '_credential_reference', credential.credential_reference.uuid + '', credential.credential_reference.name + '');g_form.setReadOnly(name + '_credential_reference', credential.credential_reference.readOnly);g_form.setDisplay(name + '_credential_reference', !credential.credential_reference.readOnly);g_form.setDisplay(name + '_ssh_private_key', 'false');g_form.setDisplay(name + '_passphrase', 'false');g_form.setDisplay(name + '_password', 'false');g_form.setDisplay(name + '_secret_type', 'false');}} sessionStorage['credentials_' + g_form.getUniqueValue()] = JSON.stringify(credArr); }}";
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
				var gr = new GlideRecord('catalog_script_client');
				if (gr.get(onLoadCatalogClientScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
 				gs.info("378");
				
				var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Fetch dynamic value for advance variables onload",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": cat_items.item_name + "",
                    "active": true,
                    "order": 10,
                    "description": "This script is created for fetching dynamic values for advance variables onload.",
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = "function onLoad() { var cat_sys_id = g_form.getUniqueValue(); var elemen = g_form.nameMap; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'advanceVariableDynamicOptions'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parse = JSON.parse(answer); var keys = Object.keys(parse[0]); var fieldRegex = parse[1]; parse = parse[0]; sessionStorage['FieldRegex_' + g_form.getUniqueValue()] = JSON.stringify(fieldRegex); for (var i = 0; i &lt; keys.length; i++) { var row = parse[keys[i] + '']; if (row.options.state == 'SUCCESS') { g_form.clearOptions(keys[i] + ''); for (var k = 0; k &lt; (row.options.values).length; k++) { g_form.addOption(keys[i] + '', row.options.values[k], row.options.values[k]); }} else {  g_form.showFieldMsg(keys[i], 'Error in variable: ' + keys[i] + ': ' + row.options.values[0], 'error'); }}}}";
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
				var gr = new GlideRecord('catalog_script_client');
				if (gr.get(onLoadCatalogClientScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
 				gs.info("405");
				
				var catalogScriptGR = new sn_sc.CatalogClientScript();
                catalogScriptGR.setAttributes({
                    "name": "Fetch form data on change of profile",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": cat_items.item_name + "",
                    "cat_variable": "IO:" + profileSysID,
                    "active": true,
                    "order": 100,
                    "description": 'This script is auto created thorugh runtime module for fetching and setting form data and visibility.',
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false,
                });
                catalogScriptGR.appliesToCatalogItem(true);
                var script = "function onChange(control, oldValue, newValue, isLoading) {if (newValue == '') {return;} var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getFieldDetails'); ga.addParam('cat_item_sys_id', g_form.getUniqueValue()); ga.addParam('fieldNameArray', g_form.getFieldNames()); ga.getXML(parseFieldResponse); function parseFieldResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var object1 = JSON.parse(answer); for (var i in object1) { if (object1[i].var_type == 'formatter' || object1[i].var_type == 'container' || object1[i].var_type == 'checkbox_container' || object1[i].var_type == 'undefined' || object1[i].var_type == 'Container Start') {continue;}g_form.setDisplay(object1[i].var_type + '', false);g_form.setReadOnly(object1[i].var_type + '', true);}} g_form.setDisplay('provider_icons', 'true'); g_form.setReadOnly('default_project', false); g_form.setReadOnly('default_app_name', false); g_form.setReadOnly('default_profile', false); g_form.setDisplay('default_project', true); g_form.setDisplay('default_app_name', true); g_form.setDisplay('default_profile', true); var profile = newValue; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchOrderFormData'); ga.addParam('sysparm_profile', profile); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchOrderFormData'); ga.addParam('sysparm_profile', profile); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse1, null); function parseResponse1(response) { var answer1 = response.responseXML.documentElement.getAttribute('answer'); var object1 = JSON.parse(answer1); for (var i in object1) { var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) {if (i.indexOf('cluster_name') == -1) {if (object1[i].var_type + '' == 'masked') {fielVal[i] = parsed[i].value;g_form.setValue(i + '', '');} else {g_form.setValue(i + '', parsed[i].value + '');}g_form.setReadOnly(i + '', parsed[i].readOnly + '');g_form.setDisplay(i + '', !parsed[i].readOnly);} else {g_form.setDisplay(i + '', !parsed[i].readOnly);g_form.setReadOnly(i + '', true);}}sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);}}}}";
                
                catalogScriptGR.addScript(script);
                var ScriptId = catalogScriptGR.create();
				var gr = new GlideRecord('catalog_script_client');
				if (gr.get(ScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
			 
				var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Get Subnet Info",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": cat_items.item_name + "",
                    "active": false,
                    "order": 50,
                    "description": "This script is created for getting subnet list.",
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = "function onLoad() { var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getSubnet');ga.addParam('sysparm_catSysID', catalogSysId);ga.getXML(processAnswer);function processAnswer(response) {var ans = response.responseXML.documentElement.getAttribute('answer');sessionStorage['clusterName_' + g_form.getUniqueValue()] = ans;ans = JSON.parse(ans);var catalog_clusterJSON = ans.catalog_data;clusterJSON = ans.cluster_info;var nicList = [];for(var m in clusterJSON){nicList.push(clusterJSON[m].subnet);}for (var k in catalog_clusterJSON) {for (var i in catalog_clusterJSON[k].nics) {if (catalog_clusterJSON[k].value + '') {for (var l in clusterJSON) {var subnetList = clusterJSON[l].subnet;if (l != catalog_clusterJSON[k].value + '')for (var s in subnetList){ /*g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', s);*/}}}{var opt = g_form.getElement(catalog_clusterJSON[k].nics[i] + '');for (var x=1, n = opt.options.length; x &lt; n; x++) {var present = false;var val = opt.options[x].value+'';for(var s=0; s &lt; nicList.length ;s++){if (nicList[s][val]) {present =true;break;}} if(!present){g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', opt.options[x].value+''); x--;n--; } }} }}}}";
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
				var gr = new GlideRecord('catalog_script_client');
				if (gr.get(onLoadCatalogClientScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
		
				var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript.setAttributes({
                    "name": "Check AppName OnChange",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": cat_items.item_name + "",
                    "cat_variable": "IO:" + app_name_SysID,
                    "active": true,
                    "order": 100,
                    "description": "This script is auto created thorugh runtime module for checking application name.",
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false,

                });
                onChangecatalogClientScript.appliesToCatalogItem(true);
                var onChangeScript ="function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } var name = newValue; if ((newValue.length != ((newValue.trim()).length)) || (!(/^[_-\\w ]+$/.test(name) &amp;&amp; (name.trim().lastIndexOf('-') != (name.trim().length - 1))))) { g_form.setValue('default_app_name', ''); g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and in between spaces are allowed and cannot end with hyphens(-). Leading and trailing spaces are not allowed.'); } }";
                onChangecatalogClientScript.addScript(onChangeScript);
                var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
				var gr = new GlideRecord('catalog_script_client');
				if (gr.get(OnChangeCatalogScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
		
		        var onSubmitcatalogScriptGR = new sn_sc.CatalogClientScript();
                onSubmitcatalogScriptGR.setAttributes({
                    "name": "Check AppName OnSubmit",
                    "type": "onSubmit",
                    "applies_to": "item",
                    "cat_item": cat_items.item_name + "",
                    "active": false,
                    "order": 100,
                    "description": "This script is auto created thorugh runtime module for checking application name on submit.",
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false,
                });
                onSubmitcatalogScriptGR.appliesToCatalogItem(true);
                var onSubmitscript = "function onSubmit() { var result = true; var name = g_form.getValue('default_app_name'); if (!(/^[_-\\w ]+$/.test(name) &amp;&amp; (name.trim().lastIndexOf('-') != (name.trim().length - 1)))) { g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and spaces are allowed and cannot end with hyphens(-).'); result = false; } var errorFieldName = ''; var errorIntFieldName = ''; var parse = JSON.parse(sessionStorage.getItem('FieldRegex_' + g_form.getUniqueValue())); var keys = Object.keys(parse); for (var i = 0; i &lt; keys.length; i++) { var row = parse[keys[i] + '']; var patt = row.regex + ''; var reg = new RegExp(patt); var value = g_form.getValue(keys[i] + ''); var dataType = (row.data_type + '' == 'EXEC_SECRET' || row.data_type + '' == 'HTTP_SECRET' || row.data_type + '' == 'EXEC_LOCAL' || row.data_type + '' == 'HTTP_LOCAL') ? 'Dynamic' : row.data_type + ''; if (row.type + '' == 21) { var splitted = value.split(','); var actualVal = row.listRegex; var count = 0; for (var j = 0, n = splitted.length; j &lt; n; j++) { var listVal = actualVal[splitted[j] + ''];  if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') &amp;&amp; j == n - 1 &amp;&amp; listVal.includes('\n')){ while(listVal.indexOf('\n') != -1){ listVal = listVal.replace('\n','');} if (reg.test(listVal)) { count++;} } if (count == n) row.status = true; } else { if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') &amp;&amp; value.includes('\n')){while(value.indexOf('\n') != -1){value = value.replace('\n','');}} if (reg.test(value)) { row.status = true; } } if (value &amp;&amp; row.status == false) { result = false; g_form.hideFieldMsg(keys[i] + ''); if(dataType == ''){ errorIntFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'This is a Integer field.Please provide a integer value.'); } else{ errorFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'Value does not match specified regex: ' + row.regex); } }} if (result) {   var parse = JSON.parse(sessionStorage.getItem('fieldValues_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 			 parse = JSON.parse(sessionStorage.getItem('credentials_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 		 sessionStorage.removeItem('fieldValues_' + g_form.getUniqueValue()); sessionStorage.removeItem('credentials_' + g_form.getUniqueValue());      sessionStorage.removeItem('clusterName_' + g_form.getUniqueValue()); sessionStorage.removeItem('FieldRegex_' + g_form.getUniqueValue());} else { errorIntFieldName = (errorIntFieldName.endsWith(',')) ? errorIntFieldName.substr(0, errorIntFieldName.length - 1) : errorIntFieldName; errorFieldName = (errorFieldName.endsWith(',')) ? errorFieldName.substr(0, errorFieldName.length - 1) : errorFieldName; if(errorIntFieldName != '' ) g_form.addErrorMessage('Variables are Integer field.Please provide suitable values: ' + errorIntFieldName); if(errorFieldName != '' ) g_form.addErrorMessage('Variables value does not match specified Regex.Please provide suitable values: ' + errorFieldName);  return false; }var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+'';var profileName = (g_form.getValue('default_profile')+'').trim(); if(profileName == '') return; var projectUUID = (g_form.getValue('default_project')+'').trim(); if(projectUUID == '') return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName);ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; }if(flds[i].label == \"Project\"  &amp;&amp; flds[i].prettyName == \"default_project\")continue;if(flds[i].label == \"Profile\"  &amp;&amp; flds[i].prettyName == \"default_profile\")continue;if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName);  /*	 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true'; 	*/			} }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   }}";
                onSubmitcatalogScriptGR.addScript(onSubmitscript);
                var onSubmitcatalogScriptId = onSubmitcatalogScriptGR.create();
		        var gr = new GlideRecord('catalog_script_client');
				if (gr.get(onSubmitcatalogScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
		
				 var onLoadCatalogClientScriptGR = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScriptGR.setAttributes({
                    "name": "Hide Order details on request",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": cat_items.item_name + "",
                    "active": true,
                    "order": 10,
                    "description": "Hide values on request details.",
                    "applies_catalog": "false",
                    "ui_type": "0",
                    "applies_req_item": "true",
                    "applies_sc_task": "false"
                });
                onLoadCatalogClientScriptGR.appliesToCatalogItem(false);
                onLoadCatalogClientScriptGR.appliesToRequestedItem(true);
                var onLoadScriptHide = "function onLoad() {if(g_form.getTableName() + '' == 'sc_req_item') {var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;}g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'false');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_environment', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = g_form.getValue('default_profile') + '';var cat_sys_id = g_form.getValue('cat_item') + '';var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile + '');ga.addParam('sysparm_catSysID', cat_sys_id + '');ga.getXML(parseResponse);} function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var nameTypeMap = {};var flds = g_form.nameMap;for (var i in flds) {nameTypeMap[flds[i].prettyName + ''] = fldType[flds[i].realName + ''] + '';}var fielVal = {};var parsed = JSON.parse(answer);for (var i in parsed) {if (i.indexOf('cluster_name') == -1) {if (nameTypeMap[i + ''] + '' == 'masked') {fielVal[i] = parsed[i].value;g_form.setValue(i + '', '');}g_form.setReadOnly(i + '', true); g_form.setDisplay(i + '', !parsed[i].readOnly);} else {g_form.setDisplay(i + '', !parsed[i].readOnly);g_form.setReadOnly(i + '', true);}}sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);}}";
                onLoadCatalogClientScriptGR.addScript(onLoadScriptHide);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScriptGR.create();
				var gr = new GlideRecord('catalog_script_client');
				if (gr.get(onLoadCatalogClientScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
		 
		       var onChangecatalogClientScript1 = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript1.setAttributes({
                    "name": "Get Subnet Info on project change",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": cat_items.item_name + "",
                    "cat_variable": "IO:" + projectSysID,
                    "active": true,
                    "order": 600,
                    "description": "This script is auto created thorugh runtime module for checking application name on submit.",
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false,

                });
                onChangecatalogClientScript1.appliesToCatalogItem(true);
                var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (newValue == '') { return; }try{var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getSubnet');ga.addParam('sysparm_catSysID', catalogSysId); ga.addParam('sysparm_ProjectUuid', newValue);ga.addParam('sysparm_ProjectUuid', newValue);ga.getXML(processAnswer);function processAnswer(response) {var ans = response.responseXML.documentElement.getAttribute('answer');sessionStorage['clusterName_' + g_form.getUniqueValue()] = ans;ans = JSON.parse(ans);var catalog_clusterJSON = ans.catalog_data;clusterJSON = ans.cluster_info;var nicList = [];for (var m in clusterJSON) {nicList.push(clusterJSON[m].subnet);}var nic_variable_namme = [];for (var n in catalog_clusterJSON) {var nics = catalog_clusterJSON[n].nics;for(var k in  nics) nic_variable_namme.push(nics[k]);}var catNicJson = {\"nic\": nic_variable_namme,\"nicList\": nicList};var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'setSubnet');ga.addParam('sysparm_catSysID', catalogSysId);ga.addParam('sysparm_catNicJson', JSON.stringify(catNicJson));ga.getXML(processAnswer1);function processAnswer1(response) {var ans = response.responseXML.documentElement.getAttribute('answer');}}}catch (err){}}";
                onChangecatalogClientScript1.addScript(onChangeScript);
                var OnChangeCatalogScriptId = onChangecatalogClientScript1.create();
				var gr = new GlideRecord('catalog_script_client');
				if (gr.get(OnChangeCatalogScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
		
				 var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Check Catalog Item Validity project",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": cat_items.item_name + "",
                    "cat_variable": "IO:" + projectSysID,
                    "active": true,
                    "order": 1,
                    "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') { return;}  var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+''; var profileName = (g_form.getValue('default_profile')+'').trim();if(profileName == '') return;var projectUUID = (newValue+'').trim();if(projectUUID == '')return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName); ga.addParam('cat_item_sys_id', g_form.getUniqueValue()); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); }  }    function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   }  function clearFieldValue(message) {alert(message); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getFieldDetails');ga.addParam('cat_item_sys_id', g_form.getUniqueValue());ga.addParam('fieldNameArray', g_form.getFieldNames());ga.getXML(parseResponse1);function parseResponse1(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var object = JSON.parse(answer);for(var i in object){if (object[i].var_type == 'formatter' || object[i].var_type == 'container' || object[i].var_type == 'checkbox_container' || object[i].var_type == 'undefined' || object[i].var_type == 'Container Start') {continue;}if (object[i].var_name.indexOf('cluster_name') == -1) g_form.clearValue(object[i].var_name);}}self.location = '/sp?id=sc_category&amp;catalog_id=240abede37112300fdfc097973990e24';}}";
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
				var gr = new GlideRecord('catalog_script_client');
				if (gr.get(onLoadCatalogClientScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
		
		
		        var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Check Catalog Item Validity profile",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": cat_items.item_name + "",
                    "cat_variable": "IO:" + profileSysID, 
                    "active": true,
                    "order": 1,
                    "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true); 
                var onLoadScript = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') { return;}  var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+'';var profileName = (newValue+'').trim(); if(profileName == '') return; var projectUUID = (g_form.getValue('default_project')+'').trim(); if(projectUUID == '') return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName); ga.addParam('cat_item_sys_id', g_form.getUniqueValue());ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } }function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   } function clearFieldValue(message) {alert(message); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getFieldDetails');ga.addParam('cat_item_sys_id', g_form.getUniqueValue());ga.addParam('fieldNameArray', g_form.getFieldNames());ga.getXML(parseResponse1);function parseResponse1(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var object = JSON.parse(answer);for(var i in object){if (object[i].var_type == 'formatter' || object[i].var_type == 'container' || object[i].var_type == 'checkbox_container' || object[i].var_type == 'undefined' || object[i].var_type == 'Container Start') {continue;}if (object[i].var_name.indexOf('cluster_name') == -1) g_form.clearValue(object[i].var_name);}}self.location = '/sp?id=sc_category&amp;catalog_id=240abede37112300fdfc097973990e24';}}";
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
				var gr = new GlideRecord('catalog_script_client');
				if (gr.get(onLoadCatalogClientScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
		
		       var onChangecatalogClientScript2 = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript2.setAttributes({
                    "name": "Set Session Vars",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": cat_items.item_name + "",
                    "cat_variable": "IO:" + profileSysID,
                    "active": true,
                    "order": 700,
                    "description": "This script is auto created thorugh runtime module for setting session json.",
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false,

                });
                onChangecatalogClientScript2.appliesToCatalogItem(true);
                var onChangeScriptSess = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') {return;}var cat_sys_id = g_form.getUniqueValue();var profile = (newValue + '').trim();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse);function varResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');console.log(answer);var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service;var sess_json = {};for (var i in prof_json) {var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = i + '';sess_json['IO:' + i] = curr_value;}for (var j in serv_json) {for (var k in serv_json[j]) {var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:' + k] = curr_value;}}sessionStorage['varValues'] = JSON.stringify(sess_json);}}";
                onChangecatalogClientScript2.addScript(onChangeScriptSess);
                var OnChangeCatalogScriptId = onChangecatalogClientScript2.create();
				var gr = new GlideRecord('catalog_script_client');
				if (gr.get(OnChangeCatalogScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
		
				var onChangecatalogClientScript3 = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript3.setAttributes({
                    "name": "Fetch dependencies on change of profile",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": cat_items.item_name + "",
                    "cat_variable": "IO:" +  profileSysID,
                    "active": true,
                    "order": 700,
                    "description": "This script is auto created thorugh runtime module for getting variables on change of profile.",
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false,

                });
                onChangecatalogClientScript3.appliesToCatalogItem(true);
                var onChangeScriptVars = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') {return;}var cat_sys_id = g_form.getUniqueValue();var profile = (newValue + '').trim();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse);}function varResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service;var sess_json = {};var var_array = [];for (var i in prof_json) {var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = i + '';sess_json['IO:' + i] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);for (var j in serv_json) {var_array = [];for (var k in serv_json[j]) {var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:' + k] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(sess_json);}function getAdvancedVars(variable_json) {var act_var_JSON = JSON.stringify(variable_json);var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name', 'variableArrayParser');gajax.addParam('sysparm_type', 'catalog');gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + '');gajax.addParam('sysparm_varJson', act_var_JSON);gajax.getXML(getVarResponse);}function getVarResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null') return;var parsedResponse = JSON.parse(answer);for (var i in parsedResponse) {var row = parsedResponse[i];var sys_id = 'IO:' + row.sys_id;var type = row.type + '';if (row.state == 'SUCCESS') {if (type == 'LOCAL') g_form.setValue(sys_id, row.value);if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') {g_form.clearOptions(sys_id);for (var k = 0; k &lt; (row.value).length; k++) {g_form.addOption(sys_id + '', row.value[k], row.value[k]);}}}if (row.state == 'ERROR') {g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}}}";
                onChangecatalogClientScript3.addScript(onChangeScriptVars);
                var OnChangeCatalogScriptId = onChangecatalogClientScript3.create();
				var gr = new GlideRecord('catalog_script_client');
				if (gr.get(OnChangeCatalogScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
		
				var catalogScriptGR = new sn_sc.CatalogClientScript();	
                catalogScriptGR.setAttributes({	
                    "name": "Service portal fixes",	
                    "type": "onChange",	
                    "applies_to": "item",	
                    "cat_item": cat_items.item_name + "",	
                    "cat_variable": "IO:" + profileSysID,	
                    "active": true,	
                    "order": 300,	
                    "description": 'This script is auto created thorugh runtime module for service portal fixes.',	
                    "applies_catalog": true,	
                    "ui_type": "10",	
                    "applies_req_item": false,	
                    "applies_sc_task": false,	
                });	
                catalogScriptGR.appliesToCatalogItem(true);	
                var Script = "function onChange(control, oldValue, newValue, isLoading) {try {if (isLoading) {return;} if (newValue == '') { var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + '' === 'default_profile' || elemen[i] + '' === 'default_project' || elemen[i] + '' === 'default_environment' || elemen[i] + '' === 'default_app_name') g_form.setDisplay(elemen[i], true);else {g_form.setMandatory(elemen[i], false);       g_form.setDisplay(elemen[i], false);}}g_form.setDisplay('default_profile', true);g_form.setDisplay('default_project', true); g_form.setDisplay('default_environment', true);         g_form.setDisplay('default_app_name', true); g_form.setMandatory('default_profile', true);} else {var credentials = g_form.getFieldNames();for (var i in credentials) {if (credentials[i].includes('_password') || credentials[i].includes('_private_key') || credentials[i].includes('_passphrase')) {g_form.setVisible(credentials[i] + '', false);}}var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'extraFields');ga.addParam('sysparm_catSysID', g_form.getUniqueValue());ga.addParam('sysparm_fieldNames', g_form.getFieldNames());ga.addParam('sysparm_profile', newValue); ga.getXML(parseResponse);function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var object = JSON.parse(answer);var extraFields = JSON.parse(object.extraFields);var privateFields = JSON.parse(object.privateFields);var showRuntimeVariables = JSON.parse(object.showRuntimeVariables);var secretVariables = JSON.parse(object.secretVariables);var extraCredentials = JSON.parse(object.extraCredentials);for (var i in extraFields) g_form.setVisible(extraFields[i] + '', false);for (var j in privateFields) g_form.setVisible(privateFields[j] + '', false);for (var k in showRuntimeVariables) g_form.setVisible(showRuntimeVariables[k] + '', true);for (var l in secretVariables) g_form.clearValue(secretVariables[l] + '');for (var m in extraCredentials) g_form.setVisible(extraCredentials[k] + '', true);} }}catch (e) {console.log('Service portal fix' + e);}}";	
                catalogScriptGR.addScript(Script);	
                var ScriptId = catalogScriptGR.create();
				var gr = new GlideRecord('catalog_script_client');
				if (gr.get(ScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
				
			}
		}
		if((parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &lt; parseFloat("3.2")) &amp;&amp; (gs.getProperty('x_nuta2_nutanix_ca.1_4_4') == '0')){
			gs.info("inside calm version &lt; 3.2 219");
			var cat_items1 = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
			cat_items1.query();
			while (cat_items1.next()) {
 				gs.info("263");
				
				var grItemProf1 = new GlideRecord("item_option_new");
				grItemProf1.addQuery("cat_item", cat_items1.item_name);
				var qc = grItemProf1.addQuery("name", "default_project");
				qc.addOrCondition('name', 'default_profile');
				qc.addOrCondition('name', 'default_app_name');
				grItemProf1.query();
				var profileSysID,appSysID ;
				while (grItemProf1.next()) {
					if (grItemProf1.name + '' == "default_project")
						projectSysID = grItemProf1.sys_id + "";
					if (grItemProf1.name + '' == "default_profile")
						profileSysID = grItemProf1.sys_id + "";
					if (grItemProf1.name + '' == "default_app_name")
						app_name_SysID = grItemProf1.sys_id + "";
				}
 				gs.info("277");
				
				var catalogScriptGR = new GlideRecord('catalog_script_client');
				catalogScriptGR.addQuery('cat_item', cat_items1.item_name + '');
				catalogScriptGR.query();
				while (catalogScriptGR.next()) {
					if (catalogScriptGR.name + '' == "Check AppName OnChange") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Check Catalog Item Validity") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Get Project and Profile List onLoad") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Get Credentials OnLoad") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Fetch dynamic value for advance variables onload") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Fetch form data on change of profile") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Get Subnet Info") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Check AppName OnSubmit") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Hide Order details on request") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Get Subnet Info on project change") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Check Catalog Item Validity project") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Check Catalog Item Validity profile") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Set Session Vars") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Fetch dependencies on change of profile") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Service portal fixes") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
				}
 				gs.info("300");
				
				var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Check Catalog Item Validity",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": cat_items1.item_name + '',
                    "active": false,
                    "order": 1,
                    "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = "function onLoad() {  var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+''; var projectUUID = getParameterValue('projectUUID') + ''; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; } if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName); } 				 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true'; 				 }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   } }";
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
			    var gr = new GlideRecord('catalog_script_client');
				if (gr.get(onLoadCatalogClientScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
 			   gs.info("326");
			
				 var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Get Project and Profile List onLoad",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": cat_items1.item_name + '',
                    "active": "true",
                    "order": "100",
                    "description": "This script is auto created thorugh runtime module for getting projects and profile list.",
                    "applies_catalog": "true",
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = "function onLoad() { var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchProjectAndProfileList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer);var projectList = parsed.projectList; g_form.clearOptions('default_project');for (var i = 0; i &lt; projectList.length; i++) { var project = projectList[i]; g_form.addOption('default_project', project.uuid, project.name);}var profileList = parsed.profileList.split(','); g_form.clearOptions('default_profile'); for (i = 0; i &lt; profileList.length; i++) { g_form.addOption('default_profile', profileList[i] + '', profileList[i] + ''); } g_form.setValue('default_profile', profileList[0]);if (projectList.length == 1) { g_form.setReadOnly('default_project', true);} if (profileList.length == 1) { g_form.setReadOnly('default_profile', true);} var cat_sys_id = g_form.getUniqueValue();var profile = g_form.getValue('default_profile').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse);}function varResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service; var sess_json = {};var var_array = [];for (var i in prof_json) {var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = i + '';sess_json['IO:'+i] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);for (var j in serv_json) {var_array = [];for (var k in serv_json[j]) {var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:'+k] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(sess_json);}}function getAdvancedVars(variable_json) {var act_var_JSON = JSON.stringify(variable_json);var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name', 'variableArrayParser');gajax.addParam('sysparm_type', 'catalog');gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + '');gajax.addParam('sysparm_varJson', act_var_JSON);gajax.getXML(getVarResponse);}function getVarResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null')return;var parsedResponse = JSON.parse(answer);for (var i in parsedResponse) {var row = parsedResponse[i];var sys_id = 'IO:' + row.sys_id;var type = row.type + '';if (row.state == 'SUCCESS') {if(type == 'LOCAL')g_form.setValue(sys_id, row.value);if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') {g_form.clearOptions(sys_id);for (var k = 0; k &lt; (row.value).length; k++) {g_form.addOption(sys_id + '', row.value[k], row.value[k]);}}}if (row.state == 'ERROR') {g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}}}";	
                
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();		
			    var gr = new GlideRecord('catalog_script_client');
				if (gr.get(onLoadCatalogClientScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
 				gs.info("353");
				
				var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Get Credentials OnLoad",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": cat_items1.item_name + '',
                    "active": true,
                    "order": 900,
                    "description": "This script is auto created thorugh runtime module for getting Credentials list.",
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);          	
                var onLoadScript = "function onLoad() { var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchCredentialsList');ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse, null); function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer'); var credArr = {}; var parsed = JSON.parse(answer);for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + '').toLowerCase().replace(/ /g, '_');g_form.setValue(name + '_credential_name', credential.name + ''); g_form.setReadOnly(name + '_credential_name', true); g_form.setValue(name + '_secret_type', credential.type + '', (credential.type + '' == 'KEY') ? 'SSH Private Key' : 'Password'); g_form.setReadOnly(name + '_secret_type', true); g_form.setValue(name + '_username', credential.username.value); g_form.setReadOnly(name + '_username', credential.username.readOnly); g_form.setDisplay(name + '_username', !credential.username.readOnly); if ((credential.type == 'KEY')) {g_form.setValue(name + '_ssh_private_key', credential.ssh_private_key.value); g_form.setReadOnly(name + '_ssh_private_key', credential.ssh_private_key.readOnly); g_form.setValue(name + '_passphrase', credential.passphrase.value); g_form.setReadOnly(name + '_passphrase', credential.passphrase.readOnly); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_ssh_private_key', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + '_passphrase', !credential.passphrase.readOnly); } else { g_form.setValue(name + '_password', ''); credArr[name + '_password'] = credential.password.value; g_form.setReadOnly(name + '_password', credential.password.readOnly); g_form.setDisplay(name + '_password', !credential.password.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false');}g_form.setDisplay(name + '_credential_reference', 'false'); if (credential.credential_reference &amp;&amp; credential.credential_reference.name) {g_form.setDisplay(name + '_credential_reference', 'true');g_form.addOption(name + '_credential_reference', credential.credential_reference.uuid + '', credential.credential_reference.name + '');g_form.setReadOnly(name + '_credential_reference', credential.credential_reference.readOnly);g_form.setDisplay(name + '_credential_reference', !credential.credential_reference.readOnly);g_form.setDisplay(name + '_ssh_private_key', 'false');g_form.setDisplay(name + '_passphrase', 'false');g_form.setDisplay(name + '_password', 'false');g_form.setDisplay(name + '_secret_type', 'false');}} sessionStorage['credentials_' + g_form.getUniqueValue()] = JSON.stringify(credArr); }}";
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
				var gr = new GlideRecord('catalog_script_client');
				if (gr.get(onLoadCatalogClientScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
 				gs.info("378");
				
				var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Fetch dynamic value for advance variables onload",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": cat_items1.item_name + '',
                    "active": true,
                    "order": 10,
                    "description": "This script is created for fetching dynamic values for advance variables onload.",
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = " function onLoad() { var cat_sys_id = g_form.getUniqueValue(); var elemen = g_form.nameMap; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'advanceVariableDynamicOptions'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parse = JSON.parse(answer); var keys = Object.keys(parse[0]); var fieldRegex = parse[1]; parse = parse[0]; sessionStorage['FieldRegex_' + g_form.getUniqueValue()] = JSON.stringify(fieldRegex); for (var i = 0; i &lt; keys.length; i++) { var row = parse[keys[i] + '']; if (row.options.state == 'SUCCESS') { g_form.clearOptions(keys[i] + ''); for (var k = 0; k &lt; (row.options.values).length; k++) { g_form.addOption(keys[i] + '', row.options.values[k], row.options.values[k]); }} else {  g_form.showFieldMsg(keys[i], 'Error in variable: ' + keys[i] + ': ' + row.options.values[0], 'error'); }}}}";
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
				var gr = new GlideRecord('catalog_script_client');
				if (gr.get(onLoadCatalogClientScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
 				gs.info("405");
				
				var catalogScriptGR = new sn_sc.CatalogClientScript();
                catalogScriptGR.setAttributes({
                    "name": "Fetch form data on change of profile",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": cat_items1.item_name + '',
                    "cat_variable": "IO:" + profileSysID,
                    "active": true,
                    "order": 100,
                    "description": 'This script is auto created thorugh runtime module for fetching and setting form data and visibility.',
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false,
                });
                catalogScriptGR.appliesToCatalogItem(true);
                var script = "function onChange(control, oldValue, newValue, isLoading) {if ( newValue == '') {return;}var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'getFieldDetails');ga.addParam('cat_item_sys_id', g_form.getUniqueValue());ga.addParam('fieldNameArray', g_form.getFieldNames());ga.getXML(parseFieldResponse);function parseFieldResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var object1 = JSON.parse(answer);for (var i in object1) {if (object1[i].var_type == 'formatter' || object1[i].var_type == 'container' || object1[i].var_type == 'checkbox_container' || object1[i].var_type == 'undefined' || object1[i].var_type == 'Container Start') {continue;}g_form.setDisplay(object1[i].var_type+'', false);g_form.setReadOnly(object1[i].var_type+'', true);}}g_form.setDisplay('provider_icons', 'true');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = newValue;var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile);ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse, null);function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile);ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse1, null);function parseResponse1(response){var answer1 = response.responseXML.documentElement.getAttribute('answer');var object1 = JSON.parse(answer1);for (var i in object1) {var fielVal = {};var parsed = JSON.parse(answer);for (var i in parsed) {if (i.indexOf('cluster_name') == -1) {if (object1[i].var_type+'' == 'masked') {fielVal[i] = parsed[i].value;g_form.setValue(i + '', '');} else {g_form.setValue(i + '', parsed[i].value + '');}g_form.setReadOnly(i + '', parsed[i].readOnly + '');g_form.setDisplay(i + '', !parsed[i].readOnly);} else {g_form.setDisplay(i + '', !parsed[i].readOnly);g_form.setReadOnly(i + '', true);}}sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);}}}}";
                
                catalogScriptGR.addScript(script);
                var ScriptId = catalogScriptGR.create();
				var gr = new GlideRecord('catalog_script_client');
				if (gr.get(ScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
			 
				var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Get Subnet Info",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": cat_items1.item_name + '',
                    "active": false,
                    "order": 50,
                    "description": "This script is created for getting subnet list.",
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = "function onLoad() { var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getSubnet');ga.addParam('sysparm_catSysID', catalogSysId);ga.getXML(processAnswer);function processAnswer(response) {var ans = response.responseXML.documentElement.getAttribute('answer');sessionStorage['clusterName_' + g_form.getUniqueValue()] = ans;ans = JSON.parse(ans);var catalog_clusterJSON = ans.catalog_data;clusterJSON = ans.cluster_info;var nicList = [];for(var m in clusterJSON){nicList.push(clusterJSON[m].subnet);}for (var k in catalog_clusterJSON) {for (var i in catalog_clusterJSON[k].nics) {if (catalog_clusterJSON[k].value + '') {for (var l in clusterJSON) {var subnetList = clusterJSON[l].subnet;if (l != catalog_clusterJSON[k].value + '')for (var s in subnetList){ /*g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', s);*/}}}{var opt = g_form.getElement(catalog_clusterJSON[k].nics[i] + '');for (var x=1, n = opt.options.length; x &lt; n; x++) {var present = false;var val = opt.options[x].value+'';for(var s=0; s &lt; nicList.length ;s++){if (nicList[s][val]) {present =true;break;}} if(!present){g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', opt.options[x].value+''); x--;n--; } }} }}}}";
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
				var gr = new GlideRecord('catalog_script_client');
				if (gr.get(onLoadCatalogClientScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
		
				var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript.setAttributes({
                    "name": "Check AppName OnChange",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": cat_items1.item_name + '',
                    "cat_variable": "IO:" + app_name_SysID,
                    "active": true,
                    "order": 100,
                    "description": "This script is auto created thorugh runtime module for checking application name.",
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false,

                });
                onChangecatalogClientScript.appliesToCatalogItem(true);
                var onChangeScript ="function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } var name = newValue; if ((newValue.length != ((newValue.trim()).length)) || (!(/^[_-\\w ]+$/.test(name) &amp;&amp; (name.trim().lastIndexOf('-') != (name.trim().length - 1))))) { g_form.setValue('default_app_name', ''); g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and in between spaces are allowed and cannot end with hyphens(-). Leading and trailing spaces are not allowed.'); } }";
                onChangecatalogClientScript.addScript(onChangeScript);
                var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
				var gr = new GlideRecord('catalog_script_client');
				if (gr.get(OnChangeCatalogScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
		
		        var onSubmitcatalogScriptGR = new sn_sc.CatalogClientScript();
                onSubmitcatalogScriptGR.setAttributes({
                    "name": "Check AppName OnSubmit",
                    "type": "onSubmit",
                    "applies_to": "item",
                    "cat_item": cat_items1.item_name + '',
                    "active": false,
                    "order": 100,
                    "description": "This script is auto created thorugh runtime module for checking application name on submit.",
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false,
                });
                onSubmitcatalogScriptGR.appliesToCatalogItem(true);
                var onSubmitscript = "function onSubmit() { var result = true; var name = g_form.getValue('default_app_name'); if (!(/^[_-\\w ]+$/.test(name) &amp;&amp; (name.trim().lastIndexOf('-') != (name.trim().length - 1)))) { g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and spaces are allowed and cannot end with hyphens(-).'); result = false; } var errorFieldName = ''; var errorIntFieldName = ''; var parse = JSON.parse(sessionStorage.getItem('FieldRegex_' + g_form.getUniqueValue())); var keys = Object.keys(parse); for (var i = 0; i &lt; keys.length; i++) { var row = parse[keys[i] + '']; var patt = row.regex + ''; var reg = new RegExp(patt); var value = g_form.getValue(keys[i] + ''); var dataType = (row.data_type + '' == 'EXEC_SECRET' || row.data_type + '' == 'HTTP_SECRET' || row.data_type + '' == 'EXEC_LOCAL' || row.data_type + '' == 'HTTP_LOCAL') ? 'Dynamic' : row.data_type + ''; if (row.type + '' == 21) { var splitted = value.split(','); var actualVal = row.listRegex; var count = 0; for (var j = 0, n = splitted.length; j &lt; n; j++) { var listVal = actualVal[splitted[j] + ''];  if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') &amp;&amp; j == n - 1 &amp;&amp; listVal.includes('\n')){ while(listVal.indexOf('\n') != -1){ listVal = listVal.replace('\n','');} if (reg.test(listVal)) { count++;} } if (count == n) row.status = true; } else { if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') &amp;&amp; value.includes('\n')){while(value.indexOf('\n') != -1){value = value.replace('\n','');}} if (reg.test(value)) { row.status = true; } } if (value &amp;&amp; row.status == false) { result = false; g_form.hideFieldMsg(keys[i] + ''); if(dataType == ''){ errorIntFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'This is a Integer field.Please provide a integer value.'); } else{ errorFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'Value does not match specified regex: ' + row.regex); } }} if (result) {   var parse = JSON.parse(sessionStorage.getItem('fieldValues_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 			 parse = JSON.parse(sessionStorage.getItem('credentials_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 		 sessionStorage.removeItem('fieldValues_' + g_form.getUniqueValue()); sessionStorage.removeItem('credentials_' + g_form.getUniqueValue());      sessionStorage.removeItem('clusterName_' + g_form.getUniqueValue()); sessionStorage.removeItem('FieldRegex_' + g_form.getUniqueValue());} else { errorIntFieldName = (errorIntFieldName.endsWith(',')) ? errorIntFieldName.substr(0, errorIntFieldName.length - 1) : errorIntFieldName; errorFieldName = (errorFieldName.endsWith(',')) ? errorFieldName.substr(0, errorFieldName.length - 1) : errorFieldName; if(errorIntFieldName != '' ) g_form.addErrorMessage('Variables are Integer field.Please provide suitable values: ' + errorIntFieldName); if(errorFieldName != '' ) g_form.addErrorMessage('Variables value does not match specified Regex.Please provide suitable values: ' + errorFieldName);  return false; }var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+'';var profileName = (g_form.getValue('default_profile')+'').trim(); if(profileName == '') return; var projectUUID = (g_form.getValue('default_project')+'').trim(); if(projectUUID == '') return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName);ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; }if(flds[i].label == \"Project\"  &amp;&amp; flds[i].prettyName == \"default_project\")continue;if(flds[i].label == \"Profile\"  &amp;&amp; flds[i].prettyName == \"default_profile\")continue;if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName);  /*	 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true'; 	*/			} }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   }}";
                onSubmitcatalogScriptGR.addScript(onSubmitscript);
                var onSubmitcatalogScriptId = onSubmitcatalogScriptGR.create();
		        var gr = new GlideRecord('catalog_script_client');
				if (gr.get(onSubmitcatalogScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
		
				 var onLoadCatalogClientScriptGR = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScriptGR.setAttributes({
                    "name": "Hide Order details on request",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": cat_items1.item_name + '',
                    "active": true,
                    "order": 10,
                    "description": "Hide values on request details.",
                    "applies_catalog": "false",
                    "ui_type": "0",
                    "applies_req_item": "true",
                    "applies_sc_task": "false"
                });
                onLoadCatalogClientScriptGR.appliesToCatalogItem(false);
                onLoadCatalogClientScriptGR.appliesToRequestedItem(true);
                var onLoadScriptHide = "function onLoad() {if(g_form.getTableName() + '' == 'sc_req_item') {var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;}g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'false');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_environment', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = g_form.getValue('default_profile') + '';var cat_sys_id = g_form.getValue('cat_item') + '';var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile + '');ga.addParam('sysparm_catSysID', cat_sys_id + '');ga.getXML(parseResponse);} function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var nameTypeMap = {};var flds = g_form.nameMap;for (var i in flds) {nameTypeMap[flds[i].prettyName + ''] = fldType[flds[i].realName + ''] + '';}var fielVal = {};var parsed = JSON.parse(answer);for (var i in parsed) {if (i.indexOf('cluster_name') == -1) {if (nameTypeMap[i + ''] + '' == 'masked') {fielVal[i] = parsed[i].value;g_form.setValue(i + '', '');}g_form.setReadOnly(i + '', true); g_form.setDisplay(i + '', !parsed[i].readOnly);} else {g_form.setDisplay(i + '', !parsed[i].readOnly);g_form.setReadOnly(i + '', true);}}sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);}}";
                onLoadCatalogClientScriptGR.addScript(onLoadScriptHide);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScriptGR.create();
				var gr = new GlideRecord('catalog_script_client');
				if (gr.get(onLoadCatalogClientScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
		 
		       var onChangecatalogClientScript1 = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript1.setAttributes({
                    "name": "Get Subnet Info on project change",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": cat_items1.item_name + '',
                    "cat_variable": "IO:" + projectSysID,
                    "active": true,
                    "order": 600,
                    "description": "This script is auto created thorugh runtime module for checking application name on submit.",
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false,

                });
                onChangecatalogClientScript1.appliesToCatalogItem(true);
                var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (newValue == '') { return; }try{var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getSubnet');ga.addParam('sysparm_catSysID', catalogSysId); ga.addParam('sysparm_ProjectUuid', newValue);ga.addParam('sysparm_ProjectUuid', newValue);ga.getXML(processAnswer);function processAnswer(response) {var ans = response.responseXML.documentElement.getAttribute('answer');sessionStorage['clusterName_' + g_form.getUniqueValue()] = ans;ans = JSON.parse(ans);var catalog_clusterJSON = ans.catalog_data;clusterJSON = ans.cluster_info;var nicList = [];for (var m in clusterJSON) {nicList.push(clusterJSON[m].subnet);}var nic_variable_namme = [];for (var n in catalog_clusterJSON) {var nics = catalog_clusterJSON[n].nics;for(var k in  nics) nic_variable_namme.push(nics[k]);}var catNicJson = {\"nic\": nic_variable_namme,\"nicList\": nicList};var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'setSubnet');ga.addParam('sysparm_catSysID', catalogSysId);ga.addParam('sysparm_catNicJson', JSON.stringify(catNicJson));ga.getXML(processAnswer1);function processAnswer1(response) {var ans = response.responseXML.documentElement.getAttribute('answer');}}}catch (err){}}";
                onChangecatalogClientScript1.addScript(onChangeScript);
                var OnChangeCatalogScriptId = onChangecatalogClientScript1.create();
				var gr = new GlideRecord('catalog_script_client');
				if (gr.get(OnChangeCatalogScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
		
				 var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Check Catalog Item Validity project",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": cat_items1.item_name + '',
                    "cat_variable": "IO:" + projectSysID,
                    "active": true,
                    "order": 1,
                    "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') { return;}  var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+''; var profileName = (g_form.getValue('default_profile')+'').trim();if(profileName == '') return;var projectUUID = (newValue+'').trim();if(projectUUID == '')return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName); ga.addParam('cat_item_sys_id', g_form.getUniqueValue()); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); }  }    function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   }  function clearFieldValue(message) {alert(message); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getFieldDetails');ga.addParam('cat_item_sys_id', g_form.getUniqueValue());ga.addParam('fieldNameArray', g_form.getFieldNames());ga.getXML(parseResponse1);function parseResponse1(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var object = JSON.parse(answer);for(var i in object){if (object[i].var_type == 'formatter' || object[i].var_type == 'container' || object[i].var_type == 'checkbox_container' || object[i].var_type == 'undefined' || object[i].var_type == 'Container Start') {continue;}if (object[i].var_name.indexOf('cluster_name') == -1) g_form.clearValue(object[i].var_name);}}self.location = '/sp?id=sc_category&amp;catalog_id=240abede37112300fdfc097973990e24';}}";
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
				var gr = new GlideRecord('catalog_script_client');
				if (gr.get(onLoadCatalogClientScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
		
		
		        var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Check Catalog Item Validity profile",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": cat_items1.item_name + '',
                    "cat_variable": "IO:" +  profileSysID,
                    "active": true,
                    "order": 1,
                    "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true); 
                var onLoadScript = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') { return;}  var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+'';var profileName = (newValue+'').trim(); if(profileName == '') return; var projectUUID = (g_form.getValue('default_project')+'').trim(); if(projectUUID == '') return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName); ga.addParam('cat_item_sys_id', g_form.getUniqueValue());ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } }function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   } function clearFieldValue(message) {alert(message); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getFieldDetails');ga.addParam('cat_item_sys_id', g_form.getUniqueValue());ga.addParam('fieldNameArray', g_form.getFieldNames());ga.getXML(parseResponse1);function parseResponse1(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var object = JSON.parse(answer);for(var i in object){if (object[i].var_type == 'formatter' || object[i].var_type == 'container' || object[i].var_type == 'checkbox_container' || object[i].var_type == 'undefined' || object[i].var_type == 'Container Start') {continue;}if (object[i].var_name.indexOf('cluster_name') == -1) g_form.clearValue(object[i].var_name);}}self.location = '/sp?id=sc_category&amp;catalog_id=240abede37112300fdfc097973990e24';}}";
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
				var gr = new GlideRecord('catalog_script_client');
				if (gr.get(onLoadCatalogClientScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
		
		       var onChangecatalogClientScript2 = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript2.setAttributes({
                    "name": "Set Session Vars",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": cat_items1.item_name + '',
                    "cat_variable": "IO:" +  profileSysID,
                    "active": true,
                    "order": 700,
                    "description": "This script is auto created thorugh runtime module for setting session json.",
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false,

                });
                onChangecatalogClientScript2.appliesToCatalogItem(true);
                var onChangeScriptSess = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') {return;}var cat_sys_id = g_form.getUniqueValue();var profile = (newValue + '').trim();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse);function varResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');console.log(answer);var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service;var sess_json = {};for (var i in prof_json) {var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = i + '';sess_json['IO:' + i] = curr_value;}for (var j in serv_json) {for (var k in serv_json[j]) {var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:' + k] = curr_value;}}sessionStorage['varValues'] = JSON.stringify(sess_json);}}";
                onChangecatalogClientScript2.addScript(onChangeScriptSess);
                var OnChangeCatalogScriptId = onChangecatalogClientScript2.create();
				var gr = new GlideRecord('catalog_script_client');
				if (gr.get(OnChangeCatalogScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
		
				var onChangecatalogClientScript3 = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript3.setAttributes({
                    "name": "Fetch dependencies on change of profile",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": cat_items1.item_name + '',
                    "cat_variable": "IO:" +  profileSysID,
                    "active": true,
                    "order": 700,
                    "description": "This script is auto created thorugh runtime module for getting variables on change of profile.",
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false,

                });
                onChangecatalogClientScript3.appliesToCatalogItem(true);
                var onChangeScriptVars = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') {return;}var cat_sys_id = g_form.getUniqueValue();var profile = (newValue + '').trim();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse);}function varResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service;var sess_json = {};var var_array = [];for (var i in prof_json) {var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = i + '';sess_json['IO:' + i] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);for (var j in serv_json) {var_array = [];for (var k in serv_json[j]) {var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:' + k] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(sess_json);}function getAdvancedVars(variable_json) {var act_var_JSON = JSON.stringify(variable_json);var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name', 'variableArrayParser');gajax.addParam('sysparm_type', 'catalog');gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + '');gajax.addParam('sysparm_varJson', act_var_JSON);gajax.getXML(getVarResponse);}function getVarResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null') return;var parsedResponse = JSON.parse(answer);for (var i in parsedResponse) {var row = parsedResponse[i];var sys_id = 'IO:' + row.sys_id;var type = row.type + '';if (row.state == 'SUCCESS') {if (type == 'LOCAL') g_form.setValue(sys_id, row.value);if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') {g_form.clearOptions(sys_id);for (var k = 0; k &lt; (row.value).length; k++) {g_form.addOption(sys_id + '', row.value[k], row.value[k]);}}}if (row.state == 'ERROR') {g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}}}";
                onChangecatalogClientScript3.addScript(onChangeScriptVars);
                var OnChangeCatalogScriptId = onChangecatalogClientScript3.create();
				var gr = new GlideRecord('catalog_script_client');
				if (gr.get(OnChangeCatalogScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
		
				var catalogScriptGR = new sn_sc.CatalogClientScript();	
                catalogScriptGR.setAttributes({	
                    "name": "Service portal fixes",	
                    "type": "onChange",	
                    "applies_to": "item",	
                    "cat_item": cat_items1.item_name + '',	
                    "cat_variable": "IO:" + profileSysID,	
                    "active": true,	
                    "order": 300,	
                    "description": 'This script is auto created thorugh runtime module for service portal fixes.',	
                    "applies_catalog": true,	
                    "ui_type": "10",	
                    "applies_req_item": false,	
                    "applies_sc_task": false,	
                });	
                catalogScriptGR.appliesToCatalogItem(true);	
                var Script = "function onChange(control, oldValue, newValue, isLoading) {try {if (isLoading) {return;} if (newValue == '') { var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + '' === 'default_profile' || elemen[i] + '' === 'default_project' || elemen[i] + '' === 'default_environment' || elemen[i] + '' === 'default_app_name') g_form.setDisplay(elemen[i], true);else {g_form.setMandatory(elemen[i], false);       g_form.setDisplay(elemen[i], false);}}g_form.setDisplay('default_profile', true);g_form.setDisplay('default_project', true); g_form.setDisplay('default_environment', true);         g_form.setDisplay('default_app_name', true); g_form.setMandatory('default_profile', true);} else {var credentials = g_form.getFieldNames();for (var i in credentials) {if (credentials[i].includes('_password') || credentials[i].includes('_private_key') || credentials[i].includes('_passphrase')) {g_form.setVisible(credentials[i] + '', false);}}var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'extraFields');ga.addParam('sysparm_catSysID', g_form.getUniqueValue());ga.addParam('sysparm_fieldNames', g_form.getFieldNames());ga.addParam('sysparm_profile', newValue); ga.getXML(parseResponse);function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var object = JSON.parse(answer);var extraFields = JSON.parse(object.extraFields);var privateFields = JSON.parse(object.privateFields);var showRuntimeVariables = JSON.parse(object.showRuntimeVariables);var secretVariables = JSON.parse(object.secretVariables);var extraCredentials = JSON.parse(object.extraCredentials);for (var i in extraFields) g_form.setVisible(extraFields[i] + '', false);for (var j in privateFields) g_form.setVisible(privateFields[j] + '', false);for (var k in showRuntimeVariables) g_form.setVisible(showRuntimeVariables[k] + '', true);for (var l in secretVariables) g_form.clearValue(secretVariables[l] + '');for (var m in extraCredentials) g_form.setVisible(extraCredentials[k] + '', true);} }}catch (e) {console.log('Service portal fix' + e);}}";	
                catalogScriptGR.addScript(Script);	
                var ScriptId = catalogScriptGR.create();
				var gr = new GlideRecord('catalog_script_client');
				if (gr.get(ScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
				
			}
		}
		this.fetchValuesOnChangeClientScript();
				
		gs.setProperty('x_nuta2_nutanix_ca.1_4_4', '1');
	} catch (e) {
        this.logger.error("Exception caught inside migraation_script.addEnvironmentVariableToAllCatalogs : " + e);
    }
},
    
    isCatalogItemsAvailable: function() {
        var cat_items = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        cat_items.query();
        if (cat_items.hasNext() &amp;&amp; (gs.getProperty('x_nuta2_nutanix_ca.1_4_4') == '0')) {
            this.logger.info("Migration to V 1_4_4 require");
            return true;
        }
		else{
			gs.setProperty('x_nuta2_nutanix_ca.1_4_4', '1');
			this.logger.info("Migration to V 1_4_4 not require");
			return false;
		}
        
    },
	fetchValuesOnChangeClientScript: function() {
		gs.info("427");
		var cat_items1 = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
		cat_items1.query();
		while (cat_items1.next()) {
				gs.info("431");
				var catalogScriptGR = new GlideRecord('catalog_script_client');
				catalogScriptGR.addQuery('cat_item', cat_items1.item_name + '');
				catalogScriptGR.query();
				while (catalogScriptGR.next()) {
					if (catalogScriptGR.name + '' == "Fetch values OnChange") {
						
						var field = (catalogScriptGR.cat_variable+'').replace("IO:",'');
						
									var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
									onChangecatalogClientScript.setAttributes({
										"name": "Fetch values OnChange",
										"type": "onChange",
										"applies_to": "item",
										"cat_item": cat_items1.item_name + '',
										"cat_variable": "IO:" + field,
										"active": true,
										"order": 1000,
										"description": "This script is auto created thorugh runtime module for fetching values.",
										"applies_catalog": "true",
										"ui_type": "10",
										"applies_req_item": false,
										"applies_sc_task": false,
									});
									onChangecatalogClientScript.appliesToCatalogItem(true);
							var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) {try{ if(!sessionStorage['varValues'])return; var control_id = 'IO:"+field +"';var varValues = JSON.parse(sessionStorage['varValues']);oldValue = varValues[control_id + '']; if (isLoading || newValue == '' || oldValue + '' == newValue + '') { return; }console.log(oldValue);console.log(newValue); function varResponse(response){var answer=response.responseXML.documentElement.getAttribute('answer');var varJSON=JSON.parse(answer);var prof_json=varJSON.profile;var serv_json=varJSON.service;var var_array=[];for(var i in prof_json){var field=prof_json[i];var curr_value=g_form.getValue('IO:'+i);varValues['IO:' + i] = curr_value + '';var parsed_field=JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value=curr_value,parsed_field.sys_id=i+'',var_array.push(parsed_field);}getAdvancedVars(var_array);for(var j in serv_json){var_array=[];for(var k in serv_json[j]){var field=serv_json[j][k];var curr_value=g_form.getValue('IO:'+k);varValues['IO:' + k] = curr_value + '';var parsed_field=JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value=curr_value,parsed_field.sys_id=k+'',var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(varValues);}function getAdvancedVars(variable_json){var act_var_JSON=JSON.stringify(variable_json);var gajax=new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name','variableArrayParser'),gajax.addParam('sysparm_type','catalog'),gajax.addParam('sysparm_parentUuid',g_form.getUniqueValue()+''),gajax.addParam('sysparm_varJson',act_var_JSON),gajax.getXML(getVarResponse);}function getVarResponse(response){ var answer=response.responseXML.documentElement.getAttribute('answer');if(answer+''==''||answer+''=='undefined'||answer+''=='null')return;var parsedResponse=JSON.parse(answer);for(var i in parsedResponse){var row=parsedResponse[i];var sys_id='IO:'+row.sys_id;var type=row.type+'';if(row.state=='SUCCESS'&amp;&amp; (type=='EXEC_LOCAL'||type=='HTTP_LOCAL'||type=='EXEC_SECRET'||type=='HTTP_SECRET')){g_form.clearOptions(sys_id);for(var k=0;k&lt;row.value.length;k++)g_form.addOption(sys_id+'',row.value[k],row.value[k]); g_form.setValue(sys_id,row.value);} else {if(row.data_type + '' != 'BASE'){g_form.clearOptions(sys_id); for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + '', row.options[k], row.options[k]);} g_form.setValue(sys_id, row.value);}row.state=='ERROR'&amp;&amp;g_form.addErrorMessage('Error in variable: '+row.name+': '+row.error[0]);}}var cat_sys_id=g_form.getUniqueValue();var profile=g_form.getValue('default_profile').trim();var ga=new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name','fetchLaunchVars'),ga.addParam('sysparm_catsysid',cat_sys_id),ga.addParam('sysparm_profile',profile),ga.getXML(varResponse);}catch(e){console.log('Fetch values OnChange'+e)}}";
									onChangecatalogClientScript.addScript(onChangeScript);
									var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
									var gr = new GlideRecord('catalog_script_client');
									if (gr.get(OnChangeCatalogScriptId)) {
										gr.setValue("sys_scope", "global");
										gr.update();
									}
						
						gs.info("462");
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					gs.info("465");
				}
		}
		
	},
    isMigrationNeeded: function() {
        var cat_items = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        cat_items.addEncodedQuery('multiple_application_profileISEMPTY^multiple_projectsISEMPTY^state=active^ORstate=draft');
        cat_items.query();
        if (cat_items.hasNext()) {
            this.logger.info("Migration to V 1_4 require");
            return true;
        }
        this.logger.info("Migration to V 1_4 not require");
        return false;
    },

    updateCatalog: function() {
        this.logger.info("Migration to V1_4 Started");

        gs.setProperty('x_nuta2_nutanix_ca.migration.script.ran', 'true');

        this.catalogItem_1_4();
        var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        gr.query();
        while (gr.next()) {
            try {
                this.clientScript_1_4(gr.item_name);
                this.logger.info(gr.item_name.name + " Catalog client script succesfully migrated.");
            } catch (e) {
                this.logger.error(gr.item_name.name + " Catalog Item was not migrated due to issue in catalog client script.");
            }
        }
    },


    clientScript_1_4: function(catSysId) {
        var catalogScriptGR = new GlideRecord(this.appUtil.configuration.table.catalogClientScript + '');
        catalogScriptGR.addQuery('cat_item', catSysId);
        catalogScriptGR.query();
        this.logger.info("ctalog client Script " + catalogScriptGR.getRowCount() + "to be updatated");
        while (catalogScriptGR.next()) {
            this.logger.info(catalogScriptGR.name + "catalog client script updatated");
            if (catalogScriptGR.name + '' == "Fetch form data on change of profile") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);

            }
            if (catalogScriptGR.name + '' == "Get Project and Profile List onLoad") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
            }
            if (catalogScriptGR.name + '' == "Hide Order details on request") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
            }
            if (catalogScriptGR.name + '' == "Get Subnet Info") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
            }
            if (catalogScriptGR.name + '' == "Get Subnet Info on project change") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
            }
            if (catalogScriptGR.name + '' == "Check Catalog Item Validity") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
            }

        }
        var profileSysID = new GlideRecord('item_option_new');
        profileSysID.addEncodedQuery('cat_item=' + catSysId + '^nameLIKEdefault_profile');
        profileSysID.query();
        profileSysID.next();
        var catalogScriptGR = new sn_sc.CatalogClientScript();
        catalogScriptGR.setAttributes({
            "name": "Fetch form data on change of profile",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": "" + catSysId,
            "cat_variable": "IO:" + profileSysID.sys_id,
            "active": true,
            "order": 100,
            "description": 'This script is auto created thorugh runtime module for fetching and setting form data and visibility.',
            "applies_catalog": true,
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        catalogScriptGR.appliesToCatalogItem(true);
        var Script = "function onChange(control, oldValue, newValue, isLoading) {if (newValue == '') {return;} var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialogbox = new GlideModal('loader', true);loadingDialogbox.setTitle('Fetching Order Form Data...'); loadingDialogbox.renderWithContent(''+loadingHTML);var fldType = {};var elemen = g_form.elements;for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;} g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'false');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = newValue;var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile);ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse, null, loadingDialogbox);function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer');   var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; }  var nameTypeMap = {}; var flds = g_form.nameMap; for(var i in flds){ nameTypeMap[flds[i].prettyName+''] = fldType[flds[i].realName+'']+''; } 		  var fielVal = {};  var parsed = JSON.parse(answer);for (var i in parsed) {if(i.indexOf('cluster_name') == -1){ if(nameTypeMap[i+'']+'' == 'masked'){ fielVal[i] = parsed[i].value; g_form.setValue(i + '', ''); } else{ g_form.setValue(i + '', parsed[i].value + ''); }			 g_form.setReadOnly(i + '', parsed[i].readOnly + ''); g_form.setDisplay(i + '', !parsed[i].readOnly);	 }else{ g_form.setDisplay(i + '', !parsed[i].readOnly);	 g_form.setReadOnly(i + '', true);	 			}		}   sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);		  new GlideModal().get('loader').destroy();}} var cat_sys_id = g_form.getUniqueValue();	var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchProjectAndProfileList');ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer); var projectList = parsed.projectList; if (projectList.length == 1) { g_form.setReadOnly('default_project', true);}}";
        catalogScriptGR.addScript(Script);
        var ScriptId = catalogScriptGR.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Fetch form data on change of profile\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(ScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }


        var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
        onLoadCatalogClientScript.setAttributes({
            "name": "Get Project and Profile List onLoad",
            "type": "onLoad",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "active": "true",
            "order": "100",
            "description": "This script is auto created thorugh runtime module for getting projects and profile list.",
            "applies_catalog": "true",
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        onLoadCatalogClientScript.appliesToCatalogItem(true);
        var onLoadScript = "function onLoad() { var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching Project And Profile'); loadingDialog.renderWithContent(''+loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchProjectAndProfileList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null , loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer);var projectList = parsed.projectList; g_form.clearOptions('default_project');for (var i = 0; i &lt; projectList.length; i++) { var project = projectList[i]; g_form.addOption('default_project', project.uuid, project.name);}var profileList = parsed.profileList.split(','); g_form.clearOptions('default_profile'); for (i = 0; i &lt; profileList.length; i++) { g_form.addOption('default_profile', profileList[i] + '', profileList[i] + ''); } g_form.setValue('default_profile', profileList[0]);if (projectList.length == 1) { g_form.setReadOnly('default_project', true);} if (profileList.length == 1) { g_form.setReadOnly('default_profile', true);} new GlideModal().get('loader').destroy();var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\";var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching variables...'); loadingDialog.renderWithContent(''+loadingHTML);var cat_sys_id = g_form.getUniqueValue();var profile = g_form.getValue('default_profile').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse, null, loadingDialog);}function varResponse(response, loadingDialog) {var answer = response.responseXML.documentElement.getAttribute('answer');var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service; var sess_json = {};var var_array = [];for (var i in prof_json) {var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = i + '';sess_json['IO:'+i] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);for (var j in serv_json) {var_array = [];for (var k in serv_json[j]) {var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:'+k] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(sess_json);}}function getAdvancedVars(variable_json) {var act_var_JSON = JSON.stringify(variable_json);var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name', 'variableArrayParser');gajax.addParam('sysparm_type', 'catalog');gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + '');gajax.addParam('sysparm_varJson', act_var_JSON);gajax.getXML(getVarResponse);}function getVarResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null')return;var parsedResponse = JSON.parse(answer);for (var i in parsedResponse) {var row = parsedResponse[i];var sys_id = 'IO:' + row.sys_id;var type = row.type + '';if (row.state == 'SUCCESS') {if(type == 'LOCAL')g_form.setValue(sys_id, row.value);if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') {g_form.clearOptions(sys_id);for (var k = 0; k &lt; (row.value).length; k++) {g_form.addOption(sys_id + '', row.value[k], row.value[k]);}}}if (row.state == 'ERROR') {g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}}}";
        onLoadCatalogClientScript.addScript(onLoadScript);
        var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Get Project and Profile List onLoad\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(onLoadCatalogClientScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }

        var onLoadCatalogClientScriptGR = new sn_sc.CatalogClientScript();
        onLoadCatalogClientScriptGR.setAttributes({
            "name": "Hide Order details on request",
            "type": "onLoad",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "active": true,
            "order": 10,
            "description": "Hide values on request details.",
            "applies_catalog": "false",
            "ui_type": "0",
            "applies_req_item": "true",
            "applies_sc_task": "false",
            "sys_scope": "global"
        });
        onLoadCatalogClientScriptGR.appliesToCatalogItem(false);
        onLoadCatalogClientScriptGR.appliesToRequestedItem(true);
        var onLoadScriptHide = "function onLoad() {if(g_form.getTableName() + '' == 'sc_req_item') {var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;}g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'false');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_environment', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = g_form.getValue('default_profile') + '';var cat_sys_id = g_form.getValue('cat_item') + '';var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile + '');ga.addParam('sysparm_catSysID', cat_sys_id + '');ga.getXML(parseResponse);} function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var nameTypeMap = {};var flds = g_form.nameMap;for (var i in flds) {nameTypeMap[flds[i].prettyName + ''] = fldType[flds[i].realName + ''] + '';}var fielVal = {};var parsed = JSON.parse(answer);for (var i in parsed) {if (i.indexOf('cluster_name') == -1) {if (nameTypeMap[i + ''] + '' == 'masked') {fielVal[i] = parsed[i].value;g_form.setValue(i + '', '');}g_form.setReadOnly(i + '', true); g_form.setDisplay(i + '', !parsed[i].readOnly);} else {g_form.setDisplay(i + '', !parsed[i].readOnly);g_form.setReadOnly(i + '', true);}}sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);}}";
        onLoadCatalogClientScriptGR.addScript(onLoadScriptHide);
        var onLoadCatalogClientScriptId = onLoadCatalogClientScriptGR.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Hide values on request details.\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(onLoadCatalogClientScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }

        /*Insert new Scripts Get Subnet Info on project change*/
        var oldGR = new GlideRecord('item_option_new');
        oldGR.addEncodedQuery('cat_item=' + catSysId + '^nameLIKEdefault_project');
        oldGR.query();
        oldGR.next();
        var onChangecatalogClientScript1 = new sn_sc.CatalogClientScript();
        onChangecatalogClientScript1.setAttributes({
            "name": "Get Subnet Info on project change",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "cat_variable": "IO:" + oldGR.sys_id,
            "active": true,
            "order": 600,
            "description": "This script is auto created thorugh runtime module for checking application name on submit.",
            "applies_catalog": true,
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        onChangecatalogClientScript1.appliesToCatalogItem(true);
        var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (newValue == '') { return; }var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getSubnet');ga.addParam('sysparm_catSysID', catalogSysId);ga.addParam('sysparm_ProjectUuid', newValue);ga.getXML(processAnswer);function processAnswer(response) {var ans = response.responseXML.documentElement.getAttribute('answer');sessionStorage['clusterName_' + g_form.getUniqueValue()] = ans;ans = JSON.parse(ans);var catalog_clusterJSON = ans.catalog_data;clusterJSON = ans.cluster_info;var nicList = [];for(var m in clusterJSON){nicList.push(clusterJSON[m].subnet);}for (var k in catalog_clusterJSON) {for (var i in catalog_clusterJSON[k].nics) {if (catalog_clusterJSON[k].value + '') {for (var l in clusterJSON) {var subnetList = clusterJSON[l].subnet;if (l != catalog_clusterJSON[k].value + '')for (var s in subnetList){ /*g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', s);*/}}}{var opt = g_form.getElement(catalog_clusterJSON[k].nics[i] + '');for (var x=1, n = opt.options.length; x &lt; n; x++) {var present = false;var val = opt.options[x].value+'';for(var s=0; s &lt; nicList.length ;s++){if (nicList[s][val]) {present =true;break;}} if(!present){g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', opt.options[x].value+''); x--;n--; } }} }}}}";
        onChangecatalogClientScript1.addScript(onChangeScript);
        var OnChangeCatalogScriptId = onChangecatalogClientScript1.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Get Subnet Info on project change\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(OnChangeCatalogScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }

        var projectSysID = new GlideRecord('item_option_new');
        projectSysID.addEncodedQuery('cat_item=' + catSysId + '^nameLIKEdefault_project');
        projectSysID.query();
        projectSysID.next();
        var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
        onLoadCatalogClientScript.setAttributes({
            "name": "Check Catalog Item Validity project",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "cat_variable": "IO:" + projectSysID,
            "active": true,
            "order": 1,
            "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
            "applies_catalog": true,
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        onLoadCatalogClientScript.appliesToCatalogItem(true);
        var onLoadScript = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') { return;} var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+''; var profileName = (g_form.getValue('default_profile')+'').trim();if(profileName == '') return;var projectUUID = (newValue+'').trim();if(projectUUID == '')return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; }  if(flds[i].label == \"Project\"  &amp;&amp; flds[i].prettyName == \"default_project\")continue;if(flds[i].label == \"Profile\"  &amp;&amp; flds[i].prettyName == \"default_profile\")continue;if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName);/* self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true'; */			}	 }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   } }";
        onLoadCatalogClientScript.addScript(onLoadScript);
        var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Check Catalog Item Validity project\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(onLoadCatalogClientScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }


        var profileSysID = new GlideRecord('item_option_new');
        profileSysID.addEncodedQuery('cat_item=' + catSysId + '^nameLIKEdefault_profile');
        profileSysID.query();
        profileSysID.next();
        var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
        onLoadCatalogClientScript.setAttributes({
            "name": "Check Catalog Item Validity profile",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "cat_variable": "IO:" + profileSysID.sys_id,
            "active": true,
            "order": 1,
            "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
            "applies_catalog": true,
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        onLoadCatalogClientScript.appliesToCatalogItem(true);
        var onLoadScript = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') { return;} var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+'';var profileName = (newValue+'').trim(); if(profileName == '') return; var projectUUID = (g_form.getValue('default_project')+'').trim(); if(projectUUID == '') return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName);ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; } if(flds[i].label == \"Project\"  &amp;&amp; flds[i].prettyName == \"default_project\")continue;if(flds[i].label == \"Profile\"  &amp;&amp; flds[i].prettyName == \"default_profile\")continue;if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName);/*	 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true'; 	*/			 }}  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   } }";
        onLoadCatalogClientScript.addScript(onLoadScript);
        var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Check Catalog Item Validity profile\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(onLoadCatalogClientScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }


    },
	
    catalogItem_1_4: function() {
        var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        gr.addEncodedQuery('multiple_application_profileISEMPTY^multiple_projectsISEMPTY^state=active^ORstate=draft');
        gr.query();
        while (gr.next()) {
            try {
                gr.multiple_projects = gr.project;
                gr.multiple_application_profile = gr.application_profile;
                gr.update();
                this.logger.info("V1.4 migration, " + gr.item_name.name + " Catalog Item was migrated.");
            } catch (e) {
                this.logger.error("V1.4 migration, " + gr.item_name.name + " Catalog Item was not migrated due to issue in some field type and the value it contained.");
            }
        }
    },

    copyFieldJson: function() {

        this.logger.info("V1.4 migration: Migrating old variables");
        var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        gr.addQuery("state", "active");
        gr.query();
        while (gr.next()) {
            this._createOnChangeSessionScript(gr.item_name.sys_id);
            var grVars = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
            grVars.addEncodedQuery('catalog_item=' + gr.item_name.sys_id + '^isprofilevariable=true^ORisservicevariable=true');
            grVars.query();
            while (grVars.next()) {
                var grVarsBp = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
                grVarsBp.addQuery('catalog_item', gr.blueprint + "");
                grVarsBp.addQuery('uuid', grVars.uuid + "");
                grVarsBp.query();
                if (grVarsBp.next()) {
                    this._createOnChangeScript(grVars.variable.sys_id + "", gr.item_name.sys_id + "");
                    grVars.field_json = grVarsBp.field_json + '';
                    grVars.update();
                }
            }
        }

    },

    _createOnChangeSessionScript: function(catSysId) {

        var profileSysID = new GlideRecord('item_option_new');
        profileSysID.addEncodedQuery('cat_item=' + catSysId + '^nameLIKEdefault_profile');
        profileSysID.query();
        profileSysID.next();

        var onChangecatalogClientScript3 = new sn_sc.CatalogClientScript();
        onChangecatalogClientScript3.setAttributes({
            "name": "Fetch dependencies on change of profile",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "cat_variable": "IO:" + profileSysID.sys_id,
            "active": true,
            "order": 700,
            "description": "This script is auto created thorugh runtime module for getting variables on change of profile.",
            "applies_catalog": true,
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,

        });
        onChangecatalogClientScript3.appliesToCatalogItem(true);
        var onChangeScriptVars = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + '').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchLaunchVars'); ga.addParam('sysparm_catsysid', cat_sys_id); ga.addParam('sysparm_profile', profile); ga.getXML(varResponse);}function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); console.log(answer); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue('IO:' + i); var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value = curr_value; parsed_field.sys_id = i + ''; sess_json['IO:' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue('IO:' + k); var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value = curr_value; parsed_field.sys_id = k + ''; sess_json['IO:' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage['varValues'] = JSON.stringify(sess_json);}function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); gajax.addParam('sysparm_name', 'variableArrayParser'); gajax.addParam('sysparm_type', 'catalog'); gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + ''); gajax.addParam('sysparm_varJson', act_var_JSON); gajax.getXML(getVarResponse);}function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) {var row = parsedResponse[i]; var sys_id = 'IO:' + row.sys_id; var type = row.type + ''; if (row.state == 'SUCCESS') { if (type == 'LOCAL') g_form.setValue(sys_id, row.value); if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; (row.value).length; k++) { g_form.addOption(sys_id + '', row.value[k], row.value[k]); } } } if (row.state == 'ERROR') { g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]); } new GlideModal().get('variables_loader').destroy(); }}";
        onChangecatalogClientScript3.addScript(onChangeScriptVars);
        var OnChangeCatalogScriptId = onChangecatalogClientScript3.create();
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(OnChangeCatalogScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }

        var onChangecatalogClientScript2 = new sn_sc.CatalogClientScript();
        onChangecatalogClientScript2.setAttributes({
            "name": "Set Session Vars",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "cat_variable": "IO:" + profileSysID.sys_id,
            "active": true,
            "order": 700,
            "description": "This script is auto created thorugh runtime module for setting session json.",
            "applies_catalog": true,
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        onChangecatalogClientScript2.appliesToCatalogItem(true);
        var onChangeScriptSess = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') {return;}var cat_sys_id = g_form.getUniqueValue();var profile = (newValue + '').trim();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse);function varResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');jslog(answer);var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service;var sess_json = {};for (var i in prof_json) {var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = i + '';sess_json['IO:' + i] = curr_value;}for (var j in serv_json) {for (var k in serv_json[j]) {var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:' + k] = curr_value;}}sessionStorage['varValues'] = JSON.stringify(sess_json);}}";
        onChangecatalogClientScript2.addScript(onChangeScriptSess);
        var OnChangeCatalogScriptId = onChangecatalogClientScript2.create();
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(OnChangeCatalogScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }

        this.logger.debug("Created onChange script to set Session variables ");
    },

    _createOnChangeScript: function(varSysId, catSysId) {
        try {
            this.logger.info("V1.4 migration: Creating onChange Scripts");
            var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
            onChangecatalogClientScript.setAttributes({
                "name": "Fetch values OnChange",
                "type": "onChange",
                "applies_to": "item",
                "cat_item": '' + catSysId,
                "cat_variable": "IO:" + varSysId,
                "active": true,
                "order": 100,
                "description": "This script is auto created thorugh runtime module for fetching values.",
                "applies_catalog": "true",
                "ui_type": "0",
                "applies_req_item": false,
                "applies_sc_task": false,
                "sys_scope": "global"
            });
            onChangecatalogClientScript.appliesToCatalogItem(true);
            var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if(!sessionStorage['varValues'])return; var varValues = JSON.parse(sessionStorage['varValues']);oldValue = varValues[control.id + '']; if (isLoading || newValue == '' || oldValue + '' == newValue + '') {new GlideModal().get('loader').destroy(); return; }jslog(oldValue);jslog(newValue); function varResponse(response,loadingDialog){var answer=response.responseXML.documentElement.getAttribute('answer');var varJSON=JSON.parse(answer);var prof_json=varJSON.profile;var serv_json=varJSON.service;var var_array=[];for(var i in prof_json){var field=prof_json[i];var curr_value=g_form.getValue('IO:'+i);varValues['IO:' + i] = curr_value + '';var parsed_field=JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value=curr_value,parsed_field.sys_id=i+'',var_array.push(parsed_field);}getAdvancedVars(var_array);for(var j in serv_json){var_array=[];for(var k in serv_json[j]){var field=serv_json[j][k];var curr_value=g_form.getValue('IO:'+k);varValues['IO:' + k] = curr_value + '';var parsed_field=JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value=curr_value,parsed_field.sys_id=k+'',var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(varValues);}function getAdvancedVars(variable_json){var act_var_JSON=JSON.stringify(variable_json);var gajax=new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name','variableArrayParser'),gajax.addParam('sysparm_type','catalog'),gajax.addParam('sysparm_parentUuid',g_form.getUniqueValue()+''),gajax.addParam('sysparm_varJson',act_var_JSON),gajax.getXML(getVarResponse);}function getVarResponse(response){ new GlideModal().get('loader').destroy(); var answer=response.responseXML.documentElement.getAttribute('answer');if(answer+''==''||answer+''=='undefined'||answer+''=='null')return;var parsedResponse=JSON.parse(answer);for(var i in parsedResponse){var row=parsedResponse[i];var sys_id='IO:'+row.sys_id;var type=row.type+'';if(row.state=='SUCCESS'&amp;&amp; (type=='EXEC_LOCAL'||type=='HTTP_LOCAL'||type=='EXEC_SECRET'||type=='HTTP_SECRET')){g_form.clearOptions(sys_id);for(var k=0;k&lt;row.value.length;k++)g_form.addOption(sys_id+'',row.value[k],row.value[k]); g_form.setValue(sys_id,row.value);} else {if(row.data_type + '' != 'BASE'){g_form.clearOptions(sys_id); for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + '', row.options[k], row.options[k]);} g_form.setValue(sys_id, row.value);}row.state=='ERROR'&amp;&amp;g_form.addErrorMessage('Error in variable: '+row.name+': '+row.error[0]);}}var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching variables...'); loadingDialog.renderWithContent(''+loadingHTML);var cat_sys_id=g_form.getUniqueValue();var profile=g_form.getValue('default_profile').trim();var ga=new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name','fetchLaunchVars'),ga.addParam('sysparm_catsysid',cat_sys_id),ga.addParam('sysparm_profile',profile),ga.getXML(varResponse,null,loadingDialog);}";
            onChangecatalogClientScript.addScript(onChangeScript);
            var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
            this.logger.info("V1.4 migration, " + catSysId + " Fetch values OnChange catalog client script created.");
            var gr = new GlideRecord('catalog_script_client');
            if (gr.get(OnChangeCatalogScriptId)) {
                gr.setValue("sys_scope", "global");
                gr.update();
            }
        } catch (e) {
            this.logger.error("Exception caught inside Migration_Script._createOnChangeScript. Error:- " + e);
        }
    },
	
    type: 'Migration_Script'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2019-09-11 10:09:24&lt;/sys_created_on&gt;&lt;sys_id&gt;caeab4864f337300d8494ebf9310c73e&lt;/sys_id&gt;&lt;sys_mod_count&gt;139&lt;/sys_mod_count&gt;&lt;sys_name&gt;Migration_Script&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_caeab4864f337300d8494ebf9310c73e&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-05-14 17:38:10&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1109679404</payload_hash>
<remote_update_set display_value="Nutanix Calm 1.4.4 Service Portal patch">05f5233707003010f76cfdac7c1ed0c0</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2021-05-18 07:53:49</sys_created_on>
<sys_id>01f5233707003010f76cfdac7c1ed0c3</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1797e615e140000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2021-05-18 07:53:49</sys_updated_on>
<table/>
<target_name>Migration_Script</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>c255c5f66dc4bc10f1705dbb4e97e0d6</update_guid>
<update_guid_history>c255c5f66dc4bc10f1705dbb4e97e0d6:-1109679404,d62adbee0c00bc10fa6982c207e50b8f:-938829013,49aab656cd083c106f340f9e02a56b90:-1734164096,55f87296b0083c10c4342345f7d84afd:-1609613233,bfff2c82c684f8100c5db50630ef1f6f:722887562,19a7984eaa80f810aa30186ef864a7d2:-1233627957,0f630c06cb40f810d7ee72a14e79be16:-521573323,91a349f9570c3050f87fa75e0ef678c6:1482369167,300df475a80c3050c352b2029387233f:612141019,b8c4b07d6fc83050989f6eb5b57f3dde:726323892,ad34bc3db7c8305081358ee7d4a87ace:1482146395,cd8338f93dc830501505b498d87a4a3d:1573019862,334824f5dfcc78101c89c5d93198227a:-1227885991,175c547dd14878100fd31d90d5f69fed:1169846369,1fafe6218dc8f4104596af8184e1b011:-720350223,412d26a96788f410c124dba629ce846a:-1798572143,498c22a90988f410776a564955d584a2:-867119740,924a16252d08f410d7c3267812b9409f:2092517432,cec542998640b410af329e8914cab513:-1672704215,419cad19bb00b4103c24a1faac51bd21:-382632969,d9dc2fd24fb3a410fe9fcc9d62222f50:-1469873954,fd93ce5f8fe36010f8c94281d1e907cc:160055078,4b51ce9bbee36010b6f82541f72a287f:-575326538,ef8fb55b2be36010bd6ddeae5169c0b0:1366020,2eac399752e360106fa3c126a7b8dbd0:-1988079278,ca2bf197a3e3601010653a38e39a8bba:1949172809,e41fa95fcca3601087110000b30cae81:1624193497,41a9e5d701a360109fe99f4c0e48f69a:118896578,db88e646215328502a302a7ba650c4d7:-968929448,2be66282185328501e4c31f3dfd9855f:-978935699,dd13059913dfe01048ab85fed9a8b407:2130190675,e2db7c99fe1fe010052d4c603789092c:1175978801,ae6e9bc9a6df24501b2d6d924f56cdb1:-815861837,d0691fc9d6dba010a42a58717226f2ba:-359754939,c11e1788fa5f24508ed093a3684ca2e3:-1096120895,ea0917445d5f24505fa91859ed7e5637:1614014441,2d1487440a1f2450cd31913520a38d15:148956159,26b4c6fa7acf205001d442dcb2e5e35c:-1822618430,0f193ae25bcbac107a3437976f9e8f50:1576682166,3c9d577498cfe4101a45a013dda6b794:2018940530,9cfa97bca58fe410696adb3330839baf:106374574,03b817bc628fe410186ba17a476dc778:1741628813,a9be433ce04fe4108e955b93ee172e89:-1764988119,645b03b0318fe410ac2c3fbdf7a5ed09:-1159529184,74f703b0d88fe4104ce63bdf59e96201:302834688,bdcf363cdf4fe410a5c2ad1cfe263f54:120077110,2c6f3238954fe410ec13af9440db65b4:-2087249129,f104f2b05b4fe4102598b192f3d6f9dd:1780587574,bf613abca20fe4102413f9bbb06fd252:-1728770921,0d603ebcac0fe4106fa127ea9beab149:-324153062,6709d270730fe410251987f1abf5b097:846296896,f48892303a0fe410049b833e6779627e:-22190541,e522563c49cbe4105c25970c37a60ff2:-1617558480,f5f1c134400be410fc78212be6757903:1443369704,868bccfc3307e410ba754bd463b37f23:860664901,edf356ec674fa4100078e74afd17c072:1152600773,39455c20880ba410a804ba4d27132eea:-1999482427,5ef4dc24520ba41029393b3fdec119df:88895795,8bcfd65c0d83a410cfdbb3a7d375ef7e:142322403,e09e921c4983a410b8a36c83f2512565:-176275878,aa2cde988283a410606c08b8502ef47e:1683341362,e2269214c183a4100b1d716544355dae:-1085842769,92359a541783a41009b85fb2563db52c:423638413,c44268c2a3b92010f8037d330688f89c:-817609419,85f7cc8da595649049a5f92a39515a38:-1671888124,d4a037756b356010049369bed1960b5c:321711684,4b99783f18306010975804e74f21f0fd:-833368849,b9703433933060105ae5ef3bc0ec66b4:1000706849,197fc16b53fc2010843e38a314d1de01:-439317812,b2ba0d6b18bc20105208c7f5e549926d:2098178244,52ec371fbdfc60105ee76cae1fc14867:535339084,23ce549372b460106e9a8da327817362:1084760422,a979a70395346010d7bca5bb7cbd7672:530587356,f42ed103d4ac60102f4d80a7c9bc20e4:1702884945,d45055cf2a2c6010fc83c472232b4237:616941326,ad97b199e7a0a01087e6296ca746e877:1930885726,18c57159bfa0a0107b9349c7b7e768c7:1848365702,e11e0acdec286010d5016313aa8a39ce:-853561603,901ccec51d286010ad34cbed1f6181ed:-1084338431,bed53dc5e7e460106714528214f26f01:1408175284,7a22b1092ee46010e1fa12a4abbfbebf:-123892049,d5d5258592a46010f8061da235deca65:627640957,a1856d4537a46010ae72c042254dd109:1406714032,2f141d0d51e8e050b1ab8ae6565ba48d:-845142013,2cdfc0701caca05033384a629ef3b17b:2142404088,192a8c340d2ca050a88e659c03abc712:-1080722118,1997087cdce8a0507474b0138e8eaecb:514958393,afe3c87c7ca8a05061cc40460b965cbe:-1541715594,2350b222c884e010f8a75a518aec8a3d:-41385206,0e6fe6a2a144e010bca144d7cdf3f196:-1102985943,a50cc04d0304a010d9e06307ee334b0a:-1435386113,20e7800d5304a010e25bf925369f0997:2069133929,9a314da67e6f54106849e7642e6e92b6:175809751,a799715618675410d72ca6b5433c3031:2114252140,8d25cdd630a35410a9c4b394f93d421c:634838339,025ab502246b141092561d35ebcf395f:-1070049925,249214c250e31410c0f5c7cc8b582da8:1541575440,13d75efdd3a750109bd9a5857eef766d:2140628624,66c52031d12bd0107741bda29317207b:812274704,a5f46c312b2bd010a9324c1a97cb6a79:-2088715855,d7fbd4b5e6e7d010977039698d86385a:-1845678258,fdba54f573e7d010d0fbc3255a827352:1712006664,b0990c39bda7d0106693c68f6285ad93:163655485,ada4f3259267d010e307908d3856c9f0:745814570,5a158204172b9010f0ef7bb83ba779b6:869112296,247dc508e6679010115cd078465f1a9d:-1108733538,8d56a101f41750102e39357d41da928a:-993732319,cf04e84d01135010dd3401cc9cd40f56:-947411583,c33a1c056213501027b75accf99002b4:1592620463,46c75c055a1350101aaebed65445e27c:1471297535,b40bf9706ad710103440c5aaae477384:1933924403,53022024d21350109bdc074d55bd8bf6:350800390,479294284bdf1010b37ded70cf7c21fc:1105798470,369f0864a4df10109a37324f02e536ac:1151522099,3d8a8f10df1f101058d18586073f1b69:-1687325504,08b89c0163c75c908290bf7147f54842:901634930,66786d50ee83d89027e982b625aa6619:-1217183196,443319949f87d0104c96842f47285f5d:-804901250,fc25415c1147d010cfde50e1cad46aef:-1852353262,8cf14d98ee47d01073d2af49e4e581fa:1481362477,3351c5987347d0109e0071da0819f5de:-50525092,1c9db094ec47d010f3dc881df45e612c:-1874550043,66e7b410a547d0104b11948a9abb313d:849508809,d033f4106947d010ba51dd0066299872:2052980060,061f68909407d010d07bdfc3bde72dfb:-276613048,f5bbe4dcefc3d0107eb2e582eea2a0a3:927928773,df96a4d818c3d0106955cd2460128be0:-805653090,8c25a45896c3d010bd40cf31680e6ed2:-2091770536,a983ec582cc3d010aa1842bafb8a9b60:1328227568,06c1189c3e83d0107fc9cff8189b52d2:-1901943432,3bdf4018b483d01064c13aa922d1dc1c:934422790,d60b059fb7ba5010e540b304a8d9f10e:1500667199,fb790d5b4c7a50100ec0a46114923695:806665422,1a2ac2cffbb25010655dd9a7144de1a7:1521625119,32b1e16f972298503552fe8fefd8b8d9:-551997769,c76b1f26783b84101699a4e185cba18b:-753688393,097b64f2a41100103d297aa02e5c1a8d:-912298074,470bb568d71908104151472ef344ea38:-741977356,e8b97d2867190810ced38c88647e1927:867468443,72bd17fe6c41041045fca46ec9ce8b74:1563531241,c694e3b73c7f330077f703ee6df280c0:907140764,af00f5aefd3bb300d33393d88e1ec300:-931762699,9c8795a61ff7b3009da79fc6d24e2fe4:909114287,80b9f06670b7b300a0dc0713f4a1201c:-1866674801,d143b8eacebb3300a9b26b1f21873d8d:-1840373311,9fd0b82689bb3300e81365b9698843c5:210928253,8fd9a0e215bb330064f496ab81075243:-630791341,a70df396e43b330039398af0d931612b:1631528564,2f9aa6da0f37330088be1cd81c61cf6b:185703213,127aa6daff373300429261ee6d857564:-1848709098,cf3aaa9abf3733000042c1b2f32cb215:-304031332,ff2aae9a5a3733002a5c8c2a06ec8ccf:344153237,e5e4a696e0373300423e76365a56f98c:-2078374087,18a6d25a95f33300e3097677b4d030d3:489118318,8c96521e2ff33300a084c7c921fc9116:-2111722977,562196d63fb33300c2baf2d26a8f0b75:-896639251,a4f2ca96dbb33300ac3ce7d0e49b826a:-1385597839,25c1429257b333000e63959788a73a41:-940423726,4ab1b95a3e333300409bc2c1f0615602:546104125,b920355a5f7333006d2374e3d4d84234:527834964,60642d1afa333300deab36de8709c65a:-1575383558,fdfad51693333300f0aba0a5886da3cc:612375769,c709d5928d333300db64d85c27324fef:-548422816,f71bda4abb37730041004c07e4f84ef4:-293315480,40159a4666f37300332d5ff896b245f7:2037898708,e9f30e4a26f373007bbfe229bc083bc9:-1598826147,45152dce777373007b61d0fd0d7b6348:1031060289,034269424db373000478953c57913805:574640253,57b1a1428fb373003e7f8a5c292ce8b4:-1118767405,3ea1614251b37300ce5fd7d09f82f6fa:-81791376,46afd1ce8f737300fe6c21326add9110:-1812907213,c7ee5542777373009ce66e45d66d3cb4:1275437037,0f8acd0a7e3373009915d4ad8a677bff:81599683,763bf0427f3373004bc5657665a53663:616933246</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_d018c57f37112300fdfc097973990e26</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;public&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;true&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Nutanix_ClientServerScriptBridge&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Nutanix_ClientServerScriptBridge = Class.create();
Nutanix_ClientServerScriptBridge.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

    fetchDataFromRequestedItem: function() {
        var gr = new GlideRecord("sc_req_item");
        if (gr.get(this.getParameter("sysparm_sysID"))) {
            return gr;
        }
    },

    fieldValidation: function() {

        var utils = new Nutanix_Calm_Utils();
        var logger = new Nutanix_Calm_Logger();

        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fieldValidation.");

            var catSysId = this.getParameter('sysparm_catSysId');
            var fieldValueMap = this.getParameter('sysparm_fieldValueMap');
            var configureScript = new Nutanix_FetchConfigureSettingDropdown();

            return configureScript.fieldValidation(catSysId, fieldValueMap);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fieldValidation. Error:- " + e);
        }

    },

    fetchLaunchVars: function() {
        var utils = new Nutanix_Calm_Utils();
        var logger = new Nutanix_Calm_Logger();

        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchLaunchVars.");
            var catSysID = this.getParameter('sysparm_catsysid') + "";
            var profile = this.getParameter('sysparm_profile') + "";
            var configScript = new Nutanix_FetchConfigureSettingDropdown();

            return configScript.fetchLaunchVars(catSysID, profile);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchLaunchVars. Error:- " + e);
        }
    },

    variableArrayParser: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.variableArrayParser");

            var type = this.getParameter('sysparm_type');
            var parent_uuid = this.getParameter('sysparm_parentUuid');
            var var_array = this.getParameter('sysparm_varJson');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.variableArrayParser(type, parent_uuid, var_array);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.variableArrayParser. Error:- " + e);
        }
    },

    hideAccessLocalGroupOption: function() {
        var utils = new Nutanix_Calm_Utils();
        var logger = new Nutanix_Calm_Logger();

        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.hideAccessLocalGroupOption.");
            var localGroupOption = new Nutanix_FetchConfigureSettingDropdown();
            return localGroupOption.hideAccessLocalGroupOption(); //returns the value that is present on the form
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.hideAccessLocalGroupOption. Error:- " + e);
        }
    },

    supportStatusMPI: function() {
        var utils = new Nutanix_Calm_Utils();
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.supportStatusMPI.");
            var bpSysID = this.getParameter('sysparm_blueprint') + "";
            var supportStatus = new Nutanix_FetchConfigureSettingDropdown();
            return supportStatus.supportStatusMPI(bpSysID); //returns the value.
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.supportStatusMPI. Error:- " + e);
        }
    },

    advanceVariableDynamicOptions: function() {

        var utils = new Nutanix_Calm_Utils();
        var logger = new Nutanix_Calm_Logger();

        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getHttpValues.");

            var catSysId = this.getParameter('sysparm_catSysID');
            // 			var fieldValueMap = this.getParameter('sysparm_fieldValueMap');
            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.advanceVariableDynamicOptions(catSysId);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getHttpValues. Error:- " + e);
        }

    },

    getHttpValues: function() {

        var utils = new Nutanix_Calm_Utils();
        var logger = new Nutanix_Calm_Logger();

        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getHttpValues.");

            var type = this.getParameter('sysparm_type');
            var parent_uuid = this.getParameter('sysparm_parentUuid');
            var pre_map = this.getParameter('sysparm_preMap');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.getHttpValues(type, parent_uuid, pre_map);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getHttpValues. Error:- " + e);
        }
    },


    mpiPatching: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.mpiPatching.");
            var project = this.getParameter('sysparm_project');
            var blueprint = this.getParameter('sysparm_blueprint');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.mpiPatching(project, blueprint);

        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.mpiPatching. Error:- " + e);
        }
    },

    getSubnet: function() {

        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("***Inside Nutanix_ClientServerScriptBridge.getSubnet. catalog sys_id" + this.getParameter('sysparm_catSysID') + " projectUuid " + projectUuid);
            var catalog = this.getParameter('sysparm_catSysID');
            var projectUuid = this.getParameter('sysparm_ProjectUuid');
            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.getProjectSubnet(catalog, projectUuid);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getSubnet. Error:- " + e);
        }

    },

    checkQueue: function() {
        var logger = new Nutanix_Calm_Logger();
        var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_process_queue');
        //gr.addEncodedQuery('state!=complete^topic!=startInventoryDelete^topic!=processImportedApp^topic!=importApplications');
        gr.addEncodedQuery('state!=complete^state!=error^topic!=startInventoryDelete^topic!=processImportedApp^topic!=importRecoveryPoints^topic!=processRecoveryPoints');
        gr.query();
        if (gr.next()) {
            //gs.addErrorMessage('Inventory is currently being synced. Please wait for this operation to finish.');
            //logger.error("Inside Nutanix_ClientServerScriptBridge.checkQueue: Inventory is being synced.");
            return false;
        } else if (gs.getProperty('x_nuta2_nutanix_ca.Delete_Flag') == '1') {
            //gs.addErrorMessage('Inventory is currently being deleted. Please wait for this operation to finish.');
            //logger.error("Inside Nutanix_ClientServerScriptBridge.checkQueue: Inventory is being deleted.");
            return false;
        } else
            return true;
    },

    deleteFlagState: function() {
        if (gs.getProperty('x_nuta2_nutanix_ca.Delete_Flag') == 1) {
            return 'deleting';
        } else {
            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_process_queue');
            gr.addEncodedQuery('state!=complete^state!=error^topic!=startInventoryDelete^topic!=processImportedApp^topic!=importRecoveryPoints^topic!=processRecoveryPoints');
            gr.query();
            if (gr.next()) {
                return 'syncing';
            }
        }
    },

    appFlag: function() {
        var utils = new Nutanix_Calm_Utils();
        var grAction = new GlideRecord(utils.configuration.table.NutanixCalmAction);
        if (grAction.get(this.getParameter('sysparm_actId'))) {
            var appUUID = grAction.parent_uuid;
            var gr = new GlideRecord(utils.configuration.table.NutanixCalmApplication);
            gr.addQuery('uuid', appUUID);
            gr.query();
            gr.next();

            if (gr.action_flag == '1') {
                return '1';
            } else
                return '0';
        }
    },

    getVariablesProperty: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            var varProp = gs.getProperty('x_nuta2_nutanix_ca.aws_display_vars');
            return varProp;
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getVariablesProperty. Error:- " + e);
        }
    },

    cleanInstance: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_process_queue');
            gr.addEncodedQuery('state!=complete^topic!=startInventoryDelete');
            gr.query();
            logger.debug("Inside Nutanix_ClientServerScriptBridge.cleanInstance.");
            if (gr.next() || gs.getProperty('x_nuta2_nutanix_ca.Delete_Flag') == '1') {
                logger.error('A sync or a delete process is currently in progress. Please wait for them to finish');
            } else {
                gs.setProperty('x_nuta2_nutanix_ca.Delete_Flag', '1');
                var grDel = new Nutanix_Calm_Utils();
                grDel.insertIntoQueue('startInventoryDelete', '', '', '', 'Starts Inventory deletion', 'This process deletes the calm snow data.');
                logger.info('Inventory cleanup has started.');
            }
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.cleanInstance. Error:- " + e);
        }
    },

    fetchBlueprints: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchBlueprints.");
            var project = this.getParameter('sysparm_project');
            var blueprintType = this.getParameter('sysparm_blueprintType');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.fetchBlueprints(project, blueprintType);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchBlueprints. Error:- " + e);
        }
    },

    fetchApplicationProfiles: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            var blueprint = this.getParameter('sysparm_blueprint');
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchApplicationProfiles. Blueprint :" + blueprint);

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.fetchApplicationProfiles(blueprint);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchApplicationProfiles. Error:- " + e);
        }
    },

    fetchProviderIcons: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchProviderIcons.");
            var catSysId = this.getParameter('sysparm_catId');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.fetchProviderIcons(catSysId);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchProviderIcons. Error:- " + e);
        }
    },

    fetchActionVariables: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchActionVariables.");
            var JSONstr = '';
            var actSysId = this.getParameter('sysparm_actSysId');
            var grAction = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_action');
            if (grAction.get(actSysId)) {
                var actName = grAction.action_name + '';
                var trueName = grAction.name + '';
                var actionType = grAction.type + '';
                var varStr = grAction.action_variables + '';
            }
            if (varStr != '') {
                JSONstr = {
                    "name": actName,
                    "true_name": trueName,
                    "type": actionType,
                    "vars": varStr
                };
            } else
                JSONstr = {
                    "name": actName,
                    "true_name": trueName,
                    "type": actionType
                };
            return JSON.stringify(JSONstr);

        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchActionVariables. Error:- " + e);
        }
    },

    getProfileVariableDetails: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getProfileVariableDetails.");
            var project = this.getParameter('sysparm_project');
            var blueprint = this.getParameter('sysparm_blueprint');
            var application_profile = this.getParameter('sysparm_application_profile');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            var response = configureScript.getProfileVariableDetails(project, blueprint, application_profile);

            return response;
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getProfileVariableDetails. Error:- " + e);
        }
    },
    getMultipleProfileVariableDetails: function() { //multi-profile- project function
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getMultipleProfileVariableDetails.");
            var project = this.getParameter('sysparm_project');
            var blueprint = this.getParameter('sysparm_blueprint');
            var application_profile = this.getParameter('sysparm_application_profile');
            var cat_item = this.getParameter('sysparm_cat_item');
            var delta_profile = this.getParameter('sysparm_delta_profiles');
            var type = this.getParameter('sysparm_type');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            var response = configureScript.getMultipleProfileVariableDetails(project, blueprint, application_profile, cat_item, delta_profile, type);

            return response;
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getMultipleProfileVariableDetails. Error:- " + e);
        }
    },

    getServiceVariableDetails: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getServiceVariableDetails.");
            var project = this.getParameter('sysparm_project');
            var blueprint = this.getParameter('sysparm_blueprint');
            var application_profile = this.getParameter('sysparm_application_profile');
            var type = this.getParameter('sysparm_type');
            var bpType = this.getParameter('sysparm_bpType');
            var cat_item = this.getParameter('sysparm_cat_item');
            var delta_profiles = this.getParameter('sysparm_delta_profiles');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.getMultipleServiceVariableDetails(project, blueprint, application_profile, type, bpType, cat_item, delta_profiles);

        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getProfileVariableDetails. Error:- " + e);
        }
    },

    getCrendentialsDetails: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getCrendentialsDetails.");
            var project = this.getParameter('sysparm_project');
            var blueprint = this.getParameter('sysparm_blueprint');
            var application_profile = this.getParameter('sysparm_application_profile');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            var response = configureScript.getCrendentialsDetails(project, blueprint, application_profile);

            return response;
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getCrendentialsDetails. Error:- " + e);
        }
    },

    mappedCredentials: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.mappedCredentials.");
            var projects = this.getParameter('sysparm_project');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.mappedCredentials(projects);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.mappedCredentials. Error:- " + e);
        }
    },

    fetchEnvironmentCredentials: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchEnvironmentCredentials.");
            var credSysId = this.getParameter('sysparm_credentialSydID');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.fetchEnvironmentCredentials(credSysId);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchEnvironmentCredentials. Error:- " + e);
        }
    },

    getCatalogInfo: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getCatalogInfo.");
            var catalogItemSysID = this.getParameter('sysparm_catalogItemSysID');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.getCatalogInfo(catalogItemSysID);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getCatalogInfo. Error:- " + e);
        }
    },

    getRealtedCatalogItems: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getRealtedCatalogItems.");
            var blueprint = this.getParameter('sysparm_blueprint');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.getRealtedCatalogItems(blueprint);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getRealtedCatalogItems. Error:- " + e);
        }
    },

    getBlueprintInfo: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getBlueprintInfo.");
            var blueprint = this.getParameter('sysparm_blueprint');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.getBlueprintInfo(blueprint);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getBlueprintInfo. Error:- " + e);
        }
    },

    fetchRuntimeVariablesValue: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchRuntimeVariablesValue.");
            var sysId = this.getParameter('sysparm_sysId');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.fetchRuntimeVariablesValue(sysId);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchRuntimeVariablesValue. Error:- " + e);
        }
    },

    fetchProjectAndProfileList: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchProjectAndProfileList.");
            var catSysID = this.getParameter('sysparm_catSysID');

            var configureScript = new Nutanix_CatalogFormScripts();
            return configureScript.fetchMultipleProjectAndProfileList(catSysID);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchProjectAndProfileList. Error:- " + e);
        }
    },

    fetchOrderFormData: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchOrderFormData.");
            var profile = this.getParameter('sysparm_profile');
            var catSysID = this.getParameter('sysparm_catSysID');

            var configureScript = new Nutanix_CatalogFormScripts();
            return configureScript.fetchOrderFormData(profile, catSysID);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchOrderFormData. Error:- " + e);
        }
    },

    fetchCredentialsList: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchCredentialsList.");
            var catSysID = this.getParameter('sysparm_catSysID');

            var configureScript = new Nutanix_ImportCredentials();
            return configureScript.fetchCredentialsList(catSysID);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchCredentialsList. Error:- " + e);
        }
    },

    fetchMappedCredentialsDetails: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchMappedCredentialsDetails.");
            var catSysID = this.getParameter('sysparm_catSysID');

            var configureScript = new Nutanix_ImportCredentials();
            return configureScript.fetchMappedCredentialsDetails(catSysID);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchMappedCredentialsDetails. Error:- " + e);
        }
    },

    checkDuplicate: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.checkDuplicate.");
            var catName = this.getParameter('sysparm_catName');
            var catSysId = this.getParameter('sysparm_catSysId');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.checkDuplicate(catName, catSysId);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.checkDuplicate. Error:- " + e);
        }
    },

	checkCatalogValidity: function() {
		var logger = new Nutanix_Calm_Logger();
		try {
			//     gs.info("$$## Inside Nutanix_ClientServerScriptBridge.checkCatalogValidity.");
			var cat_item_sys_id = this.getParameter('cat_item_sys_id');
			var catalog_details = new Nutanix_ServicePortalConfiguration();
			var details = JSON.parse(catalog_details.getCatalogItemDetails(cat_item_sys_id));
			var blueprintType = details.blueprintType;
			var blueprintUUID = details.blueprintUUID;

			var profileSysIds = this.getParameter('profileSysId').split(',');
			var projectSysId = this.getParameter('projectUUID');
			var profileName = this.getParameter('profileName');
			var profileSysId = '';

			for (var i = 0; i &lt; profileSysIds.length; i++) {
				var profile = new GlideRecord('x_nuta2_nutanix_ca_application_profile');
				profile.get(profileSysIds[i]);
				logger.debug("***True/false: profile_name : " + profile.name + ' profileName : ' + profileName + '');
				if (profile.name + '' == profileName + '') {
					profileSysId = profileSysIds[i] + '';
					break;
				} else {
					continue;
				}
			}
			//		gs.info("$$## Inside Nutanix_ClientServerScriptBridge.checkCatalogValidity. blueprintType : "+blueprintType+" blueprintUUID : "+blueprintUUID+" profileSysId : "+profileSysId+" projectSysId : "+projectSysId);

			var configureScript = new Nutanix_CheckCatalogItemValidity();
			return configureScript.checkCatalogValidity(blueprintType, blueprintUUID, profileSysId, projectSysId);
		} catch (e) {
			logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.checkCatalogValidity. Error:- " + e);
		}
	},

    getUserEmail: function() {
        var gr = new GlideRecord('sys_user');

        if (gr.get(gs.getUserID())) {
            return gr.email + '';
        }
    },
    fetchMultipleBlueprints: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            var blueprintType = this.getParameter('sysparm_blueprintType');
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchMultipleBlueprints. blueprintType " + blueprintType);

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.fetchMultipleBlueprints(blueprintType);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchMultipleBlueprints. Error:- " + e);
        }
    },
    fetchMultipleProjects: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            var blueprint = this.getParameter('sysparm_blueprint');
            var blueprintType = this.getParameter('sysparm_blueprintType');
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchMultipleProjects. Blueprint " + blueprint + " BlueprintType " + blueprintType);

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.fetchMultipleProjects(blueprint, blueprintType);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchMultipleProjects. Error:- " + e);
        }
    },
    getMultipleServiceVariableDetails: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getMultipleServiceVariableDetails.");
            var project = this.getParameter('sysparm_project');
            var blueprint = this.getParameter('sysparm_blueprint');
            var application_profile = this.getParameter('sysparm_application_profile');;
            var type = this.getParameter('sysparm_type');
            var bpType = this.getParameter('sysparm_bpType');
            var project1 = project.split(',');
            var profile1 = application_profile.split(',');
            var answer = [];
            for (var i in profile1) {
                var configureScript = new Nutanix_FetchConfigureSettingDropdown();
                var response = JSON.parse(configureScript.getServiceVariableDetails(project1[0], blueprint, profile1[i], type, bpType));
                var res = {
                    "profile": profile1[i],
                    "response": response.service_configuration
                };
                answer.push(res);
            }
            logger.debug("End Nutanix_ClientServerScriptBridge.getMultipleServiceVariableDetails." + JSON.stringify(answer));
            return JSON.stringify(answer);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.toyota1_getServiceVariableDetails. Error:- " + e);
        }
    },

    getProject: function(blueprint, blueprintType) {
        var logger = new Nutanix_Calm_Logger();
        logger.debug("Inside Nutanix_ClientServerScriptBridge.getProject.");
        try {
            logger.debug("Inside global Business Rule.getProject.blueprint : " + blueprint + 'blueprintType : ' + blueprintType);

            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_projects_blueprints_relationship');
            gr.addQuery('catalog_item', blueprint);
            if (blueprintType == 'unpublished')
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_unpublishedBP_sysId'));
            else
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_category_sysId'));
            gr.orderBy('catalog_item.name');
            gr.query();
            var query = 'state=COMPLETE^sys_idIN';
            var pro = [];
            while (gr.next()) {
                if ((blueprintType == 'unpublished' &amp;&amp; gr.catalog_item.state + '' == 'ACTIVE') || (blueprintType != 'unpublished' &amp;&amp; gr.catalog_item.state + '' == 'active')) {
                    query += gr.projects + ',';
                }
            }
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getProject. Query return " + query);
            return query;
        } catch (e) {
            logger.debug("Exception Nutanix_ClientServerScriptBridge.getProject. Error:- " + e);
        }
    },
    getProfile: function(blueprintSysId) {
        var logger = new Nutanix_Calm_Logger();
        logger.debug("Inside Nutanix_ClientServerScriptBridge.getProfile.");
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getProfile.blueprint : " + blueprint);

            var blueprint = new GlideRecord('x_nuta2_nutanix_ca_nutanix_blueprint');
            blueprint.get(blueprintSysId);
            var gr = new GlideRecord('x_nuta2_nutanix_ca_catalog_item_and_application_profile_relation');
            gr.addQuery('catalog_item', blueprintSysId);
            gr.addQuery('state', 'active');
            //gr.addEncodedQuery('providersNOT LIKEaws^providersNOT LIKEazure^providersNOT LIKEgcp');
            gr.orderBy('application_profile.name');
            gr.query();

            var query = 'sys_idIN';

            while (gr.next()) {
                query += gr.application_profile + ',';
            }
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getProfile. Query return " + query);
            return query;
        } catch (e) {
            logger.debug("Exception Nutanix_ClientServerScriptBridge.getProfile. Error:- " + e);
        }
    },
    noProfileVariableDetails: function() { //multi-profile- project function
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.noProfileVariableDetails.");
            var project = this.getParameter('sysparm_project');
            var blueprint = this.getParameter('sysparm_blueprint');
            var application_profile = this.getParameter('sysparm_application_profile');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            var response = configureScript.noProfileVariableDetails(project, blueprint, application_profile);

            return response;
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.noProfileVariableDetails. Error:- " + e);
        }
    },


    getSubnetDetails: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getServiceVariableDetails.");
            var project = this.getParameter('sysparm_project');
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getSubnetDetails. Project : " + project);

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.getNutanixSubnetList(project);

        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getProfileVariableDetails. Error:- " + e);
        }
    },

    getDeltaProject: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getDeltaProject.");
            var project_sysId = this.getParameter('sysparm_project').split(',');
            var catalog_sysId = this.getParameter('sysparm_catItem');
            var deltaProject = [];

            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
            gr.addEncodedQuery('item_name.sys_id=' + catalog_sysId);
            gr.query();

            while (gr.next()) {
                var projects = gr.getValue('multiple_projects') + '';
                for (var i in project_sysId) {
                    if (projects.includes(project_sysId[i]))
                        continue;
                    else
                        deltaProject.push(project_sysId[i]);
                }
            }

            return JSON.stringify(deltaProject);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getDeltaProject. Error:- " + e);
        }
    },

    getDeltaProfile: function() {
        var logger = new Nutanix_Calm_Logger();
        var utils = new Nutanix_Calm_Utils();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getDeltaProject.");
            var profile_sysId = this.getParameter('sysparm_profile').split(',');
            var catalog_sysId = this.getParameter('sysparm_catItem');
            var deltaProfile = [];


            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
            gr.addEncodedQuery('item_name.sys_id=' + catalog_sysId);
            gr.query();

            while (gr.next()) {
                var profile = gr.getValue('multiple_application_profile') + '';
                for (var i in profile_sysId) {
                    if (profile.includes(profile_sysId[i])) {
                        continue;
                    } else {
                        var gr1 = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
                        gr1.addQuery('application_profile', profile_sysId[i]);
                        gr1.addQuery('catalog_item', catalog_sysId);
                        //			gr1.addQuery('isprofilevariable', false);
                        gr1.query();
                        if (gr1.next()) {
                            continue;
                        } else {
                            deltaProfile.push(profile_sysId[i]);
                        }
                    }
                }
            }

            return JSON.stringify(deltaProfile);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getDeltaProject. Error:- " + e);
        }
    },
    fetchBlueprintName: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchBlueprintName.");
            var BlueprintsysId = this.getParameter('sysparm_BlueprintsysId');

            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_projects_blueprints_relationship');
            gr.addQuery('catalog_item', BlueprintsysId);
            gr.query();
            if (gr.next())
                return gr.catalog_item.name + '' + " " + gr.version + '';
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchBlueprintName. Error:- " + e);
        }
    },
    getProjectCount: function() {
        var blueprint = this.getParameter('sysparm_blueprint');
        var gr = new GlideAggregate('x_nuta2_nutanix_ca_nutanix_calm_projects_blueprints_relationship');
        gr.addQuery('catalog_item', blueprint);
        gr.addAggregate('COUNT');
        gr.query();
        var count = 0;
        if (gr.next()) {
            count = gr.getAggregate('COUNT');
        }
        return count;
    },
    getProfileCount: function() {
        var blueprint = this.getParameter('sysparm_blueprint');
        var profile = new GlideAggregate('x_nuta2_nutanix_ca_catalog_item_and_application_profile_relation');
        profile.addQuery('catalog_item', blueprint);
        profile.addQuery('state', 'active');
        profile.addAggregate('COUNT');
        profile.query();
        var count = 0;
        if (profile.next()) {
            count = profile.getAggregate('COUNT');
        }
        return count;
    },
    getProfilesysIdNameJSON: function() {
        var profile = this.getParameter('sysparm_profile');
        var array_profile = profile.split(',');
        var profile_JSON = {};
        for (var n = 0; n &lt; array_profile.length; n++) {
            var profile_gr = new GlideRecord('x_nuta2_nutanix_ca_application_profile');
            profile_gr.get(array_profile[n]);
            profile_JSON[profile_gr.sys_id] = {
                "name": profile_gr.name + ''
            };
        }
        return JSON.stringify(profile_JSON);
    },
    getSecretVaraiable: function() {
        var profile = this.getParameter('sysparm_profile');
        var array_profile = profile.split(',');
        var blueprint = this.getParameter('sysparm_blueprint');
        var answer = [];
        for (var n = 0; n &lt; array_profile.length; n++) {
            var gr_variable = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
            gr_variable.addEncodedQuery('isprofilevariable=true^data_type=SECRET^catalog_item=' + blueprint + '^application_profile=' + array_profile[n]);
            gr_variable.query();
            while (gr_variable.next()) {
                answer.push(gr_variable.variable.name);
            }
        }
        return answer.toString();
    },
    /*	migration_1_4 : function(){
    		var answer = '';
    		if(gs.getProperty('x_nuta2_nutanix_ca.Version1_4_3_migration_needed') == '0')
    		{
    		    var utils = new Nutanix_Calm_Utils();
    			
    			var blueprint = new GlideRecord('x_nuta2_nutanix_ca_nutanix_blueprint');
    			blueprint.addQuery('state', 'ACTIVE');
    			blueprint.query();
    			while(blueprint.next()){
    				var final_var_list = [];
    				var response = utils.makeCalmApiCall("get", '/blueprints/'+blueprint.uuid, "");
    				if(response.getStatusCode() == '200' || response.getStatusCode() == '201'){
    				   var app_profile_list = JSON.parse(response.getBody()).spec.resources.app_profile_list;
    					if(app_profile_list.length &lt;1)
    						   continue;

    				   for(var i  in app_profile_list){

    					   var variable_list =  app_profile_list[i].variable_list;
    						 if(variable_list.length &lt;1)
    								 continue;
    						  for(var j in variable_list){						  
    	// 						var var_index = final_var_list.indexOf(variable_list[j].name);
    	// 				        var_index === -1 ? final_var_list.push(variable_list[j].name) :( answer.inludes(blueprint.name)? '' : answer += " "+blueprint.name);
    							var variable_prop = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
    							variable_prop.addQuery('uuid', variable_list[j].uuid);
    							variable_prop.query();
    							if(variable_prop.next()){
    								continue;
    							}
    							else{ 
    							  answer += " "+blueprint.name;	
    							}
    					   }
    				   }
    				}
    			}
    		}
    		if(blueprint.getRowCount() == 0 || answer == ''){
    			gs.setProperty('x_nuta2_nutanix_ca.Version1_4_3_migration_needed', '1');
    		}
    			
    		return answer+"";
    	},*/
    credentialList: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchOrderFormData.");
            var catSysID = this.getParameter('sysparm_catSysID');

            var configureScript = new Nutanix_CatalogFormScripts();
            return configureScript.credentialList(catSysID);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchOrderFormData. Error:- " + e);
        }
    },


    fetchProfilesBasisOnEnvironment: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
			/*get project Name */
			 var project_name;
			 var project_def = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
			 project_def.addQuery('uuid',this.getParameter('sysparm_proValue'));
			 project_def.query();
			if(project_def.next())
				 project_name = project_def.name+'';
			 
			var ga = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
			ga.addQuery('item_name',this.getParameter('sysparm_sysID'));
			ga.query();
			var profile1 ;
			var blueprint;
			var type;
			if(ga.next()){
				profile1 = ga.multiple_application_profile + "";
				blueprint = (ga.blueprint).uuid + "";
				type = ((ga.item_name.category).getDisplayValue());
			}
			var body = new Object();
            var profile = [];
            body["api_version"] = "3.0";
            var metadata = {};
            var api_info;
            if (type + "" == "Published Blueprints") {
                metadata.kind = "marketplace_item";
                api_info = "calm_marketplace_items";
            } else {
                metadata.kind = "blueprint";
                api_info = "blueprints";
            }
            metadata["categories"] = {};
            //sysparm_blueprint
            var project_reference = {};
            project_reference["kind"] = "project";
      //      project_reference["name"] = this.getParameter("sysparm_pro") + "";
			project_reference["name"] = project_name+'';
            project_reference["uuid"] = this.getParameter("sysparm_proValue") + "";
            metadata["project_reference"] = project_reference;

            body["metadata"] = metadata;
            var specs = {};
            var environment_profile_pairs = [];
            var environment = {};
            environment["uuid"] = this.getParameter("sysparm_env") + "";
            var app_profile = profile1 ;//this.getParameter("sysparm_profile");
            app_profile = app_profile.split(",");
            for (var i = 0; i &lt; app_profile.length; i++) {
                var profile_obj = {};
                var gr = new GlideRecord("x_nuta2_nutanix_ca_application_profile");
                if (gr.get(app_profile[i])) {
                    profile_obj.app_profile = {
                        "name": gr.name + ""
                    };
                    profile.push(gr.name + "");
                }
                profile_obj.environment = environment;
                environment_profile_pairs.push(profile_obj);
            }
            specs["environment_profile_pairs"] = environment_profile_pairs;
            var final_profile = [];
            body["spec"] = specs;
            this.appUtil = new Nutanix_Calm_Utils();
			logger.info("Nutanix_ClientServerScriptBridge.fetchProfilesBasisOnEnvironment Body:" + JSON.stringify(body));
            var response = this.appUtil.makeCalmApiCall('POST', '/' + api_info + '/' + blueprint + "/patch_with_environment/validate", JSON.stringify(body));
			logger.info("Nutanix_ClientServerScriptBridge.fetchProfilesBasisOnEnvironment " + response.getStatusCode());

            if (response.getStatusCode() + '' == "200" || response.getStatusCode() + '' == "201") {
                response = JSON.parse(response.getBody());
                var environment_profile_pair = response.status.environment_profile_pairs;
                for (var i = 0; i &lt; environment_profile_pair.length; i++) {
                    var name = environment_profile_pair[i].app_profile.name + "";
                    var state = environment_profile_pair[i].state;
                    if (profile.indexOf(name) != -1) {
                        if (state == "valid") {
                            final_profile.push(name);
                        }
                    }
                }
            } else {
                logger.info("error in Nutanix_ClientServerScriptBridge.fetchProfilesBasisOnEnvironment");
            }
			return JSON.stringify(final_profile);


        } catch (e) {
            logger.error("error in Nutanix_ClientServerScriptBridge.fetchProfilesBasisOnEnvironment" + e.stack);
        }

    },
    fetchEnvironments: function() {
        var project = this.getParameter("sysparm_project");
        var gr_pro = new GlideRecord("x_nuta2_nutanix_ca_nutanix_project");
        gr_pro.addQuery("uuid", project);
        gr_pro.query();
        var arr = [];
        if (gr_pro.next()) {
            var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_environment");
            gr.addQuery("project", gr_pro.sys_id);
            gr.query();
            while (gr.next()) {
                var obj = {};
                obj["Name"] = (gr.name + "");
                obj["UUID"] = (gr.uuid + "");
                arr.push(obj);
            }
        }
        return (JSON.stringify(arr));
    },
    copyMpiPatching: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
			var project = this.getParameter('sysparm_project');
			var blueprint = this.getParameter('sysparm_blueprint');
			if((parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2"))){
				logger.debug("Inside Nutanix_ClientServerScriptBridge.mpiPatching.");


				var profile = (this.getParameter('sysparm_profile'));
				// 			var profile_name ='';
				// 			var profileGr = new GlideRecord('x_nuta2_nutanix_ca_application_profile');
				// 			if(profileGr.get(profile[0])){
				// 				 profile_name = profileGr.name+'';
				// 			}
				var configureScript = new Nutanix_FetchConfigureSettingDropdown();
				return configureScript.copyMpiPatching(project, blueprint, profile);
			}
			else{
				var configureScript = new Nutanix_FetchConfigureSettingDropdown();
				return configureScript.mpiPatching(project, blueprint);
			}


        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.mpiPatching. Error:- " + e);
        }
    },
    variableArrayParser_client_script: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.variableArrayParser");

            var type = this.getParameter('sysparm_type');
            var parent_uuid = this.getParameter('sysparm_parentUuid');
            var var_array = this.getParameter('sysparm_varJson');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.variableArrayParser_client_script(type, parent_uuid, var_array);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.variableArrayParser. Error:- " + e);
        }
    },
		
		getFieldDetails: function(){
		var logger = new Nutanix_Calm_Logger();
		try{
		   logger.debug("Inside Nutanix_ClientServerScriptBridge.getFieldDetails.");
		   var fieldNames = this.getParameter('fieldNameArray');
		   var cat_item_sys_id = this.getParameter('cat_item_sys_id');
		   var portalScript = new Nutanix_ServicePortalConfiguration();
		   return portalScript.getFieldDetails(fieldNames, cat_item_sys_id);
		}catch(e){
			logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.checkDuplicate. Error:- "+e);
		}				

	},
	variable_info: function(){
		var logger = new Nutanix_Calm_Logger();
		try{
			logger.debug("Inside Nutanix_ClientServerScriptBridge.getFieldDetails.");
			 var cat_item_sys_id = this.getParameter('sysparm_catSysID');
			 var fieldNames = this.getParameter('sysparm_fieldNames');
					
			 var portalScript = new Nutanix_ServicePortalConfiguration();
		     return portalScript.extraFields(fieldNames, cat_item_sys_id, profile);
		}catch(e){
			logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.variable_info. Error:- "+e);
		}
	},
	extraFields: function(){
		var logger = new Nutanix_Calm_Logger();
		try{
			logger.debug("Inside Nutanix_ClientServerScriptBridge.getFieldDetails.");
			 var cat_item_sys_id = this.getParameter('sysparm_catSysID');
			 var fieldNames = this.getParameter('sysparm_fieldNames');
			 var profile = this.getParameter('sysparm_profile');
			
			
			 var portalScript = new Nutanix_ServicePortalConfiguration();
		     return portalScript.extraFields(fieldNames, cat_item_sys_id, profile);
		}catch(e){
			logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.variable_info. Error:- "+e);
		}
	},
	privateField: function(){
		var logger = new Nutanix_Calm_Logger();
		try{
			logger.debug("Inside Nutanix_ClientServerScriptBridge.privateField.");
			 var cat_item_sys_id = this.getParameter('sysparm_catSysID');
			 var fieldNames = this.getParameter('sysparm_fieldNames');
			
			 var portalScript = new Nutanix_ServicePortalConfiguration();
		     return portalScript.privateField(cat_item_sys_id);
		}catch(e){
			logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.privateField. Error:- "+e);
		}
	},
	showRuntimeVariable: function(){
		var logger = new Nutanix_Calm_Logger();
		try{
			logger.debug("Inside Nutanix_ClientServerScriptBridge.privateField.");
			 var cat_item_sys_id = this.getParameter('sysparm_catSysID');
						
			 var portalScript = new Nutanix_ServicePortalConfiguration();
		     return portalScript.showRuntimeVariable(cat_item_sys_id);
		}catch(e){
			logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.privateField. Error:- "+e);
		}
	},
	secretVariables: function(){
		var logger = new Nutanix_Calm_Logger();
		try{
			logger.debug("Inside Nutanix_ClientServerScriptBridge.secretVariables.");
			 var cat_item_sys_id = this.getParameter('sysparm_catSysID');
						
			 var portalScript = new Nutanix_ServicePortalConfiguration();
		     return portalScript.secretVariables(cat_item_sys_id);
		}catch(e){
			logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.secretVariables. Error:- "+e);
		}
	},
	setSubnet: function() {
	try{
        var catalog = this.getParameter('sysparm_catSysID');
        var catNic = JSON.parse(this.getParameter('sysparm_catNicJson'));
        var variable_name = catNic.nic;
        var nic_list = catNic.nicList;
        var ans = '';
        for (var i in variable_name) {
            var variable = new GlideRecord('item_option_new');
            variable.addQuery('cat_item', catalog + '');
            variable.addQuery('name', variable_name[i]);
            variable.query();
            var query = '';
            while (variable.next()) {
				ans= variable.reference_qual+'';
                for (var i in nic_list) {
                    for (var key in nic_list[i]) {
                        if (query == '')
                            query = 'uuid=' + key;
                        else
                            query += '^ORuuid=' + key;
                    }
                }
                variable.reference_qual = query;
                variable.update();
            }
        }
        return JSON.stringify(ans);
		}
		catch(e){
			logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.setSubnet. Error:- "+e);
		}
    },
	// Service Portal script 
getFieldDetails: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getFieldDetails.");
            var fieldNames = this.getParameter('fieldNameArray');
            var cat_item_sys_id = this.getParameter('cat_item_sys_id');
            var portalScript = new Nutanix_ServicePortalConfiguration();
            return portalScript.getFieldDetails(fieldNames, cat_item_sys_id);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.checkDuplicate. Error:- " + e);
        }

    },
    variable_info: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getFieldDetails.");
            var cat_item_sys_id = this.getParameter('sysparm_catSysID');
            var fieldNames = this.getParameter('sysparm_fieldNames');

            var portalScript = new Nutanix_ServicePortalConfiguration();
            return portalScript.extraFields(fieldNames, cat_item_sys_id);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.variable_info. Error:- " + e);
        }
    },
    extraFields: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getFieldDetails.");
            var cat_item_sys_id = this.getParameter('sysparm_catSysID');
            var fieldNames = this.getParameter('sysparm_fieldNames');
            var profile = this.getParameter('sysparm_profile');

            var portalScript = new Nutanix_ServicePortalConfiguration();
            return portalScript.extraFields(fieldNames, cat_item_sys_id, profile);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.variable_info. Error:- " + e);
        }
    },
    privateField: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.privateField.");
            var cat_item_sys_id = this.getParameter('sysparm_catSysID');
            var fieldNames = this.getParameter('sysparm_fieldNames');

            var portalScript = new Nutanix_ServicePortalConfiguration();
            return portalScript.privateField(cat_item_sys_id);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.privateField. Error:- " + e);
        }
    },
    showRuntimeVariable: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.privateField.");
            var cat_item_sys_id = this.getParameter('sysparm_catSysID');

            var portalScript = new Nutanix_ServicePortalConfiguration();
            return portalScript.showRuntimeVariable(cat_item_sys_id);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.privateField. Error:- " + e);
        }
    },
    secretVariables: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.secretVariables.");
            var cat_item_sys_id = this.getParameter('sysparm_catSysID');

            var portalScript = new Nutanix_ServicePortalConfiguration();
            return portalScript.secretVariables(cat_item_sys_id);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.secretVariables. Error:- " + e);
        }
    },
    setSubnet: function() {
        try {
            var catalog = this.getParameter('sysparm_catSysID');
            var catNic = JSON.parse(this.getParameter('sysparm_catNicJson'));
            var variable_name = catNic.nic;
            var nic_list = catNic.nicList;
            var ans = '';
            for (var i in variable_name) {
                var variable = new GlideRecord('item_option_new');
                variable.addQuery('cat_item', catalog + '');
                variable.addQuery('name', variable_name[i]);
                variable.query();
                var query = '';
                while (variable.next()) {
                    ans = variable.reference_qual + '';
                    for (var i in nic_list) {
                        for (var key in nic_list[i]) {
                            if (query == '')
                                query = 'uuid=' + key;
                            else
                                query += '^ORuuid=' + key;
                        }
                    }
                    variable.reference_qual = query;
                    variable.update();
                }
            }
            return JSON.stringify(ans);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.setSubnet. Error:- " + e);
        }
    },
	
    type: 'Nutanix_ClientServerScriptBridge'
});]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-28 19:13:04&lt;/sys_created_on&gt;&lt;sys_id&gt;d018c57f37112300fdfc097973990e26&lt;/sys_id&gt;&lt;sys_mod_count&gt;301&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_ClientServerScriptBridge&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_d018c57f37112300fdfc097973990e26&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-05-14 17:34:45&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>2001098178</payload_hash>
<remote_update_set display_value="Nutanix Calm 1.4.4 Service Portal patch">05f5233707003010f76cfdac7c1ed0c0</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2021-05-18 07:53:49</sys_created_on>
<sys_id>01f52fb707003010f76cfdac7c1ed0d4</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1797e615e060000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2021-05-18 07:53:49</sys_updated_on>
<table/>
<target_name>Nutanix_ClientServerScriptBridge</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>0894c9f67cc4bc100c567c80812c550b</update_guid>
<update_guid_history>0894c9f67cc4bc100c567c80812c550b:2001098178,c36830ba1984bc10a2e89675cdd685cd:625685149,bdcc207e3944bc1055b912004ca727c2:1515882983,dea9e8faf944bc102fcd3b1e682ee004:1956979772,9d19e0ba5044bc10f0eb46660fe47b93:44367547,3c10e8b24744bc104400af6037f3bfdc:-1683341727,db7dd432b844bc10c256b67aa91cf523:159223957,ba7c1cfedb04bc109b18fd915ea367b9:-1404471217,064c5cbd16487810fea4a5d0d1041a08:-2114543901,dc303e217ec8f410afe416bc96f7b8d6:-1236778302,ffa0b46d0180f410ec2379171006ae71:-975717981,8662f65d9844b4108fded3b991fdefdf:-1597550291,9e90bed57a44b4109e6823219f6f726b:1764619231,2ec06d118200b410452175fb89dc741c:777528748,09d92bd01cc4f010c858d6fa0dfb8538:-1597550291,76692bd01ac4f010f29568d608ae035e:1123052255,da19e7d0d5c4f0108b1e2af6a63dbda8:1748350576,dc38679096c4f010de5d33002885e038:-2067220712,b23053907e84f010ba3e475cfe3916c6:1742030629,e12336d074c0f010e28317d64725e4db:404209682,9fc28b008c48b010b5f44da85302373f:2093836496,809abdc4aec0b0109314c438c9445c72:1828814501,5504e7fc67cfe410908e53ec7671373b:1052121482,faf3a7fc0fcfe410fb68e9375f530646:-1572742019,424d66fcbf0fe410461804059ea9b613:1275560152,93d990b4a087e410333a6301e0fce64b:-1053060227,8e89d8740487e410e75a976860acdd1a:1352115786,53c79834a087e4104562b63e9d3b54d1:75220655,c4c61cb0a187e4100e282756ec930771:-532925700,28773f2862c3e410db7742d5f68b0d27:-38544222,a6ecc7641d43e4100c4cfea8b606a5b0:-704917293,522b4720d543e4107bf2ad9dbf5f18e3:1761178894,7df44ad05543a410d97f9cf28b7ce1c4:-671711741,8d8f7910ed43a410371c600297fdd3ef:640932867,542e319c7003a4106e1ecd7d2e2ce8b6:413881848,9c21b114bf03a410066f73f0e0348cb1:-1975784582,f18da98cc4cbe010a2aeaba055114e2e:-1182076052,c3d79dcc8d4be010f518a27f02b38c22:286628835,c65ef52b6f7e6010569c1d2595e62017:1574671229,b426890f16ed24104eb06bd3707f620d:978129698,1f2012869529a010c9ac335fc0212fa2:1863126050,a195fd71462d601042a70b3ed7505b0c:-1094513268,02d145bd1ee56010187d897cc069d50c:-2049120407,671284c95395649021e9bf86ae95c6a2:-1798525142,96f7c04f2dc1ec50fc3a3363b63e67ed:-924820790,aa95abf573716010a7e6596e0aa51eb8:-1119275197,ee5b0e9271492c500f2ff7042b3798eb:-1072175383,43f7cad242492c507a50cf363869e76b:158209914,544e3b869c812c5049e311e5e78771c5:880644709,ea3b3b06c1812c50c17446a439ecee80:543152726,16b3fb8a0b412c50c6b9c8333d70289c:799518062,23c768c2df41e850105d13d6636dad71:1273575756,6644e80e3201e850241dda3c6626b030:1893419777,a872a40ed901e8505bccf5e575fdc2fe:124208414,fec95846ae01e8506bbc7be81e34d8f4:-1259745400,0ba8900adbcda850a5421575ae395dca:-1411773714,479550863ccda850b4ba436bacf50854:495795212,3bd048c69a8da850bd3c51cf2e80fae9:2127393807,51cb3f71348da850d38e606e29c29d8e:960917161,553ab771618da85013a673b586cf1aaf:1691952765,5c79f731fa8da850c751e360ac5a457a:546903797,7b8877fd144da850dfd5b76b8bba1be5:-1475075701,40567b3dba4da8508faa9532d8f93fea:-2070185505,ffc3bbf9ec4da850bab7e2a06d0d2655:-1186210127,5a723779524da850115e530226b84a21:-1534487010,1a61ff79744da8506413aee9b8c413fe:-776330007,76e866b98189a85052c60df4e09d3703:225862160,0528a2f9fc89a850a011d6d6d973b642:-1653642524,48a923a5a901a8507278819238f09d0a:1107152166,f0e8afa5dc01a85004861d9d2c8ded25:170806457,2b08ef65b501a850815b8a8b099bcdb4:-2007732508,a396e365b301a85076fb5bb21cc1eac4:604286959,321caeed7c4d68502fbe7bc62e60278a:-986715070,ef2baaad944d68500dec54f3cf04dfdd:300070527,bf6a2aad274d6850db439ad45fb558c2:-1303157774,5b79ee2d694d6850acf2b515f99ed9dc:1717411726,a9d8ee2d4b4d685061c0c372939474d4:2042682380,6a57eae9dd4d68500d029c5e05a5aca3:-420916568,b9a66ea9784d6850cae34be1efaa806b:469150966,1c5266e5614d6850aefcdf0a369685d2:-420916568,0f9f1665194d685079511da596dcbadc:-780693086,b4be1a250e4d6850d3e2d17bbfd77e7d:1684617682,324a9a21fe4d6850677892f422253bb1:1004709379,b83cfdfb77bce05069bbbedd0b84aeb6:1202956061,949b3d7f4dbce0501b373fd86ca609bc:-80064605,5d89bdfb65bce0508d30bce0fb6569d2:1329650593,8248f5fb6ebce050555ffefb335dafec:-1404821254,5067f1bbe3bce0506f71c34994c98f2d:-136706052,33467d7bb6bce05014169e39e8b2f93e:1244217713,d83075f3a47ce0500c2cbd975db5e8f2:-136706052,8cbf2dffc63ce05026ac1f6e8803adaf:1949032831,7cb99fb947d4a01025ded59556122db0:1956392330,71786959f29c20100afbad5cf0519894:1749880423,7133335b1bfc60108b68bcd029c486cd:-1248349667,ad066d6a8b40e01070b9868faf802310:414613121,ce9d7546fe0c60103bb117bb05cd58e8:-900399123,583bcc31cb482010cb51f10585932351:-253188850,600fdbf54c1ca41014a39381a5569db5:1825285262,0dae74919650641046abe9cc1d934b0a:818346226,e5b9fc9996106410750f9824d39c42cf:-1802695986,01e1f8991c106410f4661de937907bcf:818346226,6b44581520dc241099f5845d41bc253d:-1802695986,04f05c11ffdc2410155ecb261246f57c:818346226,4e390c99999c241036cc8fd5181b9b00:1197657154,4c4740593e9c241005c36088d9c5140e:-652669506,45658c95fb9c24108da15da51d93fcec:1456791420,ce13f455471c20109b52d77a08b63023:1931544952,ce3b738d53582010f38417e9c37e8b45:-343746566,0ed377491958201096074dee92bfd72c:-1889014731,289ea745d45820105735f8d878931067:-752772320,f2bda345b6582010afc35260f6bd0a9b:1931544952,815f5b8589182010f85c7f11e67d4633:896029596,a2959b8d9ed42010547d1078923946e3:1974254498,c3d117c194d42010316e7d239621d3f8:1718431264,1a9b4bc5dc9420108160c0ba16ce1d42:1154873632,158efa4d22542010d706447b6d25f06e:1931544952,1ceac6b0d9dce0106130705a3526bb47:818346226,261e0c011e44a010329ea89750c70bb6:-297495146,f88e8c3ee6279010defe4cb88347daff:-2114596452,d40a40fa0f279010937fd846e9ae02aa:-1072684777,67f7c47ad5279010c1f6061079839670:-1508815645,3a1688f6f12790104a87999160c3551e:-506495686,44917eae4e239010ace87b3881e4b52e:-453292565,9c74216a3c6f50100017cbecab6756ec:1704120742,79b1c59619a3541081ce707d6a8078b9:-757777704,3ef6f7c652af1410037984966db2582b:-1353144863,cc45b3861eaf14105b1407d8790a934e:1691174747,93d0b3c2fcaf14107b0747ec2d9b7728:1994049734,0ccb2b8ecf6f141090370f558d2d9e32:1319516589,80ccf4548fef901004909406734c9e9b:-1419446835,c544a8c89ee3901010c73694e96bd814:-1611725051,2f1b0423b15f945026adc75892cffbcd:-973350525,540bc0ef9d1f9450698d530f74f020d0:1768524489,052dea1e0fdf5410dd3eb285b864e31a:2082993841,80cc7b4aeed754100ae7fba1da99c958:133374141,118cf43988571410f0d775410cbad636:-311151564,647183957f97d010de0799a0c9c09353:-1464483874,59fd7e914197d010b9c80246b5381591:505985574,9ef53e1d3457d010745e68050a3a361b:-1835021188,7e9234787c135c10a29ac76dd12c0c1b:-886866650,443a54a449d31c1026a8889019665367:-972003283,a8f72cf408db5010ce85dd14aed34300:-265393012,94942434e5db501098287674fd1b11ea:390189069,305a0f101b1f10103e76b55d36432238:-803966239,cd37e2273a4b14d00e00c8ea4fc368c8:2083481506,0e49426f4ec714d0599183b88f710c67:-1853716016,0e5206e731c714d0033d11b6f766506f:-1191682670,43b77d2f078714d0c38db37eef69b93b:-1458451042,176e992f934714d07919ef26a5f6c826:-1835565315,ca4959a7b04714d0c7ea4d866703c363:-21776464,373da82b0fc314d056ec0fb088fdef10:-1189115584,2701ee95bc0b9c90334b8a3e82595306:-21776464,a9406e954a0b9c90ee9d9fa6b60c8f99:-487855012,c03f52950e0b9c90cbc28f1913741e43:-2002468985,8bfd9255e80b9c90c66269795ae07b98:-1781373952,51fc1e91a40b9c90cc46074347625f9d:940757277,65ba1e91410b9c9001c6b95a8858465f:430781602,bbff0299b1c79c90c52f4ca2949e3496:1930685275,c7cd136c287a5c5004fbbb5347b2893e:-978672403,1b68ca087bfad85095d4b515071460f9:1412890268,d8020cd7f32a18501542e492c89227b4:-1784815411,5c4ef3c70e2a18505023d691b958d135:1084107214,ad3b7347f92a18509aa3e286a0786cf2:-111277951,509eca4fede21850189cfd7f365949c3:664959234,ee95067ea3e6d450ebddf0996486c44a:1899846916,705ce53eb6a6d450467e419c8b937ace:-752552378,5e5ba9fa7da6d45061474e110d462b9d:-213033077,dff7e57ab8a6d45002fc5c5e962988c4:1416951758,49f68e62fe6e9450993595f852f20a4d:1318241134,db9f851db0229050d0538ad782511dd2:706123116,d888f899a0ee50508293a6650ba4fef6:327350398,93283c9965ee50507449f5431874b406:-1821556684,54c51cd9456e505023eea5b728f8dece:-1966536315,fdf1e964776edc1089104a23e244ead9:1459432044,276fb820f42edc10227a58f6a959e1db:-1629811561,96df1868f4aadc1086ce8de40a40874d:-975929926,c8acd8a43daadc102b0bd772c46503ff:1937685308,6ae654a0aaaadc1029e9c7faea41cdbf:-1094669477,d6bba1d053e2dc10e1ecb17018d740a6:2008385925,397b29d005e2dc10168eac126eaab390:-2100419,2f63615cfca2dc102eb25a7daaaf2a0a:1669130703,a2d22d1cefa2dc1096c21bfeaeb5171e:-840613039,15c1e1d897a2dc107c779fe741c246e8:1386909292,08ceb32dc61e54109ed8c3c85726f0c0:808682612,0332022d149254105dde4f93ab966bf8:1653264036,7e551fdd56da141085e9207e2a9b87ae:1324719197,ea73df1da0da1410b7ebe4e1a9c401bc:544689539,4d6ecfd928da1410d51c2dcc4756c67b:-522283268,67dd4b19bbda14100118806d4251dc56:-668770748,ef0887dd8c9a1410654461fc906f4215:-1490220843,82e8ba154e5a1410f589a1f824fc6aef:423898695,f2ce4ed1da5a1410190b0c8e8e660b4b:-1383971186,1f914e994f1a14104bae255f59bbc4ca:-1770010683,6327b055a956141053d2d8565f66a72c:1653264036,34558405751ad01003b3dfdee4d0df15:-1589461900,788f6f3401d6d0100852af66f704f761:918778182,181eda98761e5010b2c337b2ae57cb3b:1857624514,f0d92e003fde1010c6abde10f5f07e43:1996722411,82a5e984dd1e10107d82d965b18f1eae:-1143426329,223431d89db19010a4222adb0e2b9e67:-786280282,cdde615474b1901046e194a50f5c2c58:-1381902805,665fcd103cbd501055880a66e20c36e5:-20109215,d8bbfa5857a81410885fe2702decad69:-222451069,6d3836586fa81410b64135110f07845a:1426417438,7f4ea61008a814105bb0623112681f34:-1697781262,64810b42ef5814109ea4d7cc4b94bfb8:634624677,2414b7413fd340100ab96503ad3b9043:1243306487,f90b4665057e0010f82f440f315e14d6:895557797,7e9a8a25ac7e0010108dbe64c495c61c:-240350596,091b78b66e2a08101d6d7b394bcc3c23:962085174,7ace8a2566f944108f2fbe7b6b4a8f47:-619924775,488d02e110f944100e0c10f37707451d:1436885151,25e698323c26c4102bee78fcb4ad32ef:-489282716,b6d69832c626c410e399918034141070:1489889436,e8fa48f6fde2c4100fdcd326b7c50319:-188913381,f4a7cb39f2da4c90535f3e4b459355d7:1489889436,8027cb3dadda4c90f05ddab210c7dbff:1400837256,d55c4ff0c6de8890dd45017934b5a404:98391846,845817a6df86c0904d3fc8f65e7e68b2:-1490974487,dd3e0bd12ececc506edc475b09c5a304:234685501,0d6d0391a7cecc505d9ec6630f0b9bbf:-187821833,e99b275b75d10010d9ac45e21dde275f:-773442937,737e74ee38dd4c100a3e164153202439:-773442937,4d8cc49d4d3b3300642ae47270967437:-196710761,66d1b049bf673300a2a00b6ac7858c8f:-606098479,f8ff1ef87ea33300a621c627b365b32a:-23074358,29cf8630f5a333004ebcedf484ef7da7:160107851,226745c109df3300058004ef4329662a:1287672369,4f1bceb73f723300fa88fd5f6fb3009b:1350944049,394b9eb2b5323300623f55faa66c4c4b:164513330,71995e32ea323300f11b8f37500d71f6:2003884812,a285315819b23300cc8d214fbbea6a85:1057742611,04a9a1506bb23300d1b4f99cd9f9aebc:-341199199,cf7e3d219ed2330016dbf489fd36512a:364011551,26daf3d0115b3300d7df0a1b6b499550:2100539652,c4b62a8e45833300c16c80827a0bddb5:-2106673940,51f5354e210333007d826a13b7233bae:-1660207223,188d8124770733002b1ce730932fd34c:-585697185,921b85a09807330016a904b0d3082cc6:-1717599105,27c341ac42c33300c1878076156cba9c:-1848319183,afd8ec28ac8333005317535b27652df6:-1862363404,a050073389f23300bc9bc30da69d915d:116100837,44b33a3734b23300bf5c3983878d35bb:-1901038290,4152f6dc851b33006c373ac56a3c2e79:-105921103,13f989f3a8763300c399af02bc036190:922083935,e3a38dbff8363300e9f74f2bcec3ef75:1049050207,8dbeb50cf4f237006308a5ee1e3576d7:837693920,a3a9414732aa7300517a6cfbe4d0f443:-1694841871,736841476daa7300df223627e81a422d:-455925086,7a28a8cf332a73007a7b0909479ac499:-1642389155,0fd6a08b872a7300f9e52681d837360d:1608356289,45bc1b5293263300aae802582ec50c42:1288712297,8cbd17d81402b30094b6c16e215cfb6f:671347422,95ad93d85c02b3009d7da25f84f6fd80:2079983789,ea7d57984f02b300eaf8cf0faafe94a7:-1913613458,0d2d9f589902b300ec0e2937e4a3e889:-613689569,f8e5be387db133009d0b755c13ad734c:1431244435,5fa5b27888b13300720322b21882f59f:1997697946,e515beb4bdb13300829f33cbc4048368:1431244435,d5053e38b8b13300bab751260a671e8f:-657735429,ecf4beb473b133002bcf5c564434c862:-79630822,179476b4fdb133000d731b614db85fbf:-1192774096,6ad1f6b4b2b13300d7c8c0ee6ea63cbe:485210149,ba0a6e27928933000a4e2fe32d914015:-2137698367,68e9e227a889330092302a8490680237:146338070,0889a227788933000c5cabc625e76f08:-956749601,8b39e2273f89330032cd047a57299611:-930249815,8aa8eae3a58933003eae4bb76ee97178:-368883869,50882ee361893300181f09206ae7b196:224801338,9138a6a33c89330056496dc125c69000:-930249815,42c4a623d489330063dbdf788883b81a:224801338,51c3e223d48933008dc6c5ffabc95687:-1249303010,d5a32a2320893300fe5a564075394510:-563858118,5fe75fd5e7f8f3006e0f24eb7a5c330b:1940707134,0b741b55abf8f30050d7f7f0108e4431:-916866881,b9245315c4f8f3000c0b0636bc813459:1940707134,286260248f347300b0cb116f22d5d9c0:-340599730,cbd5660089b033009ca9fbdb3f981550:242071225,38c4220025b03300549412e860594238:1248019066,b2f78345d938330022e8163616318bfb:-916866881,574e22c114f43300474f50d862c2e80f:740336665,430beca61560330049573282a2151f4a:1045069710,33c018ea0e20330036d2c9aa0c6c6eb1:-449477038,2a7516f516ac330007929f7f4e7b4cbf:-1728002532,4d9695a59da03300454632bd250dbe0e:-686833060,17afcd21cba0330007eeeb0c05a3bdf9:-5734586,3f9e3ce124603300ed9e2fe5bfafda18:580628307,9d9dc1a45c203300148ae094fbecbf95:1105464653,4becc9645e2033003fc6e2e7d784bc5b:205510779,016f2910b8a43300c7633a084025c163:-1192592317,92de2910aca433002241b8e17431705a:-1128989472,b48bad5c8c64330007532841b78f996b:-1192592317,9b0ba15c2b6433005396de3858f07949:-1332793684,266a651cdf6433008fcc5aaa42aecf53:819724920,ec6aed1c306433002a64cb90de5d0c79:-2108043731,48c9a11c1f6433009bcbdfbc7befb3be:501798792,be39e9980b64330061b4671af21df457:37355671,6668e958966433001b2955f4d92e87d8:1816329663,01286d9849643300d45ba91d14f9ec1f:530496545,e1f7e9989b643300eb75f50a9da1fe1f:1506922453,bd926d94bf6433001e428831acfeada9:905650760,dd3161944f643300df783a3b32cddd6e:-176307336,5eb06d542d64330002dc7de780563918:-1819690224,774e4d583d2433001ab14e226bcc5760:1134764883,b29d4558d224330091dc245a49e9c235:1987469742,2b3d0158b9243300dcb54951de8eb273:1209416231,04ec09942d2433006e1758b54ee95671:296884906,85bc055491243300245c470ec2d484aa:-1943028381,46f8cd5c63e03300b2b542d12334bf73:-814625405,30858d5c1ee0330072fe714488812287:1939235230,a035895c5ce03300a04351d79333fa80:-1314008035,60f18918b1e033000f1a0f66f6d4a976:-1054687432,4f8181d843e0330056ed54df419dfa38:-1368795912,ca6009187ae03300a89b739be8322c39:-558566977,478f745807e03300a441bcfb4b108eb4:422450520,b23e30185ae033000cdb8a1d0ef630c1:994389272,583db8d00ce0330014a3c2dc79f8ab7e:-558566977,79dc3cd02ae0330055df960a27057f66:-842402365,229bb8d0d2e03300f2af5174a5bae371:-1344945547,cd5ab890dee033000fc7b1ed6cc1ea65:1186390139,f899b890f1e03300185b436e2c12ee59:-1468292131,08a8f09cfda03300a12136cbf4b1308b:989091510,fed730dc59a03300af4428beef2095eb:-565203453,0807fc9c43a03300a28fa27f362188e5:-1351940065,5866749c05a03300ef37d63550908875:355025531,d1337c949da033006d8db87b34bf7b85:-1625264730,9a32b498fca03300691f1a0f89237a70:2135051506,9b9de4d450a033009747598e351eb6bd:1484497801,6d796814ada033005d2197f4e087edc7:-807304465,37269c941c603300f10b3475fb0db9f8:1643047043,f0445814ad603300eed47414119359d0:613711983,1002d4d80e203300c9c597f999d395a4:625752115,25514094102033005e43476a828e8b68:-1462088996,1830441471203300067bf95a3612f4f2:-448985038,db6f330413203300b19add01431e09e1:2118546340,3fce7bc080203300a06d7a1e2dc4fede:-996687411,dd706404146433008bbe9de4ca2e50f1:2083510104,6b10ac049d643300862c022785d8a554:21081769,5cef1804c864330099ab3d085a8828b2:2077550605,35bf58c0986433000e8d9e35fd8f74a7:-261333179,aede90c01e64330095c3b7646ab73313:833584705,c24ed4c0c2643300fb79c0ef90a49feb:256837824,5877548caf243300bfe10e06956be6f8:833828024,1c85940c232433006b8fee6c22ccb07c:-1617299660,2d04500c652433008dc474e8dc2089fc:-930269075,c9625c88b5243300b18cb3addc089fc9:-108223603,21ad0884d324330047d90a3168c56fb4:865994012,8b0d77fb5fd0330062d89d96ce9ce23a:-1453164596,9dfc73fb61d03300a34499d2f97ebd56:990251154,f61cf3fb65d0330079b8febeb7bcbeef:-426502655,2a7b33bbd6d0330004b081e761ce189b:1722936059,b3f6b3770bd03300ac654701993ab75c:2084357535,35463377d4d03300fe12d189f3ff1b4e:1814720369,a5f43b3780d03300c2adc765c330cd27:1683285281,91e43b371dd033004494a6e2badf2665:-1452414482,f084b737f6d03300802f386ba50c66c2:1994777878,7264373396d033008d8afe1b9bac8b54:1949531399,8234b733d5d0330096766d96870eef8f:1867943043,8d027b3339d033003bf2b3e75d39fb7a:-1529618159,9ef07b333cd033001c8a812646c39450:-1338511374,5d0cdb7337903300513e657281ba4ac7:-869957497,1d9418a20a607300779ad5d660d2f5cf:242071225,22a2d4a2a560730029d51557b7e8625c:468121486,ba87ff5685ac3300470aeca2417979c4:457185806,5d33379a942c330051b08077d53166ca:-324171223,5e0a901e982433003a5be9d03317e7d9:-695220937,480a9c1e21243300972a5fa9b6fc36f1:-1425888095,68492f426da0330018742cd0a1a520f3:1177801854,ceeeb5a4c66c7300271221bbf82981fd:-517859935,dd7e35642e6c730064092b4d1a0b083f:-56157088,f96ef9244d6c730027bf39f8bf8e701e:304172562,0ced7de0396c7300875590d7e7b964a8:-224793420,b74cbd204f6c730060feada1a46beebd:771833043,142a31ec452c73004f6c6b3d4b773d6f:-1946916351,65090bbbfa503300a1c25cc777e1a0d0:-226920833,ba540b732950330054da201eb2a10728:-1224007526,c11f36fb3510330063249c46357e7274:553711594,d2323aefe4d033006781c0dcb579190a:305266318,84513a6b2ed03300363049f5d599a935:-207817255,02e875ab6f10330044626629c49f808f:-157976821,1f67bd1bd514330044036c93c9942ce1:-1456705847,7201b91730143300d7b0aef5c03a3ab5:-1947629520,06d3ed9b34d033003151a5e006cc1259:1204133930,15536d1b7ad03300e6d3d9fe12887a24:-1947629520,a8db8d9bd8903300a38e7e1b9d1779ee:-29372202,eeb945977d903300373a1463f406aa12:1607548734,91d860df3c103300437c2418dc8b11aa:923734581,cbc7ac5fd31033004df989a90828e458:-486607586,b95258717b5433005bfe4c0aa2198d52:-636006611,998198312f543300065dab2115a1affc:-1100820701,43c4b3e556d033001cf71703b1c1d87f:-1331341088,130433e51ed03300ac877619a2a7b633:-381905904,35fba3adcd9033007356e526a0921a47:-915416134,62aaa3ad48903300652e5a8b66faac01:554674915,325a5be1aa9033007bef586a30bcde38:-622606522,2fc73ee93f10330047a8574d0e07545c:-615827199,20bf3758679c7300d66cc61e1da10e9a:99014874,d946f43f46803300b0ae4cd6d1d97957:-300316472,2464bf91614c33006090d33e6b1a26b5:2025526483,1ca8f9a0e2043300e6ffd90d262e78eb:-306487907,57827daca5c033000a46c97edb2644ce:-1632906844,8c2d9d6cac80330059ccacbce573e07b:2045530966,4feab4e468003300fb639fe9411d673d:-421049205,cd3c012fd13f2300c987e59ded575bd4:-1155114592,a7dd9eaabdff2300232f12511c66cc20:-1450768630,8abd1e2e08ff2300b0cc1333814b2ba0:-151118726,8d42900570b32300625fd75ade273e62:-991646019,0db19c4d867323003222b8dabdf8421a:13923263,1bb094c166b32300e4a8ed73ca2a4c98:155818461,e288444d0b732300c57f408658f19512:1859269087,d6d70c0d7e7323001ab168acc7c4f448:-2019175556,a897044dcb732300ac1330623d2f15f2:-1430529820,b0d6c00dfb732300eb0f27a6bd27aba2:-878062264,da164809c97323002a55c6be5e53192d:1947595948,0854844902732300a9b82b3b23c9fc64:-6698668,2dd0eb20b9336300d308a45b4821b241:599934240,ba2b4b20d4ff23006f43234222ba0e17:241717613,601f3ee466bf2300083546a7519fa9ff:599934240,0cde3e2872bf2300e78fc6ddbbd69f9b:-784709088,7b2d322814bf2300e23ae2342d7cef38:-2060232275,a20ad6d884f32300d7795f1a2ed187dc:-784709088,4c0a525817f323006dbca50591a874b5:562560447,2983a444c8332300477cf7ddfdd9eba3:2110445243,5819b4c7262f2300903905b4f740f265:1794159858,18da1861551a230059a4da88cf93e53e:-119375368,fc0106c75b426300737d1ea362be3c65:766145999,be647b72a10e2300ba61f59a16accb6b:-881141664,97e7a5d67b8ea300017b5a854573f08c:654402228,3da7a5d6118ea300d73757d4271e3694:1679016760,6ed66996af8ea3007cb315d5fe76522f:-362004021,0d28b456430ea3008a1dc4b075cb5775:1679016760,26d2ec6de406230073e77e1063b5c11f:-1877681683,9fffadb4a40e2b00baa1b5d2083ec947:-539943379,265ead74890e2b00cb29c8238bd4d2c3:945306347,fcf7c95bbd31e30026eceb01d93a973f:-948813167,2655f81faffda300bcac36971c2d3da1:-1897223609,14bd4d0f6c75a300fc22f003f3d24121:-890451674,da6dcd0fa475a3008d2d3f9a5843991a:-823618084,5ea2c9077275a3000c33a10f8c4702e0:-1507601882,83c16176547d6300e392f12f605bc079:1070470887,fb76e8a1dff5a30079aca374f90904e6:459750355,1914b79d0835a300dfdc41e6ef6141ec:-660112213,6212955daabd63000bf2b8264889aefe:-1176744584,a1bfc5dd65bd63001eca863d7b45bf9e:2033454981,8c3403f4fafd23005dd30f89451b8fed:1116140324,2451363c2dbd2300360de60bdb83aaf4:229073458,6231fef859bd2300237e41b1519a4b95:683530586,a2df22f812bd2300d155ec0e69a7065d:-681667144,fb3a709ddf6d2300cc5fc2a09ac99aca:1461204843,37da9bb095212300ab2488cb274b5788:-2142886880,169918b8a9e5230049b34608d4c84d0d:-171081800,bf79aa6c17a12300e8beee32ee6951a0:1145764236,28856ea42ea12300fb5dd7ec6dd873ae:770636087,4f42ee20e4a1230065cb815a5893f72d:-1333210511,84326e604aa12300e7dcf34ddd869739:657952991,6188951cf1e5630036e3aaa71aace676:-1860823237,10159d18a2e563005a96007e408f0c64:688998715,a064911875e56300c9c0f6c4cb20b8bf:231740739,cb231d9490e5630026b0ca34e99b3458:1274530003,6af7ed33a391230086d4e63524af7e22:187149776,1e1e4dffdc1123000c2b58f6673277bc:-755183496</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_719072502fa81410071ede1a2799b66a</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Nutanix_ServicePortalConfiguration&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Nutanix_ServicePortalConfiguration&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Nutanix_ServicePortalConfiguration = Class.create();
Nutanix_ServicePortalConfiguration.prototype = {
    initialize: function() {
        this.appUtil = new Nutanix_Calm_Utils();
        this.logger = new Nutanix_Calm_Logger();
    },
	
    getFieldDetails: function(fieldNames, cat_item_sys_id) {
        try {

            this.logger.debug("Inside Nutanix_ServicePortalConfiguration.getFieldDetails");
            var field_array = fieldNames.split(',');
            var qc;
            var field_details = [];
            var item_option = new GlideRecord('item_option_new');
            item_option.addQuery('cat_item.sys_id', cat_item_sys_id);
            for (var i in field_array) {
                if (i == 0)
                    qc = item_option.addQuery('name', field_array[i]);
                else
                    qc.addOrCondition('name', field_array[i]);
            }
            item_option.query();
            while (item_option.next()) {
                var object = {};
                object.var_sys_id = item_option.getUniqueValue();
                object.var_type = item_option.getDisplayValue('type');
                object.var_name = item_option.getDisplayValue('name');
                field_details.push(object);
            }
            return JSON.stringify(field_details);
        } catch (e) {
            this.logger.error("Error Nutanix_ServicePortalConfiguration.getFieldDetails: Error:- " + e);
        }
    },
    getoneFieldDetail: function(fieldNames, cat_item_sys_id) {
        try {

            this.logger.debug("Inside Nutanix_ServicePortalConfiguration.getoneFieldDetail");
            var qc;
            var item_option = new GlideRecord('item_option_new');
            item_option.addQuery('cat_item.sys_id', cat_item_sys_id);
            item_option.addQuery('name', fieldNames);
            item_option.query();
            while (item_option.next()) {
                var object = {};
                object.var_sys_id = item_option.getUniqueValue();
                object.var_type = item_option.getDisplayValue('type');
                object.var_name = item_option.getDisplayValue('name');
            }
            return JSON.stringify(object);
        } catch (e) {
            this.logger.error("Error Nutanix_ServicePortalConfiguration.getoneFieldDetail: Error:- " + e);
        }
    },
    getCatalogItemDetails: function(cat_item_sys_id) {
        try {
            gs.info(" $$## Inside Nutanix_ServicePortalConfiguration.getCatalogItemDetails cat_item_sys_id : " + cat_item_sys_id);
            var blueprintType = '';
            var blueprintUUID = '';
            var profileSysId = '';
            var projectUUID = '';

            var getParam = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
            getParam.addQuery('item_name.sys_id', cat_item_sys_id);
            getParam.query();

            if (getParam.next()) {
                if (getParam.getDisplayValue('item_name.category') == 'Un-Published Blueprints')
                    blueprintType = "x_nuta2_nutanix_ca_nutanix_blueprints";
                if (getParam.getDisplayValue('item_name.category') == 'Published Blueprints')
                    blueprintType = "x_nuta2_nutanix_ca_nutanix_marketplaceitems";
                blueprintUUID = getParam.blueprint.uuid + '';
                profileSysId = getParam.multiple_application_profile + '';
                projectUUID = getParam.multiple_projects + '';
            }

            var object = {};
            object.blueprintType = blueprintType;
            object.blueprintUUID = blueprintUUID;
            object.profileSysId = profileSysId;
            object.projectUUID = projectUUID;

            gs.info(" $$## Inside Nutanix_ServicePortalConfiguration.getCatalogItemDetails object : " + JSON.stringify(object));
            return JSON.stringify(object);
        } catch (e) {
            this.logger.error("Error Nutanix_ServicePortalConfiguration.getCatalogItemDetails: Error:- " + e);
        }
    },
    variable_info: function(fieldNames, cat_item_sys_id) {
        try {
            this.logger.debug("Inside Nutanix_ServicePortalConfiguration.getCatalogItemDetails");
            var field_array = fieldNames.split(',');
            var field_details = [];
            var gr = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
            gr.addQuery('catalog_item.sys_id', cat_item_sys_id);
            gr.addQuery('isdisabled', false);
            gr.addQuery('runtime_config', true);
            gr.query();
            while (gr.next()) {
                var object = {};
                object.variable_name = gr.getDisplayValue('variable.name');
                object.variable_type = gr.getDisplayValue('variable.type');
                field_details.push(object);
            }
            return JSON.stringify(field_details);
        } catch (e) {
            this.logger.error("Error Nutanix_ServicePortalConfiguration.getCatalogItemDetails: Error:- " + e);
        }
    },
    extraFields: function(fieldNames, cat_item_sys_id, profile) {

        var field_array = fieldNames.split(',');
        var hide_field = [];
        for (var i in field_array) {
            var gr = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
            gr.addQuery('catalog_item.sys_id', cat_item_sys_id);
            gr.addQuery('application_profile', profile);
            gr.addQuery('variable.name', field_array[i]);
            gr.query();
            if (!gr.next()) {
                hide_field.push(field_array[i]);
            }
        }

        var final_arr = [];
        for (var i in hide_field) {
            if (hide_field[i] == 'default_project' || hide_field[i] == 'default_app_name' || hide_field[i] == 'default_profile' || hide_field[i] == 'default_environment' || hide_field[i].includes('_password') || hide_field[i].includes('_private_key') || hide_field[i].includes('_passphrase') ) {
                continue;
            } else {
                var gr = new GlideRecord('item_option_new');
                gr.addQuery('cat_item.sys_id', cat_item_sys_id);
                gr.addQuery('name', hide_field[i]);
                gr.addQuery('type', '!=', '19');
                gr.query();
                while (gr.next()) {
                    final_arr.push(hide_field[i]);
                }
            }
        }

        var object = {};
        object.extraFields = JSON.stringify(final_arr);
        object.privateFields = this.privateField(cat_item_sys_id, profile);
        object.showRuntimeVariables = this.showRuntimeVariable(cat_item_sys_id, profile);
        object.secretVariables = this.secretVariables(cat_item_sys_id, profile);
        object.extraCredentials = this.extraCredentials(cat_item_sys_id, profile);

        return JSON.stringify(object);
    },
    privateField: function(cat_item_sys_id, profile) {
        var hide_field = [];
        var gr = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
        gr.addQuery('catalog_item.sys_id', cat_item_sys_id);
        gr.addQuery('application_profile', profile);
        gr.addQuery('isdisabled', true);
        gr.query();
        while (gr.next()) {
            hide_field.push(gr.variable.name + '');
        }
        var answer = JSON.stringify(hide_field);
        return answer;
    },
    showRuntimeVariable: function(cat_item_sys_id, profile) {
        var show_field = [];
        var gr = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
        gr.addQuery('catalog_item.sys_id', cat_item_sys_id);
        gr.addQuery('application_profile', profile);
        gr.addQuery('isdisabled', false);
        gr.addQuery('runtime_config', true);
        gr.query();
        while (gr.next()) {
            show_field.push(gr.variable.name + '');
        }
        var answer = JSON.stringify(show_field);
        return answer;
    },
    secretVariables: function(cat_item_sys_id, profile) {
        var appUtil = new Nutanix_Calm_Utils();
        var secret_field = [];
        var gr = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
        gr.addQuery('catalog_item.sys_id', cat_item_sys_id);
        gr.addQuery('application_profile', profile);
        gr.addQuery('variable.type', '25');
        gr.query();
        while (gr.next()) {
            secret_field.push(gr.variable.name + '');
        }
        var answer = JSON.stringify(secret_field);
        return answer;
    },
    ClearSecretVariables: function(cat_item_sys_id) {
        var appUtil = new Nutanix_Calm_Utils();
        var secret_field = [];
        var gr = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
        gr.addQuery('catalog_item.sys_id', cat_item_sys_id);
        gr.addQuery('variable.type', '25');
        gr.query();
        while (gr.next()) {
            var appUtil = new Nutanix_Calm_Utils();
            var catalogScriptGR = new GlideRecord(appUtil.configuration.table.catalogClientScript + '');
            catalogScriptGR.initialize();
            catalogScriptGR.name = "ServicePortal fix" + gr.variable.name;
            catalogScriptGR.type = "onLoad";
            catalogScriptGR.applies_to = "item";
            catalogScriptGR.cat_item = cat_item_sys_id + '';
            catalogScriptGR.cat_variable = gr.variable.name + "";
            catalogScriptGR.active = true;

            catalogScriptGR.order = 50000;

            catalogScriptGR.description = 'This script is auto created thorugh runtime module for fetching and setting form data and visibility.';

            catalogScriptGR.applies_catalog = true;
            catalogScriptGR.ui_type = "10";
            catalogScriptGR.applies_req_item = false;
            catalogScriptGR.applies_sc_task = false;
            catalogScriptGR.script = "function onLoad()  {g_form.setValue(gr.variable.name+'','')}";
            catalogScriptGR.insert();
        }
    },
    extraCredentials: function(cat_item_sys_id, profile) {
        var show_field = [];

        var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_credential');
        gr.addQuery('catalog_item.sys_id', cat_item_sys_id);
        gr.query();
        if (gr.next()) {
            if (gr.username_editable) {
                show_field.push(gr.name + '_username');
            }
            if (gr.secret_editable) {
                show_field.push(gr.name + '_secret');
            }
            if (gr.ssh_private_key_editable) {
                show_field.push(gr.name + '_ssh_private_key');
            }
            if (gr.passphrase_editable) {
                show_field.push(gr.name + '_passphrase');
            }
        }
        return JSON.stringify(show_field);
    },
    type: 'Nutanix_ServicePortalConfiguration'

};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-04-29 11:11:44&lt;/sys_created_on&gt;&lt;sys_id&gt;719072502fa81410071ede1a2799b66a&lt;/sys_id&gt;&lt;sys_mod_count&gt;18&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_ServicePortalConfiguration&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_719072502fa81410071ede1a2799b66a&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-05-12 08:17:24&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1058495691</payload_hash>
<remote_update_set display_value="Nutanix Calm 1.4.4 Service Portal patch">05f5233707003010f76cfdac7c1ed0c0</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2021-05-18 07:53:49</sys_created_on>
<sys_id>05f5233707003010f76cfdac7c1ed0c2</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1795fa99b2f0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2021-05-18 07:53:49</sys_updated_on>
<table/>
<target_name>Nutanix_ServicePortalConfiguration</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>50d13006e884f810bd53a052a071abf1</update_guid>
<update_guid_history>50d13006e884f810bd53a052a071abf1:-1058495691,562030c6b384f810a55e6906d555ba30:-94923882,434f0ed15580b410bb9188d3f5cff46f:-1058495691,47cecb107484f010fed4b9c37b401fa5:-625145481,7301dd0f63ed24102a4494435d67f34a:1532046333,0d554686a0e5a010598f10c9e98e9db3:615523902,86df2c5a3ec0a01003cacd4292b774c7:1416219084,9d9d3946da0c60106a8792f83e518760:1178896825,ab98144752c9d410beb53a22e2da5036:494715732,47531d6db1709010f1bf362b5147370c:41373240,52131d6dce709010b736147c5230ef07:208929617,e85f8da925709010da15930b2aef7a12:-439726018,b6bd01e5ad70901012207500b3e47828:-940239659,9cf4606d94fc5010c75a50edef69a6c3:510952302,89c4206db0fc5010b60366a9d3a1a479:-1652312050,8d14a42db4fc50102bde18fea33d7c23:-51234005,9a12aca920fc501032b4ed3c0056ddcf:-2063872838,ac9dd8e1acfc501089defa720d64ba02:-648301079,50c072508ca8141098a6770add861c70:-1257385507</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_documentation_x_nuta2_nutanix_ca_calm_plugin_configuration_select_service_portal_en</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update><sys_documentation element="select_service_portal" label="Select Service Portal" language="en" table="x_nuta2_nutanix_ca_calm_plugin_configuration"><sys_documentation action="INSERT_OR_UPDATE"><element>select_service_portal</element><help>Select Service Portals</help><hint/><label>Select Service Portal</label><language>en</language><name>x_nuta2_nutanix_ca_calm_plugin_configuration</name><plural>Select Service Portals</plural><sys_class_name>sys_documentation</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2020-04-29 12:16:20</sys_created_on><sys_id>a68ff2dc2fa81410071ede1a2799b606</sys_id><sys_mod_count>1</sys_mod_count><sys_name>Select Service Portal</sys_name><sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_documentation_x_nuta2_nutanix_ca_calm_plugin_configuration_select_service_portal_en</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2021-05-06 14:10:31</sys_updated_on><url/><url_target/></sys_documentation></sys_documentation></record_update>]]></payload>
<payload_hash>-747603356</payload_hash>
<remote_update_set display_value="Nutanix Calm 1.4.4 Service Portal patch">05f5233707003010f76cfdac7c1ed0c0</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2021-05-18 07:53:49</sys_created_on>
<sys_id>09f5233707003010f76cfdac7c1ed0c1</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1795ba055680000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2021-05-18 07:53:49</sys_updated_on>
<table>x_nuta2_nutanix_ca_calm_plugin_configuration</table>
<target_name>Plugin Configuration.Select Service Portal</target_name>
<type>Field Label</type>
<update_domain>global</update_domain>
<update_guid>56194744fa48b010903d67fa3bd52a9a</update_guid>
<update_guid_history>56194744fa48b010903d67fa3bd52a9a:-747603356,fa8ff2dccba8141095b67e3ee5e0221e:-927666209</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sc_cat_item_b3800e3337d12300fdfc097973990e3c</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sc_cat_item"&gt;&lt;sc_cat_item action="INSERT_OR_UPDATE"&gt;&lt;access_type/&gt;&lt;active&gt;true&lt;/active&gt;&lt;availability&gt;on_desktop&lt;/availability&gt;&lt;billable&gt;false&lt;/billable&gt;&lt;category/&gt;&lt;cost&gt;0&lt;/cost&gt;&lt;custom_cart/&gt;&lt;delivery_plan/&gt;&lt;delivery_plan_script/&gt;&lt;delivery_time&gt;1970-01-03 00:00:00&lt;/delivery_time&gt;&lt;description&gt;&lt;![CDATA[&lt;p&gt;&lt;span style="font-size: 10pt; color: #000080;"&gt;This page lets you define values for the runtime attributes.&lt;/span&gt;&lt;/p&gt;]]&gt;&lt;/description&gt;&lt;display_price_property&gt;non_zero&lt;/display_price_property&gt;&lt;entitlement_script/&gt;&lt;flow_designer_flow/&gt;&lt;group/&gt;&lt;hide_sp&gt;true&lt;/hide_sp&gt;&lt;icon/&gt;&lt;ignore_price&gt;true&lt;/ignore_price&gt;&lt;image/&gt;&lt;list_price&gt;0&lt;/list_price&gt;&lt;location/&gt;&lt;mandatory_attachment&gt;false&lt;/mandatory_attachment&gt;&lt;meta/&gt;&lt;mobile_hide_price&gt;false&lt;/mobile_hide_price&gt;&lt;mobile_picture/&gt;&lt;mobile_picture_type&gt;use_desktop_picture&lt;/mobile_picture_type&gt;&lt;model/&gt;&lt;name&gt;Service Configuration&lt;/name&gt;&lt;no_attachment_v2&gt;false&lt;/no_attachment_v2&gt;&lt;no_cart&gt;true&lt;/no_cart&gt;&lt;no_cart_v2&gt;false&lt;/no_cart_v2&gt;&lt;no_delivery_time_v2&gt;false&lt;/no_delivery_time_v2&gt;&lt;no_order&gt;true&lt;/no_order&gt;&lt;no_order_now&gt;false&lt;/no_order_now&gt;&lt;no_proceed_checkout&gt;false&lt;/no_proceed_checkout&gt;&lt;no_quantity&gt;true&lt;/no_quantity&gt;&lt;no_quantity_v2&gt;false&lt;/no_quantity_v2&gt;&lt;no_search&gt;false&lt;/no_search&gt;&lt;no_wishlist_v2&gt;false&lt;/no_wishlist_v2&gt;&lt;omit_price&gt;false&lt;/omit_price&gt;&lt;order&gt;0&lt;/order&gt;&lt;ordered_item_link/&gt;&lt;picture/&gt;&lt;preview&gt;JavaScript: popupOpenStandard("com.glideapp.servicecatalog_cat_item_view.do?v=1&amp;amp;sysparm_id=b3800e3337d12300fdfc097973990e3c&amp;amp;sysparm_preview=true", "summary");&lt;/preview&gt;&lt;price&gt;0&lt;/price&gt;&lt;recurring_frequency/&gt;&lt;recurring_price&gt;0&lt;/recurring_price&gt;&lt;request_method/&gt;&lt;roles/&gt;&lt;sc_catalogs&gt;240abede37112300fdfc097973990e24&lt;/sc_catalogs&gt;&lt;sc_ic_item_staging/&gt;&lt;sc_ic_version/&gt;&lt;short_description/&gt;&lt;show_variable_help_on_load&gt;false&lt;/show_variable_help_on_load&gt;&lt;start_closed&gt;false&lt;/start_closed&gt;&lt;sys_class_name&gt;sc_cat_item&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-28 22:53:48&lt;/sys_created_on&gt;&lt;sys_id&gt;b3800e3337d12300fdfc097973990e3c&lt;/sys_id&gt;&lt;sys_mod_count&gt;12&lt;/sys_mod_count&gt;&lt;sys_name&gt;Service Configuration&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sc_cat_item_b3800e3337d12300fdfc097973990e3c&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;priyanka.more&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-05-05 13:24:12&lt;/sys_updated_on&gt;&lt;template/&gt;&lt;type&gt;item&lt;/type&gt;&lt;use_sc_layout&gt;false&lt;/use_sc_layout&gt;&lt;vendor/&gt;&lt;visible_bundle&gt;true&lt;/visible_bundle&gt;&lt;visible_guide&gt;true&lt;/visible_guide&gt;&lt;visible_standalone&gt;true&lt;/visible_standalone&gt;&lt;workflow display_value="Nutanix_Configure Calm BP Setting Workflow"&gt;68b660d837256300fdfc097973990e97&lt;/workflow&gt;&lt;/sc_cat_item&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=b3800e3337d12300fdfc097973990e3c"/&gt;&lt;fx_price action="delete_multiple" query="id=b3800e3337d12300fdfc097973990e3c"/&gt;&lt;fx_price action="INSERT_OR_UPDATE"&gt;&lt;amount&gt;0&lt;/amount&gt;&lt;currency display_value="USD"&gt;USD&lt;/currency&gt;&lt;field&gt;price&lt;/field&gt;&lt;id&gt;b3800e3337d12300fdfc097973990e3c&lt;/id&gt;&lt;parent/&gt;&lt;reference_amount&gt;0&lt;/reference_amount&gt;&lt;reference_currency display_value="USD"&gt;USD&lt;/reference_currency&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-28 22:53:48&lt;/sys_created_on&gt;&lt;sys_id&gt;fb90ca3337d12300fdfc097973990e59&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;girishgyani&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-10-28 22:53:48&lt;/sys_updated_on&gt;&lt;table&gt;sc_cat_item&lt;/table&gt;&lt;type&gt;calculated&lt;/type&gt;&lt;/fx_price&gt;&lt;fx_price action="INSERT_OR_UPDATE"&gt;&lt;amount&gt;0&lt;/amount&gt;&lt;currency display_value="USD"&gt;USD&lt;/currency&gt;&lt;field&gt;recurring_price&lt;/field&gt;&lt;id&gt;b3800e3337d12300fdfc097973990e3c&lt;/id&gt;&lt;parent/&gt;&lt;reference_amount&gt;0&lt;/reference_amount&gt;&lt;reference_currency display_value="USD"&gt;USD&lt;/reference_currency&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-28 22:53:48&lt;/sys_created_on&gt;&lt;sys_id&gt;bf90ca3337d12300fdfc097973990e5c&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;girishgyani&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-10-28 22:53:48&lt;/sys_updated_on&gt;&lt;table&gt;sc_cat_item&lt;/table&gt;&lt;type&gt;calculated&lt;/type&gt;&lt;/fx_price&gt;&lt;/record_update&gt;</payload>
<payload_hash>203785705</payload_hash>
<remote_update_set display_value="Nutanix Calm 1.4.4 Service Portal patch">05f5233707003010f76cfdac7c1ed0c0</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2021-05-18 07:53:49</sys_created_on>
<sys_id>0df5233707003010f76cfdac7c1ed0c0</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1795ba05b0d0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2021-05-18 07:53:49</sys_updated_on>
<table/>
<target_name>Service Configuration</target_name>
<type>Catalog Item</type>
<update_domain>global</update_domain>
<update_guid>cee4757b153b6010e6cf6a2fd3e3572d</update_guid>
<update_guid_history>cee4757b153b6010e6cf6a2fd3e3572d:203785705,3cd4f97ba63b60103d99b93b0bfcc5db:-2104855960,f6ec725c0ba814106f51aaede3871eca:1186379601,1482c222ab57b3000b27b47a644f2f28:-1631407839,08f1fce21c1323004f1b55ee380dbaa5:-1595638719,1401f0e25e1323001831ffcef8bf996d:9587301,81aceaf1992223000d2a34dbe91b1372:-402432739,867ce6f18e222300dfd3bb6219d38380:-1104128198,035c9fd38a79e3002498b1ca7d6796f5:1855811405,ce635c89fca12300018ac154095ca5fe:1100995265,651c79dcc1696300baad8e21631c9115:-1600988541,3390ca3303d12300d79e04232d814f62:1975679310</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_ui_action_98175968dba623000462fe1b689619fd</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_ui_action"&gt;&lt;sys_ui_action action="INSERT_OR_UPDATE"&gt;&lt;action_name/&gt;&lt;active&gt;true&lt;/active&gt;&lt;client&gt;false&lt;/client&gt;&lt;client_script_v2&gt;&lt;![CDATA[function onClick(g_form) {

}]]&gt;&lt;/client_script_v2&gt;&lt;comments/&gt;&lt;condition&gt;current.state+''=='active' &amp;amp;&amp;amp; new Nutanix_ClientServerScriptBridge().checkQueue();&lt;/condition&gt;&lt;form_action&gt;true&lt;/form_action&gt;&lt;form_button&gt;true&lt;/form_button&gt;&lt;form_button_v2&gt;false&lt;/form_button_v2&gt;&lt;form_context_menu&gt;false&lt;/form_context_menu&gt;&lt;form_link&gt;false&lt;/form_link&gt;&lt;form_menu_button_v2&gt;false&lt;/form_menu_button_v2&gt;&lt;form_style&gt;primary&lt;/form_style&gt;&lt;hint&gt;Launch Catalog Item&lt;/hint&gt;&lt;isolate_script&gt;false&lt;/isolate_script&gt;&lt;list_action&gt;true&lt;/list_action&gt;&lt;list_banner_button&gt;false&lt;/list_banner_button&gt;&lt;list_button&gt;false&lt;/list_button&gt;&lt;list_choice&gt;false&lt;/list_choice&gt;&lt;list_context_menu&gt;true&lt;/list_context_menu&gt;&lt;list_link&gt;false&lt;/list_link&gt;&lt;list_save_with_form_button&gt;false&lt;/list_save_with_form_button&gt;&lt;list_style&gt;unstyled&lt;/list_style&gt;&lt;messages/&gt;&lt;name&gt;Launch&lt;/name&gt;&lt;onclick/&gt;&lt;order&gt;69&lt;/order&gt;&lt;script&gt;&lt;![CDATA[var url = '';

var plugin_properties = new GlideRecord('x_nuta2_nutanix_ca_calm_plugin_configuration');
plugin_properties.get(gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id'));

var portal_url_suffix = plugin_properties.select_service_portal.url_suffix + '';

if (portal_url_suffix == '') {
    url = '/sp?id=sc_cat_item&amp;sys_id=' + current.item_name + '&amp;sysparm_category=' + current.item_name.category + '&amp;sysparm_id=' + current.item_name + '&amp;sysparm_link_parent=' + current.item_name.category + '&amp;sysparm_catalog=' + gs.getProperty('x_nuta2_nutanix_ca.nutanix_catalog_sysId') + '&amp;sysparm_catalog_view=catalog_nutanix_calm_catalog&amp;type=' + current.blueprint.sys_class_name + '&amp;uuid=' + current.blueprint.getRefRecord().uuid + '&amp;profileSysId=' + current.multiple_application_profile + '&amp;projectUUID=' + current.multiple_projects;
} else {
    url = '/' + portal_url_suffix + '?id=sc_cat_item&amp;sys_id=' + current.item_name + '&amp;sysparm_category=' + current.item_name.category + '&amp;sysparm_id=' + current.item_name + '&amp;sysparm_link_parent=' + current.item_name.category + '&amp;sysparm_catalog=' + gs.getProperty('x_nuta2_nutanix_ca.nutanix_catalog_sysId') + '&amp;sysparm_catalog_view=catalog_nutanix_calm_catalog&amp;type=' + current.blueprint.sys_class_name + '&amp;uuid=' + current.blueprint.getRefRecord().uuid + '&amp;profileSysId=' + current.multiple_application_profile + '&amp;projectUUID=' + current.multiple_projects;
}

//var url = '/com.glideapp.servicecatalog_cat_item_view.do?v=1&amp;sysparm_id='+current.item_name+'&amp;sysparm_link_parent='+current.item_name.category+'&amp;sysparm_catalog='+gs.getProperty('x_nuta2_nutanix_ca.nutanix_catalog_sysId')+'&amp;sysparm_catalog_view=catalog_nutanix_calm_catalog&amp;type='+current.blueprint.	sys_class_name+'&amp;uuid='+current.blueprint.getRefRecord().uuid+'&amp;profileSysId='+current.multiple_application_profile+'&amp;projectUUID='+current.multiple_projects;

if (current.state + '' == 'deleted') {

    gs.addErrorMessage("Can not launch deleted catalog item.");
    url = 'x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=b2d6d6a54f41230065e48020a310c7b7&amp;sysparm_view=catalog_view&amp;sysparm_clear_stack=true';
}

action.setRedirectURL(url);]]&gt;&lt;/script&gt;&lt;show_insert&gt;true&lt;/show_insert&gt;&lt;show_multiple_update&gt;false&lt;/show_multiple_update&gt;&lt;show_query&gt;false&lt;/show_query&gt;&lt;show_update&gt;true&lt;/show_update&gt;&lt;sys_class_name&gt;sys_ui_action&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-12-19 20:51:27&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;98175968dba623000462fe1b689619fd&lt;/sys_id&gt;&lt;sys_mod_count&gt;14&lt;/sys_mod_count&gt;&lt;sys_name&gt;Launch&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;protected&lt;/sys_policy&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_action_98175968dba623000462fe1b689619fd&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-05-10 03:45:25&lt;/sys_updated_on&gt;&lt;table&gt;x_nuta2_nutanix_ca_nutanix_runtime_configuration&lt;/table&gt;&lt;ui11_compatible&gt;true&lt;/ui11_compatible&gt;&lt;ui16_compatible&gt;false&lt;/ui16_compatible&gt;&lt;/sys_ui_action&gt;&lt;/record_update&gt;</payload>
<payload_hash>1309807028</payload_hash>
<remote_update_set display_value="Nutanix Calm 1.4.4 Service Portal patch">05f5233707003010f76cfdac7c1ed0c0</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2021-05-18 07:53:49</sys_created_on>
<sys_id>0df52fb707003010f76cfdac7c1ed0d4</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1795ba0631e0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2021-05-18 07:53:49</sys_updated_on>
<table>x_nuta2_nutanix_ca_nutanix_runtime_configuration</table>
<target_name>Launch</target_name>
<type>UI Action</type>
<update_domain>global</update_domain>
<update_guid>6860a9115800b410ebd29bd73b39aa44</update_guid>
<update_guid_history>6860a9115800b410ebd29bd73b39aa44:1309807028,bd59c8fd5e0820106274a3838fcb3b94:552333689,c03984bd54082010ef586ad01bd3b253:1361595984,0f0d7bc5e52e50505e4b99cfea30cb96:-1013252941,3c8aff453c2e505061ac0b68611430e3:1900081470,f30bf799527c50102ee557a2447c988f:668359801,2819b359d77c5010cc5de0802fa433d6:-40695638,e798b3597a7c5010513e7a36285b0ace:1394447962,b9adf25c6aa814105830126fca8cead0:1908887753,5e99005d213b3300bd761c6289334221:1193495555,7581321c461b330042d6b496d94e2495:-542158104,7a90453f103633008a48f33dc6208822:1586376577,accf6833b3363300cc07f4be447ecbcb:423156052,402688653886b300b75b2d5c5ca7356e:1637061963,32928061d286b3005258453ae30c8fa7:1724247720,3bb847d0604233003bebbe939587f2dd:1353493421,d1959ee70d9033009d00e1692ed8e8e2:-553596976,88216a64286a230060e5fb4141974c14:895774205,bc87d968a9a6230029d333a79c0e527a:-1185646041,524799683ca6230027026b1c9db467c3:1716326795</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_5023457f4f3633002aca224f9310c7c6</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Nutanix_CheckCatalogItemValidity&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Nutanix_CheckCatalogItemValidity&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Nutanix_CheckCatalogItemValidity = Class.create();
Nutanix_CheckCatalogItemValidity.prototype = {
    initialize: function() {
		this.appUtil = new Nutanix_Calm_Utils();
		this.logger = new Nutanix_Calm_Logger();
    },

	checkCatalogValidity: function(type, uuid, profileSysId, projectUUID){
		try{
						
// 			gs.info(" $$## Inside Nutanix_CheckCatalogItemValidity.checkProjectValidity");
			
			var ProjectResponse = this.appUtil.makeCalmApiCall("get", '/projects/'+projectUUID, "");
//  			gs.info("$$## project satuscode "+ProjectResponse.getStatusCode());
			if(ProjectResponse.getStatusCode() == '404' ){
				var message= this.appUtil.parse(ProjectResponse.getBody()).message_list[0];
                if(message.reason == "ENTITY_NOT_FOUND"){
// 					gs.info("$$## Project active");
					return 'INACTIVE';
				}
// 				gs.info("$$## Project inactive");
				return 'CANTCHECK';
			}
			if(type+''=='x_nuta2_nutanix_ca_nutanix_marketplaceitems')
				return this._checkMPIValidity(uuid, projectUUID);
						
			var response = this.appUtil.makeCalmApiCall("get", this.appUtil.configuration.api.getBlueprintDetail+''+uuid, "");
//             gs.info("$$## blueprint "+response.getStatusCode());
			if(response.getStatusCode() == '200' || response.getStatusCode() == '201'){

				var responseBody = this.appUtil.parse(response.getBody());
				var status = responseBody.status.state;
//                 gs.info("$$## blueprint status code : "+status);
				if(status+'' == 'ACTIVE')
					return 'ACTIVE';
				else
					return 'INACTIVE';

			}else{
				this.logger.debug("### Error while retrieving Blueprints  " + this.appUtil.configuration.api.getBlueprintDetail+uuid + " :"+response.getBody());
				this.logger.error("### Error while retrieving Blueprints  " + this.appUtil.configuration.api.getBlueprintDetail+uuid);

				return 'CANTCHECK';
			}	
		}catch(e){
			
			this.logger.error("Exception caught inside Nutanix_CheckCatalogItemValidity.checkCatalogValidity. Error :- "+e);
		}
	},
	
	_checkMPIValidity: function(uuid, projectUUID){
		
		try{
			
			this.logger.debug("Inside Nutanix_CheckCatalogItemValidity.checkBlueprintVali_checkMPIValiditydity");
			var response = this.appUtil.makeCalmApiCall("get", this.appUtil.configuration.api.getMarketplaceItemDetail+uuid, "");

			if(response.getStatusCode() == '200' || response.getStatusCode() == '201'){

				var responseBody = this.appUtil.parse(response.getBody());
				var state = responseBody.status.resources.app_state;

				var flag = 0;
				var projectList = responseBody.status.resources.project_reference_list;
				
				for(var i in projectList)
					if(projectList[i].uuid+'' == projectUUID+''){
						flag = 1;
						break;
					}
				
				if(state+'' == 'PUBLISHED' &amp;&amp; flag==1)
					return 'ACTIVE';
				else
					return 'INACTIVE';
         
			}else{
				this.logger.debug("Error while retrieving MPI  " + this.appUtil.configuration.api.getMarketplaceItemDetail+uuid + ": "+response.getBody());
				this.logger.error("Error while retrieving MPI  " + this.appUtil.configuration.api.getMarketplaceItemDetail+uuid);

				return 'CANTCHECK';
			}	
		}catch(e){

			this.logger.error("Exception caught inside Nutanix_CheckCatalogItemValidity._checkMPIValidity. Error :- "+e);
		}
	},
	
	_checkProfileValidity: function(profileList, profileSysId){
		gs.info("$$## _checkProfileValidity profileList : "+profileList+" profileSysId "+profileSysId);
		var gr = new GlideRecord(this.appUtil.configuration.table.applicationProfiles+'');
		if(gr.get(profileSysId+'')){
		gs.info("$$## profileList "+JSON.stringify(profileList)+"  Profile uuid "+gr.uuid);	
			
			for(var i in profileList){
				
				var profile = profileList[i];
				
				if(profile.uuid+'' == gr.uuid+''){
 					gs.info("$$## profile active")
					return 'ACTIVE';
				}
			}
			
		}
 		gs.info("$$## profile inactive");
		return 'INACTIVE';
		
	},
		
	checkCatalogValidityMultiProjectProfile: function(type, uuid, profileSysIds, projectSysIds){
		try{
						
			this.logger.debug("Inside Nutanix_CheckCatalogItemValidity.checkProjectValidity");
			
			var projectSysId = projectSysIds.split(',');
			for(var k=0; k&lt; projectSysId.length; k++){
				
				var project = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
				if(project.get(projectSysId[k])){
					var projectUUID = project.uuid;
				}
				var ProjectResponse = this.appUtil.makeCalmApiCall("get", '/projects/'+projectUUID, "");
			
				if(ProjectResponse.getStatusCode() == '404' ){
					var message= this.appUtil.parse(ProjectResponse.getBody()).message_list[0];
					if(message.reason == "ENTITY_NOT_FOUND"){
						return 'INACTIVE';
					}
					return 'CANTCHECK';
				}
				
				if(type+''=='x_nuta2_nutanix_ca_nutanix_marketplaceitems')
						return this._checkMPIValidity(uuid, projectUUID);
				var response = this.appUtil.makeCalmApiCall("get", this.appUtil.configuration.api.getBlueprintDetail+''+uuid, "");
				
				if(response.getStatusCode() == '200' || response.getStatusCode() == '201'){
					var responseBody = this.appUtil.parse(response.getBody());
					var status = responseBody.status.state;
					var profileSysId = profileSysIds.split(',');
					for(var j =0; j&lt; profileSysId.length; j++){
							if(status+'' == 'ACTIVE' &amp;&amp; this._checkProfileValidity(responseBody.status.resources.app_profile_list, profileSysId[j])+'' == 'ACTIVE')
								return 'ACTIVE';
							else
								return 'INACTIVE';
					}
					
					

				}else{
					this.logger.debug("Error while retrieving Blueprints  " + this.appUtil.configuration.api.getBlueprintDetail+uuid + " :"+response.getBody());
					this.logger.error("Error while retrieving Blueprints  " + this.appUtil.configuration.api.getBlueprintDetail+uuid);

					return 'CANTCHECK';
				}
			}
		}catch(e){
			this.logger.error("Exception caught inside Nutanix_CheckCatalogItemValidity.checkCatalogValidityMultiProjectProfile. Error :- "+e);
		}
	},	
    type: 'Nutanix_CheckCatalogItemValidity'
	
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2019-07-29 04:11:28&lt;/sys_created_on&gt;&lt;sys_id&gt;5023457f4f3633002aca224f9310c7c6&lt;/sys_id&gt;&lt;sys_mod_count&gt;40&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_CheckCatalogItemValidity&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_5023457f4f3633002aca224f9310c7c6&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-05-06 14:03:28&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>860870957</payload_hash>
<remote_update_set display_value="Nutanix Calm 1.4.4 Service Portal patch">05f5233707003010f76cfdac7c1ed0c0</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2021-05-18 07:53:49</sys_created_on>
<sys_id>41f5233707003010f76cfdac7c1ed0c2</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1795ba05dd50000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2021-05-18 07:53:49</sys_updated_on>
<table/>
<target_name>Nutanix_CheckCatalogItemValidity</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>be7787c08e48b01056bc3745cb36df57</update_guid>
<update_guid_history>be7787c08e48b01056bc3745cb36df57:860870957,8976cd0ff8ed241075b615ba008efd2e:-983558555,467d4ece32e5a010171eed80cbc2c75e:60992055,915bc6cab3e5a010282272696193f932:-463512142,7869824a42e5a0100b83e38ec3928067:-469675085,3ce22a3160ad60101d786ed66ec3d708:1342562517,3b0dc4cd8904a010f04ba5e34220a9e9:-1352512584,5fea78f52f57141016009671c1360df7:1197099526,b76a4f10d21f1010864111f09059e385:-1259429600,daa0986d1c0f9c90a733b72145e35d75:566344511,9630182d000f9c9016aaa708679be1d2:46352444,34fd04a1fc0f9c909a4908afd694049f:-1604998770,9605731da2cb9c904a8aaf303c5f1bcf:-1653892495,b5f6981d636e505055f856e1fc2f2967:-1888561239,d8a518d97e6e50509597247ef99d17d3:427138243,c1453e5f39cbcc50785f1dab0475d889:1641131763,e9bc0c1f5207cc502255c0451af01abf:704492876,f4c71fdaf3034c507a603a097041bea4:126065645,325a089a8a0b0c50b4e7127b440db18d:1339481864,e67eb782d50b0c50ba1efc6f6694d3ac:216843889,4d3ff175a147c8508c1e76e203d14d07:-1800647034,61344b572c2e48103785932fbc8c34a9:-2121985943,3210cf53222e4810ef092fed4a27929b:-1362240749,3c0b3e9f21ea481084e060e0a7ed6f38:-273983492,c9d9be5fe6ea481001b1f10c7f83ed60:-1425606031,35a8fedb6bea48107922099285f78aea:-273983492,47d6325b68ea4810c99bcedf898b12e5:-1028651244,9aec8811317b330016d34eb4777a1d73:-986590552,19eed6f8aea333002b161cb61a760564:1433261850,69515bdc245b330044eed6fb023596e9:-1943058904,947dcf1cca5b3300d7ed28a73942323e:343779661,0e2d4b1c7e5b33006035ff7c1b20cbc1:1563273798,0acc43dc335b330083be119134900034:-2027857461,7b78071cca5b3300727c4df94b4fec33:1227069165,f258875c781b330023f153a88318f3a5:2065138965,53b576dcfd1b3300b69b5b89b3b5fd3b:-897834836,e5078173037633008d35fb26563228a7:-1037415761,8e56c53304763300fa081291e400da26:-1399955379,023645337a763300b7f9f7ffba2c3d7b:-1713245052,5b25c5bf5e363300739c33ea50accba5:1790253638,3e5341bf4a363300dfd0f6c1e023d1e8:1449962508</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_dictionary_x_nuta2_nutanix_ca_calm_plugin_configuration_select_service_portal</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update&gt;&lt;sys_dictionary action="INSERT_OR_UPDATE" element="select_service_portal" table="x_nuta2_nutanix_ca_calm_plugin_configuration"&gt;&lt;active&gt;true&lt;/active&gt;&lt;array&gt;false&lt;/array&gt;&lt;array_denormalized&gt;false&lt;/array_denormalized&gt;&lt;attributes/&gt;&lt;audit&gt;false&lt;/audit&gt;&lt;calculation&gt;&lt;![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]&gt;&lt;/calculation&gt;&lt;choice/&gt;&lt;choice_field/&gt;&lt;choice_table/&gt;&lt;column_label&gt;Select Service Portal&lt;/column_label&gt;&lt;comments/&gt;&lt;create_roles/&gt;&lt;default_value/&gt;&lt;defaultsort/&gt;&lt;delete_roles/&gt;&lt;dependent/&gt;&lt;dependent_on_field/&gt;&lt;display&gt;false&lt;/display&gt;&lt;dynamic_creation&gt;false&lt;/dynamic_creation&gt;&lt;dynamic_creation_script/&gt;&lt;dynamic_default_value/&gt;&lt;dynamic_ref_qual/&gt;&lt;element&gt;select_service_portal&lt;/element&gt;&lt;element_reference&gt;false&lt;/element_reference&gt;&lt;foreign_database/&gt;&lt;function_definition/&gt;&lt;function_field&gt;false&lt;/function_field&gt;&lt;internal_type display_value="Reference"&gt;reference&lt;/internal_type&gt;&lt;mandatory&gt;true&lt;/mandatory&gt;&lt;max_length&gt;32&lt;/max_length&gt;&lt;name&gt;x_nuta2_nutanix_ca_calm_plugin_configuration&lt;/name&gt;&lt;next_element/&gt;&lt;primary&gt;false&lt;/primary&gt;&lt;read_only&gt;false&lt;/read_only&gt;&lt;read_roles/&gt;&lt;reference display_value="" name="sp_portal"&gt;sp_portal&lt;/reference&gt;&lt;reference_cascade_rule/&gt;&lt;reference_floats&gt;false&lt;/reference_floats&gt;&lt;reference_key/&gt;&lt;reference_qual/&gt;&lt;reference_qual_condition/&gt;&lt;reference_type/&gt;&lt;sizeclass/&gt;&lt;spell_check&gt;false&lt;/spell_check&gt;&lt;staged&gt;false&lt;/staged&gt;&lt;sys_class_name&gt;sys_dictionary&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-04-29 12:16:20&lt;/sys_created_on&gt;&lt;sys_id&gt;304f32dc2fa81410071ede1a2799b60c&lt;/sys_id&gt;&lt;sys_mod_count&gt;2&lt;/sys_mod_count&gt;&lt;sys_name&gt;Select Service Portal&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_dictionary_x_nuta2_nutanix_ca_calm_plugin_configuration_select_service_portal&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-05-06 14:09:43&lt;/sys_updated_on&gt;&lt;table_reference&gt;false&lt;/table_reference&gt;&lt;text_index&gt;false&lt;/text_index&gt;&lt;unique&gt;false&lt;/unique&gt;&lt;use_dependent_field&gt;false&lt;/use_dependent_field&gt;&lt;use_dynamic_default&gt;false&lt;/use_dynamic_default&gt;&lt;use_reference_qualifier&gt;simple&lt;/use_reference_qualifier&gt;&lt;virtual&gt;false&lt;/virtual&gt;&lt;widget/&gt;&lt;write_roles/&gt;&lt;xml_view&gt;false&lt;/xml_view&gt;&lt;/sys_dictionary&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1290785771</payload_hash>
<remote_update_set display_value="Nutanix Calm 1.4.4 Service Portal patch">05f5233707003010f76cfdac7c1ed0c0</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2021-05-18 07:53:49</sys_created_on>
<sys_id>45f5233707003010f76cfdac7c1ed0c1</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1795ba057200000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2021-05-18 07:53:49</sys_updated_on>
<table>x_nuta2_nutanix_ca_calm_plugin_configuration</table>
<target_name>Plugin Configuration.Select Service Portal</target_name>
<type>Dictionary</type>
<update_domain>global</update_domain>
<update_guid>6ee8c344ec48b0100f5f07d38a64901f</update_guid>
<update_guid_history>6ee8c344ec48b0100f5f07d38a64901f:-1290785771,f3d84344a148b010f6b5cb5a637e28f1:1933379704,368ff2dc62a814104433695f84e7231d:-1290785771</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sc_cat_item_12f00e3337d12300fdfc097973990e35</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sc_cat_item"&gt;&lt;sc_cat_item action="INSERT_OR_UPDATE"&gt;&lt;access_type/&gt;&lt;active&gt;true&lt;/active&gt;&lt;availability&gt;on_desktop&lt;/availability&gt;&lt;billable&gt;false&lt;/billable&gt;&lt;category/&gt;&lt;cost&gt;0&lt;/cost&gt;&lt;custom_cart/&gt;&lt;delivery_plan/&gt;&lt;delivery_plan_script/&gt;&lt;delivery_time&gt;1970-01-03 00:00:00&lt;/delivery_time&gt;&lt;description&gt;&lt;![CDATA[&lt;p&gt;&lt;span style="font-size: 10pt; color: #000080;"&gt;This page lets you configure credential. Secret property can be set on runtime attributes that allows ServiceNow to mask the user entered values for security.  In case of multiple credentials configured, Calm admin can choose to map the right credential in Project -&amp;gt; Environment to the MPI credential.&lt;/span&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;&lt;/p&gt;]]&gt;&lt;/description&gt;&lt;display_price_property&gt;non_zero&lt;/display_price_property&gt;&lt;entitlement_script/&gt;&lt;flow_designer_flow/&gt;&lt;group/&gt;&lt;hide_sp&gt;true&lt;/hide_sp&gt;&lt;icon/&gt;&lt;ignore_price&gt;true&lt;/ignore_price&gt;&lt;image/&gt;&lt;list_price&gt;0&lt;/list_price&gt;&lt;location/&gt;&lt;mandatory_attachment&gt;false&lt;/mandatory_attachment&gt;&lt;meta/&gt;&lt;mobile_hide_price&gt;false&lt;/mobile_hide_price&gt;&lt;mobile_picture/&gt;&lt;mobile_picture_type&gt;use_desktop_picture&lt;/mobile_picture_type&gt;&lt;model/&gt;&lt;name&gt;Credentials&lt;/name&gt;&lt;no_attachment_v2&gt;false&lt;/no_attachment_v2&gt;&lt;no_cart&gt;true&lt;/no_cart&gt;&lt;no_cart_v2&gt;false&lt;/no_cart_v2&gt;&lt;no_delivery_time_v2&gt;false&lt;/no_delivery_time_v2&gt;&lt;no_order&gt;true&lt;/no_order&gt;&lt;no_order_now&gt;false&lt;/no_order_now&gt;&lt;no_proceed_checkout&gt;false&lt;/no_proceed_checkout&gt;&lt;no_quantity&gt;true&lt;/no_quantity&gt;&lt;no_quantity_v2&gt;false&lt;/no_quantity_v2&gt;&lt;no_search&gt;false&lt;/no_search&gt;&lt;no_wishlist_v2&gt;false&lt;/no_wishlist_v2&gt;&lt;omit_price&gt;false&lt;/omit_price&gt;&lt;order&gt;0&lt;/order&gt;&lt;ordered_item_link/&gt;&lt;picture/&gt;&lt;preview&gt;JavaScript: popupOpenStandard("com.glideapp.servicecatalog_cat_item_view.do?v=1&amp;amp;sysparm_id=12f00e3337d12300fdfc097973990e35&amp;amp;sysparm_preview=true", "summary");&lt;/preview&gt;&lt;price&gt;0&lt;/price&gt;&lt;recurring_frequency/&gt;&lt;recurring_price&gt;0&lt;/recurring_price&gt;&lt;request_method/&gt;&lt;roles/&gt;&lt;sc_catalogs&gt;240abede37112300fdfc097973990e24&lt;/sc_catalogs&gt;&lt;sc_ic_item_staging/&gt;&lt;sc_ic_version/&gt;&lt;short_description/&gt;&lt;show_variable_help_on_load&gt;false&lt;/show_variable_help_on_load&gt;&lt;start_closed&gt;false&lt;/start_closed&gt;&lt;sys_class_name&gt;sc_cat_item&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-28 22:55:33&lt;/sys_created_on&gt;&lt;sys_id&gt;12f00e3337d12300fdfc097973990e35&lt;/sys_id&gt;&lt;sys_mod_count&gt;11&lt;/sys_mod_count&gt;&lt;sys_name&gt;Credentials&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sc_cat_item_12f00e3337d12300fdfc097973990e35&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;priyanka.more&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-05-05 13:24:39&lt;/sys_updated_on&gt;&lt;template/&gt;&lt;type&gt;item&lt;/type&gt;&lt;use_sc_layout&gt;false&lt;/use_sc_layout&gt;&lt;vendor/&gt;&lt;visible_bundle&gt;true&lt;/visible_bundle&gt;&lt;visible_guide&gt;true&lt;/visible_guide&gt;&lt;visible_standalone&gt;true&lt;/visible_standalone&gt;&lt;workflow display_value="Nutanix_Configure Calm BP Setting Workflow"&gt;68b660d837256300fdfc097973990e97&lt;/workflow&gt;&lt;/sc_cat_item&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=12f00e3337d12300fdfc097973990e35"/&gt;&lt;fx_price action="delete_multiple" query="id=12f00e3337d12300fdfc097973990e35"/&gt;&lt;fx_price action="INSERT_OR_UPDATE"&gt;&lt;amount&gt;0&lt;/amount&gt;&lt;currency display_value="USD"&gt;USD&lt;/currency&gt;&lt;field&gt;price&lt;/field&gt;&lt;id&gt;12f00e3337d12300fdfc097973990e35&lt;/id&gt;&lt;parent/&gt;&lt;reference_amount&gt;0&lt;/reference_amount&gt;&lt;reference_currency display_value="USD"&gt;USD&lt;/reference_currency&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-28 22:55:33&lt;/sys_created_on&gt;&lt;sys_id&gt;85018e3337d12300fdfc097973990ee6&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;girishgyani&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-10-28 22:55:33&lt;/sys_updated_on&gt;&lt;table&gt;sc_cat_item&lt;/table&gt;&lt;type&gt;calculated&lt;/type&gt;&lt;/fx_price&gt;&lt;fx_price action="INSERT_OR_UPDATE"&gt;&lt;amount&gt;0&lt;/amount&gt;&lt;currency display_value="USD"&gt;USD&lt;/currency&gt;&lt;field&gt;recurring_price&lt;/field&gt;&lt;id&gt;12f00e3337d12300fdfc097973990e35&lt;/id&gt;&lt;parent/&gt;&lt;reference_amount&gt;0&lt;/reference_amount&gt;&lt;reference_currency display_value="USD"&gt;USD&lt;/reference_currency&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-28 22:55:33&lt;/sys_created_on&gt;&lt;sys_id&gt;cd018e3337d12300fdfc097973990ee7&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;girishgyani&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-10-28 22:55:33&lt;/sys_updated_on&gt;&lt;table&gt;sc_cat_item&lt;/table&gt;&lt;type&gt;calculated&lt;/type&gt;&lt;/fx_price&gt;&lt;/record_update&gt;</payload>
<payload_hash>1132283946</payload_hash>
<remote_update_set display_value="Nutanix Calm 1.4.4 Service Portal patch">05f5233707003010f76cfdac7c1ed0c0</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2021-05-18 07:53:49</sys_created_on>
<sys_id>49f5233707003010f76cfdac7c1ed0c0</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1795ba05ab00000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2021-05-18 07:53:49</sys_updated_on>
<table/>
<target_name>Credentials</target_name>
<type>Catalog Item</type>
<update_domain>global</update_domain>
<update_guid>6805fd7bf33b601071a599c13a7cfa25</update_guid>
<update_guid_history>6805fd7bf33b601071a599c13a7cfa25:1132283946,02f47d7b393b6010418dad5e0865d1b6:-109803537,90fcb61caba814104239dcf1d1d57ed8:-294821486,3b4202227157b3005b80eb38d23b0dc9:-1975968436,8802f8a29c132300f5c97afd7e1d6e1f:-779752376,5081b8625313230047beec5ebea43c07:1174084155,d88ce6f117222300d4f24d99c53daf87:1218511744,005c1fd3c779e30007fa18d9ba4bee62:-1758688287,2663d48980a123007437f84839e1a779:-69003139,3e1c79dccb696300cc063242afe98dc3:1390136409,89018e33cdd12300df595ee0acd587ec:1125792904</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_ui_action_1a695350dba223000462fe1b6896197b</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_ui_action"&gt;&lt;sys_ui_action action="INSERT_OR_UPDATE"&gt;&lt;action_name/&gt;&lt;active&gt;true&lt;/active&gt;&lt;client&gt;false&lt;/client&gt;&lt;client_script_v2&gt;&lt;![CDATA[function onClick(g_form) {

}]]&gt;&lt;/client_script_v2&gt;&lt;comments/&gt;&lt;condition&gt;current.active==true &amp;amp;&amp;amp; current.sys_class_name=='x_nuta2_nutanix_ca_nutanix_catalog_items'&amp;amp;&amp;amp;new Nutanix_ClientServerScriptBridge().checkQueue();&lt;/condition&gt;&lt;form_action&gt;true&lt;/form_action&gt;&lt;form_button&gt;true&lt;/form_button&gt;&lt;form_button_v2&gt;false&lt;/form_button_v2&gt;&lt;form_context_menu&gt;false&lt;/form_context_menu&gt;&lt;form_link&gt;false&lt;/form_link&gt;&lt;form_menu_button_v2&gt;false&lt;/form_menu_button_v2&gt;&lt;form_style&gt;primary&lt;/form_style&gt;&lt;hint&gt;Launch Catalog Item&lt;/hint&gt;&lt;isolate_script&gt;false&lt;/isolate_script&gt;&lt;list_action&gt;true&lt;/list_action&gt;&lt;list_banner_button&gt;false&lt;/list_banner_button&gt;&lt;list_button&gt;false&lt;/list_button&gt;&lt;list_choice&gt;false&lt;/list_choice&gt;&lt;list_context_menu&gt;true&lt;/list_context_menu&gt;&lt;list_link&gt;false&lt;/list_link&gt;&lt;list_save_with_form_button&gt;false&lt;/list_save_with_form_button&gt;&lt;list_style&gt;unstyled&lt;/list_style&gt;&lt;messages/&gt;&lt;name&gt;Launch&lt;/name&gt;&lt;onclick/&gt;&lt;order&gt;70&lt;/order&gt;&lt;script&gt;&lt;![CDATA[var cat_item = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
cat_item.addQuery('item_name', current.sys_id);
cat_item.query();
cat_item.next();

var plugin_properties = new GlideRecord('x_nuta2_nutanix_ca_calm_plugin_configuration');
plugin_properties.get(gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id'));
var portal_url_suffix = plugin_properties.select_service_portal.url_suffix + '';
var url = '';
if (portal_url_suffix == '') {
    url = '/sp?id=sc_cat_item&amp;sys_id=' + cat_item.item_name + '&amp;sysparm_category=' + cat_item.item_name.category + '&amp;sysparm_id=' + current.sys_id + '&amp;sysparm_link_parent=' + current.category + '&amp;sysparm_catalog=' + gs.getProperty('x_nuta2_nutanix_ca.nutanix_catalog_sysId') + '&amp;sysparm_catalog_view=catalog_nutanix_calm_catalog&amp;type=' + cat_item.blueprint.sys_class_name + '&amp;uuid=' + cat_item.blueprint.getRefRecord().uuid + '&amp;profileSysId' + cat_item.multiple_application_profile + '&amp;projectUUID=' + cat_item.multiple_projects;
} else {
    url = '/' + portal_url_suffix + '?id=sc_cat_item&amp;sys_id=' + cat_item.item_name + '&amp;sysparm_category=' + cat_item.item_name.category + '&amp;sysparm_id=' + current.sys_id + '&amp;sysparm_link_parent=' + current.category + '&amp;sysparm_catalog=' + gs.getProperty('x_nuta2_nutanix_ca.nutanix_catalog_sysId') + '&amp;sysparm_catalog_view=catalog_nutanix_calm_catalog&amp;type=' + cat_item.blueprint.sys_class_name + '&amp;uuid=' + cat_item.blueprint.getRefRecord().uuid + '&amp;profileSysId' + cat_item.multiple_application_profile + '&amp;projectUUID=' + cat_item.multiple_projects;
}


/*var cat_item = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
cat_item.addQuery('item_name', current.sys_id);
cat_item.query();
cat_item.next();

var url = '/com.glideapp.servicecatalog_cat_item_view.do?v=1&amp;sysparm_id='+current.sys_id+'&amp;sysparm_link_parent='+current.category+'&amp;sysparm_catalog='+gs.getProperty('x_nuta2_nutanix_ca.nutanix_catalog_sysId')+'&amp;sysparm_catalog_view=catalog_nutanix_calm_catalog&amp;type='+cat_item.blueprint.sys_class_name+'&amp;uuid='+cat_item.blueprint.getRefRecord().uuid+'&amp;profileSysId'+cat_item.multiple_application_profile+'&amp;projectUUID='+cat_item.multiple_projects;*/


if (cat_item.state + '' == 'deleted') {

    gs.addErrorMessage("Can not launch deleted catalog item.");
    url = 'x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=b2d6d6a54f41230065e48020a310c7b7&amp;sysparm_view=catalog_view&amp;sysparm_clear_stack=true';
}

action.setRedirectURL(url);]]&gt;&lt;/script&gt;&lt;show_insert&gt;true&lt;/show_insert&gt;&lt;show_multiple_update&gt;false&lt;/show_multiple_update&gt;&lt;show_query&gt;false&lt;/show_query&gt;&lt;show_update&gt;true&lt;/show_update&gt;&lt;sys_class_name&gt;sys_ui_action&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-12-19 11:43:35&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;1a695350dba223000462fe1b6896197b&lt;/sys_id&gt;&lt;sys_mod_count&gt;24&lt;/sys_mod_count&gt;&lt;sys_name&gt;Launch&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;protected&lt;/sys_policy&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_action_1a695350dba223000462fe1b6896197b&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-05-10 03:45:36&lt;/sys_updated_on&gt;&lt;table&gt;x_nuta2_nutanix_ca_nutanix_catalog_items&lt;/table&gt;&lt;ui11_compatible&gt;true&lt;/ui11_compatible&gt;&lt;ui16_compatible&gt;false&lt;/ui16_compatible&gt;&lt;/sys_ui_action&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1023387843</payload_hash>
<remote_update_set display_value="Nutanix Calm 1.4.4 Service Portal patch">05f5233707003010f76cfdac7c1ed0c0</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2021-05-18 07:53:49</sys_created_on>
<sys_id>49f52fb707003010f76cfdac7c1ed0d4</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1795ba062ed0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2021-05-18 07:53:49</sys_updated_on>
<table>x_nuta2_nutanix_ca_nutanix_catalog_items</table>
<target_name>Launch</target_name>
<type>UI Action</type>
<update_domain>global</update_domain>
<update_guid>5360a9116c00b410c09481163cad24ba</update_guid>
<update_guid_history>5360a9116c00b410c09481163cad24ba:-1023387843,d6f900fdc808201083564b85034d009f:1276183142,c6fcb7c9a22e505099eabfc2e5641e7b:-562828697,ab9833c1b92e5050a73c5e7f70e4d568:-195542110,2e0e3a1cfea8141021bed3f910bbd3e4:1942076265,c372f2dbb3cbcc502a032e7dadac4fa8:-687028749,1e71735230c34c5047c07897649c63ac:-962397384,b9bee35e14834c50b104aa7a03ae7bda:-1716358759,9b7ee35e95834c507824c76d90a109d4:-638635806,a99dc7140c4233004055644d3a108ca5:1929736385,a99dc7140c4233004055644d3a108ca5:1929736385,8fb552e7ed903300f6792eadc5728ba6:-1695066870,d6bc5bd0d5a22300f57412fc7a5fd83d:1546069094,222c53d0ada223006bede782235c81c2:-1870942065,0abb53d0f1a22300c2763cac258e334f:-378706464,efab53d05ea22300fc294bb1593fbf4a:2011585502,bc9b9f90a2a22300916a4482834250a2:1059247837,ee8b9f9041a223006c0e26562961e09e:2011585502,f37b1f90d4a2230016366145af3f1a15:-378706464,8f5b5b9065a22300a7de0daf423d3562:-540402995,9f3b1b90aea223005525cb0036147906:1098075635,3f1b579065a22300a5876b6ce5bd04b1:923359051,910b979056a2230023704339eada4e05:1098075635,20ea5f502aa22300c65697200097d15f:-1763608463,46ca93909ea22300914a8642a34d780b:-1774249897,cb0a9fdc0c62230029c5e274fcbef695:123831652,090a53509ea22300c5e1630fd1872e05:-2092582390,99e99fdc166223004d0017b9db70b6bb:1486411806</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_99b80fbd37022300d27b8cf6c3990efb</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Nutanix_RequestUtil&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Nutanix_RequestUtil&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Nutanix_RequestUtil = Class.create();
Nutanix_RequestUtil.prototype = {
    initialize: function() {
		this.sub_deploy_rel = {};
		this.deploy_pack_rel = {};
		this.pack_serv_rel = {};
		
		this.current = '';
		
		this.exclusionList = gs.getProperty('x_nuta2_nutanix_ca.exclusion.list')+'';
		this.disabledFields = gs.getProperty('x_nuta2_nutanix_ca.disabled.fields')+'';
		
		this.bpType = '';
		this.logger = new Nutanix_Calm_Logger();
    },
	
	transformTempBody: function(tmpbody, clonedJSON){
	//Logs to check the status.	
// 		gs.error("Tmpbody ::: " + JSON.stringify(tmpbody));
// 		gs.error("ASD ::: " + JSON.stringify(clonedJSON));
		
		tmpbody.status.resources.substrate_definition_list = this._transformSubstrate(tmpbody.status.resources.substrate_definition_list, clonedJSON.status.resources.substrate_definition_list);
		tmpbody.spec.resources.substrate_definition_list = this._transformSubstrate(tmpbody.spec.resources.substrate_definition_list, clonedJSON.spec.resources.substrate_definition_list);
		return tmpbody;
	},
	
	_transformSubstrate: function(tmpSubstrate, clonedSubstrate){
		
		for(var i in tmpSubstrate){
			var matchingSubstrate = this._getMatchingSubstarteIndex(tmpSubstrate[i], clonedSubstrate);
			tmpSubstrate[i] = this._makeNewSubstrate(tmpSubstrate[i], clonedSubstrate[ (matchingSubstrate)?matchingSubstrate:i ] );
		}		
		
		return tmpSubstrate;
	},
	
	_makeNewSubstrate: function(tmpSubstrate, clonedSubstrate){
		
		tmpSubstrate.editables = clonedSubstrate.editables;
		//tmpSubstrate.create_spec = clonedSubstrate.create_spec;		
		
		tmpSubstrate.readiness_probe = clonedSubstrate.readiness_probe;		
		
		for(var i in tmpSubstrate.readiness_probe){
			
			if( i+'' == 'login_credential_local_reference' )
				continue;
			
			tmpSubstrate.readiness_probe[i] = clonedSubstrate.readiness_probe[i];		
		}
		
		return tmpSubstrate;
	},
	
	_getMatchingSubstarteIndex: function(tmpSubstrate, clonedSubstrateArray){
		
		for(var i in clonedSubstrateArray)
			if(clonedSubstrateArray[i].name+'' == tmpSubstrate.name+'' &amp;&amp; clonedSubstrateArray[i].type+'' == tmpSubstrate.type+'')
				return i;
	},
	
	makeResourceBody: function(response, resources, current){
		try{
			this.current = current;
			var variables = this.current.variables;
			this.logger.debug("Inside Nutanix_RequestUtil.makeResourceBody.");			

			this.bpType = (response.metadata.categories &amp;&amp; response.metadata.categories.TemplateType) ? response.metadata.categories.TemplateType+'' : "";
			var makeRel = {
				"substrate_definition_list": resources.substrate_definition_list,
				"app_profile_list": resources.app_profile_list,
				"service_definition_list": resources.service_definition_list,
				"package_definition_list": resources.package_definition_list
			};

			this._makeRelations(makeRel);
						
			return this._makeRequestBody(response, variables);
		}catch(e){
			this.logger.error("Nutanix_RequestUtil.makeResourceBody :- Exception while parsing request variables. Error :- "+e);
		}
	},
	
	_makeRequestBody: function (response, variables){

		try{
			this.logger.debug("Inside Nutanix_RequestUtil._makeRequestBody.");			
			var specRes = response.spec.resources;
			var statsuRes = response.status.resources;

			response.spec.resources.service_definition_list = this._fillServiceValue(statsuRes.service_definition_list, specRes.service_definition_list);
			response.spec.resources.substrate_definition_list = this._fillSubstrateValue(statsuRes.substrate_definition_list, specRes.substrate_definition_list);
			response.spec.resources.app_profile_list = this._fillAppProfileValue(statsuRes.app_profile_list, specRes.app_profile_list);
			response.spec.resources.credential_definition_list = this._fillCredebtialsValue(statsuRes.credential_definition_list, specRes.credential_definition_list);
			
			var replaceNull = JSON.stringify(response.spec.resources);
			replaceNull = replaceNull.replace(/"null"/g, "null");
			replaceNull = JSON.parse(replaceNull);
			
			return replaceNull;
			
			//return response.spec.resources;
		}catch(e){
			this.logger.debug("Nutanix_RequestUtil._makeRequestBody :- Exception caught while making request body for sending request data. Error :- "+e);
			this.logger.error("Exception caught while making request body for sending request data. Error :- "+e);
		}
	},
	
	_fillCredebtialsValue: function(status, specs){
		
		try{
			this.logger.debug("Inside Nutanix_RequestUtil._fillCredebtialsValue.");			
			for(var i in status){
				var credName = status[i].name.toLowerCase().replace(/ /g, '_'	);

				//specs[i].name = this._getValue(this.current.variables[credName+'_credential_name']+'', typeof specs[i].name);
				specs[i].username  = specs[i].username+'';
				
				//specs[i].username  = this._getValue(this.current.variables[credName+'_username']+'', typeof specs[i].username);
				//specs[i].type  = this._getValue(this.current.variables[credName+'_secret_type']+'', typeof specs[i].type);
				
				if(this.current.variables[credName+'_credential_reference']){
					specs[i].editables.clone_from_reference={
						"kind": "app_credential",
						"uuid": this.current.variables[credName+'_credential_reference']+''
					};
				}else{
					if(this.current.variables[credName+'_ssh_private_key'] || this.current.variables[credName+'_password']){
						
						specs[i].secret.attrs.is_secret_modified = true;
						specs[i].secret.value = (this.current.variables[credName+'_ssh_private_key'])?(this.current.variables[credName+'_ssh_private_key']+'').replace(/\r\n/g,'\n'):this.current.variables[credName+'_password']+'';
					}
					
					if(this.current.variables[credName+'_passphrase']){
						specs[i].passphrase = {
							"attrs": {
								"is_secret_modified": true
							},
							"value": (this.current.variables[credName+'_passphrase'])?(this.current.variables[credName+'_passphrase']+''):this.current.variables[credName+'_password']+''
						};
					}	
				}

			}
			
			return specs;
		}catch(e){
			this.logger.error("Nutanix_RequestUtil._fillCredebtialsValue :- Exception while filling credentials variables values. Error :- "+e);
		}
	},
	
	_fillAppProfileValue: function(status, specs){
		
		try{
			this.logger.debug("Inside Nutanix_RequestUtil._fillAppProfileValue.");	
			gs.info("c sys_id "+this.current.cat_item+" | application name : "+this.current.variables.default_profile);
			var catalog_item_sys_id = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
			catalog_item_sys_id.addQuery('item_name', this.current.cat_item+'');
			catalog_item_sys_id.query();
			if(catalog_item_sys_id.next()){
				var catalog_sys_id = catalog_item_sys_id.blueprint;
			    gs.info("Nutanix_RequestUtil._fillAppProfileValue catalog_item_sys_id : "+catalog_item_sys_id.blueprint);
			}
			var profile_name = ((this.current.variables.default_profile+'').trim())+'';
			var blueprint_profile = new GlideRecord('x_nuta2_nutanix_ca_catalog_item_and_application_profile_relation');
			blueprint_profile.addQuery('catalog_item.sys_id='+catalog_sys_id+'^application_profile.name='+profile_name);
			blueprint_profile.query();
			if(blueprint_profile.next()){
			 var profile_sys_id = blueprint_profile.application_profile.sys_id;
			 gs.info("Nutanix_RequestUtil._fillAppProfileValue blueprint_profile : "+blueprint_profile.application_profile.sys_id);
			}
//			var profile_sys_id = '824c4e3edb49ac505e1985184b961972';
			for(var i in status){
				var varList = status[i].variable_list;
				for(var j in varList){
					if(this.current.variables[varList[j].name]){
						if(varList[j].type+'' == 'SECRET' || varList[j].type+'' == 'HTTP_SECRET' || varList[j].type+'' == 'EXEC_SECRET'){
							specs[i].variable_list[j].attrs.is_secret_modified = true;				
						}
						if(varList[j].data_type+'' == 'LIST'){
							
							specs[i].variable_list[j].value =  (this._getValue(this.current.variables[varList[j].name].getDisplayValue().replace(/, /g,",")+'', typeof specs[i].variable_list[j].value).replace(/\r\n/g,'\n'));
							
						}else if(varList[j].type+'' == "LOCAL" &amp;&amp; varList[j].options &amp;&amp;  varList[j].options.type+'' == "PREDEFINED" &amp;&amp; (varList[j].options.choices).length &lt;= 0   &amp;&amp; (varList[j].val_type+'' == 'DATE' || varList[j].val_type+'' == 'DATE_TIME')) {

							var newdtVal = this._formattedDateTimeNutanix(this.current.variables[varList[j].name].getDisplayValue()+'', varList[j].val_type+'');

							specs[i].variable_list[j].value =  this._getValue(newdtVal+'', typeof newdtVal);	

						}else{
							specs[i].variable_list[j].value =  (this._getValue(this.current.variables[varList[j].name]+'', typeof specs[i].variable_list[j].value).replace(/\r\n/g,'\n'));
						}
							
					}
					if(this.current.variables[varList[j].name+'_'+profile_sys_id]){
						if(varList[j].type+'' == 'SECRET' || varList[j].type+'' == 'HTTP_SECRET' || varList[j].type+'' == 'EXEC_SECRET'){
							specs[i].variable_list[j].attrs.is_secret_modified = true;				
						}
						if(varList[j].data_type+'' == 'LIST'){
							
							specs[i].variable_list[j].value =  (this._getValue(this.current.variables[varList[j].name+'_'+profile_sys_id].getDisplayValue().replace(/, /g,",")+'', typeof specs[i].variable_list[j].value).replace(/\r\n/g,'\n'));
							
						}else if(varList[j].type+'' == "LOCAL" &amp;&amp; varList[j].options &amp;&amp;  varList[j].options.type+'' == "PREDEFINED" &amp;&amp; (varList[j].options.choices).length &lt;= 0   &amp;&amp; (varList[j].val_type+'' == 'DATE' || varList[j].val_type+'' == 'DATE_TIME')) {

							var newdtVal = this._formattedDateTimeNutanix(this.current.variables[varList[j].name+'_'+profile_sys_id].getDisplayValue()+'', varList[j].val_type+'');

							specs[i].variable_list[j].value =  this._getValue(newdtVal+'', typeof newdtVal);	

						}else{
							specs[i].variable_list[j].value =  (this._getValue(this.current.variables[varList[j].name+'_'+profile_sys_id]+'', typeof specs[i].variable_list[j].value).replace(/\r\n/g,'\n'));
						}
							
					}
				}

				var deployemntList = status[i].deployment_create_list;
				for(var j in deployemntList){
					
					var serviceName = "";
				
					if(this.bpType)
						serviceName = "Single Vm Configuration";
					else
						serviceName = this.pack_serv_rel[this.deploy_pack_rel[deployemntList[j].uuid+''][0].package_uuid][0].serv_name;

					serviceName = serviceName.toLowerCase().replace(/ /g, '_');
					
					specs[i].deployment_create_list[j].min_replicas = this._getValue(this.current.variables[serviceName+'_min_number_of_replicas']+'', typeof specs[i].deployment_create_list[j].min_replicas);
					specs[i].deployment_create_list[j].max_replicas = this._getValue(this.current.variables[serviceName+'_max_number_of_replicas']+'', typeof specs[i].deployment_create_list[j].max_replicas);
				}
			}
			
			var replace_is_modified = JSON.stringify(specs).replace(/"is_secret_modified":true/g,'"is_secret_modified":false');
			var new_spec = JSON.parse(replace_is_modified);
			
			return new_spec;
			
		}catch(e){
			this.logger.error("Nutanix_RequestUtil._fillAppProfileValue :- Exception while filling profiles variables values. Error :- "+e);
		}
	},

	_fillSubstrateValue: function(status, specs){
		
		try{
			this.logger.debug("Inside Nutanix_RequestUtil._fillSubstrateValue.");			
			
			for(var i in status){
				
				var serviceName = "";
				
				if(this.bpType)
					serviceName = "Single Vm Configuration";
				else			
					serviceName = this.pack_serv_rel[this.deploy_pack_rel[this.sub_deploy_rel[status[i].uuid].deployemnt_uuid+''][0].package_uuid][0].serv_name;

				serviceName = serviceName.toLowerCase().replace(/ /g, '_');
				
				var varList = status[i].variable_list;
				for(var j in varList){
					if(this.current.variables[serviceName+'_'+varList[j].name]){
						if(varList[j].type+'' == 'SECRET'){
							specs[i].variable_list[j].attrs.is_secret_modified = true;				
						}
						specs[i].variable_list[j].value = this._getValue(this.current.variables[serviceName+'_'+varList[j].name]+'', specs[i].variable_list[j].val_type);	
					}
				}

				var readinessProbe = status[i].readiness_probe;
				for(var j in readinessProbe){

					if( j == 'login_credential_local_reference' &amp;&amp; this.current.variables[serviceName+'_credential']){

						specs[i].readiness_probe[j].name = this._getValue(this.current.variables[serviceName+'_credential']+'', typeof specs[i].readiness_probe[j].name);
					}else{
						
						if(j == 'disable_readiness_probe'){
							
							if(this.current.variables[serviceName+'_'+j])
								specs[i].readiness_probe[j] = this._getValue( (this.current.variables[serviceName+'_'+j]+''=='true')?false:true, typeof specs[i].readiness_probe[j]);	
							
						}else{
							if(this.current.variables[serviceName+'_'+j])
								specs[i].readiness_probe[j] = this._getValue(this.current.variables[serviceName+'_'+j]+'', typeof specs[i].readiness_probe[j]);	
						}
					}
				}

				var createSpec = status[i].create_spec;
				if(createSpec.name &amp;&amp; this.current.variables[serviceName+'_name']){
					specs[i].create_spec.name = this._getValue(this.current.variables[serviceName+'_name']+'', typeof specs[i].create_spec.name);
				}
				
				
				
				
				
				if(createSpec.resources &amp;&amp; createSpec.resources.name &amp;&amp; this.current.variables[serviceName+'_name']){
					specs[i].create_spec.resources.name = this._getValue(this.current.variables[serviceName+'_name']+'', typeof specs[i].create_spec.name);
				}
				
				if(createSpec.resources &amp;&amp; createSpec.resources.vm_name &amp;&amp; this.current.variables[serviceName+'_name']){
					specs[i].create_spec.resources.vm_name = this._getValue(this.current.variables[serviceName+'_name']+'', typeof specs[i].create_spec.name);
				}
				
				
				
				
				
				if(createSpec.host &amp;&amp; this.current.variables[serviceName+'_host']){
					
					//Disabled for plguin 1.1
					
					//specs[i].create_spec.host = this._getValue(this.current.variables[serviceName+'_host']+'', typeof specs[i].create_spec.host);
				}
				if(createSpec.template &amp;&amp; this.current.variables[serviceName+'_template']){
					//Disabled for plguin 1.1
					
					//specs[i].create_spec.template = this._getValue(this.current.variables[serviceName+'_template']+'', typeof specs[i].create_spec.template);
				}
				if(createSpec.datastore &amp;&amp; this.current.variables[serviceName+'_datastore']){
					//Disabled for plguin 1.1
					
					//specs[i].create_spec._datastore = this._getValue(this.current.variables[serviceName+'_datastore']+'', typeof specs[i].create_spec.datastore);
				}
				if(createSpec.address &amp;&amp; this.current.variables[serviceName+'_address']){
					
					//Disabled for plguin 1.1
					
					//specs[i].create_spec.address = this._getValue(this.current.variables[serviceName+'_address']+'', typeof specs[i].create_spec.address);
				}
				if(createSpec.drs_mode &amp;&amp; this.current.variables[serviceName+'_drs_mode']){
					
					specs[i].create_spec.drs_mode = this._getValue(this.current.variables[serviceName+'_drs_mode']+'', typeof specs[i].create_spec.drs_mode);
				}
				
				
				
				
				
				
				

				for(var j in createSpec.resources){

					if( j == 'security_group_list' &amp;&amp; this.current.variables[serviceName+'_name']){
						
						//Disabled for plguin 1.1
						
// 						var secGrp = (this.current.variables[serviceName+'_security_group_list']+'').split(',');
// 						for(var k in secGrp){
// 							specs[i].create_spec.resources[j][k].security_group_id = secGrp[k]+'';
// 						}
						
						
					}else if( j == 'block_device_map'){
						//Disabled for plguin 1.1
					
					//
// 						if(specs[i].create_spec.resources[j].root_disk){
// 							if(this.current.variables[serviceName+'_device_name']+'')
// 								specs[i].create_spec.resources[j].root_disk.device_name = this._getValue(this.current.variables[serviceName+'_device_name']+'', typeof specs[i].create_spec.resources[j].root_disk.device_name);
							
// 							if(this.current.variables[serviceName+'_size_gb']+'')
// 								specs[i].create_spec.resources[j].root_disk.size_gb = this._getValue(this.current.variables[serviceName+'_size_gb']+'', typeof specs[i].create_spec.resources[j].root_disk.size_gb);
							
// 							if(this.current.variables[serviceName+'_volume_type']+'')
// 								specs[i].create_spec.resources[j].root_disk.volume_type = this._getValue(this.current.variables[serviceName+'_volume_type']+'', typeof specs[i].create_spec.resources[j].root_disk.volume_type);
							
// 							specs[i].create_spec.resources[j].root_disk.delete_on_termination = this._getValue(this.current.variables[serviceName+'_delete_on_termination']+'', typeof specs[i].create_spec.resources[j].root_disk.delete_on_termination);
// 						}

// 						var dataList = specs[i].create_spec.resources[j].data_disk_list;
// 						for(var k in dataList){
							
// 							if(this.current.variables[serviceName+'_'+k+'_device_name']+'')
// 								specs[i].create_spec.resources[j].data_disk_list[k].device_name = this._getValue(this.current.variables[serviceName+'_'+k+'_device_name']+'', typeof specs[i].create_spec.resources[j].data_disk_list[k].device_name);
							
// 							if(this.current.variables[serviceName+'_'+k+'_size_gb']+'')
// 								specs[i].create_spec.resources[j].data_disk_list[k].size_gb = this._getValue(this.current.variables[serviceName+'_'+k+'_size_gb']+'', typeof specs[i].create_spec.resources[j].data_disk_list[k].size_gb);
							
// 							if(this.current.variables[serviceName+'_'+k+'_volume_type']+'')
// 								specs[i].create_spec.resources[j].data_disk_list[k].volume_type = this._getValue(this.current.variables[serviceName+'_'+k+'_volume_type']+'', typeof specs[i].create_spec.resources[j].data_disk_list[k].volume_type);
							
// 							specs[i].create_spec.resources[j].data_disk_list[k].delete_on_termination = this._getValue(this.current.variables[serviceName+'_'+k+'_delete_on_termination']+'', typeof specs[i].create_spec.resources[j].data_disk_list[k].delete_on_termination);
// 						}

					}
					
					
					
					
					else if(j == 'hw_profile'){	
						if(this.current.variables[serviceName+'_'+j])
							specs[i].create_spec.resources[j].vm_size = this._getValue(this.current.variables[serviceName+'_'+j]+'', typeof specs[i].create_spec.resources[j].vm_size);
					}
						
						
					
					
					
					
					
					
					
					
					else if(j == 'disks'){
						//Disabled for plguin 1.1
					
					//
// 						var dataList = specs[i].create_spec.resources[j];
// 						for(var k in dataList){
							
// 							if(!specs[i].create_spec.resources[j][k].initializeParams)
// 								specs[i].create_spec.resources[j][k].initializeParams = {};
							
							
// 							if(this.current.variables[serviceName+'_'+k+'_storage_type']+'')
// 								specs[i].create_spec.resources[j][k].initializeParams.diskType = this._getValue(this.current.variables[serviceName+'_'+k+'_storage_type']+'', typeof specs[i].create_spec.resources[j][k].initializeParams.diskType);
							
// 							if(this.current.variables[serviceName+'_'+k+'_source_image']+'')
// 								specs[i].create_spec.resources[j][k].initializeParams.sourceImage = this._getValue(this.current.variables[serviceName+'_'+k+'_source_image']+'', typeof specs[i].create_spec.resources[j][k].initializeParams.sourceImage);
							
// 							if(this.current.variables[serviceName+'_'+k+'_size_in_gb']+'')
// 								specs[i].create_spec.resources[j][k].initializeParams.diskSizeGb = this._getValue(this.current.variables[serviceName+'_'+k+'_size_in_gb']+'', typeof specs[i].create_spec.resources[j][k].initializeParams.diskSizeGb);
							
// 							specs[i].create_spec.resources[j][k].autoDelete = this._getValue(this.current.variables[serviceName+'_'+k+'_delete_when_instance_is_deleted']+'', typeof specs[i].create_spec.resources[j][k].autoDelete);
							
// 							if(this.current.variables[serviceName+'_'+k+'_disk']+'')
// 								specs[i].create_spec.resources[j][k].source = this._getValue(this.current.variables[serviceName+'_'+k+'_disk']+'', typeof specs[i].create_spec.resources[j][k].source);
// 						}
						
					}
					
					else if(j == 'blankDisks'){
						
						//Disabled for plguin 1.1
					
					//var dataList = specs[i].create_spec.resources[j];
// 						for(var k in dataList){
							
// 							if(this.current.variables[serviceName+'_'+k+'_disk_type']+'')
// 								specs[i].create_spec.resources[j][k].disk_type = this._getValue(this.current.variables[serviceName+'_'+k+'_disk_type']+'', typeof specs[i].create_spec.resources[j][k].disk_type);
							
// 							if(this.current.variables[serviceName+'_'+k+'_disk_name']+'')
// 								specs[i].create_spec.resources[j][k].name = this._getValue(this.current.variables[serviceName+'_'+k+'_disk_name']+'', typeof specs[i].create_spec.resources[j][k].name);
							
// 							if(this.current.variables[serviceName+'_'+k+'_size_in_gb']+'')
// 								specs[i].create_spec.resources[j][k].sizeGb = this._getValue(this.current.variables[serviceName+'_'+k+'_size_in_gb']+'', typeof specs[i].create_spec.resources[j][k].sizeGb);
							
// 							specs[i].create_spec.resources[j][k].autoDelete = this._getValue(this.current.variables[serviceName+'_'+k+'_delete_when_instance_is_deleted']+'', typeof specs[i].create_spec.resources[j][k].autoDelete);
// 						}
						
					}
					
					else if(j == 'networkInterfaces'){
						
						//Disabled for plguin 1.1
					
					//var nicList = specs[i].create_spec.resources[j];
// 						for(var k in nicList){
							
// 							if(this.current.variables[serviceName+'_'+k+'_associate_public_ip_address']+'')
// 								specs[i].create_spec.resources[j][k].associatePublicIP = this._getValue(this.current.variables[serviceName+'_'+k+'_associate_public_ip_address']+'', typeof specs[i].create_spec.resources[j][k].associatePublicIP);
							
// 							if(this.current.variables[serviceName+'_'+k+'_network']+'')
// 								specs[i].create_spec.resources[j][k].network = this._getValue(this.current.variables[serviceName+'_'+k+'_network']+'', typeof specs[i].create_spec.resources[j][k].network);
							
// 							if(this.current.variables[serviceName+'_'+k+'_subnetwork']+'')
// 								specs[i].create_spec.resources[j][k].subnetwork = this._getValue(this.current.variables[serviceName+'_'+k+'_subnetwork']+'', typeof specs[i].create_spec.resources[j][k].subnetwork);
							
// 							if(!specs[i].create_spec.resources[j][k].accessConfigs)
// 								specs[i].create_spec.resources[j][k].accessConfigs = [];
							
							
// 							if(this.current.variables[serviceName+'_'+k+'_access_configuration_name']+'')
// 								specs[i].create_spec.resources[j][k].accessConfigs.push({
// 									'name' : this._getValue(this.current.variables[serviceName+'_'+k+'_access_configuration_name']+'', typeof specs[i].create_spec.resources[j][k].accessConfigs[0].name),
// 									'config_type' : this._getValue(this.current.variables[serviceName+'_'+k+'_access_configuration_type']+'', typeof specs[i].create_spec.resources[j][k].accessConfigs[0].config_type)
// 								});
							
// 						}
						
					}
					
					else if(j == 'nic_list'){
						
						var nicList = specs[i].create_spec.resources[j];
						for(var k in nicList){
							
							if(this.current.variables[serviceName+'_'+k+'_network']){
								
// 								//Disabled for plguin 1.1
					
								//if(this.current.variables[serviceName+'_'+k+'_adapter_type']+'')
// 									specs[i].create_spec.resources[j][k].nic_type = this._getValue(this.current.variables[serviceName+'_'+k+'_adapter_type']+'', typeof specs[i].create_spec.resources[j][k].nic_type);

// 								if(this.current.variables[serviceName+'_'+k+'_network_type']+'')
// 									specs[i].create_spec.resources[j][k].net_name = this._getValue(this.current.variables[serviceName+'_'+k+'_network_type']+'', typeof specs[i].create_spec.resources[j][k].net_name);
							}else{
								var provider_type = status[i].type+'';
								if(provider_type.includes('AHV')){
										if(!specs[i].create_spec.resources[j][k].subnet_reference)
											specs[i].create_spec.resources[j][k].subnet_reference = {};

										if(this.current.variables[serviceName+'_'+k+'_nic_'+(parseInt(k)+1)]+'')
											specs[i].create_spec.resources[j][k].subnet_reference.uuid = this._getValue(this.current.variables[serviceName+'_'+k+'_nic_'+(parseInt(k)+1)]+'', typeof specs[i].create_spec.resources[j][k].subnet_reference.uuid);
								}
							}					
						}	
					}
					
					else if(j == 'nw_profile'){
						//Disabled for plguin 1.1
					
// 						var nicList = specs[i].create_spec.resources[j].nic_list;
// 						for(var k in nicList){
							
							
							
// 							if(this.current.variables[serviceName+'_'+k+'_nic_name']+'')
// 								specs[i].create_spec.resources[j].nic_list[k].nic_name = this._getValue(this.current.variables[serviceName+'_'+k+'_nic_name']+'', typeof specs[i].create_spec.resources[j].nic_list[k].nic_name);
							
							
// 							//Disabled for plguin 1.1
// 							//specs[i].create_spec.resources[j].nic_list[k].nsg_name = this._getValue(this.current.variables[serviceName+'_'+k+'_security_group']+'', typeof specs[i].create_spec.resources[j].nic_list[k].nsg_name);
// 							//specs[i].create_spec.resources[j].nic_list[k].vnet_name = this._getValue(this.current.variables[serviceName+'_'+k+'_virtual_network']+'', typeof specs[i].create_spec.resources[j].nic_list[k].vnet_name);
// 							//specs[i].create_spec.resources[j].nic_list[k].subnet_name = this._getValue(this.current.variables[serviceName+'_'+k+'_subnet']+'', typeof specs[i].create_spec.resources[j].nic_list[k].subnet_name);
							
// 							if(!specs[i].create_spec.resources[j].nic_list[k].public_ip_info)
// 								specs[i].create_spec.resources[j].nic_list[k].public_ip_info = {};
								
							
// 							if(this.current.variables[serviceName+'_'+k+'_public_ip_config_name']+'')
// 								specs[i].create_spec.resources[j].nic_list[k].public_ip_info.ip_name = this._getValue(this.current.variables[serviceName+'_'+k+'_public_ip_config_name']+'', typeof specs[i].create_spec.resources[j].nic_list[k].public_ip_info.ip_name);
							
// 							if(this.current.variables[serviceName+'_'+k+'_public_ip_config_adapter_method']+'')
// 								specs[i].create_spec.resources[j].nic_list[k].public_ip_info.ip_allocation_method = this._getValue(this.current.variables[serviceName+'_'+k+'_public_ip_config_adapter_method']+'', typeof specs[i].create_spec.resources[j].nic_list[k].public_ip_info.ip_allocation_method);
							
// 							if(this.current.variables[serviceName+'_'+k+'_public_ip_config_dns_label']+'')
// 								specs[i].create_spec.resources[j].nic_list[k].public_ip_info.dns_label = this._getValue(this.current.variables[serviceName+'_'+k+'_public_ip_config_dns_label']+'', typeof specs[i].create_spec.resources[j].nic_list[k].public_ip_info.dns_label);
							
// 							if(!specs[i].create_spec.resources[j].nic_list[k].private_ip_info)
// 								specs[i].create_spec.resources[j].nic_list[k].private_ip_info = {};
							
							
// 							if(this.current.variables[serviceName+'_'+k+'_private_ip_config_allocation_method']+'')
// 								specs[i].create_spec.resources[j].nic_list[k].private_ip_info.ip_allocation_method = this._getValue(this.current.variables[serviceName+'_'+k+'_private_ip_config_allocation_method']+'', typeof specs[i].create_spec.resources[j].nic_list[k].private_ip_info.ip_allocation_method);
							
// 						}
						
					}
					
					else if(j == 'guest_customization'){
						
						var providerType = specs[i].create_spec.type+'';
						
						if(providerType.includes('vmware')){
							
							if(!specs[i].create_spec.resources[j].linux_data)
								specs[i].create_spec.resources[j].linux_data = {};
							
							
							if(this.current.variables[serviceName+'_hostname']+'')
								specs[i].create_spec.resources[j].linux_data.hostname = this._getValue(this.current.variables[serviceName+'_hostname']+'', typeof specs[i].create_spec.resources[j].linux_data.hostname);
							
							if(this.current.variables[serviceName+'_domain']+'')
								specs[i].create_spec.resources[j].linux_data.domain = this._getValue(this.current.variables[serviceName+'_domain']+'', typeof specs[i].create_spec.resources[j].linux_data.domain);
							
							if(this.current.variables[serviceName+'_timezone']+'')
								specs[i].create_spec.resources[j].linux_data.timezone = this._getValue(this.current.variables[serviceName+'_timezone']+'', typeof specs[i].create_spec.resources[j].linux_data.timezone);
							
							if(this.current.variables[serviceName+'_hardware_clock_utc']+'')
								specs[i].create_spec.resources[j].linux_data.hw_utc_clock = this._getValue(this.current.variables[serviceName+'_hardware_clock_utc']+'', typeof specs[i].create_spec.resources[j].linux_data.hw_utc_clock);
							
							if(this.current.variables[serviceName+'_dns_primary']+'')
								specs[i].create_spec.resources[j].linux_data.dns_primary = this._getValue(this.current.variables[serviceName+'_dns_primary']+'', typeof specs[i].create_spec.resources[j].linux_data.dns_primary);
							
							if(this.current.variables[serviceName+'_dns_secondary']+'')
								specs[i].create_spec.resources[j].linux_data.dns_secondary = this._getValue(this.current.variables[serviceName+'_dns_secondary']+'', typeof specs[i].create_spec.resources[j].linux_data.dns_secondary);
							
							if(this.current.variables[serviceName+'_dns_tertiary']+'')
								specs[i].create_spec.resources[j].linux_data.dns_tertiary = this._getValue(this.current.variables[serviceName+'_dns_tertiary']+'', typeof specs[i].create_spec.resources[j].linux_data.dns_tertiary);
							
							if(!specs[i].create_spec.resources[j].linux_data.dns_search_path)
								specs[i].create_spec.resources[j].linux_data.dns_search_path = [];
							
							
							if(this.current.variables[serviceName+'_dns_search_path']+'')
								specs[i].create_spec.resources[j].linux_data.dns_search_path.push( this._getValue(this.current.variables[serviceName+'_dns_search_path']+'', typeof specs[i].create_spec.resources[j].linux_data.dns_search_path[0]) );
							
							
							//Disabled for plguin 1.1
					
					//for(var k in specs[i].create_spec.resources[j].linux_data.network_settings)
// 								if(this.current.variables[serviceName+'_'+k+'_use_dhcp']+'')
// 									specs[i].create_spec.resources[j].linux_data.network_settings[k].is_dhcp = this._getValue(this.current.variables[serviceName+'_'+k+'_use_dhcp']+'', typeof specs[i].create_spec.resources[j].linux_data.network_settings[k].is_dhcp);	
							
						}else{
						
							if(this.current.variables[serviceName+'_type']+'' == 'Sysprep'){
								
								if(!specs[i].create_spec.resources[j].sysprep)
									specs[i].create_spec.resources[j].sysprep={};
								
								specs[i].create_spec.resources[j].cloud_init = null;
								
								if(this.current.variables[serviceName+'_install_type']+'')
									specs[i].create_spec.resources[j].sysprep.install_type = this._getValue(this.current.variables[serviceName+'_install_type']+'', typeof specs[i].create_spec.resources[j].sysprep.install_type);	

								if(this.current.variables[serviceName+'_script']+'')
									specs[i].create_spec.resources[j].sysprep.unattend_xml = this._getValue(this.current.variables[serviceName+'_script']+'', typeof specs[i].create_spec.resources[j].sysprep.unattend_xml);		
							}else if(this.current.variables[serviceName+'_type']+'' == 'Cloud-init'){

								if(!specs[i].create_spec.resources[j])
									specs[i].create_spec.resources[j] = {};
								
								if(!specs[i].create_spec.resources[j].cloud_init)
									specs[i].create_spec.resources[j].cloud_init={};

								specs[i].create_spec.resources[j].sysprep = null;
								
								if(this.current.variables[serviceName+'_script']+'')
									specs[i].create_spec.resources[j].cloud_init.user_data = this._getValue(this.current.variables[serviceName+'_script']+'', typeof specs[i].create_spec.resources[j].cloud_init.user_data).replace(/\r\n/g,'\n');		
							}
							
							
							
						}
					}
					
					
					else if(j == 'guestCustomization'){
												
						
						if(this.current.variables[serviceName+'_startup_script']+'')
							specs[i].create_spec.resources[j].startupScript = this._getValue(this.current.variables[serviceName+'_startup_script']+'', typeof specs[i].create_spec.resources[j].startupScript);
						
						var items = (this.current.variables[serviceName+'_security_groups']+'').split(',');
						
						if(!specs[i].create_spec.resources.tags)
							specs[i].create_spec.resources.tags = {};
						
						if(!specs[i].create_spec.resources.tags.items)
							specs[i].create_spec.resources.tags.items = [];
						
						
						for(var k in items){
								if(this.current.variables[serviceName+'_key_'+k]+'')
									specs[i].create_spec.resources.tags.items[k] = this._getValue(this.current.variables[serviceName+'_key_'+k]+'', typeof specs[i].create_spec.resources.tags.items[k]);
						}
					}
					
					
					else if(j == 'os_profile'){
							
						if(!specs[i].create_spec.resources[j].linux_config)
							specs[i].create_spec.resources[j].linux_config = {};
						
						if(this.current.variables[serviceName+'_cloud_init_script'])
							specs[i].create_spec.resources[j].linux_config.custom_data = this._getValue(this.current.variables[serviceName+'_cloud_init_script']+'', typeof specs[i].create_spec.resources[j].linux_config.custom_data);
						
						
						var osProfileList = specs[i].create_spec.resources[j].secrets;
						
						for(var k in osProfileList){
							
							if(this.current.variables[serviceName+'_'+k+'_valut_id'])
								specs[i].create_spec.resources[j].secrets[k].source_vault_id = this._getValue(this.current.variables[serviceName+'_'+k+'_valut_id']+'', typeof specs[i].create_spec.resources[j].secrets[k].source_vault_id);
							
							for(var w in osProfileList[k].vault_certificates){
								
								if(this.current.variables[serviceName+'_'+k+'_certificate_config_url_'+w])
									specs[i].create_spec.resources[j].secrets[k].vault_certificates[w].certificate_url = this._getValue(this.current.variables[serviceName+'_'+k+'_certificate_config_url_'+w]+'', typeof specs[i].create_spec.resources[j].secrets[k].vault_certificates[w].certificate_url);
							}
							
						}	
						
					}
					
					else if(j == 'storage_profile'){
							
						if(!specs[i].create_spec.resources[j].image_details)
							specs[i].create_spec.resources[j].image_details = {};
						
						if(this.current.variables[serviceName+'_use_custom_image'])
							specs[i].create_spec.resources[j].image_details.use_custom_image = this._getValue(this.current.variables[serviceName+'_use_custom_image']+'', typeof specs[i].create_spec.resources[j].image_details.use_custom_image);
						
								
						if(this.current.variables[serviceName+'_publisher'])
							specs[i].create_spec.resources[j].image_details.publisher = this._getValue(this.current.variables[serviceName+'_publisher']+'', typeof specs[i].create_spec.resources[j].image_details.publisher);
								
						if(this.current.variables[serviceName+'_offer'])
							specs[i].create_spec.resources[j].image_details.offer = this._getValue(this.current.variables[serviceName+'_offer']+'', typeof specs[i].create_spec.resources[j].image_details.offer);
								
						if(this.current.variables[serviceName+'_sku'])
							specs[i].create_spec.resources[j].image_details.sku = this._getValue(this.current.variables[serviceName+'_sku']+'', typeof specs[i].create_spec.resources[j].image_details.sku);
								
						if(this.current.variables[serviceName+'_version'])
							specs[i].create_spec.resources[j].image_details.version = this._getValue(this.current.variables[serviceName+'_version']+'', typeof specs[i].create_spec.resources[j].image_details.version);

								
						if(this.current.variables[serviceName+'_use_managed_disks'])
							specs[i].create_spec.resources[j].is_managed = this._getValue(this.current.variables[serviceName+'_use_managed_disks']+'', typeof specs[i].create_spec.resources[j].is_managed);
						
							
						if(!specs[i].create_spec.resources[j].os_disk_details)
							specs[i].create_spec.resources[j].os_disk_details = {};
						
						if(this.current.variables[serviceName+'_disk_name'])
							specs[i].create_spec.resources[j].os_disk_details.name = this._getValue(this.current.variables[serviceName+'_disk_name']+'', typeof specs[i].create_spec.resources[j].os_disk_details.name);
								
						if(this.current.variables[serviceName+'_storage_type'])
							specs[i].create_spec.resources[j].os_disk_details.storage_type = this._getValue(this.current.variables[serviceName+'_storage_type']+'', typeof specs[i].create_spec.resources[j].os_disk_details.storage_type);
								
						if(this.current.variables[serviceName+'_disk_caching_type'])
							specs[i].create_spec.resources[j].os_disk_details.caching_type = this._getValue(this.current.variables[serviceName+'_disk_caching_type']+'', typeof specs[i].create_spec.resources[j].os_disk_details.caching_type);
								
						if(this.current.variables[serviceName+'_disk_create_options'])
							specs[i].create_spec.resources[j].os_disk_details.create_option = this._getValue(this.current.variables[serviceName+'_disk_create_options']+'', typeof specs[i].create_spec.resources[j].os_disk_details.create_option);
						
				
						//Disabled for plguin 1.1
					
					//var dataList = specs[i].create_spec.resources[j].data_disk_list;
						
// 						for(var k in dataList){
							
									
// 							if(this.current.variables[serviceName+'_'+k+'_disk_name'])
// 								specs[i].create_spec.resources[j].data_disk_list[k].name = this._getValue(this.current.variables[serviceName+'_'+k+'_disk_name']+'', typeof specs[i].create_spec.resources[j].data_disk_list[k].name);

// 							if(this.current.variables[serviceName+'_'+k+'_storage_type'])
// 								specs[i].create_spec.resources[j].data_disk_list[k].storage_type = this._getValue(this.current.variables[serviceName+'_'+k+'_storage_type']+'', typeof specs[i].create_spec.resources[j].data_disk_list[k].storage_type);

// 							if(this.current.variables[serviceName+'_'+k+'_disk_caching_type'])
// 								specs[i].create_spec.resources[j].data_disk_list[k].caching_type = this._getValue(this.current.variables[serviceName+'_'+k+'_disk_caching_type']+'', typeof specs[i].create_spec.resources[j].data_disk_list[k].caching_type);

// 							if(this.current.variables[serviceName+'_'+k+'_size_gb'])
// 								specs[i].create_spec.resources[j].data_disk_list[k].size_in_gb = this._getValue(this.current.variables[serviceName+'_'+k+'_size_gb']+'', typeof specs[i].create_spec.resources[j].data_disk_list[k].size_in_gb);

// 							if(this.current.variables[serviceName+'_'+k+'_disk_lun'])
// 								specs[i].create_spec.resources[j].data_disk_list[k].lun = this._getValue(this.current.variables[serviceName+'_'+k+'_disk_lun']+'', typeof specs[i].create_spec.resources[j].data_disk_list[k].lun);
// 						}
						
					}
					
					else if(j == 'serviceAccounts'){
						
						if(!specs[i].create_spec.resources[j])
							specs[i].create_spec.resources[j] = [];
						
						if(this.current.variables[serviceName+'_service_account'])
							specs[i].create_spec.resources[j].email = this._getValue(this.current.variables[serviceName+'_service_account']+'', typeof specs[i].create_spec.resources[j][0].email);
						
					}
					
					
					
					
					
					
					
					
					
					
					
					
					else if(j == 'sshKeys'){
						
						//Disabled for plguin 1.1
					
					//var sshList = specs[i].create_spec.resources[j];

// 						for(var k in sshList){
// 							if(this.current.variables[serviceName+'_key_'+k])
// 								specs[i].create_spec.resources[j][k] = this._getValue(this.current.variables[serviceName+'_key_'+k]+'', typeof specs[i].create_spec.resources[j][k]);
// 						}
					}
					
					else if(j == 'categories'){
						
					   continue;
						//not handled
					}
										
					else if(j == 'disk_list'){
						
						//Disabled for plguin 1.1
					
					//var dataList = specs[i].create_spec.resources[j];
							
// 						for(var k in dataList){

// 							if(dataList[k].adapter_type){

// 								if(this.current.variables[serviceName+'_'+k+'_adapter_type'])
// 									specs[i].create_spec.resources[j][k].adapter_type = this._getValue(this.current.variables[serviceName+'_'+k+'_adapter_type']+'', typeof specs[i].create_spec.resources[j][k].adapter_type);
								
// 								if(this.current.variables[serviceName+'_'+k+'_device_type'])
// 									specs[i].create_spec.resources[j][k].disk_type = this._getValue(this.current.variables[serviceName+'_'+k+'_device_type']+'', typeof specs[i].create_spec.resources[j][k].disk_type);
								
// 								if(this.current.variables[serviceName+'_'+k+'_size'])
// 									specs[i].create_spec.resources[j][k].disk_size_mb = this._getValue(this.current.variables[serviceName+'_'+k+'_size']+'', typeof specs[i].create_spec.resources[j][k].disk_size_mb);
								
// 							}else if(dataList[k] &amp;&amp; dataList[k].data_source_reference &amp;&amp; dataList[k].data_source_reference.kind=='image'){

// 								if(!specs[i].create_spec.resources[j][k].data_source_reference)
// 									specs[i].create_spec.resources[j][k].data_source_reference = {};
								
// 								if(this.current.variables[serviceName+'_'+k+'_image'])
// 									specs[i].create_spec.resources[j][k].data_source_reference.name = this._getValue(this.current.variables[serviceName+'_'+k+'_image']+'', typeof specs[i].create_spec.resources[j][k].data_source_reference.name);
								
// 								if(!specs[i].create_spec.resources[j][k].device_properties)
// 									specs[i].create_spec.resources[j][k].device_properties = {};
								
// 								if(this.current.variables[serviceName+'_'+k+'_device_type'])
// 									specs[i].create_spec.resources[j][k].device_properties.device_type = this._getValue(this.current.variables[serviceName+'_'+k+'_device_type']+'', typeof specs[i].create_spec.resources[j][k].device_properties.device_type);
								
// 								if(!specs[i].create_spec.resources[j][k].device_properties.disk_address)
// 									specs[i].create_spec.resources[j][k].device_properties.disk_address = {};
								
// 								if(this.current.variables[serviceName+'_'+k+'_device_bus'])
// 									specs[i].create_spec.resources[j][k].device_properties.disk_address.adapter_type = this._getValue(this.current.variables[serviceName+'_'+k+'_device_bus']+'', typeof specs[i].create_spec.resources[j][k].device_properties.disk_address.adapter_type);								

								
// 								if(!specs[i].create_spec.resources.boot_config)
// 									specs[i].create_spec.resources.boot_config= {};
								
// 								if(!specs[i].create_spec.resources.boot_config.boot_device)
// 									specs[i].create_spec.resources.boot_config.boot_device = {};
								
// 								if(!specs[i].create_spec.resources.boot_config.boot_device.disk_address)
// 									specs[i].create_spec.resources.boot_config.boot_device.disk_address = {};
								
// 								specs[i].create_spec.resources.boot_config.boot_device.disk_address.device_index = k;
								
								
// 							}else{
								
// 								if(!specs[i].create_spec.resources[j][k].device_properties)
// 									specs[i].create_spec.resources[j][k].device_properties = {};
								
// 								if(this.current.variables[serviceName+'_'+k+'_device_type'])
// 									specs[i].create_spec.resources[j][k].device_properties.device_type = this._getValue(this.current.variables[serviceName+'_'+k+'_device_type']+'', typeof specs[i].create_spec.resources[j][k].device_properties.device_type);
								
// 								if(!specs[i].create_spec.resources[j][k].device_properties.disk_address)
// 									specs[i].create_spec.resources[j][k].device_properties.disk_address = {};
								
// 								if(this.current.variables[serviceName+'_'+k+'_device_bus'])
// 									specs[i].create_spec.resources[j][k].device_properties.disk_address.adapter_type = this._getValue(this.current.variables[serviceName+'_'+k+'_device_bus']+'', typeof specs[i].create_spec.resources[j][k].device_properties.disk_address.adapter_type);
								
// 								if(this.current.variables[serviceName+'_'+k+'_size'])
// 									specs[i].create_spec.resources[j][k].disk_size_mib = this._getValue(this.current.variables[serviceName+'_'+k+'_size']+'', typeof specs[i].create_spec.resources[j][k].disk_size_mib);
// 							}
							
// 						}
						
					}
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					else if(j == 'zone'){
						
						if(this.current.variables[serviceName+'_'+j])
							specs[i].create_spec.resources[j] = this._getValue(this.current.variables[serviceName+'_'+j]+'', typeof specs[i].create_spec.resources[j]);
						
					}else if (createSpec.resources[j] &amp;&amp; (createSpec.resources[j].constructor === Object || createSpec.resources[j].constructor === Array)){
						continue;
						
					}else if(this.exclusionList.includes(j) || this.disabledFields.includes(j) || j=='vm_name'){
						continue;
						
					}else{	
						if(this.current.variables[serviceName+'_'+j])
							specs[i].create_spec.resources[j] = this._getValue(this.current.variables[serviceName+'_'+j]+'', typeof specs[i].create_spec.resources[j]);
					}
				}
			}
			return specs;
			
		}catch(e){
			this.logger.error("Nutanix_RequestUtil._fillSubstrateValue :- Exception caught while filling substrate variables value. Error :- "+e);
		}
	},
	
	_fillServiceValue: function(status, specs){
		
		try{
			this.logger.debug("Inside Nutanix_RequestUtil._fillServiceValue.");			
			
			for(var i in status){
				var serviceName = status[i].name.toLowerCase().replace(/ /g, '_');

				var varList = status[i].variable_list;
				for(var j in varList){

					if(this.current.variables[serviceName+'_'+varList[j].name]){
						if(varList[j].type+'' == 'SECRET' || varList[j].type+'' == 'HTTP_SECRET' || varList[j].type+'' == 'EXEC_SECRET' ){
							specs[i].variable_list[j].attrs.is_secret_modified = true;				
						}
						if(varList[j].data_type+'' &amp;&amp; varList[j].data_type+'' == 'LIST'){
							
							specs[i].variable_list[j].value = (this._getValue(this.current.variables[serviceName+'_'+varList[j].name].getDisplayValue().replace(/, /g,",")+'', specs[i].variable_list[j].val_type)).replace(/\r/g,"");
							
						} else if (varList[j].type+'' == "LOCAL" &amp;&amp; varList[j].options &amp;&amp;  varList[j].options.type+'' == "PREDEFINED" &amp;&amp; (varList[j].options.choices).length &lt;= 0   &amp;&amp; (varList[j].val_type+'' == 'DATE' || varList[j].val_type+'' == 'DATE_TIME')) {

							var newdtVal = this._formattedDateTimeNutanix(this.current.variables[serviceName+'_'+varList[j].name].getDisplayValue()+'', specs[i].variable_list[j].val_type);
							specs[i].variable_list[j].value =  this._getValue(newdtVal+'', typeof newdtVal);

						}else{
							
							specs[i].variable_list[j].value =  (this._getValue(this.current.variables[serviceName+'_'+varList[j].name]+'', specs[i].variable_list[j].val_type)).replace(/\r\n/g,'\n');
							
						}
							
					}
				}
			}
			return specs;
			
		}catch(e){
			this.logger.error("Nutanix_RequestUtil._fillServiceValue :- Exception caught while filling service vairables data. Error :- "+e);
		}
	},
	
	_makeRelations: function (parsed){
		
		try{
			this.logger.debug("Inside Nutanix_RequestUtil._makeRelations.");			
			var app_profile_list = parsed.app_profile_list;

			for(var i=0; i&lt;app_profile_list.length; i++){
				var appProfile = app_profile_list[i];
				var deployment_create_list = appProfile.deployment_create_list;

				for(var j=0; j&lt;deployment_create_list.length; j++ ){

					var deployemnt = deployment_create_list[j];
					this.sub_deploy_rel[deployemnt.substrate_local_reference.uuid] = {
						"name": deployemnt.substrate_local_reference.name,
						"deployemnt_uuid": deployemnt.uuid,
						"deployemnt_name": deployemnt.name,
						"profile_uuid": appProfile.uuid
					};


					var package_local_reference_list = deployemnt.package_local_reference_list;			

					for(k=0; k&lt;package_local_reference_list.length; k++){
						var packge = package_local_reference_list[k];

						if(!this.deploy_pack_rel[deployemnt.uuid])
							this.deploy_pack_rel[deployemnt.uuid] = [];

						this.deploy_pack_rel[deployemnt.uuid].push({
							"name": deployemnt.name,
							"package_uuid": packge.uuid,
							"package_name": packge.name,
						});
					}

				}
			}


			var packageList = parsed.package_definition_list;

			for(var i=0; i&lt;packageList.length; i++){

				var packge = packageList[i];
				var uuid = packge.uuid;
				var serviceList = packge.service_local_reference_list;

				for(var j=0; j&lt;serviceList.length; j++){

					var service = serviceList[j];
					if(!this.pack_serv_rel[uuid])
						this.pack_serv_rel[uuid]=[];

					this.pack_serv_rel[uuid].push({
						"name": packge.name,
						"serv_name": service.name,
						"serv_uuid": service.uuid
					});
				}
			}
		}catch(e){
			this.logger.error("Nutanix_RequestUtil._makeRelations:- Exception caught while making relation. Error :- "+e);
		}

	},
	
	_formattedDateTimeNutanix: function(val, type){
		
		var dtVal = val+'';
		var newdtVal;
		dtVal = dtVal.split(' ');
		var g = new GlideDateTime();
		g.setValue(dtVal[0]);
		var month = ((g.getMonthUTC()+'').length&lt;2) ? '0' + g.getMonthUTC() : g.getMonthUTC();
		var day = ((g.getDayOfMonthUTC()+'').length&lt;2) ? '0' + g.getDayOfMonthUTC() : g.getDayOfMonthUTC();

		if(type == 'DATE'){
			newdtVal = day+'/'+month+'/'+g.getYearUTC();
		} else {
			var gtime1 = new GlideTime();
			gtime1.setValue(dtVal[1]);
			g.add(gtime1);

			var hour = ((gtime1.getHourOfDayUTC()+'').length&lt;2) ? '0' + gtime1.getHourOfDayUTC() : gtime1.getHourOfDayUTC();
			var min = ((gtime1.getMinutesUTC()+'').length&lt;2) ? '0' + gtime1.getMinutesUTC() : gtime1.getMinutesUTC();
			var sec = ((gtime1.getSeconds()+'').length&lt;2) ? '0' + gtime1.getSeconds() : gtime1.getSeconds();

			newdtVal =  day+'/'+month+'/'+g.getYearUTC()+' - '+ hour +":" + min +":" + sec;
		}
		return newdtVal;
	},
	
	_getValue: function(val, type){
		
		if(type+'' == 'STRING' || type+'' == 'string')
			return val+'';
		else 
			if(type+'' == 'number')
				return parseInt(val);
		else
			if(type+'' == 'boolean'){
				if(val == 'true')
					return true;
				else
					if(val == 'false')
						return false;	
			}
		
		return val;
	},
	
    type: 'Nutanix_RequestUtil'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;mumtaz.ansari&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-11-29 05:48:17&lt;/sys_created_on&gt;&lt;sys_id&gt;99b80fbd37022300d27b8cf6c3990efb&lt;/sys_id&gt;&lt;sys_mod_count&gt;140&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_RequestUtil&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_99b80fbd37022300d27b8cf6c3990efb&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-05-06 13:48:05&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1512800342</payload_hash>
<remote_update_set display_value="Nutanix Calm 1.4.4 Service Portal patch">05f5233707003010f76cfdac7c1ed0c0</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2021-05-18 07:53:49</sys_created_on>
<sys_id>4df5233707003010f76cfdac7c1ed0c2</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1795ba0606a0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2021-05-18 07:53:49</sys_updated_on>
<table/>
<target_name>Nutanix_RequestUtil</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>edf3830ced08b0109b4bb30b36619051</update_guid>
<update_guid_history>edf3830ced08b0109b4bb30b36619051:-1512800342,0cd0261a46f96010c9a801bd18ebbf04:-1623395152,e1488e561fb96010c366d1ce91341802:1048384819,e8c54e5614b96010ae5d77d2a50b6289:-1192516662,5d85865677b96010f4284d322038e3a2:-969005989,a714469244b960109bf45e5b9e3f188d:-2035816444,ac8f61d243796010f41322d688b21831:66150813,467d2dde28396010b6456f32954a9a82:1925879733,220c2dde6d39601070aea19517394032:-1592754216,1b3aed1e42396010a35b103af4413b3a:-281649037,c2096d1ea23960107ca56931721399a5:588774418,d585691a57396010b93e2b18c96a8bfe:1088456765,614b19de14f5601004430dc55e7652ca:1556198170,c7967c5ad9756010070666e705a3a2a8:27668749,fc807c5a21756010ff7c95b6ecf99d85:2031375294,2240f41aad75601089fed2fdd4eec029:-1285577624,66dee01643756010dbf0c4f1f4bdcb57:1781047264,286e201a4a756010214aa78c0b993fe9:-1191988508,c6c62052f235601062921d42d0bae66e:722532825,0df3acda71f160106962cfaea9ed2368:-2087232818,c8c94980c095a09016904c98ee544125:909872311,d6283c8c7315a090ae0b1013a5948b5f:1671936417,9c47344ca115a0908ed303a780f3eca3:1148495380,9b27f84c6a15a090cd83eb5bdc153808:-302670220,ac06b40c1715a090a2d2072072d1891d:1377700335,c6433888d415a090b1b5025b9c312c35:318333795,5a8aa0040015a090f11251f304d5d5c5:673483739,2009ac801d15a090a9361035129d40ba:-1854532509,44516c843ad1a090e540a85b5c2c1a9f:637778955,3aee94cc8491a090eef350c9acb91dad:-1541469756,ea79d488ab91a090997814c9cc68cce0:-1349788867,8fe59088c891a09043315dac75d59bd5:-1959754021,5f99118f84c5ec50dcbaeb6c2875020c:1140770057,6e39d58743c5ec501025a3cd3f9dc94a:1139938441,0e96c5471985ec50e93386b5c627a6d9:-1684479228,f97efc038085ec50fe3bf72282dba51b:630775010,8b12800b5ec1ec50422d142e5174c0ad:-413473327,679fb7765ac1ec504ceb7f9f4e361ea4:819420549,0a78a3b410c0a010bb1c82893c0b58a4:-1812277617,04cfee072873dc10483756a92d30da59:-488872953,2aeca6c3a133dc10c0fb75e4aba1aeba:-1691426687,769aea435733dc103e1d4453d197270b:-2081613981,a157264f6aff9c10313c81fa4216db9b:-2023738616,3be31a0307bf9c109ee49373f9d54c62:-62666641,c4ef21870ffb9c100ddf1d0076f206fd:-730169676,1c7e6d8f2dbb9c10089232a5f4bb52d1:165148585,49282d8fc6bb9c10d182710081cb4b55:-332078485,07a22dc7a57b9c10b2599568c4c37657:-1422674545,a167825bcc3b08104e0bf3362b967765:637807631,63873616a713041028b906afbaa26b2a:-53126073,058f2eda7fdfc0108d26230a81c3367a:-15629299,80370a46b013c010b904f5f24269311f:959277270,c5f5c6867f13c0105c13d7fbf6435558:-1459809958,d6540e06e9df80108c55ffdc7992a724:-2011301882,c8440a064613c01016af48072de5d3b0:-714206144,20c3824abbdf8010d3f6e808ab84f9d6:-1215120319,52d0fdce249f80102ef062838cab96ef:-851026276,b54be54a7a9f8010e56e3b0477ec6270:332177827,082b690a6b9f80104c36c36d447058b6:-678959269,760bed86f09f80108b679dbc3695e590:-1700460389,fd992502fe9f80103801593dadb221fb:-219721515,b37621ce4d5f8010ec54036df9627bf7:1224588623,870670baa211001002873b2019fa2168:-537181501,5bb9bd2832190810e9494816e0c41114:1323255798,69e8eda8efd50810f6accea72f2d268e:-507750720,4798ad6893d50810f6a521e09ef3d38a:1139577552,0439073e77cdc0105e631a81a715beec:463437016,d1d3f636a98dc0105851096c8dede4a1:-231264049,1c7cba6ebfc1c01010e4c5f1fb08ef99:-23376183,ebe2f6ee0681c010ef0d2f54a793a634:-1563495646,5d8ff7c80cbb3300414fbd0fd33d2aa8:968953996,e48d73c82ebb33008242c495f6285b89:-1784746111,812bb788a0bb330074a13700724d1655:-825789407,31cab788a1bb3300e24ddc781b6ba34e:600160556,3b8933487abb3300cf46565da4aca46e:29161580,33d8bb4c8c7b330079135787fe3a71de:-551808420,decbcf844933b3000346424ea14898ce:1820673985,70b7cf8cc0ff7300ccb63e11a958db06:-1018579340,779a724c35ff73000e6000c607a64d96:-569707585,c66932c85bff7300f82e9be3507eae36:-1196381055,e96162c054bf7300e336822f3fe0acbc:1174751134,9b2f9240d6bf7300af809174f9d927b7:-2103457113,84cb8e04767f73000043a604f48585dc:769017547,399a4a00887f7300e86c42cecc3f5c4b:-1377990933,bbce5637a9477700e00429a9663ca217:1080444183,1b39dc7f0ecf3700784401c4874998ce:187824359,18fd1bebd04f37001be3cf430d761d9f:-1752048643,767c9fab3ecb3700e41e4324a831f574:-924059476,6cc07f539c473700e7d108155f84ca09:128319861,977476538843370088ff172b9028200b:-864278758,1a4b6fda6a0373001a9d049fe37d8e3b:-124581098,d4d9ebdab60373008e64f07e29add777:589189155,3ea96f9ac20373002ff86c3ef40fee73:1951704111,67911f9aa18f3300b107d41582f8a5c7:1453820231,6b874b164c8f3300d7be794cd62d5b15:-2125612781,c1a64356ce8f3300d444eabbd1fa3e3c:-1550698529,f7a50716118f330001f79ca617d23134:1587784339,754387de3b4f330017cfbb8c3c51c837:1199525427,66a0475e444f3300a9a8bd36963bbfa6:1263041339,c9eebedafb4f3300acb71a3575f1fc72:2109108564,e6a47692cf4f33001b5c47025dea62c5:2104508657,7a6fa219e582b300773ad360f0f47227:955426953,ad1ec9cd15c27300ba9b267fbeeb84e6:532254034,51dd01450ac2730012ad0007bf0ec66e:-933182004,07c61fb1d7213300d9893426bfcce552:225112864,a800be555b6d7300f14a18a4cdeb65c8:49452486,399f6655b56d73009fb6350130c88a86:-79914508,936faa55cb6d7300db9111f026a42f01:-561432537,373fae15a46d73008600a84129836041:1353126046,aefe2255f16d7300a193a6a38663fd7b:2106697540,7cf82edddd2d73000306ba9f0e228589:2063534842,c687eaddc02d7300cf90113636a39b32:-846873265,85a846d9ece973001363e2834c1abc70:1875537465,4f511115e5297300cabb8896e47c40fb:1712295517,e9be83686b613300b9f621d9f3dcc1b6:-1554885763,da8aa18711913300dafbd448e5175fca:1022628135,062d5bb329c533006a44dc2bbae778f3:-395513899,3bea1fbfdd853300111c88cfe3188487:-1438981185,270a53bf5b853300978a7fdddbff1c1a:-905094757,44091f3f3a853300648270b136de057f:1627376403,60e41bbb89853300aa08a28295962dcc:-1141735246,339413bb4a8533009c20630ccbf6bbbf:-570292,e2b2dbf7f98533007e300a96e038d8a3:-332688474,14329737358533002ee3833345d4e439:2039241043,19cdc3371d8533008397e317f270ec3e:-354297461,a14acfbb404533002169c087a3d3be51:-1558249679,9e35fe3f4b05330087004bfb13e5149e:1318991146,5334fefb8405330045441a253dd2ede8:-1147630970,628f1af7c4c13300ecbe8163cffb40b6:1662129211,2a0186377e413300a4f6c82189ba2037:1401083437,46683dff9701330070203ca4657df596:1012963979,6708f5ff6601330026ef63d19ad1c54f:323786025,75a7fd3f83013300b5cd803a63f5bffc:61963817,8e0479fbd9013300ba7abeaf44db9367:-1370725903,be7271bbd5013300418a1d55586c5b8b:-1590245040,2a6283536cb07300bb81187df855f738:138620494,24a10fdfaa707300b1dcfa420e17a0f3:-80540937,f601839fba707300a3aec1c4d45021e2:355059834,d6dffa1f77707300715d540782efd1bf:1976339820,d20f7a1f27707300fa9628ddaaaf4a9f:1733828481,cefc6e53073073005c662085807a11cb:-1814177745,5c3c9693ee3073008520760865d781f3:1478869226,68f7d653233073003950a0b475e6bb2f:-1855445755,634f82dfd3fc330029701d0a3e750d86:19373511,b8b44e1bc3fc3300fe7c55f8a93fb2e6:1339607997,7e98a959b47c33001038b56ecb510889:-393100384,5238a15184bc33009baed544110c1799:-367803242,76a80b456e3833000531b65e57835d38:-204992527,f046ecd25f532300c04bf4b60b9dfc9d:-140438105,fa2beb37b30323001ec050027d2c2247:1633487970,16fb0550c15223000ed73fb9c64cc155:-725420091,36db09508a52230024c8a61c940b865a:-1957187259,cd68855c051223001f09bc8cf34c527c:-725420091,33c80affc40263004bd6794647e3a3dc:1594745523,d7066b32b10e230022533e020d1ca743:1467091764,46d0588a8c42a300e039997aaa0c19d1:1705671716,2d6a08065f42a300b1e5ccefaeab4c26:1432887994,7676cc826b42a300abbc64557f4a1890:-757080926,68154482f642a3009f9326ce31122ece:-1774439161,1c1bf73dabc2230008fcb4e582aa9d51:570741894,f3aafff957c22300a5bc76b10ef74676:-1540640015,b448bb7923c22300fb5e8c8c5025ad67:954728334,c6b63f3971c223004a0638d90e86072a:-1613735073,fa36fb3965c223005b8eb50fa2707706:-1798848525,06d5bbf54bc2230051cbb47151850cad:-2074535242,3fb57739b9c2230086c75bfefcb96016:956584800,70fe0fb177422300f29ab3c7214dbfb3:907650355,fdddcbbd7a022300b047b050df879fd0:-48898052,27eb4f314b422300e59a13c8d245be42:-494645910,6dc8cbbd640223007af7efd1eac19d9a:523166658</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sc_cat_item_dae4cbd637512300fdfc097973990e0d</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sc_cat_item"&gt;&lt;sc_cat_item action="INSERT_OR_UPDATE"&gt;&lt;access_type/&gt;&lt;active&gt;true&lt;/active&gt;&lt;availability&gt;on_desktop&lt;/availability&gt;&lt;billable&gt;false&lt;/billable&gt;&lt;category/&gt;&lt;cost&gt;0&lt;/cost&gt;&lt;custom_cart/&gt;&lt;delivery_plan/&gt;&lt;delivery_plan_script/&gt;&lt;delivery_time&gt;1970-01-03 00:00:00&lt;/delivery_time&gt;&lt;description&gt;&lt;![CDATA[&lt;p&gt;&lt;span style="color: #000080;"&gt;&lt;span style="font-size: 10pt;"&gt;This page lets you define values for user defined variables. Calm admin can choose to set the runtime values or can define if the inputs are to be captured from the ServiceNow end user when they order this catalog item.&lt;/span&gt; &lt;/span&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;&lt;/p&gt;]]&gt;&lt;/description&gt;&lt;display_price_property&gt;non_zero&lt;/display_price_property&gt;&lt;entitlement_script/&gt;&lt;flow_designer_flow/&gt;&lt;group/&gt;&lt;hide_sp&gt;true&lt;/hide_sp&gt;&lt;icon/&gt;&lt;ignore_price&gt;true&lt;/ignore_price&gt;&lt;image/&gt;&lt;list_price&gt;0&lt;/list_price&gt;&lt;location/&gt;&lt;mandatory_attachment&gt;false&lt;/mandatory_attachment&gt;&lt;meta/&gt;&lt;mobile_hide_price&gt;false&lt;/mobile_hide_price&gt;&lt;mobile_picture/&gt;&lt;mobile_picture_type&gt;use_desktop_picture&lt;/mobile_picture_type&gt;&lt;model/&gt;&lt;name&gt;Variables&lt;/name&gt;&lt;no_attachment_v2&gt;false&lt;/no_attachment_v2&gt;&lt;no_cart&gt;true&lt;/no_cart&gt;&lt;no_cart_v2&gt;false&lt;/no_cart_v2&gt;&lt;no_delivery_time_v2&gt;false&lt;/no_delivery_time_v2&gt;&lt;no_order&gt;true&lt;/no_order&gt;&lt;no_order_now&gt;false&lt;/no_order_now&gt;&lt;no_proceed_checkout&gt;false&lt;/no_proceed_checkout&gt;&lt;no_quantity&gt;true&lt;/no_quantity&gt;&lt;no_quantity_v2&gt;false&lt;/no_quantity_v2&gt;&lt;no_search&gt;false&lt;/no_search&gt;&lt;no_wishlist_v2&gt;false&lt;/no_wishlist_v2&gt;&lt;omit_price&gt;false&lt;/omit_price&gt;&lt;order&gt;0&lt;/order&gt;&lt;ordered_item_link/&gt;&lt;picture/&gt;&lt;preview&gt;JavaScript: popupOpenStandard("com.glideapp.servicecatalog_cat_item_view.do?v=1&amp;amp;sysparm_id=dae4cbd637512300fdfc097973990e0d&amp;amp;sysparm_preview=true", "summary");&lt;/preview&gt;&lt;price&gt;0&lt;/price&gt;&lt;recurring_frequency/&gt;&lt;recurring_price&gt;0&lt;/recurring_price&gt;&lt;request_method/&gt;&lt;roles/&gt;&lt;sc_catalogs&gt;240abede37112300fdfc097973990e24&lt;/sc_catalogs&gt;&lt;sc_ic_item_staging/&gt;&lt;sc_ic_version/&gt;&lt;short_description/&gt;&lt;show_variable_help_on_load&gt;false&lt;/show_variable_help_on_load&gt;&lt;start_closed&gt;false&lt;/start_closed&gt;&lt;sys_class_name&gt;sc_cat_item&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-24 12:57:48&lt;/sys_created_on&gt;&lt;sys_id&gt;dae4cbd637512300fdfc097973990e0d&lt;/sys_id&gt;&lt;sys_mod_count&gt;19&lt;/sys_mod_count&gt;&lt;sys_name&gt;Variables&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sc_cat_item_dae4cbd637512300fdfc097973990e0d&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;priyanka.more&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-05-05 13:23:17&lt;/sys_updated_on&gt;&lt;template/&gt;&lt;type&gt;item&lt;/type&gt;&lt;use_sc_layout&gt;false&lt;/use_sc_layout&gt;&lt;vendor/&gt;&lt;visible_bundle&gt;true&lt;/visible_bundle&gt;&lt;visible_guide&gt;true&lt;/visible_guide&gt;&lt;visible_standalone&gt;true&lt;/visible_standalone&gt;&lt;workflow display_value="Nutanix_Configure Calm BP Setting Workflow"&gt;68b660d837256300fdfc097973990e97&lt;/workflow&gt;&lt;/sc_cat_item&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=dae4cbd637512300fdfc097973990e0d"/&gt;&lt;fx_price action="delete_multiple" query="id=dae4cbd637512300fdfc097973990e0d"/&gt;&lt;fx_price action="INSERT_OR_UPDATE"&gt;&lt;amount&gt;0&lt;/amount&gt;&lt;currency display_value="USD"&gt;USD&lt;/currency&gt;&lt;field&gt;price&lt;/field&gt;&lt;id&gt;dae4cbd637512300fdfc097973990e0d&lt;/id&gt;&lt;parent/&gt;&lt;reference_amount&gt;0&lt;/reference_amount&gt;&lt;reference_currency display_value="USD"&gt;USD&lt;/reference_currency&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-24 12:57:49&lt;/sys_created_on&gt;&lt;sys_id&gt;92d193de37512300fdfc097973990e62&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;girishgyani&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-10-24 12:57:49&lt;/sys_updated_on&gt;&lt;table&gt;sc_cat_item&lt;/table&gt;&lt;type&gt;calculated&lt;/type&gt;&lt;/fx_price&gt;&lt;fx_price action="INSERT_OR_UPDATE"&gt;&lt;amount&gt;0&lt;/amount&gt;&lt;currency display_value="USD"&gt;USD&lt;/currency&gt;&lt;field&gt;recurring_price&lt;/field&gt;&lt;id&gt;dae4cbd637512300fdfc097973990e0d&lt;/id&gt;&lt;parent/&gt;&lt;reference_amount&gt;0&lt;/reference_amount&gt;&lt;reference_currency display_value="USD"&gt;USD&lt;/reference_currency&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-24 12:57:49&lt;/sys_created_on&gt;&lt;sys_id&gt;9ad193de37512300fdfc097973990e64&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;girishgyani&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-10-24 12:57:49&lt;/sys_updated_on&gt;&lt;table&gt;sc_cat_item&lt;/table&gt;&lt;type&gt;calculated&lt;/type&gt;&lt;/fx_price&gt;&lt;/record_update&gt;</payload>
<payload_hash>199970115</payload_hash>
<remote_update_set display_value="Nutanix Calm 1.4.4 Service Portal patch">05f5233707003010f76cfdac7c1ed0c0</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2021-05-18 07:53:49</sys_created_on>
<sys_id>81f5233707003010f76cfdac7c1ed0c1</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1795ba05bdd0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2021-05-18 07:53:49</sys_updated_on>
<table/>
<target_name>Variables</target_name>
<type>Catalog Item</type>
<update_domain>global</update_domain>
<update_guid>28b4b97bcc3b60101328de9812ba260e</update_guid>
<update_guid_history>28b4b97bcc3b60101328de9812ba260e:199970115,a8a4757b5d3b601063c3faf0f92fdd8f:135582834,6decb25c8da8141032c16aec25adfa30:-1215325525,f1f1bce29913230043dfb75ace5872e8:-756530633,40c0f822cb13230065dcaa439b183736:1138192655,7f8070e2541323004e6e818e58593d1e:-1073540937,616c2ab14f22230041a5f22cb900ddc2:-589262929,c75c66f153222300a4130ef395d4bbf0:-1080782737,4d4c26f1d62223003d4a56199ee0bea2:-589262929,054bfc508d162300369a89bdb31387cd:-1562021459,14fa785063162300d97ba4d548d8a3d3:-1827256840,9bda3c5020162300645a6ab4d86b4d61:-1552067466,c0caf850cd16230027ae973dd2473638:1048742651,44bab0505e1623000fece7b169c68aef:-1562021459,0c6cdfd3bf79e300759dbf1b919686a2:263776683,256310c9efa123006c9dc8d43e5eb2b0:-297076757,a9673998c46963008e24951702d66f3f:-1767080033,983046337ed123001cf612c05c3cc76e:946461039,2ad193de30512300ecd26e0dd3c1d87a:-2071206422</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_transform_script_54cb351037ed2300d27b8cf6c3990e7c</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_transform_script"&gt;&lt;sys_transform_script action="INSERT_OR_UPDATE"&gt;&lt;active&gt;false&lt;/active&gt;&lt;map display_value="Nutanix Calm Application - Map"&gt;a3243fc637c12300d27b8cf6c3990e6b&lt;/map&gt;&lt;order&gt;100&lt;/order&gt;&lt;script&gt;&lt;![CDATA[(function runTransformScript(source, map, log, target /*undefined onStart*/ ) {

    // Add your code here
    var logger = new Nutanix_Calm_Logger();
    logger.info("Transform map [" + map.name + "]. completed.");

    if (gs.getProperty("x_nuta2_nutanix_ca.var_migrate") + "" == "0") {
        new Migration_Script().copyFieldJson();
        gs.setProperty("x_nuta2_nutanix_ca.var_migrate", "1");
    }

	var gr = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
	gr.addQuery('isprofilevariable', 'true');
	gr.addQuery()
	gr.query();
	while (gr.next()) {
		var field_json = gr.field_json;
		var array = field_json.split("}@@");
		var profile = gr.application_profile+"";
		var temp = "";
		var index = 0;

		for (var i = 0; i &lt; (array.length - 1); i++) {

			if (array[i].endsWith(profile) ) {
					temp = temp + array[i] + "}@@";
			} else {
				temp = temp + array[i] + "_" + profile + "}@@";
			
			}
			index++;
		}
		temp = temp + array[index];
		gr.field_json = temp ;
		gr.update();
	}
	
	//scope for improment marge in above loop
	var name_gr = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
	name_gr.addEncodedQuery('isprofilevariable=true');
	name_gr.query();
	while(name_gr.next()){
			var field_json = JSON.parse(name_gr.field_json);
			var name = field_json.name+'';
			if(name.includes("_"+name_gr.application_profile)){
				continue;
			}else{
				name = name+"_"+name_gr.application_profile;
				field_json.name = name ;
				name_gr.field_json = JSON.stringify(field_json);
				name_gr.update();
			}
	}
	
})(source, map, log, target);]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_transform_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;mumtaz.ansari&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-30 11:49:58&lt;/sys_created_on&gt;&lt;sys_id&gt;54cb351037ed2300d27b8cf6c3990e7c&lt;/sys_id&gt;&lt;sys_mod_count&gt;26&lt;/sys_mod_count&gt;&lt;sys_name&gt;onComplete&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;protected&lt;/sys_policy&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_transform_script_54cb351037ed2300d27b8cf6c3990e7c&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-05-14 04:07:40&lt;/sys_updated_on&gt;&lt;when&gt;onComplete&lt;/when&gt;&lt;/sys_transform_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>1923115874</payload_hash>
<remote_update_set display_value="Nutanix Calm 1.4.4 Service Portal patch">05f5233707003010f76cfdac7c1ed0c0</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2021-05-18 07:53:49</sys_created_on>
<sys_id>85f52fb707003010f76cfdac7c1ed0d4</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1796911b7030000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2021-05-18 07:53:49</sys_updated_on>
<table/>
<target_name>onComplete</target_name>
<type>Transform Script</type>
<update_domain>global</update_domain>
<update_guid>a1db8e6640407c1085be26346cf94f29</update_guid>
<update_guid_history>a1db8e6640407c1085be26346cf94f29:1923115874,10467e805408b01041ef4461859a5ae5:-1345907397,a62cc91f992320107fec4e5e54c568b7:1893090556,98e3a89351ab2410185c2975f2bf5adb:-2067133626,2bd1b77e70a3e010785e63adb0480075:1893090556,56892bfe3a6fa0101f6c9a86ae185b23:-1223606238,fd08efbed0eba010abac5d61096505c2:1717321034,50994f3af5ef60102916da68ffa02d21:1589475620,54f1b63e872b601094857c04c27b1ded:1902720654,3adc3e3086d3245000c81b8206c43828:1589475620,28defda86e17e050b0aede4d4f3364cf:-1054791800,3158887de6baa0506e816eb137149309:-626838177,0dc617dd46ba60507b4dee46b60ed6c9:1896271721,1b45f101bcbeec104fdb2bef3fbab65e:-986756010,402169493d3eec1055dabded5fde647e:774499104,35b0e109503eec10579eed8ba8e07ff1:-1729161345,6318b4b88efeac1064bfa530f1aaf14b:-1423726263,c96ba47c19faac10a469a915d47d1573:-1966819408,3b80ec21c86ee0901ec8777525c90e12:-1423726263,341f9ce18a2ee090a8185802b8b8a004:-312418934,931e1061566ee09085740c97ab7d4bdd:1765177598,fe7ae2dde966e090cf2cf11097b6b680:1239064490,689ec611a226e090b5f8c3057dfa2244:1120830048,81ba20d51e2ea090547a797e426670fb:1318361344,f22ec1858fee6090e16011c213677f45:1120830048,237eb041c22e6090706cafd5e124f049:1763010988,ee27b1990fa0a0108ff0d533eb1be970:1539478026,b1f6b19990a0a0101dfe0aebc8a6c502:-863266214,5d240128ba902810ddfc744c93c94935:-1577878871,ce92a0fd3de7d010e479230976f33c77:-1081968176,792cd2e89861230010f2dfc054210056:12616528,c3db751002ed2300906acfef0d1cf49e:-1331130750</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_92e8017f37112300fdfc097973990e33</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Nutanix_FetchConfigureSettingDropdown&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Nutanix_FetchConfigureSettingDropdown&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Nutanix_FetchConfigureSettingDropdown = Class.create();
Nutanix_FetchConfigureSettingDropdown.prototype = {
    initialize: function() {
        this.appUtil = new Nutanix_Calm_Utils();
        this.logger = new Nutanix_Calm_Logger();

        this.disabledFields = gs.getProperty('x_nuta2_nutanix_ca.disabled.fields') + '';
    },
	_insertIntoOptions: function(var_json) {
		
		try{
		
		var sys_id = var_json.sys_id + "";
		var grQuestionChoice = new GlideRecord("x_nuta2_nutanix_ca_generic_table_for_dropdown");
		grQuestionChoice.addQuery('variable', sys_id + "");
		grQuestionChoice.query();
		grQuestionChoice.deleteMultiple();
		
		
		for(var i = 0; i &lt; var_json.options.length; i++) {
			var grQuestionChoice = new GlideRecord("x_nuta2_nutanix_ca_generic_table_for_dropdown");
			grQuestionChoice.initialize();
			grQuestionChoice.variable = sys_id + "";
			grQuestionChoice.name = var_json.options[i] + "";
			grQuestionChoice.value = var_json.options[i] + "";
			grQuestionChoice.insert();
		}
		} catch(e) {gs.info("In _insertIntoOptions:"+e);}
	},

	_sysIdToValue: function(values) {
		var sys_id_arr = values.split(",");
		var val_arr = [];
		for(var i = 0; i &lt; sys_id_arr.length; i++) {
			var grQuestionChoice = new GlideRecord("x_nuta2_nutanix_ca_generic_table_for_dropdown");
			grQuestionChoice.get(sys_id_arr[i] + "");
			val_arr.push(grQuestionChoice.value + "");
		}
		return val_arr.toString();
	},
	
    variableArrayParser: function(type, parent_uuid, var_array) {
        //this.logger.debug("++++variableArrayParser type" + type + " parent_uuid," + parent_uuid + " var_array" + var_array);
		var cat_launch = false;
        if (type + "" == 'catalog') {
			cat_launch = true;
            var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
            gr.addQuery("item_name", parent_uuid);
            gr.query();
            if (gr.next()) {
                parent_uuid = gr.blueprint.uuid + "";
                type = "blueprints";
                if ("" + gr.item_name.category.title == "Un-Published Blueprints") {
                    type = "blueprints";
                }
                if ("" + gr.item_name.category.title == "Published Blueprints") {
                    type = "published";
                }

            }
        }
		//gs.info("Var array"+var_array);
        var parsed_var_array = JSON.parse(var_array);
        var pre_map = {};
        var extApiFlag = false;
        for (var i = 0; i &lt; parsed_var_array.length; i++) {
            var var_data = parsed_var_array[i];
		
			var hasMacros = (this.appUtil._createMacroArray(var_data.def_val + "").length != 0);
			if(hasMacros)
				var_data.value = var_data.def_val;
            var depends_on = this.appUtil.getMacroDependencies(JSON.stringify(var_data));
            
			//Amit Kolkar
			//if (hasMacros == true) {
				pre_map[var_data.name] = {
					"depends_on": depends_on,
					"value": (hasMacros) ? var_data.def_val + "" : var_data.value + "",
					"uuid": var_data.uuid,
					"type": var_data.type,
					"data_type": var_data.data_type,
					"name": var_data.name,
					"sys_id": (var_data.sys_id) ? var_data.sys_id : "",
					"catalog_launch": cat_launch
				};

				if(var_data.type == 'EXEC_LOCAL' || var_data.type == 'HTTP_LOCAL' || var_data.type == 'EXEC_SECRET' || var_data.type == 'HTTP_SECRET') {
					pre_map[var_data.name].requiresApiCall = true;
				} else {
					if(var_data.options &amp;&amp; var_data.options.choices &amp;&amp; var_data.options.choices.length != 0) {
						pre_map[var_data.name].options = var_data.options.choices;
						pre_map[var_data.name].data_type = "LIST_SINGLE";
					}
					if(var_data.data_type + "" == 'LIST') {
						if(cat_launch)
							pre_map[var_data.name].value = this._sysIdToValue(var_data.value);
						pre_map[var_data.name].data_type = var_data.data_type;
					}
				}
			//}
			
		}
		gs.info("Pre Map"+JSON.stringify(pre_map));
        //this.logger.debug("====variableArrayParser type" + type + " parent_uuid," + parent_uuid + " var_array" + var_array);
        var result = this.getHttpValues(type, parent_uuid, JSON.stringify(pre_map));

        return result;
    },

    fetchLaunchVars: function(catSysId, profile) {

        var varJSON = {
            "profile": {},
            "service": {}
        };
        var grProfile = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
        grProfile.addQuery('application_profile.name', profile + "");
        grProfile.addQuery('catalog_item', catSysId + "");
        grProfile.addQuery('isprofilevariable', true);
        grProfile.orderBy('variable.name');
        grProfile.query();
        while (grProfile.next())
            varJSON.profile[grProfile.variable.sys_id + ""] = grProfile.field_json + "";
        var grService = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
        grService.addQuery('catalog_item', catSysId);
        grService.addQuery('isservicevariable', true);
        grService.orderBy('variable.name');
        grService.query();
        while (grService.next()) {
            varJSON.service[grService.service_name.question_text + ""] = {};
        }

        grService.query();
        while (grService.next()) {
            varJSON.service[grService.service_name.question_text + ""][grService.variable.sys_id + ""] = grService.field_json + "";
        }

        //[grService.sys_id] = {"field_json": grService.field_json + ""};
        //varJSON["service"][grService.service_name] = {"sys_id": grService.sys_id, "field_json": grService.field_json};
        return JSON.stringify(varJSON);
    },

    fieldValidation: function(catSysId, fieldValueMap) {
        try {
            this.logger.debug("Inside Nutanix_ClientServerScriptBridge.fieldValidation.");
            var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
            gr.addEncodedQuery('catalog_item=' + catSysId + '^isprofilevariable=true^ORisservicevariable=true^ORfield_regexISNOTEMPTY');
            gr.query();

            var fieldValReg = {};
            while (gr.next()) {

                var listRegex = {};
                if (gr.type + '' == 21) {
                    var filter = (gr.variable.reference_qual + '').substr(9, (gr.variable.reference_qual + '').length);
                    var genTable = new GlideRecord('x_nuta2_nutanix_ca_generic_table_for_dropdown');
                    genTable.addQuery('variable', filter);
                    genTable.query();
                    while (genTable.next()) {
                        listRegex[genTable.sys_id + ''] = genTable.value + '';
                    }


                }
                fieldValReg[gr.variable.name + ''] = {
                    "status": false,
                    "regex": gr.field_regex + '',
                    "type": gr.type + '',
                    "data_type": gr.data_type + '',
                    "listRegex": listRegex
                };
            }
            return JSON.stringify(fieldValReg);

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fieldValidation. Error:- " + e);
        }

    },


    hideAccessLocalGroupOption: function() //hide the option
    {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.hideAccessLocalGroupOption.");

            var lg = new GlideRecord('x_nuta2_nutanix_ca_calm_plugin_configuration');
            lg.addQuery();
            lg.query();
            while (lg.next()) {
                return lg.use_local_groups;

            }
        } catch (e) {
            this.logger.error("Error caught in Nutanix_FetchConfigureSettingDropdown.hideAccessLocalGroupOption:" + e);
        }
    },

    supportStatusMPI: function(bpSysID) {
        try {
            //             gs.info(bpSysID);
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.supportStatusMPI.");
            var ss = new GlideRecord('x_nuta2_nutanix_ca_nutanix_marketplaceitems');
            if (ss.get(bpSysID)) {
                return ss.support_status;
            }
        } catch (e) {
            this.logger.error("Error caught in Nutanix_FetchConfigureSettingDropdown.supportStatusMPI: " + e);
        }
    },

    advanceVariableDynamicOptions: function(catSysId, fieldValueMap) {
        try {

            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.advanceVariableDynamicOptions.");
            /*var launch_set_json = {};
			var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties+'');
			gr.addEncodedQuery('catalog_item='+catSysId+'^isprofilevariable=true^ORisservicevariable=true');//^data_typeINEXEC_SECRET,HTTP_SECRET,EXEC_LOCAL,HTTP_LOCAL');
			
			gr.query();
			
		
			var catalog =  new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
			catalog.addQuery('item_name',catSysId);
			catalog.query();
			
			var profile_json = {};
			var service_json = {};
			while(gr.next()) {
				var type = gr.data_type + "";
				var requires_api_call = false;
				
				if(type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET')
					requires_api_call = true;
				
				if(gr.isprofilevariable + "" == "true") {
					profile_json[gr.variable.question_text + ""] = {
						"sys_id" : gr.sys_id+'',
						"value" : gr.default_value + "",
						"depends_on" : JSON.parse(gr.field_json + ""),
						"uuid": gr.uuid + "",
						"type": type,
						"requiresApiCall": requires_api_call,
						"name": gr.variable.name+'',
						"question_text": gr.variable.question_text+''
					};
					
				}
				if(gr.isservicevariable + "" == "true") {
					service_json[gr.variable.question_text+''] = {
						"sys_id" : gr.sys_id+'',
						"value" : gr.default_value + "",
						"depends_on" : JSON.parse(gr.field_json + ""),
						"uuid": gr.uuid + "",
						"type": type,
						"requiresApiCall": requires_api_call,
						"name": gr.variable.name+'',
						"question_text": gr.variable.question_text+''
					};
				}
			}
			launch_set_json = {"profile_json": profile_json, "service_json": service_json};
			gs.info("Launch Page:"+JSON.stringify(launch_set_json));
			
			launch_set_json.profile_json = JSON.parse(this.getHttpValues('blueprints', catalog.blueprint.uuid + "" , JSON.stringify(launch_set_json.profile_json)));
			launch_set_json.service_json = JSON.parse(this.getHttpValues('blueprints', catalog.blueprint.uuid + "" , JSON.stringify(launch_set_json.service_json)));
			
			gs.info("Result:"+JSON.stringify(launch_set_json));
			return;*/
            var advanceFields = [];
            advanceFields[0] = {};
            advanceFields[1] = JSON.parse(this.fieldValidation(catSysId));
            return JSON.stringify(advanceFields);

        } catch (e) {
            this.logger.error("Error caught in Nutanix_FetchConfigureSettingDropdown.advanceVariableDynamicOptions:" + e);
        }
    },
	
	_substituteMacroEscript: function(value, all_values) {
		
        var macro_split = value.split("@@{");
        for (var i = 0; i &lt; macro_split.length; i++) {
            if (macro_split[i].includes("}@@")) { //@@{Prince}@@
                var internal_split = macro_split[i].split("}@@");
                if (!all_values[internal_split[0]])
                    return '';
					internal_split[0] = (all_values[internal_split[0]].value + "").replace(/\n/g, "");
				macro_split[i] = internal_split.join('');
            }
        }
        return macro_split.join('');
    },

    _substituteMacro: function(value, all_values) {
		
        var macro_split = value.split("@@{");
        for (var i = 0; i &lt; macro_split.length; i++) {
            if (macro_split[i].includes("}@@")) { //@@{Prince}@@
                var internal_split = macro_split[i].split("}@@");
                if (!all_values[internal_split[0]])
                    return '';
				
				//gs.info("unescapeAayega ::  " + unescape(all_values[internal_split[0]].value));
				//code changes by Prince ...
// 				if((all_values[internal_split[0]].value).contains("\n")){
// 					var res =  all_values[internal_split[0]].split("\n");
// 					gs.info("Prince inside if ::: " + res.join());
// 					internal_split[0] = res.join();
// 				}else{
					internal_split[0] = unescape(all_values[internal_split[0]].value + "");
//}
				macro_split[i] = internal_split.join('');
            }
        }
		
        return macro_split.join('');
    },

    _createOverrideVarBody: function(all_values, variable_json) {
		
		try {
        var type = variable_json.type + "";
        var override_array = [];

        if (type == "EXEC_LOCAL" || type == "EXEC_SECRET") {
            override_array.push({
                "key": "script",
                "value": this._substituteMacroEscript(variable_json.depends_on.script.value, all_values)
            });
        }

        if (type == "HTTP_LOCAL" || type == "HTTP_SECRET") {
            var supported_fields = {
                "content_type": "",
                "url": "",
                "request_body": "",
				"response_paths": ""
            };
            for (var i in supported_fields) {
                
                var val = (variable_json.depends_on[i].value) ? variable_json.depends_on[i].value + "" : "";
				
				if(i == "response_paths"){
					val = (variable_json.depends_on[i].value) ? variable_json.depends_on[i].value : {};
					var var_name = {};
					for(var k in val)
						var_name[k] = this._substituteMacro(val[k] + "", all_values);
					override_array.push({
						"key": i,
						"value": var_name
					});
				}
				else{
					override_array.push({
						"key": i,
						"value": this._substituteMacro(val, all_values)
					});
				}
            }
			
        }
			
        return JSON.stringify(override_array);
		} catch(e) {
			gs.info("override_array er"+e);
		}
    },

    getHttpValues: function(type, parent_uuid, pre_map) {
       //  gs.info("!Pre map:"+JSON.stringify(pre_map));
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getHttpValues. type : " + type + " parent_uuid : " + parent_uuid + " pre_map : " + pre_map);

            var post_value_map = {};
            pre_map = JSON.parse(pre_map);
            var top_pre_map = {};
            for (var i in pre_map) {
                top_pre_map[i] = this.appUtil.createPreMap(pre_map[i].depends_on, pre_map[i].type);
				//gs.info("Amit K 1 : " + top_pre_map[i] + " and dep on " + JSON.stringify(pre_map[i].depends_on) + " and type " + pre_map[i].type);
            }
			
            var top_post_map = this.appUtil.createDependencyMap(top_pre_map);
			//gs.info("Amit K : 2 " + top_post_map);
            var dependency_array = top_post_map.Dep_array;
			//gs.info("Amit K : 3 " + dependency_array);
            var error_array = top_post_map.error_map;
            var mpi_uuid, bp_name, project_uuid, environment_uuid;
            if (type == 'unpublished') {
                var table_name = (type == 'unpublished') ? this.appUtil.configuration.table.Blueprint + '' : 'x_nuta2_nutanix_ca_nutanix_marketplaceitems';
                var grBlueprint = new GlideRecord(table_name);
                if (grBlueprint.get(parent_uuid)) {
                    parent_uuid = grBlueprint.uuid + '';
                    type = 'blueprints';
                }
            }
            if (type == 'published') {
                var table_name = (type == 'unpublished') ? this.appUtil.configuration.table.Blueprint + '' : 'x_nuta2_nutanix_ca_nutanix_marketplaceitems';
                var grBlueprint = new GlideRecord(table_name);
                if (grBlueprint.get(parent_uuid)) {
                    mpi_uuid = grBlueprint.uuid + '';
                    bp_name = grBlueprint.name;

                    var bp_project = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_projects_blueprints_relationship');
                    bp_project.addEncodedQuery('catalog_item.sys_id=' + parent_uuid);
                    bp_project.query();
                    while (bp_project.next()) {
                        project_uuid = bp_project.projects.uuid;
                        environment_uuid = bp_project.projects.environment_uuid;
                    }
                    parent_uuid = this.mpiPatchingBp(mpi_uuid, bp_name, project_uuid, environment_uuid);
                    type = 'blueprints';
                }
				else{
						var grBlueprint = new GlideRecord(table_name);
						grBlueprint.addEncodedQuery('uuidLIKE'+parent_uuid);
						grBlueprint.query();
						if (grBlueprint.next()){
							mpi_uuid = grBlueprint.uuid + '';
							bp_name = grBlueprint.name;
							var bp_project = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_projects_blueprints_relationship');
							bp_project.addEncodedQuery('catalog_item.sys_id='+grBlueprint.sys_id);
							bp_project.query();
							while(bp_project.next()){
								project_uuid = bp_project.projects.uuid;
								environment_uuid = bp_project.projects.environment_uuid;
							}
							parent_uuid = this.mpiPatchingBp(mpi_uuid, bp_name, project_uuid,  environment_uuid);
							type = 'blueprints';
						}
				}
            }
            gs.info("Dependency JSON!"+JSON.stringify(dependency_array));
            for (var pos = 0; pos &lt; dependency_array.length; pos++) {

                var var_json = pre_map[dependency_array[pos]];
                this.logger.debug("!!!!! var_json \n" + JSON.stringify(var_json));
                if (!var_json) {
                    this.logger.error('Dependent variable "' + dependency_array[pos] + '" not found.');
                    continue;
                }

				//gs.info(var_json.name);
				
                if (!var_json.requiresApiCall) {
					if(var_json.data_type + "" == "LIST_SINGLE" || var_json.data_type + "" == 'LIST') {
						//gs.info(JSON.stringify(var_json));
						var_json.options = this._substituteMacro(var_json.options.toString(), pre_map).split(',');
						var_json.value = this._substituteMacro(var_json.value, pre_map);//2,33,44
					}
					else
						var_json.value = this._substituteMacro(var_json.value, pre_map);
					
					if(var_json.depends_on.all_dep.length != 0 &amp;&amp; var_json.data_type + "" == "LIST" &amp;&amp; var_json.catalog_launch) {
						//gs.info("Is work:"+JSON.stringify(var_json));
						this._insertIntoOptions(var_json);
					}
					if(var_json.depends_on.all_dep.length != 0)
						post_value_map[dependency_array[pos]] = var_json;
                    continue;
                }
				
                var var_uuid = var_json.uuid;
                var options = {
                    "state": "",
                    "values": []
                };

                var request_body = JSON.stringify({
                    "requestId": "",
                      "overridden_field": this._createOverrideVarBody(pre_map, var_json)
                });
				//gs.info("Override body: "+request_body);
				//gs.info("Send val body: "+'POST' + '/' + type + '/' + parent_uuid + '/variables/' + var_uuid + '/values' + request_body + "");
                var sendValuesBody = this.appUtil.makeCalmApiCall('POST', '/' + type + '/' + parent_uuid + '/variables/' + var_uuid + '/values', request_body + "");
				if(!sendValuesBody)
					continue;
				
                var parsedSendValueBody = JSON.parse(sendValuesBody.getBody());
				//gs.info('1) HTTP variable discussion POST \n endpoint /'+type+'/'+parent_uuid+'/variables/'+var_uuid+'/value'+"\n request body "+JSON.stringify(request_body)+"\n response body "+JSON.stringify(parsedSendValueBody));
                // 				gs.info(sendValuesBody.getBody());
                var valPollBody = {
                    "requestId": parsedSendValueBody.request_id,
                    "trlId": parsedSendValueBody.trl_id
                };
//gs.info("valPollBody "+JSON.stringify(valPollBody));
                var getValuesBody = this.appUtil.makeCalmApiCall('POST', '/' + type + '/' + parent_uuid + '/variables/' + var_uuid + '/values', JSON.stringify(valPollBody));
                var parsedValueBody = JSON.parse(getValuesBody.getBody());
				if(!getValuesBody)
					continue;
				
				//gs.info('2) HTTP variable discussion POST \n endpoint /'+type+'/'+parent_uuid+'/variables/'+var_uuid+'/value'+"\n request body "+JSON.stringify(valPollBody)+"\n response body "+JSON.stringify(parsedValueBody));
				
                var execState = parsedValueBody.state + "";
                while (execState == 'RUNNING' || execState == 'running') {
                    getValuesBody = this.appUtil.makeCalmApiCall('POST', '/' + type + '/' + parent_uuid + '/variables/' + var_uuid + '/values', JSON.stringify(valPollBody));
                    parsedValueBody = JSON.parse(getValuesBody.getBody());
                    execState = parsedValueBody.state + "";
                }
				//gs.info("Values:"+getValuesBody.getBody());
                //r parsedValueBody = JSON.parse(getValuesBody.getBody());
				
                if (parsedValueBody.state == 'SUCCESS') {
                    var_json.state = parsedValueBody.state;
                    var_json.default_value = var_json.value + "";
                    var_json.value = [];
                    for (var i in parsedValueBody.values)
                        var_json.value[i] = parsedValueBody.values[i];
                } else {
                    var_json.state = parsedValueBody.state;
                    var_json.error = [];
                    for (var j in parsedValueBody.message_list)
                        var_json.error[j] = parsedValueBody.message_list[j].message;
                }

                post_value_map[dependency_array[pos]] = var_json;
            }

            //gs.info("!!!Pre map:" + JSON.stringify(pre_map));
			gs.info("post_value_map:" + JSON.stringify(post_value_map));
            return JSON.stringify(post_value_map);

        } catch (e) {
            this.logger.error("Error caught in Nutanix_FetchConfigureSettingDropdown.getHttpValues:" + e);
        }
    },



    getSubnet: function(catalog) {
        try {
            var clusterJson = {};
            var catalogSysid;
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getSubnet");
            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
            gr.addQuery('item_name', catalog);
            gr.query();
            if (gr.next()) {
                var grProject = new GlideRecord(this.appUtil.configuration.table.Project + '');
                grProject.addQuery('sys_id', gr.project + '');
                grProject.query();
                if (grProject.next()) {
				 if(grProject.subnet+''!=''){
                    var subnetList = grProject.subnet.split(',');
                    for (var x in subnetList) {
                        var grSubnet = new GlideRecord(this.appUtil.configuration.table.subnet + '');
                        grSubnet.addQuery('sys_id', subnetList[x]);
                        grSubnet.query();
                        if (grSubnet.next()) {
                            if (!clusterJson[grSubnet.cluster_name + '']) {
                                clusterJson[grSubnet.cluster_name + ''] = {};
                                clusterJson[grSubnet.cluster_name + '']['uuid'] = grSubnet.cluster_uuid + '';
                                clusterJson[grSubnet.cluster_name + '']['subnet'] = {};
                            }

                            clusterJson[grSubnet.cluster_name + '']['subnet'][grSubnet.uuid + ''] = grSubnet.name + '';
                        }

                    }
			}

                }

            }
            /*setting session*/
            var grCat = new GlideRecord('x_nuta2_nutanix_ca_nutanix_catalog_items');
            grCat.addQuery('sys_id', catalog);
            grCat.query();
            if (grCat.next()) {
                var gr = new GlideRecord('item_option_new');
                gr.addQuery('cat_item.name', grCat.name + '');
                gr.query();
                var catalog_clusterJSON = {};
                while (gr.next()) {
                    if ((gr.name + '').endsWith('cluster_name') &amp;&amp; gr.question_text == 'Cluster Name') {
                        catalog_clusterJSON[gr.sys_id + ''] = {};
                        catalog_clusterJSON[gr.sys_id + '']['name'] = gr.name + '';
                        catalog_clusterJSON[gr.sys_id + '']['label'] = gr.question_text + '';
                        catalog_clusterJSON[gr.sys_id + '']['value'] = gr.default_value + '';
                    }
                }

                for (var k in catalog_clusterJSON) {
                    var serviceName = (catalog_clusterJSON[k].name + '').slice(0, (catalog_clusterJSON[k].name).length - 12);
                    catalog_clusterJSON[k]['nics'] = {};
                    var gr = new GlideRecord('item_option_new');
                    gr.addQuery('cat_item.name', grCat.name + '');
                    gr.query();
                    while (gr.next()) {
                        if ((gr.name + '').indexOf(serviceName) != -1 &amp;&amp; (gr.name + '').indexOf('_nic_') != -1) {
                            catalog_clusterJSON[k]['nics'][gr.sys_id + ''] = gr.name + '';
                        }
                    }
                }
            }

            /**/


            var catNicJson = {
                "catalog_data": catalog_clusterJSON,
                "cluster_info": clusterJson
            };
            return (JSON.stringify(catNicJson));

        } catch (e) {
            this.logger.error("Inside Nutanix_FetchConfigureSettingDropdown.getSubnet." + e);
        }
    },

    getNutanixSubnetList: function(projects) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getNutanixSubnetList.");
            var subnetListJSON = {};
            var project_array = projects.split(',');
            var project_subnet = [];
            for (var i = 0; i &lt; project_array.length; i++) {
                var projectSubnet = new GlideRecord(this.appUtil.configuration.table.Project);
                if (projectSubnet.get(project_array[i] + '')) {
                    if (projectSubnet.subnet != '') {
                        var subnetList = projectSubnet.subnet.split(',');
                        for (var k in subnetList) {
                            if ((project_subnet.indexOf(subnetList[k])) == -1)
                                project_subnet.push(subnetList[k]);
                        }
                    }
                }
            }

            for (var j in project_subnet) {
                var subnetListGR = new GlideRecord(this.appUtil.configuration.table.subnet);
                subnetListGR.addQuery('sys_id', subnetList[j] + '');
                subnetListGR.query();
                if (subnetListGR.next()) {
                    subnetListJSON[subnetListGR.uuid + ''] = {
                        "name": subnetListGR.name + '',
                        "cluster_name": subnetListGR.cluster_name + '',
                        "cluster_uuid": subnetListGR.cluster_uuid + ''
                    };
                }
            }

            return subnetListJSON;
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getNutanixSubnetList. Error:- " + e);
        }
    },

    getServiceVariableDetails: function(projects, blueprint, profiles, type, bpType) {

        try {
            var subnet_info = this.getNutanixSubnetList(project);
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getServiceVariableDetails.");
            var project_array = projects.split(',');
            var profile_array = profiles.split(',');
            var project = project_array[0];
            var profile = profile_array[0];

            var variables = new GlideRecord(this.appUtil.configuration.table.applicationProfiles + '');
            if (variables.get(profile)) {
                this.logger.info("Fetching variables associated with profile " + variables.name);
            }
            var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
            gr.addQuery('application_profile', profile);
            gr.addQuery('catalog_item', blueprint);
            gr.addQuery('isprofilevariable', false);
            gr.orderBy('variable.order');
            gr.query();

            var answer = {};

            var i = 0;

            while (gr.next()) {

                if (!answer[gr.service_name.name + ''])
                    answer[gr.service_name.name + ''] = {};

                var categoryName = gr.category_name.name + '';

                if (gr.category_name.name + '' == gr.variable.name + '') {

                    if (!answer[gr.service_name.name + ''][gr.category_name.name + ''])
                        answer[gr.service_name.name + ''][gr.category_name.name + ''] = {};

                    if (bpType == "published" &amp;&amp; type == "new") {

                        var ans = (this.getVariablePatchedValue(type + '', gr.default_value + '', gr.sys_id, gr.variable.name + '', gr.category_name.name + '', gr.category_name.question_text + ''));
                        this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getServiceVariableDetails.Patched Value for " + gr.variable.name + " :: " + ans);
                        answer[gr.service_name.name + ''][gr.category_name.name + '']['new_' + gr.sys_id + ''] = (ans) ? JSON.parse(ans) : [];
                        answer[gr.service_name.name + ''][gr.category_name.name + '']['new_' + gr.sys_id + ''].notCmplx = false;


                    } else {
                        answer[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''] = (gr.default_value + '') ? JSON.parse(gr.default_value + '') : {};
                        answer[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].notCmplx = false;
                    }

                } else {

                    /*if (gr.is_hidden == true)
                        continue;*/


                    if (!answer[gr.service_name.name + ''][gr.category_name.name + ''])
                        answer[gr.service_name.name + ''][gr.category_name.name + ''] = {};
                    var catname = (gr.category_name.name + '').substring(((gr.service_name.name + '').length) + 1);
                    var varname = (gr.variable.name + '').substring(((gr.service_name.name + '').length) + 1);
                    var default_value = "";
                    var runtime_config = gr.runtime_config + '';
                    var isdisabled = gr.isdisabled + '';
                    var ans, parsedAns;
                    if (catname == "ssh_keys" &amp;&amp; bpType == "published") {
                        var hasKey;
                        var gr_ssh = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                        gr_ssh.addQuery('application_profile', profile);
                        gr_ssh.addQuery('catalog_item', blueprint);
                        gr_ssh.addQuery('isprofilevariable', false);
                        gr_ssh.addQuery('variable.name', 'CONTAINS', 'key_0');
                        gr_ssh.orderBy('variable.order');
                        gr_ssh.query();
                        if (gr_ssh.next()) {
                            hasKey = "true";
                        }
                        if (hasKey != "true") {
                            ans = this.getVariablePatchedValue(type + '', gr.default_value + '', gr.sys_id, gr.variable.name + '', gr.category_name.name + '', gr.category_name.question_text + '', "true");
                            parsedAns = (ans) ? JSON.parse(ans) : {};
                            answer[gr.service_name.name + ''][gr.category_name.name + ''] = parsedAns;
                        }

                    }
                    if ((!gr.default_value) &amp;&amp; bpType == "published") {
                        ans = this.getVariablePatchedValue(type + '', gr.default_value + '', gr.sys_id, gr.variable.name + '', gr.category_name.name + '', gr.category_name.question_text + '');
                        parsedAns = (ans) ? JSON.parse(ans) : "";
                        this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getServiceVariableDetails.Patched Value for " + gr.variable.name + " :: " + ans);
                        if (parsedAns) {
                            default_value = parsedAns.value + '';
                            var isSupported = (default_value + '' == 'Cloud-init' || default_value + '' == 'Sysprep' || (varname + '').startsWith('key_') || (this.disabledFields.includes(varname) &amp;&amp; varname + '' != 'name' &amp;&amp; varname + '' != 'type')) ? false : true;
                            //runtime_config = (parsedAns.runtime+'') ? parsedAns.runtime+'' : gr.runtime_config+'';
                            runtime_config = ((default_value + '').indexOf('@@') != -1 || isSupported + '' == 'false') ? false : (parsedAns.runtime + '') ? parsedAns.runtime + '' : gr.runtime_config + '';
                            isdisabled = ((default_value + '').indexOf('@@') != -1 || isSupported + '' == 'false') ? true : (runtime_config + '' == 'true') ? false : true; // ((default_value+'').indexOf('@@') != -1 || (this.disabledFields.includes(varname) &amp;&amp; varname+''!='name' &amp;&amp; varname+''!='type')) ? true : (runtime_config+'' == 'true') ? false : true;
                            // 							
                        }
                    }

                    /*Advanced Variable*/
                    var opt = [];
                    if (gr.variable.type + '' == 5 &amp;&amp; gr.isservicevariable == true) {
                        var optionRec = new GlideRecord("question_choice");
                        optionRec.addQuery('question', gr.variable + '');
                        optionRec.query();
                        while (optionRec.next()) {

                            opt.push(optionRec.value + '');

                        }


                    } else if (gr.variable.type + '' == 21 &amp;&amp; gr.isservicevariable == true) {
                        var varRefRec = gr.variable.getRefRecord().reference_qual + '';
                        varRefRec = varRefRec.substr(9, varRefRec.length);
                        var optionRec = new GlideRecord(this.appUtil.configuration.table.dropDownTable + '');
                        optionRec.addQuery('variable', varRefRec);
                        optionRec.query();
                        while (optionRec.next()) {

                            opt.push(optionRec.value + '');
                        }


                    }

                    answer[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''] = {
                        'name': gr.variable.name + '',
                        'question_text': gr.variable.question_text + '',
                        'value': (gr.default_value + '') ? gr.default_value + '' : default_value,
                        'runtime_config': (gr.default_value + '') ? gr.runtime_config + '' : runtime_config,
                        'type': gr.variable.type + '',
                        'isprofilevariable': gr.isprofilevariable + '',
                        'uuid': gr.uuid + '',
                        'isdisabled': (gr.default_value + '') ? gr.isdisabled + '' : isdisabled,

                        'isSupported': gr.issupported + '',
                        'isservicevariable': gr.isservicevariable + '',

                        'notCmplx': true,

                        'val_type': gr.value_type + '',
                        'description': gr.variable.help_text + '',
                        'mandatory': gr.variable.mandatory + '',
                        'regex': gr.field_regex + '',
                        'options': opt,
                        'data_type': gr.data_type + '',
                        'serviceField': (gr.isprofilevariable + '' == 'false' &amp;&amp; gr.isservicevariable + '' == 'false') ? true : false,
                        "field_json": (gr.isservicevariable + '' == 'true') ? this.appUtil.getMacroDependencies(gr.field_json + "") : {},
                        "field": (gr.isservicevariable + '' == 'true') ? gr.field_json + "" : "{}",
                        "isHidden": gr.is_hidden + ""
                    };
                }
                i++;
            }

            this.logger.debug("Final answer" + i + " :: " + JSON.stringify(answer));
            var returnJSON = {};
            returnJSON['service_configuration'] = answer;
            returnJSON['subnet_list'] = subnet_info;
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getServiceVariableDetails. return : " + JSON.stringify(returnJSON));
            return JSON.stringify(returnJSON);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getServiceVariableDetails. Error:- " + e);
        }

    },

    getVariablePatchedValue: function(type, value, grSysid, varname, categoryName, categoryNameText, sshFlag) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getVariablePatchedValue for variable :: " + varname + ",Category Name :: " + categoryNameText + ",SSh flag :: " + sshFlag);
            if ((!value || (varname == categoryName) || categoryNameText == "SSH Keys")) {
                var ans = {
                    "value": "",
                    "runtime": false
                };
                var session = gs.getSession();
				var bpResponse = JSON.parse(session.getClientData('Cloned_bp_response'));

                var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                gr.addQuery("sys_id", grSysid);
                gr.query();
                if (gr.next()) {
                    var profileUUID = "";
                    for (var i in bpResponse) {
                        var serviceJSON = bpResponse[i];
                        if (serviceJSON.name.toLowerCase() + '' == gr.service_name.name + '') {

                            for (var k in serviceJSON.profile) {
                                var profile = serviceJSON.profile[k];
                                if (profile.name == gr.application_profile.name + '') {
                                    profileUUID = profile.uuid + '';
                                    break;
                                }
                            }

                            if (serviceJSON.substrate[profileUUID]) {
                                this.logger.debug("Patching :: Found profile :: " + gr.application_profile.name + '');
                                var substrateJSON = serviceJSON.substrate[profileUUID];
                                var categoryJSON = "";
                                var insideCategoryJSON = "";
                                switch (gr.category_name.question_text + '') {

                                    case "Connection":
                                        categoryJSON = "readiness_probe";
                                        break;

                                    case "VM Configuration": //categoryJSON = "create_spec";
                                        //break;

                                    case "Storage": //categoryJSON = "create_spec";
                                        //break;
                                    case "Network Adapters":

                                    case "Network Profiles":

                                    case "OS Profile":

                                    case "OS Profile Script":

                                    case "Management Optional":

                                    case "Storage Profile":

                                    case "Disks":

                                    case "Networking":

                                    case "Categories":

                                    case "API ACCESS":

                                    case "Blank Disks":

                                    case "Images":

                                    case "SSH Keys":

                                    case "Storage Profile Data Disks":

                                    case "Guest Customization":

                                    case "VDisks":
                                        categoryJSON = "create_spec";
                                        break;

                                }
                                var runtime = "";
                                var field;
                                var fieldName;
                                var editables = substrateJSON.editables[categoryJSON];
                                for (var l in substrateJSON) {
                                   
                                    if (l + '' == categoryJSON) {
                                        
                                        //this.logger.debug("Patching :: Category :: "+categoryJSON);

                                        if (categoryJSON == "create_spec") {
                                            fieldName = varname.substring(serviceJSON.name.length + 1);
                                            // 												if((categoryName) &amp;&amp; categoryName == "categories"){
                                            // 													var ansCat = {};var q=1;
                                            // 													var edit = (editables.categories) ? editables.categories : "false";
                                            // 													var disable = (edit == "true") ?  "false" : "true";
                                            // 													for( var b in substrateJSON[l].categories ){

                                            // 														ansCat['category_'+q] =	{
                                            // 																				  "name":  serviceJSON.name+'_'+b,
                                            // 																				  "question_text": b+'',
                                            // 																				  "value": substrateJSON[l].categories[b],
                                            // 																				  "runtime_config": edit,
                                            // 																				  "type": "6",
                                            // 																				  "isprofilevariable": "false",
                                            // 																				  "uuid": "",
                                            // 																				  "isdisabled": disable,
                                            // 																				  "notCmplx": true
                                            // 																				};
                                            // 													}

                                            // 													return JSON.stringify(ansCat);
                                            // 												}
                                            if (categoryNameText == "VM Configuration") {
                                                for (var b in substrateJSON[l]) {
                                                    if (b == fieldName) {
                                                        ans.value = (substrateJSON[l][b]) ? substrateJSON[l][b] : '';
                                                        if (fieldName != "template" &amp;&amp; fieldName != "datastore" &amp;&amp; fieldName != "host") ans.runtime = (editables[b]) ? (editables[b]) : false;
                                                        return JSON.stringify(ans);
                                                    }
                                                }
                                            }
                                            
                                            for (var s in substrateJSON[l].resources) {
                                                
                                                var varServiceName = serviceJSON.name.toLowerCase() + '_' + s + '';
                                                
                                                if (categoryNameText == "SSH Keys" &amp;&amp; sshFlag == "true" &amp;&amp; s == "sshKeys") {

                                                    var ansSSH = {};
                                                    var q = 0;
                                                    var edit = "false";
                                                    var disable = "true";
                                                    for (var b in substrateJSON[l].resources.sshKeys) {
                                                        
                                                        for (var w in editables.resources.sshKeys) {
                                                            if (b == w)
                                                                edit = editables.resources.sshKeys[w] + '';
                                                        }
                                                        ansSSH['new_ssh_key_' + q] = {
                                                            "name": serviceJSON.name + '_key_' + b,
                                                            "question_text": 'key ' + b + '',
                                                            "value": substrateJSON[l].resources.sshKeys[b],
                                                            "runtime_config": edit,
                                                            "type": "6",
                                                            "isprofilevariable": "false",
                                                            "uuid": "",
                                                            "isdisabled": (edit == "true") ? "false" : "true",
                                                            "isSupported": "true",
                                                            "isservicevariable": "false",
                                                            "notCmplx": true
                                                        };
                                                        q++;

                                                    }
                                                    
                                                    return JSON.stringify(ansSSH);
                                                } else if (categoryNameText == "Management Optional" &amp;&amp; s == "guestCustomization") {
                                                    if (fieldName == "startup_script") {
                                                        ans.value = (substrateJSON[l].resources[s].startupScript) ? substrateJSON[l].resources[s].startupScript : '';
                                                        ans.runtime = (editables.resources.guestCustomization &amp;&amp; editables.resources.guestCustomization.startupScript) ? editables.resources.guestCustomization.startupScript : false;
                                                        return JSON.stringify(ans);
                                                    } else if (fieldName == "security_groups") {
                                                        var groups = (substrateJSON[l].resources.tags.items &amp;&amp; substrateJSON[l].resources.tags.items[0]) ? substrateJSON[l].resources.tags.items[0] : '';
                                                        for (var p = 1; p &lt; substrateJSON[l].resources.tags.items.length; p++)
                                                            groups = groups + ',' + substrateJSON[l].resources.tags.items[i];
                                                        ans.value = groups;
                                                        ans.runtime = (editables.resources.tags &amp;&amp; editables.resources.tags.items) ? editables.resources.tags.items : false;
                                                       
                                                        return JSON.stringify(ans);
                                                    }

                                                } else if (categoryNameText == "API ACCESS" &amp;&amp; s == "serviceAccounts") {
                                                    ans.value = (substrateJSON[l].resources[s][0].email) ? substrateJSON[l].resources[s][0].email : "";
                                                    ans.runtime = (editables.resources.serviceAccounts[0] &amp;&amp; editables.resources.serviceAccounts[0].email) ? editables.resources.serviceAccounts[0].email : false;
                                                    return JSON.stringify(ans);
                                                } else if (categoryNameText == "Disks" &amp;&amp; s == "disks") {
                                                    for (var j in substrateJSON[l].resources[s]) {
                                                        substrateJSON[l].resources[s][j].runtime = {};
                                                        substrateJSON[l].resources[s][j].disabled = {};
                                                        for (var x in editables.resources.disks)
                                                            if (x == j) {
                                                                substrateJSON[l].resources[s][j].runtime = (editables.resources.disks[x]) ? (editables.resources.disks[x]) : {};
                                                                substrateJSON[l].resources[s][j].disabled = substrateJSON[l].resources[s][j].runtime;
                                                            }
                                                    }
                                                    
                                                    return JSON.stringify(substrateJSON[l].resources[s]);
                                                } else if (categoryNameText == "Networking" &amp;&amp; s == "networkInterfaces") {
                                                    for (var j in substrateJSON[l].resources[s]) {
                                                        substrateJSON[l].resources[s][j].runtime = {};
                                                        substrateJSON[l].resources[s][j].disabled = {};
                                                        for (var x in editables.resources.networkInterfaces)
                                                            if (x == j) {
                                                                substrateJSON[l].resources[s][j].runtime = (editables.resources.networkInterfaces[x]) ? (editables.resources.networkInterfaces[x]) : {};
                                                                substrateJSON[l].resources[s][j].disabled = substrateJSON[l].resources[s][j].runtime;
                                                            }
                                                    }
                                                    return JSON.stringify(substrateJSON[l].resources[s]);
                                                } else if (categoryNameText == "Blank Disks" &amp;&amp; s == "blankDisks") {
                                                    for (var j in substrateJSON[l].resources[s]) {
                                                        substrateJSON[l].resources[s][j].runtime = {};
                                                        substrateJSON[l].resources[s][j].disabled = {};
                                                        for (var x in editables.resources.blankDisks)
                                                            if (x == j) {
                                                                substrateJSON[l].resources[s][j].runtime = (editables.resources.blankDisks[x]) ? editables.resources.blankDisks[x] : {};
                                                                substrateJSON[l].resources[s][j].disabled = substrateJSON[l].resources[s][j].runtime;
                                                            }
                                                    }
                                                    
                                                    return JSON.stringify(substrateJSON[l].resources[s]);
                                                } else if (categoryNameText == "Images" &amp;&amp; s == "disk_list") {
                                                    var bootIndex = (substrateJSON[l].resources.boot_config &amp;&amp; substrateJSON[l].resources.boot_config.boot_device &amp;&amp; substrateJSON[l].resources.boot_config.boot_device.disk_address &amp;&amp; substrateJSON[l].resources.boot_config.boot_device.disk_address.device_index + '') ? substrateJSON[l].resources.boot_config.boot_device.disk_address.device_index : -1;
                                                    for (var j in substrateJSON[l].resources[s]) {
                                                        substrateJSON[l].resources[s][j].runtime = {};
                                                        substrateJSON[l].resources[s][j].disabled = {};
                                                        substrateJSON[l].resources[s][j].bootable = (bootIndex == j) ? true : false;
                                                        for (var x in editables.resources.disk_list)
                                                            if (x == j) {
                                                                substrateJSON[l].resources[s][j].runtime = (editables.resources.disk_list[x]) ? editables.resources.disk_list[x] : {};
                                                                substrateJSON[l].resources[s][j].disabled = substrateJSON[l].resources[s][j].runtime;
                                                            }
                                                    }
                                                    
                                                    return JSON.stringify(substrateJSON[l].resources[s]);
                                                } else if (categoryNameText == "Storage Profile Data Disks" &amp;&amp; s == "storage_profile") {
                                                    for (var j in substrateJSON[l].resources[s].data_disk_list) {
                                                        substrateJSON[l].resources[s].data_disk_list[j].runtime = {};
                                                        substrateJSON[l].resources[s].data_disk_list[j].disabled = {};
                                                        for (var x in editables.resources.storage_profile.data_disk_list)
                                                            if (x == j) {
                                                                substrateJSON[l].resources[s].data_disk_list[j].runtime = (editables.resources.storage_profile &amp;&amp; editables.resources.storage_profile.data_disk_list[x]) ? editables.resources.storage_profile.data_disk_list[x] : {};
                                                                substrateJSON[l].resources[s].data_disk_list[j].disabled = substrateJSON[l].resources[s].data_disk_list[j].runtime;
                                                            }
                                                    }
                                                    
                                                    return JSON.stringify(substrateJSON[l].resources[s].data_disk_list);
                                                } else if (categoryNameText == "OS Profile" &amp;&amp; s == "os_profile") {
                                                    for (var j in substrateJSON[l].resources[s].secrets) {
                                                        substrateJSON[l].resources[s].secrets[j].runtime = {};
                                                        substrateJSON[l].resources[s].secrets[j].disabled = {};
                                                        for (var x in editables.resources.os_profile.secrets)
                                                            if (x == j) {
                                                                substrateJSON[l].resources[s].secrets[j].runtime = (editables.resources.os_profile &amp;&amp; editables.resources.os_profile.secrets[x]) ? editables.resources.os_profile.secrets[x] : {};
                                                                substrateJSON[l].resources[s].secrets[j].disabled = substrateJSON[l].resources[s].secrets[j].runtime;

                                                            }
                                                    }
                                                   
                                                    return JSON.stringify(substrateJSON[l].resources[s].secrets);
                                                } else if (categoryNameText == "OS Profile Script" &amp;&amp; s == "os_profile") {

                                                    ans.value = (substrateJSON[l].resources[s].linux_config &amp;&amp; substrateJSON[l].resources[s].linux_config.custom_data + '') ? substrateJSON[l].resources[s].linux_config.custom_data + '' : "";
                                                    ans.runtime = (editables.resources.os_profile &amp;&amp; editables.resources.os_profile.linux_config &amp;&amp; editables.resources.os_profile.linux_config.custom_data) ? editables.resources.os_profile.linux_config.custom_data : false;
                                                   
                                                    return JSON.stringify(ans);

                                                } else if (categoryNameText == "Guest Customization" &amp;&amp; s == "guest_customization") {
                                                    varname = varname.substring(serviceJSON.name.length + 1);
                                                    for (var j in substrateJSON[l].resources[s].linux_data) {
                                                        if (varname == "dns_search_path" &amp;&amp; j == varname) {
                                                            ans.value = (substrateJSON[l].resources[s].linux_data.dns_search_path[0] + '') ? substrateJSON[l].resources[s].guest_customization.linux_data.dns_search_path[0] + '' : "";
                                                            ans.runtime = (editables.resources.guest_customization &amp;&amp; editables.resources.guest_customization.linux_data &amp;&amp; editables.resources.guest_customization.linux_data.dns_search_path[0]) ? editables.resources.guest_customization.linux_data.dns_search_path[0] : false;
                                                            return JSON.stringify(ans);
                                                        } else if (j == varname) {
                                                            ans.value = substrateJSON[l].resources[s].linux_data[j] + '';
                                                            for (var x in editables.resources.guest_customization.linux_data) {
                                                                if (x == varname) {
                                                                    ans.runtime = editables.resources.guest_customization.linux_data[x] + '';
                                                                    return JSON.stringify(ans);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (fieldName == "script") {

                                                        ans.value = (substrateJSON[l].resources[s].cloud_init &amp;&amp; substrateJSON[l].resources[s].cloud_init.user_data) ? substrateJSON[l].resources[s].cloud_init.user_data : ((substrateJSON[l].resources[s].sysprep &amp;&amp; substrateJSON[l].resources[s].sysprep.unattend_xml) ? substrateJSON[l].resources[s].sysprep.unattend_xml : (substrateJSON[l].resources[s].cloud_init) ? substrateJSON[l].resources[s].cloud_init : '');
                                                        ans.runtime = (editables.resources.guest_customization &amp;&amp; editables.resources.guest_customization.cloud_init) ? (editables.resources.guest_customization.cloud_init) : false;
                                                        return (JSON.stringify(ans));
                                                    } else if (fieldName == "install_type") {
                                                        ans.value = (substrateJSON[l].resources[s].sysprep &amp;&amp; substrateJSON[l].resources[s].sysprep.install_type) ? substrateJSON[l].resources[s].sysprep.install_type : "";
                                                        ans.runtime = false;
                                                        return (JSON.stringify(ans));
                                                    } else if (fieldName == "type") {
                                                        ans.value = (substrateJSON[l].resources[s].sysprep) ? 'Sysprep' : 'Cloud-init';
                                                        ans.runtime = false;
                                                        return (JSON.stringify(ans));
                                                    }
                                                } else if (varname == (serviceJSON.name.toLowerCase() + '_' + 'storage') &amp;&amp; s == "block_device_map") {

                                                    substrateJSON[l].resources[s].root_disk.runtime = "";
                                                    substrateJSON[l].resources[s].root_disk.disabled = "";
                                                    substrateJSON[l].resources[s].root_disk.runtime = (editables.resources.block_device_map.root_disk.size_gb) ? editables.resources.block_device_map.root_disk.size_gb + '' : 'false';
                                                    substrateJSON[l].resources[s].root_disk.disabled = substrateJSON[l].resources[s].root_disk.runtime;
                                                    for (var j in substrateJSON[l].resources[s].data_disk_list) {

                                                        substrateJSON[l].resources[s].data_disk_list[j].runtime = 'false';
                                                        substrateJSON[l].resources[s].data_disk_list[j].disabled = 'false';
                                                        if (editables &amp;&amp; editables.resources &amp;&amp; editables.resources.block_device_map &amp;&amp; editables.resources.block_device_map.data_disk_list[j] &amp;&amp; editables.resources.block_device_map.data_disk_list[j].size_gb) {
                                                            var runtime_data = editables.resources.block_device_map.data_disk_list[j].size_gb;
                                                            substrateJSON[l].resources[s].data_disk_list[j].runtime = (runtime_data) ? runtime_data + '' : 'false';
                                                            substrateJSON[l].resources[s].data_disk_list[j].disabled = substrateJSON[l].resources[s].data_disk_list[j].runtime;
                                                        }
                                                    }
                                                    return JSON.stringify(substrateJSON[l].resources[s]);
                                                } else if (varname == (serviceJSON.name.toLowerCase() + '_vdisks') &amp;&amp; s == "disk_list") {
                                                    for (var j in substrateJSON[l].resources[s]) {
                                                        substrateJSON[l].resources[s][j].runtime = {};
                                                        substrateJSON[l].resources[s][j].disabled = {};
                                                        for (var x in editables.resources.disk_list) {
                                                            if (x == j) {
                                                                substrateJSON[l].resources[s][j].runtime = editables.resources.disk_list[j];
                                                                substrateJSON[l].resources[s][j].disabled = substrateJSON[l].resources[s][j].runtime;
                                                            }
                                                        }
                                                    }
                                                    return JSON.stringify(substrateJSON[l].resources[s]);
                                                } else if (varname == (serviceJSON.name.toLowerCase() + '_network_adapters') &amp;&amp; s == "nic_list") {
                                                    for (var j in substrateJSON[l].resources[s]) {
                                                        substrateJSON[l].resources[s][j].runtime = {};
                                                        substrateJSON[l].resources[s][j].disabled = {};
                                                        for (var x in editables.resources.nic_list)
                                                            if (x == j) {
                                                                substrateJSON[l].resources[s][j].runtime = (editables.resources.nic_list[j]) ? (editables.resources.nic_list[j]) : {};
                                                                substrateJSON[l].resources[s][j].disabled = substrateJSON[l].resources[s][j].runtime;
                                                            }
                                                    }
                                                    return JSON.stringify(substrateJSON[l].resources[s]);
                                                } else if (categoryNameText == "Storage Profile" &amp;&amp; s == "storage_profile") {
                                                    for (var j in substrateJSON[l].resources[s].image_details) {
                                                        varServiceName = serviceJSON.name.toLowerCase() + '_' + j;
                                                        if (varname == varServiceName) {
                                                            ans.value = (substrateJSON[l].resources[s].image_details[j]) ? (substrateJSON[l].resources[s].image_details[j] + '') : "";
                                                            ans.runtime = (editables.resources.storage_profile.image_details &amp;&amp; editables.resources.storage_profile.image_details[j]) ? (editables.resources.storage_profile.image_details[j]) : false;
                                                            if ((varname.indexOf("use_custom_image") != -1) &amp;&amp; !ans.value) ans.value = "false";
                                                            return JSON.stringify(ans);
                                                        }

                                                    }
                                                    for (var j in substrateJSON[l].resources[s].os_disk_details) {
                                                        varServiceName = serviceJSON.name.toLowerCase() + '_' + substrateJSON[l].resources[s].image_details[j];
                                                        if (varname == varServiceName) {
                                                            ans.value = (substrateJSON[l].resources[s].os_disk_details[j]) ? (substrateJSON[l].resources[s].os_disk_details[j]) : "";
                                                            ans.runtime = (editables.resources.storage_profile.os_disk_details[j]) ? (editables.resources.storage_profile.os_disk_details[j]) : false;
                                                            return JSON.stringify(ans);
                                                        }
                                                    }
                                                    if (varname.indexOf("use_managed_disks") != -1) {
                                                        ans.value = (substrateJSON[l].resources[s].is_managed) ? (substrateJSON[l].resources[s].is_managed) : "";
                                                        ans.runtime = (editables.resources.storage_profile.is_managed) ? (editables.resources.storage_profile.is_managed) : false;
                                                        return JSON.stringify(ans);
                                                    }
                                                } else if (categoryNameText == "Network Profiles" &amp;&amp; s == "nw_profile") {
                                                    for (var j in substrateJSON[l].resources[s].nic_list) {
                                                        substrateJSON[l].resources[s].nic_list[j].runtime = {};
                                                        substrateJSON[l].resources[s].nic_list[j].disabled = {};
                                                        for (var x in editables.resources.nw_profile.nic_list)
                                                            if (x == j) {
                                                                substrateJSON[l].resources[s].nic_list[j].runtime = (editables.resources.nw_profile.nic_list[j]) ? editables.resources.nw_profile.nic_list[j] : {};
                                                                substrateJSON[l].resources[s].nic_list[j].disabled = substrateJSON[l].resources[s].nic_list[j].runtime;
                                                            }
                                                    }
                                                    return JSON.stringify(substrateJSON[l].resources[s].nic_list);
                                                } else if (varname + '' == varServiceName + '') {
                                                    field = substrateJSON[l].resources[s];
                                                    if (!(field.constructor == Object || field.constructor == Array)) {
                                                        ans.value = substrateJSON[l].resources[s] + '';
                                                        ans.runtime = this.checkEditable(editables, varname, categoryJSON, serviceJSON.name.toLowerCase() + '_') + '';
                                                        return JSON.stringify(ans);
                                                    } else if (s == "security_group_list") {
                                                        var sec = field[0].security_group_id + '';
                                                        for (var m = 1; m &lt; field.length; m++) {
                                                            sec += "," + field[m].security_group_id + '';
                                                        }
                                                        ans.value = sec + '';
                                                        ans.runtime = this.checkEditable(editables, varname, categoryJSON, serviceJSON.name.toLowerCase() + '_') + '';
                                                        return JSON.stringify(ans);
                                                    }
                                                } else if (categoryNameText == "VM Configuration" &amp;&amp; s == "hw_profile" &amp;&amp; varname.indexOf("hardware_profile") != -1) {
                                                    ans.value = (substrateJSON[l].resources[s].vm_size) ? substrateJSON[l].resources[s].vm_size : '';
                                                    ans.runtime = (editables.resources.hw_profile.vm_size) ? (editables.resources.hw_profile.vm_size) : false;
                                                    return JSON.stringify(ans);
                                                } else if (categoryNameText == "SSH Keys" &amp;&amp; fieldName == "block_project_wide_ssh_key" &amp;&amp; s == "metadata" &amp;&amp; sshFlag != "true") {
                                                    var blockValue = false;
                                                    for (var data in substrateJSON[l].resources[s]) {
                                                        if (substrateJSON[l].resources[s][data].key + '' == 'block-project-ssh-keys') {
                                                            blockValue = substrateJSON[l].resources[s][data].value + '';
                                                            ans.runtime = (editables.resources.metadata.items[data]) ? (editables.resources.metadata.items[data]) : false;
                                                        }
                                                    }
                                                    ans.value = blockValue;
                                                    return JSON.stringify(ans);
                                                }
                                            }
                                        } else if (categoryJSON == "readiness_probe") {
                                            for (var s in substrateJSON[l]) {
                                                var varServiceName = serviceJSON.name.toLowerCase() + '_' + s;
                                                if (varname + '' == varServiceName + '') {
                                                    ans.value = substrateJSON[l][s] + '';
                                                    if (varname.indexOf("disable_readiness_probe") != -1)
                                                        ans.value = (substrateJSON[l][s] == 'true') ? false : true;
                                                    ans.runtime = this.checkEditable(editables, varname, categoryJSON, serviceJSON.name.toLowerCase() + '_') + '';
                                                    return JSON.stringify(ans);
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                        }
                    }
                }
            }
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getVariablePatchedValue. Error:- " + e);
        }
    },
    //Ptaching of MPI
    //Ptaching of MPI
    mpiPatching: function(projects, blueprint) {

        var logger = new Nutanix_Calm_Logger();
        var utils = new Nutanix_Calm_Utils();
        var reqUtils = new Nutanix_RequestUtil();
        var blueprintTemplate = "";
        var catVariableBody = {};
        var bpVariablesJSON = {};
        var parseResp = {};

        try {
            logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.mpiPatching.");

            var project = projects.split(',');
            project = project[0];

            var bp = new GlideRecord('x_nuta2_nutanix_ca_nutanix_marketplaceitems');
            bp.addQuery('sys_id', blueprint);
            bp.query();

            var mpi_uuid = (bp.next()) ? bp.uuid : "";

            var response = utils.makeCalmApiCall('GET', '/calm_marketplace_items/' + mpi_uuid);

            if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                response = JSON.parse(response.getBody());

                var environment_uuid = ' ';
                var project_uuid = '';

                var projectRecord = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
                projectRecord.addQuery('sys_id', project);
                projectRecord.query();

                if (projectRecord.next()) {
                    project_uuid = projectRecord.uuid + '';
                    environment_uuid = projectRecord.environment_uuid + '';
                }

                var name = bp.name + '';
                var app_bp_name = ((name + GlideSecureRandomUtil.getSecureRandomString(8) + mpi_uuid).replaceAll('-', ' ').trim().replaceAll(' ', '_')).substring(0, 64);
                var tmpbody = {
                    "status": response.status.resources.app_blueprint_template.status,
                    "spec": response.spec.resources.app_blueprint_template.spec
                };

                var body = {
                    "api_version": "3.0", //response.api_version,
                    "metadata": {
                        "kind": "blueprint",
                        "project_reference": {
                            "kind": "project",
                            "uuid": project_uuid + ''
                        },
                        "categories": response.metadata.categories //changes
                    },
                    "spec": {
                        "description": response.spec.resources.app_blueprint_template.spec.description, //response.spec.description,
                        "app_blueprint_name": app_bp_name + '',
                        "source_marketplace_version": response.spec.resources.version, //"1.0.0", //changes
                        "source_marketplace_name": name + '',
                        "resources": response.spec.resources.app_blueprint_template.spec.resources

                        //reqUtils.makeResourceBody(tmpbody, tmpbody.status.resources, current)
                        //response.spec.resources.app_blueprint_template.spec.resources
                    }
                };
               
                    body.spec.environment_uuid = environment_uuid + '';
                
                //gs.error("MPI payload send: "+JSON.stringify(body));
                //	return "MPI Launch Body "+JSON.stringify(body);

                var response = utils.makeCalmApiCall('POST', '/blueprints/marketplace_launch', JSON.stringify(body));
                // 			return "post marketplace launch  call "+response.getStatusCode();
                if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                    var session = gs.getSession();
                    session.putClientData('non_filtered_cloned_bp_response', response.getBody());

                    parseResp = JSON.parse(response.getBody());
                    blueprintTemplate = (parseResp.status.resources) ? parseResp.status.resources : "";
                    var clonedBpUuid = parseResp.metadata.uuid;

                    //gs.error("Patching : "+response.getBody());

                } else {
                    logger.error("API call to '/blueprints/marketplace_launch' failed with name : " + app_bp_name + ":-" + response.getBody());
                    //gs.error("Errorr :: "+(JSON.parseresponse.getBody()).message_list[0].message);
                    return JSON.stringify({
                        "errMess": JSON.parse(response.getBody()).message_list[0].message,
                        "status": false
                    });
                }

                var bpVariables = new Nutanix_CreateCatalogVariables();
                if (bp.template_type == "Single Vm") {

                    var service_body = [{
                        "uuid": "singleVm-default-service-uuid",
                        "name": "single_vm_configuration"
                    }];

                    catVariableBody = {
                        "substrate_definition_list": (blueprintTemplate.substrate_definition_list) ? blueprintTemplate.substrate_definition_list : "",
                        "app_profile_list": (blueprintTemplate.app_profile_list) ? blueprintTemplate.app_profile_list : "",
                        "service_definition_list": service_body,
                        "package_definition_list": (blueprintTemplate.package_definition_list) ? blueprintTemplate.package_definition_list : ""
                    };
                    bpVariablesJSON = bpVariables._filterJSONDatatoService(catVariableBody);
                } else if (blueprintTemplate.package_definition_list &amp;&amp; blueprintTemplate.substrate_definition_list &amp;&amp; blueprintTemplate.app_profile_list &amp;&amp; blueprintTemplate.service_definition_list) {
                    catVariableBody = {
                        "substrate_definition_list": (blueprintTemplate.substrate_definition_list) ? blueprintTemplate.substrate_definition_list : "",
                        "app_profile_list": (blueprintTemplate.app_profile_list) ? blueprintTemplate.app_profile_list : "",
                        "service_definition_list": (blueprintTemplate.service_definition_list) ? blueprintTemplate.service_definition_list : "",
                        "package_definition_list": (blueprintTemplate.package_definition_list) ? blueprintTemplate.package_definition_list : ""
                    };

                    bpVariablesJSON = bpVariables._filterJSONDatatoService(catVariableBody);
                }

                bpVariablesJSON.uuid = parseResp.metadata.uuid + '';
                bpVariablesJSON.name = parseResp.metadata.name + '';

                var session = gs.getSession();
                session.putClientData('Cloned_bp_response', JSON.stringify(bpVariablesJSON));
                var clientData = session.getClientData('Cloned_bp_response');
                logger.debug("MPI cloned Blueprint response ::" + clientData);
                return JSON.stringify({
                    "errMess": "Successfull",
                    "status": true
                }); //JSON.parse(clientData).uuid+'';
            } else {
                logger.error("API call to '/calm_marketplace_items/uuid' failed: " + response.getBody());
                var result = {
                    "errMess": (response.getBody()).message_list[0].message,
                    "status": false
                };
                return JSON.stringify(result);
            }
        } catch (e) {
            logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.mpiPatching. Error:- " + e);
            return "false";
        }
    },

    fetchBlueprints: function(projectUUID, blueprintType) {

        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.fetchBlueprints.");

            var gr = new GlideRecord(this.appUtil.configuration.table.catalogProjectRelation + '');
            gr.addQuery('projects.uuid', projectUUID);

            if (blueprintType == 'unpublished')
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_unpublishedBP_sysId'));
            else
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_category_sysId'));

            gr.orderBy('catalog_item.name');
            gr.query();

            var ans = {};
            var i = 0;

            while (gr.next()) {
                if ((blueprintType == 'unpublished' &amp;&amp; gr.catalog_item.state + '' == 'ACTIVE') || (blueprintType != 'unpublished' &amp;&amp; gr.catalog_item.state + '' == 'active')) {
                    ans[i] = {
                        'sys_id': gr.catalog_item + '',
                        'name': gr.catalog_item.name + '' + " " + gr.version + ''
                    };
                    i++;
                }
            }

            this.logger.debug("Fetched " + i + " blueprints.");

            return JSON.stringify(ans);

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.fetchBlueprints. Error:- " + e);
        }

    },

    fetchApplicationProfiles: function(blueprintSysId) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.fetchApplicationProfiles.");

            var blueprint = new GlideRecord(this.appUtil.configuration.table.Blueprint + '');
            if (blueprint.get(blueprintSysId)) {
                this.logger.info("Fetching profiles associated with blueprint " + blueprint.name);
            }
            var gr = new GlideRecord(this.appUtil.configuration.table.catalogProfileRelation + '');
            gr.addQuery('catalog_item', blueprintSysId);
            gr.addQuery('state', 'active');
            //gr.addEncodedQuery('providersNOT LIKEaws^providersNOT LIKEazure^providersNOT LIKEgcp');
            gr.orderBy('application_profile.name');
            gr.query();

            var ans = {};
            var i = 0;
            while (gr.next()) {
                ans[i] = {
                    'sys_id': gr.application_profile + '',
                    'name': gr.application_profile.name + ''
                };
                i++;
            }

            this.logger.debug("Fetched " + i + " profiles.");

            return JSON.stringify(ans);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.fetchApplicationProfiles. Error:- " + e);
        }
    },

    fetchProviderIcons: function(catSysId) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.fetchProviderIcons.");

            var grBp = new GlideRecord('x_nuta2_nutanix_ca_nutanix_catalog_items');
            if (grBp.get(catSysId)) {
                var bpSysId = grBp.blueprint_name;
            }
            if (bpSysId != '') {
                var gr = new GlideRecord(this.appUtil.configuration.table.catalogProfileRelation + '');
                gr.addQuery('catalog_item', bpSysId);
                gr.addQuery('state', 'active');
                gr.orderBy('application_profile.name');
                gr.query();

                var entities = [];
                var i = 0;
                while (gr.next()) {
                    entities[i] = {
                        'profile': gr.application_profile.name + '',
                        'providers': gr.providers + ''
                    };
                    i++;
                }

                this.logger.debug("Fetched " + i + " profiles.");

                return JSON.stringify(entities);
            } else {
                var grReq = new GlideRecord('sc_req_item');
                grReq.addQuery('sys_id', catSysId);
                grReq.query();
                if (grReq.next()) {
                    var grBp = new GlideRecord('x_nuta2_nutanix_ca_nutanix_catalog_items');
                    if (grBp.get(grReq.cat_item)) {
                        var bpSysId = grBp.blueprint_name;
                    }
                    if (bpSysId != '') {
                        var gr = new GlideRecord(this.appUtil.configuration.table.catalogProfileRelation + '');
                        gr.addQuery('catalog_item', bpSysId);
                        gr.orderBy('application_profile.name');
                        gr.query();

                        var entities = [];
                        var i = 0;
                        while (gr.next()) {
                            entities[i] = {
                                'profile': gr.application_profile.name + '',
                                'providers': gr.providers + ''
                            };
                            i++;
                        }

                        this.logger.debug("Fetched " + i + " profiles.");

                        return JSON.stringify(entities);
                    }
                }
            }
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.fetchProviderIcons. Error:- " + e);
        }
    },

    getProfileVariableDetails: function(project, blueprint, profile) {

        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getProfileVariableDetails.");

            var variables = new GlideRecord(this.appUtil.configuration.table.applicationProfiles + '');
            if (variables.get(profile)) {
                this.logger.info("Fetching variables associated with profile " + variables.name);
            }

            var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
            gr.addQuery('application_profile', profile);
            gr.addQuery('catalog_item', blueprint);
            gr.addQuery('isprofilevariable', true);
            gr.orderBy('variable.name');
            gr.query();

            var answer = {};
            var i = 0;
            while (gr.next()) {

                /*if (gr.is_hidden == true)
                    continue;*/

                var opt = [];
                if (gr.variable.type + '' == 5) {
                    var optionRec = new GlideRecord("question_choice");
                    optionRec.addQuery('question', gr.variable + '');
                    optionRec.query();
                    while (optionRec.next()) {

                        opt.push(optionRec.value + '');

                    }

                } else if (gr.variable.type + '' == 21) {
                    var varRefRec = gr.variable.getRefRecord().reference_qual + ''
                    varRefRec = varRefRec.substr(9, varRefRec.length);
                    var optionRec = new GlideRecord(this.appUtil.configuration.table.dropDownTable + '');
                    optionRec.addQuery('variable', varRefRec);
                    optionRec.query();
                    while (optionRec.next()) {
                        opt.push(optionRec.value + '');
                    }

                }
                // 				else if(gr.variable.type+'' == 10 || gr.variable.type+'' == 9){
                // 					var dtVal = gr.default_value+'';
                // 					if( gr.variable.type+'' == 9 ){
                // 						var gdt = new GlideDate() ;
                // 						gdt.setValue(dtVal);
                // 						gr.default_value = gdt.getByFormat("yyyy-MM-dd");
                // 					}

                // 					else{
                // 						var gdt = new GlideDateTime() ;
                // 						gdt.setValue(dtVal);
                // 						gr.default_value = gdt.getDate().getByFormat("yyyy-MM-dd")+' '+gdt.getTime().getByFormat("HH:mm:ss");
                // 					}

                // 				}

                answer[gr.sys_id + ''] = {
                    'name': gr.variable.name + '',
                    'question_text': gr.variable.question_text + '',
                    'value': gr.default_value + '',
                    'runtime_config': gr.runtime_config + '',
                    'type': gr.variable.type + '',
                    'isprofilevariable': gr.isprofilevariable + '',
                    'uuid': gr.uuid + '',
                    'isdisabled': gr.isdisabled + '',
                    "val_type": gr.value_type + '',
                    "description": gr.variable.help_text + '',
                    "mandatory": gr.variable.mandatory + '',
                    "regex": gr.field_regex + '',
                    "options": opt,
                    "data_type": gr.data_type + '',
                    "field_json": this.appUtil.getMacroDependencies(gr.field_json + ""),
                    "field": gr.field_json + "",
                    "isHidden": gr.is_hidden + ""
                };
                i++;
            }

            this.logger.debug("Fetched " + i + " variables.");

            return JSON.stringify(answer);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getProfileVariableDetails. Error:- " + e);
        }

    },



    checkEditable: function(editables, varname, categoryJSON, serviceJSON) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.checkEditable.");
            if (categoryJSON == "create_spec") {

                for (var i in editables.resources) {
                    var varServiceName = serviceJSON + i;
                    if (varname == varServiceName) {
                        return editables.resources[i] + '';
                    }
                }

            } else if (categoryJSON == "readiness_probe") {
                for (var i in editables) {
                    var varServiceName = serviceJSON + i;
                    if (varname == varServiceName) {
                        return editables[i] + '';
                    }
                }
            }

        } catch (e) {
            this.logger.error("Inside Nutanix_FetchConfigureSettingDropdown.checkEditable. " + e);
        }

    },

    getCrendentialsDetails: function(project, blueprint, profile) {

        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getCrendentialsDetails.");

            var gr = new GlideRecord(this.appUtil.configuration.table.Credentials + '');
            gr.addQuery('catalog_item', blueprint);
            gr.orderBy('name');
            gr.query();

            var answer = {};
            var i = 0;
            while (gr.next()) {
                answer[gr.name + ''] = {};

                answer[gr.name + ''].credential_name = {
                    "name": 'credential_name',
                    "question_text": 'Credential Name',
                    "value": gr.name + ''
                };

                answer[gr.name + ''].username = {
                    "name": 'username',
                    "question_text": 'Username',
                    "value": gr.username + '',
                    "runtime_config": gr.username_editable + ''
                };

                answer[gr.name + ''].secret_type = {
                    "name": 'secret_type',
                    "question_text": 'Secret Type',
                    "value": gr.type + ''
                };

                if (gr.type + '' == 'KEY') {
                    answer[gr.name + ''].ssh_private_key = {
                        "name": 'ssh_private_key',
                        "question_text": 'SSH Private Key',
                        "value": gr.ssh_private_key + '',
                        "runtime_config": gr.secret_editable + ''
                    };

                    answer[gr.name + ''].passphrase = {
                        "name": 'passphrase',
                        "question_text": 'Passphrase',
                        "value": gr.passphrase + '',
                        "runtime_config": gr.passphrase_editable + ''
                    };
                } else {
                    answer[gr.name + ''].password = {
                        "name": 'password',
                        "question_text": 'Password',
                        "value": gr.password + '',
                        "runtime_config": gr.secret_editable + ''
                    };
                }

                answer[gr.name + ''].uuid = gr.uuid + '';
                answer[gr.name + ''].description = gr.description + '';
                answer[gr.name + ''].is_default = gr.is_default + '';
                answer[gr.name + ''].is_secret_modified = gr.is_secret_modified + '';
                answer[gr.name + ''].name = gr.name + '';
                answer[gr.name + ''].state = gr.state + '';

                answer[gr.name + ''].username_isdisabled = gr.username_isdisabled + '';
                answer[gr.name + ''].secret_isdisabled = gr.secret_isdisabled + '';
                answer[gr.name + ''].ssh_private_key_isdisabled = gr.ssh_private_key_isdisabled + '';
                answer[gr.name + ''].passphrase_isdisabled = gr.passphrase_isdisabled + '';

                answer[gr.name + ''].credential_reference = {
                    "value": gr.credential_reference + '',
                    "label": gr.credential_reference.name + ''
                };

                answer[gr.name + ''].runtime = gr.runtime + '';

                i++;
            }

            this.logger.debug("Fetched " + i + " credentials.");

            return JSON.stringify(answer);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getCrendentialsDetails. Error:- " + e);
        }

    },

    /*fetchEnvironmentCredentials: function( credSysId ){
    											try{
    												this.logger.debug("Inside x_nuta2_nutanix_ca_nutanix_runtime_configuration.fetchEnvironmentCredentials.");

    												var gr = new GlideRecord(this.appUtil.configuration.table.Credentials+'');
    												gr.get(credSysId);

    												var answer = {};
    													var i = 0;

    													if(gr){
    														answer[gr.name+''] = {};

    															answer[gr.name+''].credential_name = {
    																"name": 'credential_name',
    																"question_text": 'Credential Name',
    																"value": gr.name+''
    															};

    															answer[gr.name+''].username = {
    																"name": 'username',
    																"question_text": 'Username',
    																"value": gr.username+'',
    																"runtime_config": gr.username_editable+''
    															};

    															answer[gr.name+''].secret_type = {
    																"name": 'secret_type',
    																"question_text": 'Secret Type',
    																"value": gr.type+''
    															};

    															if(gr.type+'' == 'KEY'){
    																answer[gr.name+''].ssh_private_key = {
    																	"name": 'ssh_private_key',
    																	"question_text": 'SSH Private Key',
    																	"value": gr.ssh_private_key+'',
    																	"runtime_config": gr.ssh_private_key_editable+''
    																};

    																if(gr.passphrase+'')
    																	answer[gr.name+''].passphrase = {
    																	"name": 'passphrase',
    																	"question_text": 'Passphrase',
    																	"value": gr.passphrase+'',
    																	"runtime_config": gr.passphrase_editable+''
    																};
    															}else{
    																answer[gr.name+''].password = {
    																	"name": 'password',
    																	"question_text": 'Password',
    																	"value": gr.password+'',
    																	"runtime_config": gr.secret_editable+''
    																};
    															}

    															answer[gr.name+''].uuid = gr.uuid+'';
    															answer[gr.name+''].description = gr.description+'';
    															answer[gr.name+''].is_default = gr.is_default+'';
    															answer[gr.name+''].is_secret_modified = gr.is_secret_modified+'';
    															answer[gr.name+''].name = gr.name+'';
    															answer[gr.name+''].state = gr.state+'';

    															answer[gr.name+''].environment = gr.environment+'';
    															answer[gr.name+''].project = gr.project+'';

    															answer[gr.name+''].username_isdisabled = gr.username_isdisabled+'';
    															answer[gr.name+''].secret_isdisabled = gr.secret_isdisabled+'';
    															answer[gr.name+''].ssh_private_key_isdisabled = gr.ssh_private_key_isdisabled+'';
    															answer[gr.name+''].passphrase_isdisabled = gr.passphrase_isdisabled+'';

    															i++;
    														}

    														this.logger.debug("Fetched " + i + " credentials.");

    														return JSON.stringify(answer);

    													}catch(e){
    														this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.fetchEnvironmentCredentials. Error:- "+e);
    													}

    												},*/

    mappedCredentials: function(projects) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.mappedCredentials.");
            var project_array = projects.split(',');
            var arr = [];
            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_credential');
            for (var i = 0; i &lt;= project_array.length; i++) {
                if (i == 0)
                    var gs = gr.addQuery('project.sys_id', project_array[i] + '');
                else
                    gs.addOrCondition('project.sys_id', project_array[i] + '');
            }
            gr.query();
            while (gr.next()) {
                arr.push({
                    'label': gr.name + '',
                    'value': gr.sys_id + '',
                    'type': gr.type + '',
                    'username': gr.username + ''
                });
            }

            return JSON.stringify(arr);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.mappedCredentials. Error:- " + e);
        }
    },

    getCatalogInfo: function(sysId) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getCatalogInfo.");

            var catalogItem = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
            catalogItem.addQuery('item_name', sysId);
            //catalogItem.get(sysId);
            //this.logger.info("Fetching Catalog Details for "+blueprint.name);
            catalogItem.query();

            if (catalogItem.next()) {
                var rtn = {
                    "itemName": catalogItem.item_name.name + '',
                    "description": catalogItem.item_name.getRefRecord().description_markdown + '',
                    "usersName": catalogItem.user_criteria.user.getDisplayValue() + '',
                    "groupsName": catalogItem.user_criteria.group.getDisplayValue() + '',
                    "usersSysId": catalogItem.user_criteria.user + '',
                    "groupsSysId": catalogItem.user_criteria.group + ''
                };
                return JSON.stringify(rtn);
            }

            return '';

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getCatalogInfo. Error:- " + e);
        }

    },

    getRealtedCatalogItems: function(sysId) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getRealtedCatalogItems.");

            var catalogItem = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
            catalogItem.addQuery('blueprint', sysId);
            //catalogItem.get(sysId);
            //this.logger.info("Fetching Catalog Details for "+blueprint.name);
            catalogItem.query();
            var answer = {};

            var k = 0;

            while (catalogItem.next()) {
                answer[k] = {
                    'name': catalogItem.item_name.name + '',
                    'sys_id': catalogItem.item_name + ''
                };

                k++;
            }

            return JSON.stringify(answer);

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getRealtedCatalogItems. Error:- " + e);
        }

    },

    getBlueprintInfo: function(sysId) {
        try {

            this.logger.debug("Inside x_nuta2_nutanix_ca_nutanix_runtime_configuration.getBlueprintInfo.");

            var catalogItem = new GlideRecord(this.appUtil.configuration.table.catItem + '');
            if (catalogItem.get(sysId)) {
                catalogItem = new GlideRecord(catalogItem.sys_class_name + '');
                if (catalogItem.get(sysId)) {
                    var rtn = {
                        "itemName": catalogItem.name + '',
                        "description": catalogItem.description_markdown + '',
                    }
                    return JSON.stringify(rtn);
                }
            }

            return '';

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getBlueprintInfo. Error:- " + e);
        }

    },

    fetchRuntimeVariablesValue: function(sysId) {
        try {
            this.logger.debug("Inside x_nuta2_nutanix_ca_nutanix_runtime_configuration.fetchRuntimeVariablesValue.");
            var gr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
            if (gr.get(sysId)) {
                var arr = {};

                if (gr) {
                    arr = {
                        "application_profile": {
                            "sys_ids": gr.multiple_application_profile + ''
                        },
                        "blueprint": {
                            "name": gr.blueprint.name + ' ' + ((gr.blueprint.getRefRecord().version) ? gr.blueprint.getRefRecord().version : ''),
                            "sys_id": gr.blueprint + '',
                            "class": gr.blueprint.sys_class_name + ''
                        },
                        "project": {
                            "sys_ids": gr.multiple_projects + ''
                        },
                        "item_name": gr.item_name + ''
                    };

                    return JSON.stringify(arr);
                }

                return '';
            }
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.fetchRuntimeVariablesValue. Error:- " + e);
        }
    },

    checkDuplicate: function(catName, catSysId) {
        try {
            this.logger.debug("Inside x_nuta2_nutanix_ca_nutanix_runtime_configuration.checkDuplicate.");
            var gr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
            if (catSysId)
                gr.addEncodedQuery('item_name.name=' + catName + '^item_name!=' + catSysId);
            else
                gr.addEncodedQuery('item_name.name=' + catName);
            gr.query();

            if (gr.next())
                return 'yes';

            return 'no';
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.checkDuplicate. Error:- " + e);
        }

    },
    fetchMultipleBlueprints: function(blueprintType) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.fetchMultipleBlueprints.");
            var gr = new GlideRecord(this.appUtil.configuration.table.catalogProjectRelation + '');
            if (blueprintType == 'unpublished')
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_unpublishedBP_sysId'));
            else
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_category_sysId'));
            gr.orderBy('catalog_item.name');
            gr.query();

            var ans = {};
            var i = 0;
            while (gr.next()) {
                if ((blueprintType == 'unpublished' &amp;&amp; gr.catalog_item.state + '' == 'ACTIVE') || (blueprintType != 'unpublished' &amp;&amp; gr.catalog_item.state + '' == 'active')) {
                    ans[i] = {
                        'sys_id': gr.catalog_item + '',
                        'name': gr.catalog_item.name + '' + " " + gr.version + ''
                    };
                    i++;
                }
            }

            this.logger.debug("Fetched " + i + " blueprints.");
            return JSON.stringify(ans);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.fetchMultipleBlueprints. Error:- " + e);
        }
    },
    fetchMultipleProjects: function(blueprint, blueprintType) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.fetchBlueprints. blueprint ");
            var gr = new GlideRecord(this.appUtil.configuration.table.catalogProjectRelation + '');
            gr.addQuery('catalog_item', blueprint);
            if (blueprintType == 'unpublished')
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_unpublishedBP_sysId'));
            else
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_category_sysId'));
            gr.orderBy('catalog_item.name');
            gr.query();
            var ans = {};
            var i = 0;
            while (gr.next()) {
                if ((blueprintType == 'unpublished' &amp;&amp; gr.catalog_item.state + '' == 'ACTIVE') || (blueprintType != 'unpublished' &amp;&amp; gr.catalog_item.state + '' == 'active')) {
                    ans[i] = {
                        'name': gr.catalog_item.name + '' + " " + gr.version + '',
                        'project_sys_id': gr.projects + ''
                    };
                    i++;
                }
            }
            this.logger.debug("Fetched " + i + " project.");
            return JSON.stringify(ans);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.fetchMultipleProjects. Error:- " + e);
        }
    },
    getMultipleProfileVariableDetails: function(projects, blueprint, profiles, cat_item, delta_profiles, type) {
        try {
            this.logger.debug("####Inside Nutanix_FetchConfigureSettingDropdown.getMultipleProfileVariableDetails.");

            var answer = {};
            if (type == "update") {
                answer = this.getProfileVariableData(profiles, cat_item, JSON.stringify(answer));
                if (delta_profiles != '')
                    answer = this.getProfileVariableData(delta_profiles, blueprint, answer);
            } else {
                answer = this.getProfileVariableData(profiles, blueprint, JSON.stringify(answer));
            }

            this.logger.debug("####Inside Nutanix_FetchConfigureSettingDropdown.getMultipleProfileVariableDetails." + answer);
            return answer;
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getMultipleProfileVariableDetails. Error:- " + e);
        }

    },
    getMultipleServiceVariableDetails: function(projects, blueprint, profiles, type, bpType, cat_item, delta_profiles) {
        try {
            this.logger.debug("--Inside Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails.Projects " + projects + " Blueprint " + blueprint + " Profiles " + profiles + " Type " + type + " BpType " + bpType);

            var multipleService = [];
            if (type == 'update') {
                multipleService = this.getServiceVariableData(projects, cat_item, profiles, type, bpType, JSON.stringify(multipleService));
                multipleService = this.getServiceVariableData(projects, blueprint, delta_profiles, type, bpType, multipleService);
            } else {
                multipleService = this.getServiceVariableData(projects, blueprint, profiles, type, bpType, JSON.stringify(multipleService));
            }

            this.logger.debug("Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails final array. return : " + JSON.stringify(multipleService));
            return multipleService;
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.noProfileVariableDetails. Error:- " + e);
        }
    },

    noProfileVariableDetails: function(projects, blueprint, profiles) {
        this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.noProfileVariableDetails.");
        try {
            var project = projects.split(',');
            var profile = profiles.split(',');
            var answer = [];
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.noProfileVariableDetails. project : " + JSON.stringify(project) + " profile " + JSON.stringify(profile) + ' answer ' + JSON.stringify(answer));
            for (var i in profile) {
                var gr = new GlideAggregate(this.appUtil.configuration.table.variablesProperties + '');
                gr.addQuery('catalog_item', blueprint);
                gr.addQuery('isprofilevariable', true);
                gr.addQuery('application_profile', profile[i]);
                gr.query();
                if (gr.getRowCount() == 0 || gr.getRowCount() &lt; 1) {
                    answer.push(profile[i]);
                }
            }
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.noProfileVariableDetails. answer : " + JSON.stringify(answer));
            return JSON.stringify(answer);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.noProfileVariableDetails. Error:- " + e);
        }
    },
    getProjectSubnet: function(catalog, project_uuid) {
        try {
            var clusterJson = {};
            var catalogSysid;
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getProjectSubnet. catalog : " + catalog + " project_uuid : " + project_uuid);
            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
            gr.addQuery('item_name', catalog);
            gr.query();
            if (gr.next()) {
                var grProject = new GlideRecord(this.appUtil.configuration.table.Project + '');
                grProject.addQuery('uuid', project_uuid + '');
                grProject.query();
                if (grProject.next()) {
                    var subnetList = grProject.subnet.split(',');
                    for (var x in subnetList) {
                        var grSubnet = new GlideRecord(this.appUtil.configuration.table.subnet + '');
                        grSubnet.addQuery('sys_id', subnetList[x]);
                        grSubnet.query();
                        if (grSubnet.next()) {
                            if (!clusterJson[grSubnet.cluster_name + '']) {
                                clusterJson[grSubnet.cluster_name + ''] = {};
                                clusterJson[grSubnet.cluster_name + '']['uuid'] = grSubnet.cluster_uuid + '';
                                clusterJson[grSubnet.cluster_name + '']['subnet'] = {};
                            }

                            clusterJson[grSubnet.cluster_name + '']['subnet'][grSubnet.uuid + ''] = grSubnet.name + '';
                        }

                    }


                }

            }
            /*setting session*/
            var grCat = new GlideRecord('x_nuta2_nutanix_ca_nutanix_catalog_items');
            grCat.addQuery('sys_id', catalog);
            grCat.query();
            if (grCat.next()) {
                var gr = new GlideRecord('item_option_new');
                gr.addQuery('cat_item.name', grCat.name + '');
                gr.query();
                var catalog_clusterJSON = {};
                while (gr.next()) {
                    if ((gr.name + '').endsWith('cluster_name') &amp;&amp; gr.question_text == 'Cluster Name') {
                        catalog_clusterJSON[gr.sys_id + ''] = {};
                        catalog_clusterJSON[gr.sys_id + '']['name'] = gr.name + '';
                        catalog_clusterJSON[gr.sys_id + '']['label'] = gr.question_text + '';
                        catalog_clusterJSON[gr.sys_id + '']['value'] = gr.default_value + '';
                    }
                }

                for (var k in catalog_clusterJSON) {
                    var serviceName = (catalog_clusterJSON[k].name + '').slice(0, (catalog_clusterJSON[k].name).length - 12);
                    catalog_clusterJSON[k]['nics'] = {};
                    var gr = new GlideRecord('item_option_new');
                    gr.addQuery('cat_item.name', grCat.name + '');
                    gr.query();
                    while (gr.next()) {
                        if ((gr.name + '').indexOf(serviceName) != -1 &amp;&amp; (gr.name + '').indexOf('_nic_') != -1) {
                            catalog_clusterJSON[k]['nics'][gr.sys_id + ''] = gr.name + '';
                        }
                    }
                }
            }

            /**/


            var catNicJson = {
                "catalog_data": catalog_clusterJSON,
                "cluster_info": clusterJson
            };
            this.logger.debug("**Inside Nutanix_FetchConfigureSettingDropdown.getProjectSubnet. final answer : " + JSON.stringify(catNicJson));
            return (JSON.stringify(catNicJson));

        } catch (e) {
            this.logger.error("Inside Nutanix_FetchConfigureSettingDropdown.getProjectSubnet." + e);
        }
    },

    getProfileVariableData: function(profiles, blueprint, answers) {

        var profile = profiles.split(',');
        var answer = JSON.parse(answers);

        var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
        for (var i in profile) {
            if (i == 0)
                var qc = gr.addQuery('application_profile', profile[i]);
            else
                qc.addOrCondition('application_profile', profile[i]);
        }
        gr.addQuery('catalog_item', blueprint);
        gr.addQuery('isprofilevariable', true);
        gr.orderBy('variable.name');
        gr.query();

        var i = 0;
        while (gr.next()) {

            /*if (gr.is_hidden == true)
            	continue;*/

            var opt = [];
            if (gr.variable.type + '' == 5) {
                var optionRec = new GlideRecord("question_choice");
                optionRec.addQuery('question', gr.variable + '');
                optionRec.query();
                while (optionRec.next()) {

                    opt.push(optionRec.value + '');

                }

            } else if (gr.variable.type + '' == 21) {
                var varRefRec = gr.variable.getRefRecord().reference_qual + '';
                varRefRec = varRefRec.substr(9, varRefRec.length);
                var optionRec = new GlideRecord(this.appUtil.configuration.table.dropDownTable + '');
                optionRec.addQuery('variable', varRefRec);
                optionRec.query();
                while (optionRec.next()) {
                    opt.push(optionRec.value + '');
                }

            }
			
			
            answer[gr.sys_id + ''] = {
                'name': gr.variable.name + '',
                'question_text': gr.variable.question_text + '',
                'value': gr.default_value + '',
                'runtime_config': gr.runtime_config + '',
                'type': gr.variable.type + '',
                'isprofilevariable': gr.isprofilevariable + '',
                'uuid': gr.uuid + '',
                'isdisabled': gr.isdisabled + '',
                "val_type": gr.value_type + '',
                "description": gr.variable.help_text + '',
                "mandatory": gr.variable.mandatory + '',
                "regex": gr.field_regex + '',
                "options": opt,
                "data_type": gr.data_type + '',
                "uuid": gr.uuid + '',
                "application_profile": gr.application_profile + '',
                "field_json": this.appUtil.getMacroDependencies(gr.field_json + ""),
                "field": gr.field_json + "",
                "isHidden": gr.is_hidden + ""
            };
            i++;
        }

        return JSON.stringify(answer);
    },
    getServiceVariableData: function(projects, blueprint, profiles, type, bpType, multipleService) {
        var project_array = projects.split(',');
        var profile_array = profiles.split(',');
        var multipleService = JSON.parse(multipleService);
        for (var pro = 0; pro &lt; profile_array.length; pro++) {
            var profile = profile_array[pro];
            var variables = new GlideRecord(this.appUtil.configuration.table.applicationProfiles + '');
            if (variables.get(profile)) {
                this.logger.info("Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails Feach ServiceVariable of " + variables.name + " Profile.");
            }
            var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
            gr.addQuery('application_profile', profile_array[pro]);
            gr.addQuery('catalog_item', blueprint);
            gr.addQuery('isprofilevariable', false);
            gr.orderBy('variable.order');
            gr.query();

            this.logger.info("Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails Feach ServiceVariable of " + variables.name + " Profile. Feached " + gr.getRowCount() + " Count");
            var answer = {};
            var i = 0;
            while (gr.next()) {

                if (!answer[variables.name + '_' + gr.service_name.name + ''])
                    answer[variables.name + '_' + gr.service_name.name + ''] = {};
                var categoryName = gr.category_name.name + '';
                if (gr.category_name.name + '' == gr.variable.name + '') {
                    if (!answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + ''])
                        answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + ''] = {};
                    if (bpType == "published") {
                        var ans = (this.getVariablePatchedValue(type + '', gr.default_value + '', gr.sys_id, gr.variable.name + '', gr.category_name.name + '', gr.category_name.question_text + ''));
                        this.logger.debug("--Inside Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails.Patched Value for " + gr.variable.name + " :: " + ans);
                        answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + '']['new_' + gr.sys_id + ''] = (ans) ? JSON.parse(ans) : [];
                        answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + '']['new_' + gr.sys_id + ''].notCmplx = false;
                    } else {
                        answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + ''][gr.sys_id + ''] = (gr.default_value + '') ? JSON.parse(gr.default_value + '') : {};
                        answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].notCmplx = false;
                    }
                } else {
                    /*if (gr.is_hidden == true)
                    	continue;*/
                    if (!answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + ''])
                        answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + ''] = {};
                    var catname = (gr.category_name.name + '').substring(((gr.service_name.name + '').length) + 1);
                    var varname = (gr.variable.name + '').substring(((gr.service_name.name + '').length) + 1);
                    var default_value = "";
                    var runtime_config = gr.runtime_config + '';
                    var isdisabled = gr.isdisabled + '';
                    var ans, parsedAns;
                    if (catname == "ssh_keys" &amp;&amp; bpType == "published") {
                        var hasKey;
                        var gr_ssh = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                        gr_ssh.addQuery('application_profile', profile);
                        gr_ssh.addQuery('catalog_item', blueprint);
                        gr_ssh.addQuery('isprofilevariable', false);
                        gr_ssh.addQuery('variable.name', 'CONTAINS', 'key_0');
                        gr_ssh.orderBy('variable.order');
                        gr_ssh.query();
                        if (gr_ssh.next()) {
                            hasKey = "true";
                        }
                        if (hasKey != "true") {
                            ans = this.getVariablePatchedValue(type + '', gr.default_value + '', gr.sys_id, gr.variable.name + '', gr.category_name.name + '', gr.category_name.question_text + '', "true");
                            parsedAns = (ans) ? JSON.parse(ans) : {};
                            answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + ''] = parsedAns;
                        }
                    }
                    if ((!gr.default_value) &amp;&amp; bpType == "published") {
                        ans = this.getVariablePatchedValue(type + '', gr.default_value + '', gr.sys_id, gr.variable.name + '', gr.category_name.name + '', gr.category_name.question_text + '');
                        parsedAns = (ans) ? JSON.parse(ans) : "";
                        this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails.Patched Value for " + gr.variable.name + " :: " + ans);
                        if (parsedAns) {
                            default_value = parsedAns.value + '';
                            var isSupported = (default_value + '' == 'Cloud-init' || default_value + '' == 'Sysprep' || (varname + '').startsWith('key_') || (this.disabledFields.includes(varname) &amp;&amp; varname + '' != 'name' &amp;&amp; varname + '' != 'type')) ? false : true;
                            runtime_config = ((default_value + '').indexOf('@@') != -1 || isSupported + '' == 'false') ? false : (parsedAns.runtime + '') ? parsedAns.runtime + '' : gr.runtime_config + '';
                            isdisabled = ((default_value + '').indexOf('@@') != -1 || isSupported + '' == 'false') ? true : (runtime_config + '' == 'true') ? false : true;
                        }
                    }

                    /*Advanced Variable*/
                    var opt = [];
                    if (gr.variable.type + '' == 5 &amp;&amp; gr.isservicevariable == true) {
                        var optionRec = new GlideRecord("question_choice");
                        optionRec.addQuery('question', gr.variable + '');
                        optionRec.query();
                        while (optionRec.next()) {
                            opt.push(optionRec.value + '');
                        }
                    } else if (gr.variable.type + '' == 21 &amp;&amp; gr.isservicevariable == true) {
                        var varRefRec = gr.variable.getRefRecord().reference_qual + '';
                        varRefRec = varRefRec.substr(9, varRefRec.length);
                        var optionRec = new GlideRecord(this.appUtil.configuration.table.dropDownTable + '');
                        optionRec.addQuery('variable', varRefRec);
                        optionRec.query();
                        while (optionRec.next()) {
                            opt.push(optionRec.value + '');
                        }
                    }
                    answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + ''][gr.sys_id + ''] = {
                        'name': gr.variable.name + '',
                        'question_text': gr.variable.question_text + '',
                        'value': (gr.default_value + '') ? gr.default_value + '' : default_value,
                        'runtime_config': (gr.default_value + '') ? gr.runtime_config + '' : runtime_config,
                        'type': gr.variable.type + '',
                        'isprofilevariable': gr.isprofilevariable + '',
                        'uuid': gr.uuid + '',
                        'isdisabled': (gr.default_value + '') ? gr.isdisabled + '' : isdisabled,
                        'isSupported': gr.issupported + '',
                        'isservicevariable': gr.isservicevariable + '',
                        'notCmplx': true,
                        'val_type': gr.value_type + '',
                        'description': gr.variable.help_text + '',
                        'mandatory': gr.variable.mandatory + '',
                        'regex': gr.field_regex + '',
                        'options': opt,
                        'data_type': gr.data_type + '',
                        'serviceField': (gr.isprofilevariable + '' == 'false' &amp;&amp; gr.isservicevariable + '' == 'false') ? true : false,
                        "field_json": (gr.isservicevariable + '' == 'true') ? this.appUtil.getMacroDependencies(gr.field_json + "") : {},
                        "field": (gr.isservicevariable + '' == 'true') ? gr.field_json + "" : "{}",
                        "isHidden": gr.is_hidden + ""
                    };
                }
                i++;
            }

            this.logger.debug("--Inside Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails. all service variable value answer" + variables.name + " :: " + JSON.stringify(answer));
            if (i &gt; 0) {
                var returnJSON = {};
                returnJSON['profile'] = variables.name + '';
                returnJSON['service_configuration'] = answer;
                returnJSON['profile_sys_id'] = variables.sys_id + '';
                if (pro == 0)
                    returnJSON['subnet_list'] = this.getNutanixSubnetList(projects);
                this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails " + JSON.stringify(returnJSON));
                multipleService.push(returnJSON);
            }
        }
		
        return JSON.stringify(multipleService);
    },
    mpiPatchingBp: function(mpi_uuid, bp_name, project_uuid, environment_uuid) {
        try {
            gs.info("!! mpi_uuid : " + mpi_uuid + " bp_name : " + bp_name + " project_uuid : " + project_uuid + " environment_uuid : " + environment_uuid);
            var logger = new Nutanix_Calm_Logger();
            var utils = new Nutanix_Calm_Utils();
            var reqUtils = new Nutanix_RequestUtil();
            var response = utils.makeCalmApiCall('GET', '/calm_marketplace_items/' + mpi_uuid);
            if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {
                response = JSON.parse(response.getBody());
                var name = bp_name + '';
                var app_bp_name = ((name + GlideSecureRandomUtil.getSecureRandomString(8) + mpi_uuid).replaceAll('-', ' ').trim().replaceAll(' ', '_')).substring(0, 64);
                var tmpbody = {
                    "status": response.status.resources.app_blueprint_template.status,
                    "spec": response.spec.resources.app_blueprint_template.spec
                };
                var body = {
                    "api_version": "3.0", //response.api_version,
                    "metadata": {
                        "kind": "blueprint",
                        "project_reference": {
                            "kind": "project",
                            "uuid": project_uuid + ''
                        },
                        "categories": response.metadata.categories //changes
                    },
                    "spec": {
                        "description": response.spec.resources.app_blueprint_template.spec.description, //response.spec.description,
                        "app_blueprint_name": app_bp_name + '',
                        "source_marketplace_version": response.spec.resources.version, //"1.0.0", //changes
                        "source_marketplace_name": name + '',
                        "resources": response.spec.resources.app_blueprint_template.spec.resources
                    }
                };
                if (environment_uuid + '')
                    body.spec.environment_uuid = environment_uuid + '';

                var response = utils.makeCalmApiCall('POST', '/blueprints/marketplace_launch', JSON.stringify(body));
                if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {
                    parseResp = JSON.parse(response.getBody());
                    var clonedBpUuid = parseResp.metadata.uuid;
                    return clonedBpUuid + '';
                }

            }
        } catch (e) {
            logger.error("Exception caught inside mpiPatching. Error:- " + e);
            return "false";
        }
    },


    copyMpiPatching: function(projects, blueprint, profile1) {

        var logger = new Nutanix_Calm_Logger();
        var utils = new Nutanix_Calm_Utils();
        var reqUtils = new Nutanix_RequestUtil();
        var blueprintTemplate = "";
        var catVariableBody = {};
        var bpVariablesJSON = {};
        var parseResp = {};

        try {
            logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.mpiPatching.");

            var project = projects.split(',');
            project = project[0];

            var bp = new GlideRecord('x_nuta2_nutanix_ca_nutanix_marketplaceitems');
            bp.addQuery('sys_id', blueprint);
            bp.query();

            var mpi_uuid = (bp.next()) ? bp.uuid : "";

            var response = utils.makeCalmApiCall('GET', '/calm_marketplace_items/' + mpi_uuid);

            if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                response = JSON.parse(response.getBody());

                var environment_uuid = ' ';
                var project_uuid = '';

                var projectRecord = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
                projectRecord.addQuery('sys_id', project);
                projectRecord.query();
                var environment_uuid_array;
                if (projectRecord.next()) {
                    project_uuid = projectRecord.uuid + '';
                    environment_uuid = projectRecord.environment_uuid + '';
                    if (parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2")) {
                        environment_uuid_array = environment_uuid.split(',');
                    }
                }

                var name = bp.name + '';
                var app_bp_name = ((name + GlideSecureRandomUtil.getSecureRandomString(8) + mpi_uuid).replaceAll('-', ' ').trim().replaceAll(' ', '_')).substring(0, 64);
                var tmpbody = {
                    "status": response.status.resources.app_blueprint_template.status,
                    "spec": response.spec.resources.app_blueprint_template.spec
                };

                var body = {
                    "api_version": "3.0", //response.api_version,
                    "metadata": {
                        "kind": "blueprint",
                        "project_reference": {
                            "kind": "project",
                            "uuid": project_uuid + ''
                        },
                        "categories": response.metadata.categories //changes
                    },
                    "spec": {
                        "description": response.spec.resources.app_blueprint_template.spec.description, //response.spec.description,
                        "app_blueprint_name": app_bp_name + '',
                        "source_marketplace_version": response.spec.resources.version, //"1.0.0", //changes
                        "source_marketplace_name": name + '',
                        "resources": response.spec.resources.app_blueprint_template.spec.resources

                        //reqUtils.makeResourceBody(tmpbody, tmpbody.status.resources, current)
                        //response.spec.resources.app_blueprint_template.spec.resources
                    }
                };

                var env = "";
                var app_pro = "";
                for (var i = 0; i &lt; environment_uuid_array.length; i++) {

                    env = environment_uuid_array[i];

                    var body1 = new Object();
                    var profile = [];
                    body1["api_version"] = "3.0";
                    var metadata = {};
                    var api_info;

                    metadata.kind = "marketplace_item";
                    api_info = "calm_marketplace_items";

                    metadata["categories"] = {};

                    var project_reference = {};
                    project_reference["kind"] = "project";
                    project_reference["name"] = projectRecord.name + "";
                    project_reference["uuid"] = project_uuid;
                    metadata["project_reference"] = project_reference;

                    body1["metadata"] = metadata;
                    var specs = {};
                    var environment_profile_pairs = [];
                    var environment = {};
                    environment["uuid"] = environment_uuid_array[i];
                    
                    var app_profile = profile1;
                    app_profile = app_profile.split(",");
                    for (var i = 0; i &lt; app_profile.length; i++) {
                        var profile_obj = {};
                        var gr = new GlideRecord("x_nuta2_nutanix_ca_application_profile");
                        if (gr.get(app_profile[i])) {
                            profile_obj.app_profile = {
                                "name": gr.name + ""
                            };
                            profile.push(gr.name + "");
                        }
                        profile_obj.environment = environment;
                        environment_profile_pairs.push(profile_obj);
                    }
                    specs["environment_profile_pairs"] = environment_profile_pairs;
                    var final_profile = [];
                    body1["spec"] = specs;
                    this.appUtil = new Nutanix_Calm_Utils();
                    logger.info("Nutanix_ClientServerScriptBridge.fetchProfilesBasisOnEnvironment Body:" + JSON.stringify(body1));
					
                    var response = this.appUtil.makeCalmApiCall('POST', '/' + api_info + '/' + mpi_uuid + "/patch_with_environment/validate", JSON.stringify(body1));
                    logger.info("Nutanix_ClientServerScriptBridge.fetchProfilesBasisOnEnvironment " + JSON.stringify(response.getBody()) + response.getStatusCode());

                    if (response.getStatusCode() + '' == "200" || response.getStatusCode() + '' == "201") {
                        response = JSON.parse(response.getBody());
                        var environment_profile_pair = response.status.environment_profile_pairs;
                        for (var i = 0; i &lt; environment_profile_pair.length; i++) {
                            var name = environment_profile_pair[i].app_profile.name + "";
                            var state = environment_profile_pair[i].state;
                            if (profile.indexOf(name) != -1) {
                                if (state == "valid") {
                                    final_profile.push(name);
                                }
                            }
                        }
					
                        if (final_profile.length &gt; 0) {
                            app_pro = final_profile[0];
                            break;
                        }
                    } else {
                        logger.info("error in Nutanix_ClientServerScriptBridge.fetchProfilesBasisOnEnvironment");
                    }
                }
				
               
                    var env_template = [{
                        "app_profile": {
                            "name": app_pro + ""
                        },
                        "environment": {
                            "uuid": env + ""
                        }
                    }];
					 body.spec.environment_profile_pairs = env_template;
					
               
                //gs.error("MPI payload send: "+JSON.stringify(body));
                //	return "MPI Launch Body "+JSON.stringify(body);
                
				
                var response = utils.makeCalmApiCall('POST', '/blueprints/marketplace_launch', JSON.stringify(body));
                // 			return "post marketplace launch  call "+response.getStatusCode();
                if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                    var session = gs.getSession();
                    session.putClientData('non_filtered_cloned_bp_response', response.getBody());

                    parseResp = JSON.parse(response.getBody());
                    blueprintTemplate = (parseResp.status.resources) ? parseResp.status.resources : "";
                    var clonedBpUuid = parseResp.metadata.uuid;

                    //gs.error("Patching : "+response.getBody());

                } else {
                    logger.error("API call to '/blueprints/marketplace_launch' failed with name : " + app_bp_name + ":-" + response.getBody());
                    //gs.error("Errorr :: "+(JSON.parseresponse.getBody()).message_list[0].message);
                    return JSON.stringify({
                        "errMess": JSON.parse(response.getBody()).message_list[0].message,
                        "status": false
                    });
                }

                var bpVariables = new Nutanix_CreateCatalogVariables();
                if (bp.template_type == "Single Vm") {

                    var service_body = [{
                        "uuid": "singleVm-default-service-uuid",
                        "name": "single_vm_configuration"
                    }];

                    catVariableBody = {
                        "substrate_definition_list": (blueprintTemplate.substrate_definition_list) ? blueprintTemplate.substrate_definition_list : "",
                        "app_profile_list": (blueprintTemplate.app_profile_list) ? blueprintTemplate.app_profile_list : "",
                        "service_definition_list": service_body,
                        "package_definition_list": (blueprintTemplate.package_definition_list) ? blueprintTemplate.package_definition_list : ""
                    };
                    bpVariablesJSON = bpVariables._filterJSONDatatoService(catVariableBody);
                } else if (blueprintTemplate.package_definition_list &amp;&amp; blueprintTemplate.substrate_definition_list &amp;&amp; blueprintTemplate.app_profile_list &amp;&amp; blueprintTemplate.service_definition_list) {
                    catVariableBody = {
                        "substrate_definition_list": (blueprintTemplate.substrate_definition_list) ? blueprintTemplate.substrate_definition_list : "",
                        "app_profile_list": (blueprintTemplate.app_profile_list) ? blueprintTemplate.app_profile_list : "",
                        "service_definition_list": (blueprintTemplate.service_definition_list) ? blueprintTemplate.service_definition_list : "",
                        "package_definition_list": (blueprintTemplate.package_definition_list) ? blueprintTemplate.package_definition_list : ""
                    };

                    bpVariablesJSON = bpVariables._filterJSONDatatoService(catVariableBody);
                }

                bpVariablesJSON.uuid = parseResp.metadata.uuid + '';
                bpVariablesJSON.name = parseResp.metadata.name + '';

                var session = gs.getSession();
                session.putClientData('Cloned_bp_response', JSON.stringify(bpVariablesJSON));
                var clientData = session.getClientData('Cloned_bp_response');
                logger.debug("MPI cloned Blueprint response ::" + clientData);
                return JSON.stringify({
                    "errMess": "Successfull",
                    "status": true
                }); //JSON.parse(clientData).uuid+'';
            } else {
                logger.error("API call to '/calm_marketplace_items/uuid' failed: " + response.getBody());
                var result = {
                    "errMess": (response.getBody()).message_list[0].message,
                    "status": false
                };
                return JSON.stringify(result);
            }
        } catch (e) {
            logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.mpiPatching. Error:- " + e);
            return "false";
        }
    },
		variableArrayParser_client_script: function(type, parent_uuid, var_array) {
	 //this.logger.debug("++++variableArrayParser type" + type + " parent_uuid," + parent_uuid + " var_array" + var_array);
			var cat_launch = false;
        if (type == 'catalog') {
			cat_launch = true;
            var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
            gr.addQuery("item_name", parent_uuid);
            gr.query();
            if (gr.next()) {
                parent_uuid = gr.blueprint.uuid + "";
                type = "blueprints";
                if ("" + gr.item_name.category.title == "Un-Published Blueprints") {
                    type = "blueprints";
                }
                if ("" + gr.item_name.category.title == "Published Blueprints") {
                    type = "published";
                }

            }
        }

        var parsed_var_array = JSON.parse(var_array);
        var pre_map = {};
        var extApiFlag = false;
        for (var i = 0; i &lt; parsed_var_array.length; i++) {
            var var_data = parsed_var_array[i];
			var hasMacros = (this.appUtil._createMacroArray(var_data.def_val + "").length != 0);
            var depends_on = this.appUtil.getMacroDependencies(JSON.stringify(var_data));
            pre_map[var_data.name] = {
                "depends_on": depends_on,
                 "value": (hasMacros) ? var_data.def_val + "" : var_data.value + "",
                "uuid": var_data.uuid,
                "type": var_data.type,
				"data_type": var_data.data_type,
                "name": var_data.name,
                "sys_id": (var_data.sys_id) ? var_data.sys_id : "",
				"catalog_launch": cat_launch
            };
			if(var_data.type == 'EXEC_LOCAL' || var_data.type == 'HTTP_LOCAL' || var_data.type == 'EXEC_SECRET' || var_data.type == 'HTTP_SECRET') {
				pre_map[var_data.name].requiresApiCall = true;
			} else {
				if(var_data.options &amp;&amp; var_data.options.choices &amp;&amp; var_data.options.choices.length != 0) {
					pre_map[var_data.name].options = var_data.options.choices;
					pre_map[var_data.name].data_type = "LIST_SINGLE";
				}
				if(var_data.data_type + "" == 'LIST') {
					if(cat_launch)
						pre_map[var_data.name].value = this._sysIdToValue(var_data.value);
					pre_map[var_data.name].data_type = var_data.data_type;
				}
			}
			
        }
        //this.logger.debug("====variableArrayParser type" + type + " parent_uuid," + parent_uuid + " var_array" + var_array);
        var result = this.getHttpValues_client_script(type, parent_uuid, JSON.stringify(pre_map));

        return result;
	},
	getHttpValues_client_script: function(type, parent_uuid, pre_map) {
    try{
			this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getHttpValues. type : "+type+" parent_uuid : "+parent_uuid+" pre_map : "+pre_map);
			
			var post_value_map = {};
			pre_map = JSON.parse(pre_map);
			var top_pre_map = {};
			for(var i in pre_map) {
				top_pre_map[i] = this.appUtil.createPreMap(pre_map[i].depends_on, pre_map[i].type);
			}
			
			var top_post_map = this.appUtil.createDependencyMap(top_pre_map);
			
			var dependency_array = top_post_map.Dep_array;
			var error_array = top_post_map.error_map;
			var mpi_uuid, bp_name, project_uuid,  environment_uuid;
			
			if(type == 'unpublished') {
				
				var table_name = (type == 'unpublished') ? this.appUtil.configuration.table.Blueprint + '' : 'x_nuta2_nutanix_ca_nutanix_marketplaceitems';
				var grBlueprint = new GlideRecord(table_name);
				if (grBlueprint.get(parent_uuid))
				{	
				parent_uuid = grBlueprint.uuid + '';
				type = 'blueprints';
				}
			}
			if(type+'' == 'published') {
				
				var table_name = 'x_nuta2_nutanix_ca_nutanix_marketplaceitems';
				var grBlueprint = new GlideRecord(table_name);
				grBlueprint.addEncodedQuery('uuidLIKE'+parent_uuid);
				grBlueprint.query();
				
				if (grBlueprint.next())
				{	
					
					mpi_uuid = grBlueprint.uuid + '';
					bp_name = grBlueprint.name;
					
					var bp_project = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_projects_blueprints_relationship');
					bp_project.addEncodedQuery('catalog_item.sys_id='+grBlueprint.sys_id);
					bp_project.query();
					while(bp_project.next()){
						project_uuid = bp_project.projects.uuid;
						environment_uuid = bp_project.projects.environment_uuid;
					}
					
					parent_uuid = this.mpiPatchingBp(mpi_uuid, bp_name, project_uuid,  environment_uuid);
					type = 'blueprints';
				}
			}
// 			gs.info("!"+JSON.stringify(dependency_array));
			for(var pos = 0; pos &lt; dependency_array.length; pos++) {
				
				var var_json = pre_map[dependency_array[pos]];
				
				this.logger.debug("!!!!! var_json \n"+JSON.stringify(var_json));
				if(!var_json) {
					this.logger.error('Dependent variable "'+dependency_array[pos]+'" not found.');
					continue;
				}
				
			 if (!var_json.requiresApiCall) {
					if(var_json.data_type + "" == "LIST_SINGLE" || var_json.data_type + "" == 'LIST') {
						//gs.info(JSON.stringify(var_json));
						var_json.options = this._substituteMacro(var_json.options.toString(), pre_map).split(',');
						var_json.value = this._substituteMacro(var_json.value, pre_map);
					}
					else
						var_json.value = this._substituteMacro(var_json.value, pre_map);
                    post_value_map[dependency_array[pos]] = var_json;
                    continue;
                }
				
                var var_uuid = var_json.uuid;
                var options = {
                    "state": "",
                    "values": []
                };

                var request_body = JSON.stringify({
                    "requestId": "",
                      "overridden_field": this._createOverrideVarBody(pre_map, var_json)
                });
				//gs.info("Override body: "+request_body);
				//gs.info("Send val body: "+'POST' + '/' + type + '/' + parent_uuid + '/variables/' + var_uuid + '/values' + request_body + "");
// 				gs.info('Priyanka POST \n endpoint /'+type+'/'+parent_uuid+'/variables/'+var_uuid+'/value'+"\n request body "+JSON.stringify(request_body));
                var sendValuesBody = this.appUtil.makeCalmApiCall('POST', '/' + type + '/' + parent_uuid + '/variables/' + var_uuid + '/values', request_body + "");
				
                var parsedSendValueBody = JSON.parse(sendValuesBody.getBody());
                // 				gs.info(sendValuesBody.getBody());
                var valPollBody = {
                    "requestId": parsedSendValueBody.request_id,
                    "trlId": parsedSendValueBody.trl_id
                };
//gs.info("valPollBody "+JSON.stringify(valPollBody));
                var getValuesBody = this.appUtil.makeCalmApiCall('POST', '/' + type + '/' + parent_uuid + '/variables/' + var_uuid + '/values', JSON.stringify(valPollBody));
                var parsedValueBody = JSON.parse(getValuesBody.getBody());
                var execState = parsedValueBody.state + "";
                while (execState == 'RUNNING' || execState == 'running') {
                    getValuesBody = this.appUtil.makeCalmApiCall('POST', '/' + type + '/' + parent_uuid + '/variables/' + var_uuid + '/values', JSON.stringify(valPollBody));
                    parsedValueBody = JSON.parse(getValuesBody.getBody());
                    execState = parsedValueBody.state + "";
                }
				//gs.info("Values:"+getValuesBody.getBody());
                //r parsedValueBody = JSON.parse(getValuesBody.getBody());
                if (parsedValueBody.state == 'SUCCESS') {
                    var_json.state = parsedValueBody.state;
                    var_json.default_value = var_json.value + "";
                    var_json.value = [];
                    for (var i in parsedValueBody.values)
                        var_json.value[i] = parsedValueBody.values[i];
                } else {
                    var_json.state = parsedValueBody.state;
                    var_json.error = [];
                    for (var j in parsedValueBody.message_list)
                        var_json.error[j] = parsedValueBody.message_list[j].message;
                }

                post_value_map[dependency_array[pos]] = var_json;
            }

            //gs.info("!!!Pre map:" + JSON.stringify(pre_map));
			gs.info("post_value_map:" + JSON.stringify(post_value_map));
            return JSON.stringify(post_value_map);

        } catch (e) {
            this.logger.error("Error caught in Nutanix_FetchConfigureSettingDropdown.getHttpValues:" + e);
        }
    },
    type: 'Nutanix_FetchConfigureSettingDropdown'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-28 19:21:56&lt;/sys_created_on&gt;&lt;sys_id&gt;92e8017f37112300fdfc097973990e33&lt;/sys_id&gt;&lt;sys_mod_count&gt;990&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_FetchConfigureSettingDropdown&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_92e8017f37112300fdfc097973990e33&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-05-06 14:00:48&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>38174229</payload_hash>
<remote_update_set display_value="Nutanix Calm 1.4.4 Service Portal patch">05f5233707003010f76cfdac7c1ed0c0</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2021-05-18 07:53:49</sys_created_on>
<sys_id>89f5233707003010f76cfdac7c1ed0c2</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1795ba05fe00000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2021-05-18 07:53:49</sys_updated_on>
<table/>
<target_name>Nutanix_FetchConfigureSettingDropdown</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>cce687c03c48b010589b8aadc48a3a51</update_guid>
<update_guid_history>cce687c03c48b010589b8aadc48a3a51:38174229,dc1a1af1626368103071190e0cd3ebbd:-2133271558,171070bd822f2810b1cca3b323b0a61b:-1080478846,ef5f647d0d2f2810cb81dfc716aaf8db:144450568,722da07d3ce320105e933a8675af2bc9:1070972202,55ddeee9aa2368100d8f7d9fec627730:1705771107,25b52225eb236810fdc06fcbabb0df1d:-1047691869,851996e558ef2810650ab08963992a6b:877118339,33f896e596ef281048a1847efe3b3cf7:-574231244,4ad61ea5f1ef2810d7ecce55aeae5915:1309898342,10ae8ae96caf2810274c541eb66f47f2:-1771617287,86e886a94daf2810f5531635c01174b9:1371637024,6f57ce29e9af2810e819b97f969eb823:984609344,1b0e53d53ae72810a947651a23a3cb2c:757898459,d64d935553e72810b820716e21f80e97:-416542344,8d0b1b1533e7281089c726711e6fc451:-637335441,0e58d3912fe72810aa11d312ac04b033:-1746639800,b82987d1e8a72810b4612bad36d6c177:-1962918436,f8c58391b7a7281018b6848d33dd63bb:-1814763041,08a36071f7ebe090585a465ea3f591fe:2082505813,6761e43101ebe090c4108d71b574a8b2:-2064383943,74f3d2a97e27e090ce6d48e3aa28eeb4:-2064383943,72d5d515c5e7a850bd1deb02d4bcc27e:-1540792305,30968f89f9af6850273f69925d5c067e:-1312079952,03b18b052daf685034369103718b7cd6:-1646452344,54b77249a16f685073a6d0c2cd872575:474146935,3b9732491e6f6850fff4364971f0df95:-1991824160,9ef57e45ec6f6850b51a5532166af05a:-604152711,90ef2a01126f685074219b4143e8a359:474146935,9d5ea6c95e2f68504cd29f62995301d8:-618774476,c73baac9572f6850ac723f7566748191:1377109895,92c922499f2f6850fb737c271a15faef:-1185166433,bee72a45a02f6850859e6798595f0869:1504318555,f5056e41572f6850e03dfeb352588ef7:-1650406398,3fd3aa41042f68508b80f769b8b83b70:-2090521745,c7a50649022b6850a9e609265c80415a:1329562538,3ad40649822b68509bda9038a8b109ad:-194577971,c9d20a09272b68502aa4b827e504250a:-1753107273,4fa2c609192b68505c5200d470e782b1:-413972342,a6f14e853a2b685024e5b34a89fbd688:-671454806,f0210a456f2b68508121259f76fd0b88:-1046886297,e00c3dcd3de7685038f3ee1997025a40:-854534071,6519bd0d04e76850e8180d487ba0cdd6:2119584952,3557bd892ae76850a30e070e708b92f6:-693808524,2f35b9c5f8e76850e31850a5037f8dab:187274079,889669c9e3a768505fcf07d57dde6719:1643862647,6985ad4948a768507fab5efbf5e7aff9:-1364513586,878269c586a768509c44ae9bf737727e:796188115,4701694528a768509e57d211b19077fc:-466294781,7dff154503a7685006d5c5c758abed78:493005244,704fdd0573a7685089c283ec1c341bbd:-794443354,c62f1d0537a7685060c15b14f8aac073:521568758,b54e91c1daa768507c841f693d91437f:1798092133,2f3d15013ea7685084459aa0d877a967:342509594,0c795109be676850be9561fdd6b84c57:-2034756840,6a5695cdfc276850ce32994d34b5f8fa:384135430,edef05c1732768503145d5aeebe9169f:-855634196,2deb4d4d1ee3685031c142aabb211087:1321120786,b65609816ee368503bf1c3846759c453:-272459592,1e31450daca36850f549bc6bee81a16a:350307520,b838b0414aa36850021ee4b72c186462:-303892314,4c08fc01b1a36850dbf5d7da942359d7:487693920,c6d5bc8949636850079a17618f989fb8:607648500,20e2c0f03aefe450988e16f546df78a1:1788259448,7740887852afe45005b7e88906cb9491:-1819625407,26adbfe01bafe45007045f08832c549d:-526519413,37927ba4782fe450dea991c6fb669a47:-1872006103,792fa36cdfebe450e925ed33ff9909c8:-1335070983,543ceba4baebe450550277700a518748:1636726073,713fb624be67e450094ab4ec3d5b9e3a:1318226497,d9c9df9873eba45071acc9bad8eb115a:-1995709934,b7f6db142aeba45094640bc03aceea1d:1841716886,551b7654b22ba4504275cae174a0e6bf:-1094026851,ecca3e90fe2ba45048f3c5ccca3ccb39:8664761,6fba3ed0af2ba4508d51d4d43a6f603c:-123638791,7379fa90ee2ba4509752760fbdb558db:-2015188203,e1487e502c2ba45093dd1beb079ee185:-1179735463,72673250882ba4507330fe6d356ce2dd:719242598,3d0576dc90e7a450366f6462e5a970b0:1615842571,96e3f69ce6e7a4506222fa2b69006a2a:-1611958917,f023b25cf1e7a4508f58830dedef5f4a:993271905,c3e276d870e7a450d3a127583546463e:1316048017,90c032d8c8e7a450f3e332018c69153d:483615243,225c5a18d067a45058d5dc928f071b83:1445164021,41fbd2d44567a450bfecb6cc7fccca65:111297173,eb211a9cf027a4506c43dac33004d5cf:-530280571,75809a1c7627a450c2b0cfd8eee4a2fc:1054190313,bd3a69d01faf6450dee1ffdea1e2f3fc:-1128233911,b1400de3e81fe050cb178d9313f4f949:-1077121947,0676702fb9dbe050c458766fcb2bb298:-739628381,de83386b11dbe0509a01b9ea4320eb23:1718495943,0f43fc6bfbdbe0506945d696e8ca95af:1458041447,4b4c206f3d9be05006bf768e0ac7b78e:1381829081,bef660e7cf9be0502176f28906ac8925:2045679626,1ef16467cb9be050093b6ed36fb33c11:1541559164,aff0a0270f9be050936aec18f6682e67:-3333430,819f58a3319be0509d94987e04c72287:1541559164,d13c50af4e5be05087582539c4d26fd1:1080183836,1a9ad0aff85be05004da326d2b6faa40:-339965124,428a90afac5be0508cff7abf30c37a53:1573414172,cd8694e7835be0500ae107e043080392:-1591943620,99a49ce38d5be0502dbb909bbd97441f:715077884,4d6394e3015be0508f601a3f8a01df80:1928003638,ec3054230d5be050227f0873b588a4cf:318739150,eae10063cb1be050b965c2f35a10e9a0:-831315305,4a3a33db4bd7e050d779955cc4b907ec:-487482185,a01afbdb97d7e050760ba45b5332ecdf:-246057875,9959bb5b36d7e050267a9fa34f4c2c85:-1776986255,7bb593538c57e050f6d142f1665906d4:-684688587,12249f13ee57e050873dd23c0e5c1789:1693100809,b146321fa193e05038bf5de036e03108:327449037,b2e956d70f13e05038e2fe58b3d11057:-782348691,21501183c113a0501e6ec8f632be6ca2:-1412488403,1591d176d057605000d6828fb93a1c30:1210687098,a35b053280576050896da340d5efe582:-1677172880,c4dd16cb98df2010cd81a77b9cc98353:-849773821,3fc85ac763df201059217e7f36bc5ee2:-1178056937,a8e943c5e89f2410296b3418212fed20:-1114171696,dd2d2a05541f2410948ed524d35080c1:-1323154125,5edbdef0395fe010d49e1890ccbb8c4e:273485267,d31a9af0f85fe0108d1098efe3ecd16b:-2066618458,14975abcc21fe0101c6c87bd3bbb1c8b:-218448635,64f39e74a31fe010fb448c5ac07a3067:2142962457,a59bbd70719be01031800dfc57c3da03:-888171669,e4d4702cbdd3a010c1796eace1e1a817:-1965299641,8d19e4601bd3a0106c5274b870020b3c:-1499100708,777a509822d360109f2c224034becec9:-2128986425,ba04981007d36010ac7f67352f785b13:-665822521,79b0733a8f076010b626eee0c96b6473:-1273044324,c78faf76e8076010db2bed1668d1fa67:-764342428,242eef3661076010de76ca9cb305ae34:736271278,c59cebf23d076010f879d32afc11f3e8:-2068303040,ddfa6fb22107601063b1b3cfb896db8f:1074701047,4caaaf720b0760107d1d220bdfb36e52:1813185411,7c892b72710760103ed3285b1a402079:-632712190,833a6cc2c8c76450a0c138bd3a2dc6cf:243196515,237524ce248764502e087314db3a613a:-1383661043,0e34208ee8876450b92c24dd96c45726:-570907926,a6a3244ec687645044ec6303c4ac06b5:947890314,6393644e2387645082a9bb57ae821c53:-1569681127,4583a8ca28876450f7afc3bd75da4ac6:947890314,e0d1a8cacb8764507adc271e74bfc18f:-401819533,61df584a5b87645071b77edb3268de13:-286419260,3ccd148638876450a494e14fba02d842:118876019,b6eb5446ef876450ed6f08e9e78d6e65:-1305007381,3f8850829b876450f6b1908dce0e29c3:1559636872,b3275c021f876450d86f536599615f50:1459773054,94079b35bb83645056016e35a22641e6:1106672843,f1d41bb11d836450150131bc6c6d7b76:1034102677,7d29c7e99bc32450ebb63707da2077d4:-1835255290,d7a883e99ac324503822b09d2fd56677:-943906868,8f480b2993c32450d6f50d7306ed2d14:1280603361,c716c36952c3245083aa314faa8448ca:568661675,1605c3e5cec324504b5a0ef3a718d509:541943245,57424fa19fc32450cba5b05277333102:1688356451,bf118f214dc324509d19d0123cb84b46:-426673106,002f36ede9832450ff99242ac871d15b:1304925722,b01e36ad6b832450f6356e8c8ba176da:-899168906,081b76a9ae832450d0855d888147c9d2:286582995,96893a692d832450e88b8b5b2ed3e311:1380236271,30a8b62910832450534a04d93ac17ec1:1322819835,8e88b629c28324504fab4c5a2ae14ea9:-1755342337,fbb7b6296783245045759daec0ef78f9:-1181610533,1b573229fb8324502c902595aa7f1bf6:1431441236,7eb0b661a6832450f7257499d828510d:-1398230621,f82b6acc7a9b245064585a800c161275:1108910192,a266ab3683476050eadde152b8fcb843:-1024680998,b52063fe2907605096977c2fb7c7ef73:-720966255,bef5d73645076050fc6fb5903570a4c3:658312903,af6c91e234432050a05388c2a4313fb7:-1866591858,cc17f0a255076c10a905569b8ceeae86:-1010277402,f463f4eec8c36c1009f5ac0e81bb1909:-1932518251,0f7065dedcc72c1007cc9964a45f74d4:620200321,6328180642c7e810e34a29ddf92505a8:-467113071,0409b2b1aa03e8100d5924705531265d:618693563,ec44b2bd68cfa810725bd808ec1f4160:-131780457,02f05c7d260ba8106072004479f4eda8:167387778,687f48f58b0ba8101215bee297ca29e6:-1396994478,7b1d88bd5bc7a8109f6f0a84e0a9ae1a:-807111898,dfcbc479a3c7a810996cb0f8442810ff:-1230158244,43d57ee8eb4b64104fb9731b0cf4f49f:1606411202,1e232ae87b0b6410202a3567ae3e9c80:563979212,0ec3760031c32410bda627e65f2acaa9:1529239962,ae22b288368324105fbf890307eaa966:1174814038,b6e49e802c432410658408de3e1c2d2b:1529239962,c6bd0e8847032410ef5d72d8b4dcdc8f:34267700,4aacf1c004cfe0106c4b8082a298c7b5:-258853336,74927c77ab3aa010fbba391b69e841a7:174221074,9eade073383aa010eb845c1b1d3f3e45:-1796859055,db62ca059fb2205063ec0b75cb4b56c0:432302469,ec414ac1efb220501b45288243c60ac3:-941920520,7a80424195b22050ebfac05e7d17ff5e:65364857,5f8a5830ccfaac1058af3101ccb3d0c3:-524365420,462710bc99baac10a891904188ca23e7:64148989,5dc0d47889baac10b8b2693b7961be4d:-1886969169,d44ebe7721eee810fe71fa63dd1d15cc:828290468,92b97aff29aee81002f0018f0fa3289c:-13130623,c1d8b27382eee8109a8c8f35948ad751:-1134347770,7a52830b9e2e68105b234f51ddc40228:1146026474,7c79644227c32c10f8ad6e809d847011:1546582747,c5776002acc32c103256a93d42cb0837:195072113,7d74affce7cfe4104c1651e275aa6c1d:1733807973,37f240f46b07e410e1fc64e864d407c4:338378104,5df7b32cb9c3e4107dec0d79be8e264b:-1784177160,2717b7e8c4c3e41067e49427633cacad:1771550945,363d2b24f0c3e410260fdf6b2d20865b:-1564226613,bb65576c8743e410abe916de77cf90e6:1771550945,9c64132c3543e4109b790dba12c7e935:-1146967650,830217a82843e410d6561b4d97b6f7ef:748750657,8a70df280543e41027f7769bba06402b:1125348003,b68f47e4e643e41070260f6dabb904d0:-87357658,e3ce0fe4bf43e410001929c9f18f5ef0:433758649,7d4e83a4cc43e4102d4dc70382a310bd:191019937,4b9dcba46743e410d9e8ac8f17759fd7:2123176618,ce0b4b24b943e4100e262faf4fba6040:-153885106,1761c3680603e410cf696a1db2f723e3:-1751234174,3832a710be87a41084d3be44c33203fa:1022906318,edcfdb5cba47a4104fbc30b59f527aed:21674054,0cc142904f43a410b55e01c05af4925d:1022906318,db5182505c43a41094a4fd617c7caeec:-771489008,8e1e3d1cad03a4107ff12f1782975335:1105681002,1ea8651c18cf6410e136ad0f261d9338:-1535919305,e2f625585fcf6410c67501b24f36f3de:-642506237,0f702118c20f6410e286068acc4f1c5d:268562370,6cebcd90718b6410409e39218cfddc55:-1184001241,79d84d10938b6410f2b261c6f95a93c6:372349735,4fc23b789ae6609054bde04c88b04027:-1741995643,de72777821e66090c341c08d3992fde2:1366428215,6fa0866088a62810a090a8a5e943f489:1810769973,d82f0c83925eec90dd28dbab8ea40c2a:-1276550635,2a9b1f224d1eac9008c76a33d24dccc0:787098235,34aadb22e61eac90f62ee0344c857e52:1149860440,cda897ae07daac9013c7e738354aa30b:-604740172,e7c71b2ebddaac9079d6d475b4433fea:899349867,a7455f6ab8daac9029c575f8dfe61a29:424619257,0b6e07669cdaac903c51c489e84acee5:-480703404,74d033e8a5da68900406c0fa0478d28a:260404975,a910bba861da68907bc284a56117983b:1205021579,6fb26360bcda6890040389e12fd56b62:532985571,68fd97ac719a68900694edf883a73b26:957525766,3e1d976ca49a6890b477ae108d3db244:25202304,9edb976ca89a689098a78de127d3c63a:-1011200206,afa79f20099a6890436921d043936b26:-127147260,054168e4ecd26890ea6974c91947d38b:-167698895,866cdc24cfd268904cd8683254998df6:-1846101593,3485506078d268907aa4f0a6d4ff7e37:-982795628,3d24d420b5d26890a4debc33b1aaad63:-623142493,ebd467100bde2890dfd0e90cd3eb7962:1857183881,a8db97dc4e9e28900d0819d12b591269:433804183,0c091f5ce39e2890fbf4ba5198f6bc01:-1947824629,d4179b98fe9e289088092efec0f808aa:1901118312,3456dbd86b9e2890f99c6088a49b1b75:-2003992742,d1441798d09e28906633b8ffccd12d61:-756033208,c462df18b89e28908bf7d38e86ce4f0c:-3271705,595f8f94f39e2890b3d5c875019e7527:958201892,8e9c03509c9e289092a25d97e92d4fd7:2024453020,0c4bcb580e5e28908c33716307450d94:-1224079795,77e38714905e28903d90bf1fb1ebfdb9:-496306073,eb918750445e28908dbcc12c43e2a10e:-439056615,633f32dc041e28904b0d092918f5f511:1669752272,0a2ef2109f5e28908fd03ecc8beaf2f8:753475709,ccbcb6dc261e2890c56e0081035be440:-1883950518,5109325c761e2890dad99d044945621d:1838793392,aa98be989f1e28907c345f8ff9d122b6:-1419897874,64832a1c7dda28900de5584a6d383824:109085193,5f7cd21864da28908627c3d5fe2c6ec0:1037302775,b30a5a942bda289019ba2a12b1479d46:-569706163,88f3129096da2890f22809a1d897b0ab:-1314410171,7f325650ffda28909048beaee700cdd0:1816760356,b4d6b6f8e9c62850bb73d9cb584d14d6:684804781,6211feb8f5c628509ebf7a6056927388:-634398506,c7cebdaf40966c50a8bfb1d529c18500:731130697,60933ec0809aa810d658e1a12c74b929:-1841772096,1a540dc3b4b03300135ab7df18041327:-1170071680,27b38143b9b033007c95be60b7874b8f:1422649033,f8d20dc36ab03300e385868b9cb7332d:2030792538,59ea70cf8c7033007665788394975ffc:2050359268,4504344b407033002fdeccd57113d0c7:-1828464775,5f32f08b8f703300b04db7dff8cf0a89:1343351549,23e91443d030330036bedafc059fa9a5:101643997,5da8ec7258b43300a83554f20e1fc1ae:660977160,a6b6acbe08743300abdff979c672ed56:-1084596370,019cc87afcf033006583656b76e0f715:-1983741591,4d19c876cdf0330087e9afe3e97aee17:1890337193,dd9384365ef03300522bb9d5daea3cf5:501456305,452180b2e5f03300e54f54ab31e00a93:-1553790191,82fa7cbd8ee56010c06959ba5b54798a:-444326630,7cc95472874d6c5025f2bc731d929629:-1561155187,70bdf6c6becde8502e65c03adce4cdfd:-923926535,c766a3eab2812c10eb4976ff2867514f:1074009370,dcc683ae32012c10bd0597056f1f30ab:-1957425395,5e7683ae56012c101f3e605988d0b3ef:1071587405,95310bea49012c106998d556fd005b57:1929203727,e67745e20589e81067de27dd3e44a108:1285461753,ff1e4b5e46c1e8101b0da7df8d6a09d6:-1161081762,138c4fdaf5c1e810d451fd28ac5ac0db:1356365403,734c8bda79c1e8109caf177342211051:-2139550265,98bb0b1aafc1e8106e97081c1d83690c:-1870314720,a2aa079a3cc1e81056c887b0f31d76c7:-1012368058,f2c9cb5a0ec1e8106af0ac4ad2e23869:-540519425,fa19c35a43c1e810da7e958a75b5fa93:-1207715622,f1b88b1affc1e8101b6d56d65290b559:-114175867,6578071a49c1e81097b65b47b8ce9706:1667215688,6d28c31aa2c1e810ce964f5941a1affe:-968748541,5ea3b345118de450db7d209ed3e71e16:-1863409357,d08968300745a450541d9057a582bf7e:-986019383,0d266cfc1ac52010fb87a82f0dc97933:-1054464875,aa1188524cf0ec103fc03a0aa5ac7192:81458503,c452e382af70ec101bf287a68aea70f5:1211632348,928c9335adb4ac10a77d07c79b12acf4:1436260390,ce42068eb468e010bb0bad915ea3a4d4:-1054464875,b8683c0ea8a4e010f199f4d99f041f89:1040250668,b344739ba9fc60103034054d3cef72d1:1058007058,da475079f6482010048ae56cd636e105:2135817944,8eb27c15731c20109cd553488e14532f:-1054464875,f33667c99218201031e59e3dbc53dba8:-1054464875,efad328df2542010bce823b1ae544bab:-1054464875,73201c410244a010827fd12a779dc86e:390999165,110af743f5ebd010783a340b4eee099c:1615450128,f4e9774308ebd0101f19e05f88dd1aea:-55193110,c396455af0a35410403c2e9c031460c9:159626126,1fda6c5678635410908f71df9182accf:2077034678,d580145adfef14103fada645d8d5c98b:1478282092,4cade58a272b14101a60f8f48f5bc39b:-1516576566,79cce90a222b141025bb43e613375573:1096647466,9c6c610ae62b14106bf7fbc5b7e61357:-1657422486,bd03910e34a71410d303108e9bfa0362:990805514,220bb4029da7141013fa9d645dda74a9:-341175455,df99b40283a7141015bc08b3ea74e8f8:-1887119476,98e87002a1a71410390e291a8076e0b8:-410785364,e66838cefd671410d4cf9db37fbd609f:-43289332,ced774ce92671410fe5440ab1946630a:-1461163284,f44decc6ae671410bfb6c6de8aa196b7:-1695202548,9ffcecc6e267141014eb279ed19a5814:2017645612,d267acc29c6714107df5a2de765bd0ea:1770329126,f1c6acc2de671410174fd5512fd26029:-285526534,f02418c234271410de7c7af842b337b1:-1402907686,1e7cb339d563141018bbca05e22898a9:-1284750144,9118defdffa7501059a36537fefdaa8f:-424760782,2d090c7575a7d0106bac4e88293c534b:-1141139908,aa77c4b56fa7d01039cace5329e84c8c:1450168327,50a348b17ca7d010d2162e4dee2472d4:-106181883,34310c317fa7d010b941011e4140db56:-1636819003,51a7632d5427d0106713e5e2b3176cdd:1220473605,4c422be54c27d010acb470d6ffc280be:-1429741654,08e8d3ade9e3d010e83434ce05be7bec:1220473605,1ca893ad30e3d010ea80d477ad5e1a1f:664171045,86d6972db8e3d010fc1dccc340cdbdf9:1220473605,caa1dbedd0a3d010c35d9017eedb39e3:664171045,5667f2a9aa63d0101ec5328f8be6b765:1220473605,7ecd429d1ca350101e4041262add452c:-1563515663,7173c2d5d3a350107bf7c06cbe2be138:-1437992680,e2801d999e2b101044028a66b369a64f:-419423868,4e56e618bae758502e7b19c0367c7859:131909381,f063aed0102b585097f315598e51faa0:-182210953,409f79d8e1a758505bbc4920e0fe9397:1907329001,7a5d44b38ad7d450af2aab2a06f1e428:1754205599,503d7879e4571410c56a76b3f2b8aba9:-1285364283,6fe329c530975010ac15b48cb50a6ba7:-156267737,6fe329c530975010ac15b48cb50a6ba7:-156267737,15406945ed975010df709290a1e10504:-1842291954,6a7f1145b8975010345d62f0878c1550:-156267737,8c7e95818d975010910c2cbac0408366:-1578370313,ce461430a3df1c1027f986f41d4fec49:1059591195,682650300bdf1c10ebdac4480b54a2ab:2127680379,7aa373a07b5f1c10ed5d44a9c7775efa:892862757,35963520aa1b1c10754e24446f6d9dc3:1389824356,a26d696819d71c10bfccf53434dc9972:-1818589708,1a8ce52840d71c1019bc23ed04a6b348:-1290059,c08b69e458d71c10ae9003f98d82c0bb:-162070324,293a25e460d71c109df933dbbc20b79f:-176911499,6659a1647ed71c10f201463400cc1c40:-682037236,941521242ad71c1079197dafb4739194:893554391,70e3e5a013d71c103a06693ce93c8fb7:501093402,1cc2e5a0a0d71c104705306cda9a75a6:169462570,edb95c6437d31c105d5174b3732a4f3e:-1987963846,1d69982465d31c10729f72a3bc04d08f:956922091,1597982448d31c10b3a484525709b789:-1228875229,af2a4b10321f101064960875d8c15ae4:1543546404,cb4b1a8c545394d0a9c143a0ec840ac4:-1997108955,08bb45ffbecf14d00eac7d627be23cf8:1542626462,85e64dfbc0cf14d08efe98e2f04d1769:-939698524,0f7501fb8ecf14d0e92ec0616d300a3d:1730554308,927405bb40cf14d03be43f5cf741cd34:1253164152,8f01c5f7aecf14d0a60716296ececa97:-1307537833,74aeb4775bcf14d0ab77d48ac7ef8d87:-814162685,2849e43b128f14d0686f4f63bb882b72:-1304879588,b7d728f7838f14d072ee824934f62f0c:-1919529937,409424776a8f14d04542fe48964ecb7c:2040717836,d082e0f39e8f14d0e1139a6a4b1e2106:1166596144,32c436afd54b14d02a5f584888621b60:-939698524,55ef66abd74b14d0927a8850214cae04:828884106,81cda66b3d4b14d057837063dbac9437:-1193165360,bbcbaee7f34b14d032b4c2a017e80c8f:-797765290,ba176e23a34b14d06937a73e3b287662:1855970005,a8185e6b9a0b14d06d6c6dcca1565cc4:1432230451,8347d26b750b14d0ffe8e2fc852a9601:-1177732035,ae45d6e7fe0b14d032387caab8a9c1e7:506188180,574906af3ac714d00ae3e490e7a72a9b:600189882,72b50e6ba3c714d0a5f3bebb75a35f89:111868821,36714aa74ec714d051211abc485dbd81:-455019881,85fbb9ef1c8714d08da8be5e63210891:1801941744,2cc7fd2fa68714d07c6d8b731cf6de46:-1158183517,b3d5b92f768714d092c698ac77ba5110:548831125,6cc375ab608714d07632216e6d3fcd7e:1213772012,e34231abba8714d05ac947e04e49491e:-1849435034,4aa03d2b748714d07a9727fcee94e6de:-1623852957,c10f69e71c8714d02c67be097b5c18a2:1315172489,635955a7344714d03ea516ae899052dd:1032076,cb67a0239fc314d0da924ac758344553:-534418883,cff4e2ddffbad090f23ba249f90b0406:1032076,92f3a61df9bad090d2b458092b174cdb:1030026200,6c0066d9b3bad09099eb9de3b78f531c:1032076,447b0ed9c77ad090feffb27e5ccce497:-646180332,ced7507407721090ba5354f095e7fdfc:1032076,90471c7045321090aabef76e55002443:890772602,726ff36c7bb69c50c54fe7a5c8cddb6a:791098952,352f7f2463b69c50f31505b3a8e9ddb7:-663059362,7938ef205cfa5c5020ccb2ab2c8504ba:1310420952,f5ed536ce57a5c503784b2ce79dac9f1:-738625132,0b7bdfa8bd7a5c5037a568bee581ba3d:1752835752,b424052cb6f25c50c50be9f71eb4f040:916064478,6272c1a040f25c5004b5dd9fd8caa65e:1752835752,c630328c947ed850051c283f26eb07b3:-663059362,fefe3d4c9ebad8508859c9bb65b3dd2d:1991454014,daa1085be72a18500e221c8d649fa07d:892773124,4d5b6f8b3ce61850c90f4b6db5824615:2112763808,b5075b0b14a61850d1f05761ed54e80b:-51532318,0ebec30b0ba61850524a930d8060be6a:375975200,de7e86cfe4e21850e8cf0dd4d9fb02e2:1433662399,78102d8f28221850b586d642e242b301:161289538,1fb462b2606ad450dc55f2d7b16418c7:995294380,ebe5c27eaae6d4504bab5180ab9b883f:1242783893,596aadba51a6d450d0fa58e9a4826f06:-984038265,b808297acaa6d450628e946954c0de86:-1529208654,08e465f671a6d4503e837cfd4c3ea7fe:616294025,b21445761826d450d2dcac6a125f4ff0:2026175691,444957cb85ae945057e4a5007ecf0043:1028010160,4e078d7dbdaa905028d7884b3598056f:-814407442,a520591d092290501ea490705bfef6bb:766539142,5df7f89962ee5050c15d73e4707a44ff:-1229850328,1b6571a922a2905043164005248ef221:-1253669063,e6b17701782e5050d4c6d7ce1b2d108f:-1051728509,fd7b280518a2505012998efeb2fa09c6:-288253643,d497627c8eaa105081587c12636b5c5a:1734891420,4b5c9e78ddaa105094bcf924cc2ee130:912534937,27d71ab453aa1050e721ff91b24948cc:-292752721,daceebe42ae21050a60ea8c5fd52195c:1734891420,e82f832446a210505fba885585e4ec8b:-1386638834,bcce0f60caa210504a0ffa6d8dd28754:1503845636,95668f2cf4621050d576c3bfe97d7ce8:-1386638834,d685cb6cf8621050f2d8ee903a91208d:663072604,58c343e8166210501121c91337b01476:-853603779,26fff92c5daedc1038dde426b5eb03ff:-1386638834,48d169a4fc6edc10df9a737dc9f6128a:-158595156,d1fe7420bd2edc1064bc06925ec5f969:1584855737,3c3befb93896d4106249b5e2ed8e2c86:-741850597,68a354f9251a941035e44fc33dc81c6a:-1551584823,134e7fe9a91e54108aa44c7abc4e5681:-1835444713,03a99ba988965410762e7e953e3bf63e:-268199531,fa429229a1d2541014b4c7264b12d767:-1495477754,48b0522935d25410707327ef6e701bf7:-268199531,8926e399701e1410cdd664a863273ff3:-1485096514,ae642b99a41e141015e77a00e8c5626b:1318098559,4a53e399541e141065309021cd19cac8:-1989721148,40206b95b71e141012eca7bcfc1c7a82:-294366339,f32d5f55a11e141053f664ef2c453f0f:-2114638538,8fbd0b1924da14101c07f9a9e09f696a:-73364520,90d1b9c1d05ed01018ad6ced4062ff37:-268199531,f4a8c485871ad010bd0ead4b5bea635b:441720674,19a04801391ad0102aa7a60adc06a10e:224858828,fbce67343bd6d010fee5b36d9e4dcc52:-1576432127,61f53a203d1a90101d35a85cb728848f:-488144902,1fbe5f18f5de5010769fc4f88b3cebe0:1819456939,51087a1cd45e5010e79423cfe7932803:-488144902,88f03e18fb5e50104d8d5355cf4c7ae4:-1852756497,58903e18fc5e5010904f1e68234c2268:-1303011546,f50f9ed82e1e5010e887039a42b701f3:-1994093654,2fdd9ed8661e5010359765f4499d4eca:-1701418367,b9d31e143d1e5010fab616c08d8c23eb:-396105221,31631a14661e5010390fe63d5a3a39ed:-1464357701,42c962404dde10101394c91f284be01c:1467463504,e8ada508d21e10101b02914b3e8dc530:-963868906,5f4a6d48e21e1010923cda7afb51b13d:-1767247513,8673e5408e1e10101d2e712de9c3d785:-491712662,6154fd980eb190101001742cd81a0787:-98669817,9914b9588cb190104b0f94dc4680a47f:449540957,677f6154a0b19010bff8f404b73d5162:-662216405,17eee15407b1901042b9731949546f01:1393608259,5a8bd9d879fd50104b5382e3e2d015cd:-471770069,e84bdd101cfd501087312573502cd7d1:2073574297,082ecdd883bd5010d7e098184e41071a:887478365,021d4118aebd5010b1bbb45ae6fb5044:-893898771,e58d53d4da2c1410cbd018fd1f0f0f78:523837316,f32d17541c2c1410e483122450d923dc:1501222418,52ac5794fc2c141084970804935080eb:197809562,723cd754202c14108f7d37ffd133069f:39746879,588b1794062c1410c193529af737cf9e:1770578955,78264b06e9581410b0d2c65205a0df34:-1339647849,915959038f5b8010571f8e7c2e676e9c:-423693323,f5279d8f361b8010977413cad598cad8:436039412</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_cf6e769c2fa81410071ede1a2799b655</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;&lt;sys_script action="INSERT_OR_UPDATE"&gt;&lt;abort_action&gt;false&lt;/abort_action&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;action_delete&gt;false&lt;/action_delete&gt;&lt;action_insert&gt;true&lt;/action_insert&gt;&lt;action_query&gt;false&lt;/action_query&gt;&lt;action_update&gt;true&lt;/action_update&gt;&lt;active&gt;true&lt;/active&gt;&lt;add_message&gt;false&lt;/add_message&gt;&lt;advanced&gt;true&lt;/advanced&gt;&lt;change_fields&gt;false&lt;/change_fields&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;collection&gt;x_nuta2_nutanix_ca_nutanix_runtime_configuration&lt;/collection&gt;&lt;condition/&gt;&lt;description/&gt;&lt;execute_function&gt;false&lt;/execute_function&gt;&lt;filter_condition/&gt;&lt;is_rest&gt;false&lt;/is_rest&gt;&lt;message/&gt;&lt;name&gt;Set Active field of Catalog Item&lt;/name&gt;&lt;order&gt;100&lt;/order&gt;&lt;priority&gt;100&lt;/priority&gt;&lt;rest_method/&gt;&lt;rest_method_text/&gt;&lt;rest_service/&gt;&lt;rest_service_text/&gt;&lt;rest_variables/&gt;&lt;role_conditions/&gt;&lt;script&gt;&lt;![CDATA[(function executeRule(current, previous /*null when async*/ ) {

    var cat_item = new GlideRecord('x_nuta2_nutanix_ca_nutanix_catalog_items');
    cat_item.addQuery('sys_id', current.item_name);
    cat_item.query();
    if (cat_item.next()) {
        if (current.state == 'inactive' || current.state == 'deleted' || current.state == 'draft') {
            cat_item.setValue('active', false);
			cat_item.setValue('hide_sp', true);
            cat_item.update();
        }
        if (current.state == 'active') {
            cat_item.setValue('active', true);
			cat_item.setValue('hide_sp', false);
            cat_item.update();
        }
    }
	
	
})(current, previous);]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-04-29 12:12:48&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;cf6e769c2fa81410071ede1a2799b655&lt;/sys_id&gt;&lt;sys_mod_count&gt;2&lt;/sys_mod_count&gt;&lt;sys_name&gt;Set Active field of Catalog Item&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_cf6e769c2fa81410071ede1a2799b655&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-05-10 06:38:01&lt;/sys_updated_on&gt;&lt;template/&gt;&lt;when&gt;after&lt;/when&gt;&lt;/sys_script&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=cf6e769c2fa81410071ede1a2799b655"/&gt;&lt;/record_update&gt;</payload>
<payload_hash>-281643050</payload_hash>
<remote_update_set display_value="Nutanix Calm 1.4.4 Service Portal patch">05f5233707003010f76cfdac7c1ed0c0</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2021-05-18 07:53:49</sys_created_on>
<sys_id>8df5233707003010f76cfdac7c1ed0c1</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1795ba05d660000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2021-05-18 07:53:49</sys_updated_on>
<table>x_nuta2_nutanix_ca_nutanix_runtime_configuration</table>
<target_name>Set Active field of Catalog Item</target_name>
<type>Business Rule</type>
<update_domain>global</update_domain>
<update_guid>b0e7ce991040b410cd56476a59317c31</update_guid>
<update_guid_history>b0e7ce991040b410cd56476a59317c31:-281643050,214ac3844e48b0106ae5edd194ceb299:-787512305,bebefa5cb3a8141046c12f20e88001ef:-1401296901</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_f67b34a02f902810c1bade1a2799b63c</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;false&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Service_Portal_Migration_Script&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;true&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Service_Portal_Migration_Script&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Service_Portal_Migration_Script = Class.create();
Service_Portal_Migration_Script.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
    initialize: function() {
        this.appUtil = new Nutanix_Calm_Utils();
        this.logger = new Nutanix_Calm_Logger();
        this.createVariable = new Nutanix_CreateCatalogVariables();
        this.appScriptInstance = new Nutanix_ImportApplicationProfiles();
    },
    isMigrationNeeded: function() {
        var cat_items = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        cat_items.addEncodedQuery('multiple_application_profileISEMPTY^multiple_projectsISEMPTY^state=active^ORstate=draft');
        cat_items.query();
        if (cat_items.hasNext()) {
            this.logger.info("Migration to V 1_4 require");
            return true;
        }
        var any_cat_items_present = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        any_cat_items_present.query();
        if (any_cat_items_present.hasNext()) {
            this.logger.info("Migration to V 1_4 require");
            return true;
        }
        this.logger.info("Migration to V 1_4 not require");
        return false;
    },

    updateCatalog: function() {
        this.logger.info("Migration to V1_4 Started");

        gs.setProperty('x_nuta2_nutanix_ca.portal_migration.script.ran', 'true');

        this.catalogItem_1_4();
        var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        gr.query();
        while (gr.next()) {
            try {
                this.clientScript_1_4(gr.item_name);
                this.logger.info(gr.item_name.name + " Catalog client script succesfully migrated.");
            } catch (e) {
                this.logger.error(gr.item_name.name + " Catalog Item was not migrated due to issue in catalog client script.");
            }
        }
    },

    clientScript_1_4: function(catSysId) {
        var catalogScriptGR = new GlideRecord(this.appUtil.configuration.table.catalogClientScript + '');
        catalogScriptGR.addQuery('cat_item', catSysId);
        catalogScriptGR.query();
        this.logger.info("ctalog client Script " + catalogScriptGR.getRowCount() + "to be updatated");
        while (catalogScriptGR.next()) {
            this.logger.info(catalogScriptGR.name + "catalog client script updatated");
            if (catalogScriptGR.name + '' == "Fetch form data on change of profile") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);

            }
            if (catalogScriptGR.name + '' == "Get Project and Profile List onLoad") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
            }
            if (catalogScriptGR.name + '' == "Hide Order details on request") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
            }
            if (catalogScriptGR.name + '' == "Get Subnet Info") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
            }
            if (catalogScriptGR.name + '' == "Get Subnet Info on project change") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
            }
            if (catalogScriptGR.name + '' == "Check Catalog Item Validity") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
            }
            if (catalogScriptGR.name + '' == "Service portal fixes") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
            }

        }
        var profileSysID = new GlideRecord('item_option_new');
        profileSysID.addEncodedQuery('cat_item=' + catSysId + '^nameLIKEdefault_profile');
        profileSysID.query();
        profileSysID.next();
        var catalogScriptGR = new sn_sc.CatalogClientScript();
        catalogScriptGR.setAttributes({
            "name": "Fetch form data on change of profile",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": "" + catSysId,
            "cat_variable": "IO:" + profileSysID.sys_id,
            "active": true,
            "order": 100,
            "description": 'This script is auto created thorugh runtime module for fetching and setting form data and visibility.',
            "applies_catalog": true,
            "ui_type": "10",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        catalogScriptGR.appliesToCatalogItem(true);
        var Script = "function onChange(control, oldValue, newValue, isLoading) {if ( newValue == '') {return;}var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'getFieldDetails');ga.addParam('cat_item_sys_id', g_form.getUniqueValue());ga.addParam('fieldNameArray', g_form.getFieldNames());ga.getXML(parseFieldResponse);function parseFieldResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var object1 = JSON.parse(answer);for (var i in object1) {if (object1[i].var_type == 'formatter' || object1[i].var_type == 'container' || object1[i].var_type == 'checkbox_container' || object1[i].var_type == 'undefined' || object1[i].var_type == 'Container Start') {continue;}g_form.setDisplay(object1[i].var_type+'', false);g_form.setReadOnly(object1[i].var_type+'', true);}}g_form.setDisplay('provider_icons', 'true');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = newValue;var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile);ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse, null);function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile);ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse1, null);function parseResponse1(response){var answer1 = response.responseXML.documentElement.getAttribute('answer');var object1 = JSON.parse(answer1);for (var i in object1) {var fielVal = {};var parsed = JSON.parse(answer);for (var i in parsed) {if (i.indexOf('cluster_name') == -1) {if (object1[i].var_type+'' == 'masked') {fielVal[i] = parsed[i].value;g_form.setValue(i + '', '');} else {g_form.setValue(i + '', parsed[i].value + '');}g_form.setReadOnly(i + '', parsed[i].readOnly + '');g_form.setDisplay(i + '', !parsed[i].readOnly);} else {g_form.setDisplay(i + '', !parsed[i].readOnly);g_form.setReadOnly(i + '', true);}}sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);}}}}";
        catalogScriptGR.addScript(Script);
        var ScriptId = catalogScriptGR.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Fetch form data on change of profile\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        gr.get(ScriptId);
        gr.setValue("sys_scope", "global");
        gr.update();


        var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
        onLoadCatalogClientScript.setAttributes({
            "name": "Get Project and Profile List onLoad",
            "type": "onLoad",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "active": "true",
            "order": "100",
            "description": "This script is auto created thorugh runtime module for getting projects and profile list.",
            "applies_catalog": "true",
            "ui_type": "10",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        onLoadCatalogClientScript.appliesToCatalogItem(true);
        var onLoadScript = "function onLoad() { var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchProjectAndProfileList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer);var projectList = parsed.projectList; g_form.clearOptions('default_project');for (var i = 0; i &lt; projectList.length; i++) { var project = projectList[i]; g_form.addOption('default_project', project.uuid, project.name);}var profileList = parsed.profileList.split(','); g_form.clearOptions('default_profile'); for (i = 0; i &lt; profileList.length; i++) { g_form.addOption('default_profile', profileList[i] + '', profileList[i] + ''); } g_form.setValue('default_profile', profileList[0]);if (projectList.length == 1) { g_form.setReadOnly('default_project', true);} if (profileList.length == 1) { g_form.setReadOnly('default_profile', true);} var cat_sys_id = g_form.getUniqueValue();var profile = g_form.getValue('default_profile').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse);}function varResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service; var sess_json = {};var var_array = [];for (var i in prof_json) {var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = i + '';sess_json['IO:'+i] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);for (var j in serv_json) {var_array = [];for (var k in serv_json[j]) {var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:'+k] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(sess_json);}}function getAdvancedVars(variable_json) {var act_var_JSON = JSON.stringify(variable_json);var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name', 'variableArrayParser');gajax.addParam('sysparm_type', 'catalog');gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + '');gajax.addParam('sysparm_varJson', act_var_JSON);gajax.getXML(getVarResponse);}function getVarResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null')return;var parsedResponse = JSON.parse(answer);for (var i in parsedResponse) {var row = parsedResponse[i];var sys_id = 'IO:' + row.sys_id;var type = row.type + '';if (row.state == 'SUCCESS') {if(type == 'LOCAL')g_form.setValue(sys_id, row.value);if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') {g_form.clearOptions(sys_id);for (var k = 0; k &lt; (row.value).length; k++) {g_form.addOption(sys_id + '', row.value[k], row.value[k]);}}}if (row.state == 'ERROR') {g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}}}";
        onLoadCatalogClientScript.addScript(onLoadScript);
        var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Get Project and Profile List onLoad\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        gr.get(onLoadCatalogClientScriptId);
        gr.setValue("sys_scope", "global");
        gr.update();

        var onLoadCatalogClientScriptGR = new sn_sc.CatalogClientScript();
        onLoadCatalogClientScriptGR.setAttributes({
            "name": "Hide Order details on request",
            "type": "onLoad",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "active": true,
            "order": 10,
            "description": "Hide values on request details.",
            "applies_catalog": "false",
            "ui_type": "10",
            "applies_req_item": "true",
            "applies_sc_task": "false",
            "sys_scope": "global"
        });
        onLoadCatalogClientScriptGR.appliesToCatalogItem(false);
        onLoadCatalogClientScriptGR.appliesToRequestedItem(true);
        var onLoadScriptHide = "function onLoad() {if(g_form.getTableName() + '' == 'sc_req_item') {var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;}g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'false');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = g_form.getValue('default_profile') + '';var cat_sys_id = g_form.getValue('cat_item') + '';var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile + '');ga.addParam('sysparm_catSysID', cat_sys_id + '');ga.getXML(parseResponse);} function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var nameTypeMap = {};var flds = g_form.nameMap;for (var i in flds) {nameTypeMap[flds[i].prettyName + ''] = fldType[flds[i].realName + ''] + '';}var fielVal = {};var parsed = JSON.parse(answer);for (var i in parsed) {if (i.indexOf('cluster_name') == -1) {if (nameTypeMap[i + ''] + '' == 'masked') {fielVal[i] = parsed[i].value;g_form.setValue(i + '', '');} else {g_form.setValue(i + '', parsed[i].value + '');}g_form.setReadOnly(i + '', true); g_form.setDisplay(i + '', !parsed[i].readOnly);} else {g_form.setDisplay(i + '', !parsed[i].readOnly);g_form.setReadOnly(i + '', true);}}sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);}}";
        onLoadCatalogClientScriptGR.addScript(onLoadScriptHide);
        var onLoadCatalogClientScriptId = onLoadCatalogClientScriptGR.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Hide values on request details.\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        gr.get(onLoadCatalogClientScriptId);
        gr.setValue("sys_scope", "global");
        gr.update();

        /*Insert new Scripts Get Subnet Info on project change*/
        var oldGR = new GlideRecord('item_option_new');
        oldGR.addEncodedQuery('cat_item=' + catSysId + '^nameLIKEdefault_project');
        oldGR.query();
        oldGR.next();
        var onChangecatalogClientScript1 = new sn_sc.CatalogClientScript();
        onChangecatalogClientScript1.setAttributes({
            "name": "Get Subnet Info on project change",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "cat_variable": "IO:" + oldGR.sys_id,
            "active": true,
            "order": 600,
            "description": "This script is auto created thorugh runtime module for checking application name on submit.",
            "applies_catalog": true,
            "ui_type": "10",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        onChangecatalogClientScript1.appliesToCatalogItem(true);
        var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (newValue == '') { return; }try{var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getSubnet');ga.addParam('sysparm_catSysID', catalogSysId); ga.addParam('sysparm_ProjectUuid', newValue);ga.addParam('sysparm_ProjectUuid', newValue);ga.getXML(processAnswer);function processAnswer(response) {var ans = response.responseXML.documentElement.getAttribute('answer');sessionStorage['clusterName_' + g_form.getUniqueValue()] = ans;ans = JSON.parse(ans);var catalog_clusterJSON = ans.catalog_data;clusterJSON = ans.cluster_info;var nicList = [];for (var m in clusterJSON) {nicList.push(clusterJSON[m].subnet);}var nic_variable_namme = [];for (var n in catalog_clusterJSON) {var nics = catalog_clusterJSON[n].nics;for(var k in  nics) nic_variable_namme.push(nics[k]);}var catNicJson = {\"nic\": nic_variable_namme,\"nicList\": nicList};var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'setSubnet');ga.addParam('sysparm_catSysID', catalogSysId);ga.addParam('sysparm_catNicJson', JSON.stringify(catNicJson));ga.getXML(processAnswer1);function processAnswer1(response) {var ans = response.responseXML.documentElement.getAttribute('answer');}}}catch (err){}}";
        onChangecatalogClientScript1.addScript(onChangeScript);
        var OnChangeCatalogScriptId = onChangecatalogClientScript1.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Get Subnet Info on project change\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        gr.get(OnChangeCatalogScriptId);
        gr.setValue("sys_scope", "global");
        gr.update();

        var projectSysID = new GlideRecord('item_option_new');
        projectSysID.addEncodedQuery('cat_item=' + catSysId + '^nameLIKEdefault_project');
        projectSysID.query();
        projectSysID.next();
        var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
        onLoadCatalogClientScript.setAttributes({
            "name": "Check Catalog Item Validity project",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "cat_variable": "IO:" + projectSysID,
            "active": true,
            "order": 1,
            "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
            "applies_catalog": true,
            "ui_type": "10",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        onLoadCatalogClientScript.appliesToCatalogItem(true);
        var onLoadScript = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') { return;}  var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+''; var profileName = (g_form.getValue('default_profile')+'').trim();if(profileName == '') return;var projectUUID = (newValue+'').trim();if(projectUUID == '')return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); }  }    function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   }  function clearFieldValue(message) {alert(message); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getFieldDetails');ga.addParam('cat_item_sys_id', g_form.getUniqueValue());ga.addParam('fieldNameArray', g_form.getFieldNames());ga.getXML(parseResponse1);function parseResponse1(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var object = JSON.parse(answer);for(var i in object){if (object[i].var_type == 'formatter' || object[i].var_type == 'container' || object[i].var_type == 'checkbox_container' || object[i].var_type == 'undefined' || object[i].var_type == 'Container Start') {continue;}if (object[i].var_name.indexOf('cluster_name') == -1) g_form.clearValue(object[i].var_name);}}self.location = '/sp?id=sc_category&amp;catalog_id=240abede37112300fdfc097973990e24';}}";
        onLoadCatalogClientScript.addScript(onLoadScript);
        var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Check Catalog Item Validity project\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        gr.get(onLoadCatalogClientScriptId);
        gr.setValue("sys_scope", "global");
        gr.update();


        var profileSysID = new GlideRecord('item_option_new');
        profileSysID.addEncodedQuery('cat_item=' + catSysId + '^nameLIKEdefault_profile');
        profileSysID.query();
        profileSysID.next();
        var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
        onLoadCatalogClientScript.setAttributes({
            "name": "Check Catalog Item Validity profile",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "cat_variable": "IO:" + profileSysID.sys_id,
            "active": true,
            "order": 1,
            "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
            "applies_catalog": true,
            "ui_type": "10",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        onLoadCatalogClientScript.appliesToCatalogItem(true);
        var onLoadScript = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') { return;}  var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+'';var profileName = (newValue+'').trim(); if(profileName == '') return; var projectUUID = (g_form.getValue('default_project')+'').trim(); if(projectUUID == '') return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName);ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } }function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   } function clearFieldValue(message) {alert(message); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getFieldDetails');ga.addParam('cat_item_sys_id', g_form.getUniqueValue());ga.addParam('fieldNameArray', g_form.getFieldNames());ga.getXML(parseResponse1);function parseResponse1(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var object = JSON.parse(answer);for(var i in object){if (object[i].var_type == 'formatter' || object[i].var_type == 'container' || object[i].var_type == 'checkbox_container' || object[i].var_type == 'undefined' || object[i].var_type == 'Container Start') {continue;}if (object[i].var_name.indexOf('cluster_name') == -1) g_form.clearValue(object[i].var_name);}}self.location = '/sp?id=sc_category&amp;catalog_id=240abede37112300fdfc097973990e24';}}";
        onLoadCatalogClientScript.addScript(onLoadScript);
        var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Check Catalog Item Validity profile\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        gr.get(onLoadCatalogClientScriptId);
        gr.setValue("sys_scope", "global");
        gr.update();

        var catalogScriptGR = new sn_sc.CatalogClientScript();
        catalogScriptGR.setAttributes({
            "name": "Service portal fixes",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": "" + catSysId,
            "cat_variable": "IO:" + profileSysID.sys_id,
            "active": true,
            "order": 300,
            "description": 'This script is auto created thorugh runtime module for service portal fixes.',
            "applies_catalog": true,
            "ui_type": "10",
            "applies_req_item": false,
            "applies_sc_task": false,
        });
        catalogScriptGR.appliesToCatalogItem(true);
        var Script = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') { return;}var credentials = g_form.getFieldNames();for (var i in credentials) {if (credentials[i].includes('_password') || credentials[i].includes('_private_key') || credentials[i].includes('_passphrase')) {g_form.setVisible(credentials[i] + '', false);}}var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'extraFields');ga.addParam('sysparm_catSysID', g_form.getUniqueValue());ga.addParam('sysparm_fieldNames', g_form.getFieldNames());ga.addParam('sysparm_profile', newValue); ga.getXML(parseResponse);function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var object = JSON.parse(answer);var extraFields = JSON.parse(object.extraFields);var privateFields = JSON.parse(object.privateFields);var showRuntimeVariables = JSON.parse(object.showRuntimeVariables);var secretVariables = JSON.parse(object.secretVariables);var extraCredentials = JSON.parse(object.extraCredentials);for (var i in extraFields) g_form.setVisible(extraFields[i] + '', false);for (var j in privateFields) g_form.setVisible(privateFields[j] + '', false);for (var k in showRuntimeVariables) g_form.setVisible(showRuntimeVariables[k] + '', true);for (var l in secretVariables) g_form.clearValue(secretVariables[l] + '');for (var m in extraCredentials) g_form.setVisible(extraCredentials[k] + '', true);}}";
        catalogScriptGR.addScript(Script);
        var ScriptId = catalogScriptGR.create();
        var gr = new GlideRecord('catalog_script_client');
        gr.get(ScriptId);
        gr.setValue("sys_scope", "global");
        gr.update();


    },

    catalogItem_1_4: function() {
        var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        gr.addEncodedQuery('multiple_application_profileISEMPTY^multiple_projectsISEMPTY^state=active^ORstate=draft');
        gr.query();
        while (gr.next()) {
            try {
                gr.multiple_projects = gr.project;
                gr.multiple_application_profile = gr.application_profile;
                gr.update();
                this.logger.info("V1.4 migration, " + gr.item_name.name + " Catalog Item was migrated.");
            } catch (e) {
                this.logger.error("V1.4 migration, " + gr.item_name.name + " Catalog Item was not migrated due to issue in some field type and the value it contained.");
            }
        }
    },

    copyFieldJson: function() {

        this.logger.info("V1.4 migration: Migrating old variables");
        var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        gr.addQuery("state", "active");
        gr.query();
        while (gr.next()) {
            this._createOnChangeSessionScript(gr.item_name.sys_id);
            var grVars = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
            grVars.addEncodedQuery('catalog_item=' + gr.item_name.sys_id + '^isprofilevariable=true^ORisservicevariable=true');
            grVars.query();
            while (grVars.next()) {
                var grVarsBp = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
                grVarsBp.addQuery('catalog_item', gr.blueprint + "");
                grVarsBp.addQuery('uuid', grVars.uuid + "");
                grVarsBp.query();
                if (grVarsBp.next()) {
                    this._createOnChangeScript(grVars.variable.sys_id + "", gr.item_name.sys_id + "");
                    grVars.field_json = grVarsBp.field_json + '';
                    grVars.update();
                }
            }
        }

    },

    _createOnChangeSessionScript: function(catSysId) {

        var profileSysID = new GlideRecord('item_option_new');
        profileSysID.addEncodedQuery('cat_item=' + catSysId + '^nameLIKEdefault_profile');
        profileSysID.query();
        profileSysID.next();

        var onChangecatalogClientScript3 = new sn_sc.CatalogClientScript();
        onChangecatalogClientScript3.setAttributes({
            "name": "Fetch dependencies on change of profile",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "cat_variable": "IO:" + profileSysID.sys_id,
            "active": true,
            "order": 700,
            "description": "This script is auto created thorugh runtime module for getting variables on change of profile.",
            "applies_catalog": true,
            "ui_type": "10",
            "applies_req_item": false,
            "applies_sc_task": false,

        });
        onChangecatalogClientScript3.appliesToCatalogItem(true);
        var onChangeScriptVars = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') {return;}var cat_sys_id = g_form.getUniqueValue();var profile = (newValue + '').trim();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse);}function varResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service;var sess_json = {};var var_array = [];for (var i in prof_json) {var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = i + '';sess_json['IO:' + i] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);for (var j in serv_json) {var_array = [];for (var k in serv_json[j]) {var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:' + k] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(sess_json);}function getAdvancedVars(variable_json) {var act_var_JSON = JSON.stringify(variable_json);var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name', 'variableArrayParser');gajax.addParam('sysparm_type', 'catalog');gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + '');gajax.addParam('sysparm_varJson', act_var_JSON);gajax.getXML(getVarResponse);}function getVarResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null') return;var parsedResponse = JSON.parse(answer);for (var i in parsedResponse) {var row = parsedResponse[i];var sys_id = 'IO:' + row.sys_id;var type = row.type + '';if (row.state == 'SUCCESS') {if (type == 'LOCAL') g_form.setValue(sys_id, row.value);if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') {g_form.clearOptions(sys_id);for (var k = 0; k &lt; (row.value).length; k++) {g_form.addOption(sys_id + '', row.value[k], row.value[k]);}}}if (row.state == 'ERROR') {g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}}}";
        onChangecatalogClientScript3.addScript(onChangeScriptVars);
        var OnChangeCatalogScriptId = onChangecatalogClientScript3.create();
        var gr = new GlideRecord('catalog_script_client');
        gr.get(OnChangeCatalogScriptId);
        gr.setValue("sys_scope", "global");
        gr.update();

        var onChangecatalogClientScript2 = new sn_sc.CatalogClientScript();
        onChangecatalogClientScript2.setAttributes({
            "name": "Set Session Vars",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "cat_variable": "IO:" + profileSysID.sys_id,
            "active": true,
            "order": 700,
            "description": "This script is auto created thorugh runtime module for setting session json.",
            "applies_catalog": true,
            "ui_type": "10",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        onChangecatalogClientScript2.appliesToCatalogItem(true);
        var onChangeScriptSess = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') {return;}var cat_sys_id = g_form.getUniqueValue();var profile = (newValue + '').trim();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse);function varResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');console.log(answer);var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service;var sess_json = {};for (var i in prof_json) {var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = i + '';sess_json['IO:' + i] = curr_value;}for (var j in serv_json) {for (var k in serv_json[j]) {var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:' + k] = curr_value;}}sessionStorage['varValues'] = JSON.stringify(sess_json);}}";
        onChangecatalogClientScript2.addScript(onChangeScriptSess);
        var OnChangeCatalogScriptId = onChangecatalogClientScript2.create();
        var gr = new GlideRecord('catalog_script_client');
        gr.get(OnChangeCatalogScriptId);
        gr.setValue("sys_scope", "global");
        gr.update();

        this.logger.debug("Created onChange script to set Session variables ");
    },

    _createOnChangeScript: function(varSysId, catSysId) {
        try {
            this.logger.info("V1.4 migration: Creating onChange Scripts");
            var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
            onChangecatalogClientScript.setAttributes({
                "name": "Fetch values OnChange",
                "type": "onChange",
                "applies_to": "item",
                "cat_item": '' + catSysId,
                "cat_variable": "IO:" + varSysId,
                "active": true,
                "order": 100,
                "description": "This script is auto created thorugh runtime module for fetching values.",
                "applies_catalog": "true",
                "ui_type": "10",
                "applies_req_item": false,
                "applies_sc_task": false,
                "sys_scope": "global"
            });
            onChangecatalogClientScript.appliesToCatalogItem(true);
            var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if(!sessionStorage['varValues'])return;var control_id =\' " + varSysId + "\';var varValues = JSON.parse(sessionStorage['varValues']);oldValue = varValues[control_id + '']; if (isLoading || newValue == '' || oldValue + '' == newValue + '') { return; }console.log(oldValue);console.log(newValue); function varResponse(response){var answer=response.responseXML.documentElement.getAttribute('answer');var varJSON=JSON.parse(answer);var prof_json=varJSON.profile;var serv_json=varJSON.service;var var_array=[];for(var i in prof_json){var field=prof_json[i];var curr_value=g_form.getValue('IO:'+i);varValues['IO:' + i] = curr_value + '';var parsed_field=JSON.parse(field);parsed_field.value=curr_value,parsed_field.sys_id=i+'',var_array.push(parsed_field);}getAdvancedVars(var_array);for(var j in serv_json){var_array=[];for(var k in serv_json[j]){var field=serv_json[j][k];var curr_value=g_form.getValue('IO:'+k);varValues['IO:' + k] = curr_value + '';var parsed_field=JSON.parse(field);parsed_field.value=curr_value,parsed_field.sys_id=k+'',var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(varValues);}function getAdvancedVars(variable_json){var act_var_JSON=JSON.stringify(variable_json);var gajax=new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name','variableArrayParser'),gajax.addParam('sysparm_type','catalog'),gajax.addParam('sysparm_parentUuid',g_form.getUniqueValue()+''),gajax.addParam('sysparm_varJson',act_var_JSON),gajax.getXML(getVarResponse);}function getVarResponse(response){  var answer=response.responseXML.documentElement.getAttribute('answer');if(answer+''==''||answer+''=='undeined'||answer+''=='null')return;var parsedResponse=JSON.parse(answer);for(var i in parsedResponse){var row=parsedResponse[i];var sys_id='IO:'+row.sys_id;var type=row.type+'';if(row.state=='SUCCESS'&amp;&amp;(type=='LOCAL'&amp;&amp;g_form.setValue(sys_id,row.value),type=='EXEC_LOCAL'||type=='HTTP_LOCAL'||type=='EXEC_SECRET'||type=='HTTP_SECRET')){g_form.clearOptions(sys_id);for(var k=0;k&lt;row.value.length;k++)g_form.addOption(sys_id+'',row.value[k],row.value[k]);}row.state=='ERROR'&amp;&amp;g_form.addErrorMessage('Error in variable: '+row.name+': '+row.error[0]);}}var cat_sys_id=g_form.getUniqueValue();var profile=g_form.getValue('default_profile').trim();var ga=new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name','fetchLaunchVars'),ga.addParam('sysparm_catsysid',cat_sys_id),ga.addParam('sysparm_profile',profile),ga.getXML(varResponse);}";
            onChangecatalogClientScript.addScript(onChangeScript);
            var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
            this.logger.info("V1.4 migration, " + catSysId + " Fetch values OnChange catalog client script created.");
            var gr = new GlideRecord('catalog_script_client');
            gr.get(OnChangeCatalogScriptId);
            gr.setValue("sys_scope", "global");
            gr.update();
        } catch (e) {
            this.logger.error("Exception caught inside Migration_Script._createOnChangeScript. Error:- " + e);
        }
    },

    type: 'Service_Portal_Migration_Script'
});]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-11-02 07:14:16&lt;/sys_created_on&gt;&lt;sys_id&gt;f67b34a02f902810c1bade1a2799b63c&lt;/sys_id&gt;&lt;sys_mod_count&gt;4&lt;/sys_mod_count&gt;&lt;sys_name&gt;Service_Portal_Migration_Script&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_f67b34a02f902810c1bade1a2799b63c&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-05-07 09:14:01&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>14650058</payload_hash>
<remote_update_set display_value="Nutanix Calm 1.4.4 Service Portal patch">05f5233707003010f76cfdac7c1ed0c0</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2021-05-18 07:53:49</sys_created_on>
<sys_id>c1f52fb707003010f76cfdac7c1ed0d4</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1795ba0626e0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2021-05-18 07:53:49</sys_updated_on>
<table/>
<target_name>Service_Portal_Migration_Script</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>f4de4f106e84f010881c36450a774020</update_guid>
<update_guid_history>f4de4f106e84f010881c36450a774020:14650058,a66e4c38f56ca050208090d614a73347:407637942,1ad345a46c9028100a862cda9974b084:1774771365,443105a4b99028103967f7fc027568b5:-1301498638,74bb3c608c902810269befbba0404816:1441042828</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_75c3833837fd2300fdfc097973990e2f</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Nutanix_ConfigureSettingScripts&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Nutanix_ConfigureSettingScripts&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Nutanix_ConfigureSettingScripts = Class.create();
Nutanix_ConfigureSettingScripts.prototype = {
    initialize: function() {
        this.appUtil = new Nutanix_Calm_Utils();
        this.logger = new Nutanix_Calm_Logger();
        this.appScriptInstance = new Nutanix_ImportApplicationProfiles();
    },
    _updateOptions: function(fieldSysid, opt, type) {
		gs.info("Called update options:"+fieldSysid);
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._updateOptions");
            if (type == 5) {
                var grQust = new GlideRecord('question_choice');
                grQust.addQuery('question', fieldSysid);
                grQust.query();
                while (grQust.next()) {
                    grQust.setValue('question', '');
                    grQust.update();
                }
                grQust.deleteMultiple();

                for (var i in opt) {
                    grQust = new GlideRecord('question_choice');
                    grQust.initialize();
                    grQust.sys_class_name = "question_choice";
                    grQust.question = fieldSysid + '';
                    grQust.text = opt[i] + '';
                    grQust.value = opt[i] + '';
                    grQust.insert();
                }
            } else if (type == 21) {
                var grQust = new GlideRecord(this.appUtil.configuration.table.dropDownTable);
                grQust.addQuery('variable', fieldSysid);
                grQust.deleteMultiple();

                for (var i in opt) {
                    grQust = new GlideRecord(this.appUtil.configuration.table.dropDownTable);
                    grQust.initialize();
                    grQust.variable = fieldSysid;
                    grQust.name = opt[i];
                    grQust.value = opt[i];
                    grQust.insert();
                }
                var fGR = new GlideRecord('item_option_new');
                fGR.addQuery('sys_id', fieldSysid);
                fGR.query();
                if (fGR.next()) {
                    fGR.reference_qual = "variable=" + fieldSysid;
                    fGR.update();
                }

            }
        } catch (e) {
            this.logger.error("Inside Nutanix_ConfigureSettingScripts._updateOptions " + e);
        }

    },

    setServiceVariables: function(current) {
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts.setServiceVariables.");

            var performAction = current.variables.type + '';
            var catName = '';

            if (performAction == 'new') {
//priyanka More 
                var profile = current.variables.multiple_application_profile + "";
				gs.info("Abh chaljayega" + profile + current.variables.multiple_application_profile);
				var profile_arr = profile.split(",");
				
                var blueprint = current.variables.blueprint;
                var catSysId = current.description;
                var service_data = JSON.parse(current.variables.service_data);

                this.logger.debug("Got Profile:- " + profile + " Blueprint:- " + blueprint + " Catalog Item:- " + catSysId + " and Service Variables Data:- " + current.variables.service_data + " for setting service variables");

                var fieldGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                fieldGR.addEncodedQuery('cat_item=' + catSysId);
                fieldGR.query();

                var fieldInfo = {};

                while (fieldGR.next()) {
                    fieldInfo[fieldGR.name] = fieldGR.sys_id + '';
                }


                this.logger.debug("Fethed the mapping of fields to sysIds. JSON string:- " + JSON.stringify(fieldInfo));

                var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');

                for (var i in service_data) {
                    var serviceName = i;
                    var categoryList = service_data[i];

                    for (var j in categoryList) {
                        var categoryName = j;
                        var category = categoryList[j];

                        var keys = Object.keys(category);

                        if (!category[keys[0]].notCmplx || category[keys[0]].notCmplx + '' == 'false') {

                            this.logger.debug("Mapping PortList variables " + JSON.stringify(category[keys[0]]) + " in Varaibles properties table");

                            gr.initialize();
                            gr.variable = fieldInfo[categoryName + ''] + '';
                            gr.application_profile = profile + '';
                            gr.catalog_item = catSysId + '';
                            gr.default_value = JSON.stringify(category[keys[0]]);
                            gr.isprofilevariable = 'false';
                            gr.runtime_config = 'false';
                            gr.uuid = '';
                            gr.service_name = fieldInfo[serviceName + ''] + '';
                            gr.category_name = fieldInfo[categoryName + ''] + '';
                            gr.insert();

                        } else {
                            for (var k in category) {
                                var varia = category[k];

                                this.logger.debug("Mapping service variable " + varia.name + " with value " + varia.value + " and runtime config as " + varia.runtime_config + " againsts service " + serviceName + " and category " + categoryName + " in Varaibles properties table");

                                if (varia.data_type + '' == 'LOCAL' &amp;&amp; (varia.val_type + '' == 'DATE_TIME' || varia.val_type + '' == 'DATE'))
                                    varia.value = this.appScriptInstance._formttedDateTime(varia.value + '', varia.val_type + '', true);


                                gr.initialize();
                                gr.variable = fieldInfo[varia.name + ''] + '';
                                gr.application_profile = profile + '';
                                gr.catalog_item = catSysId + '';
                                gr.default_value = varia.value + '';
                                gr.isprofilevariable = varia.isprofilevariable + '';
                                gr.runtime_config = varia.runtime_config + '';
                                gr.uuid = varia.uuid + '';
                                gr.service_name = fieldInfo[serviceName + ''] + '';
                                gr.category_name = fieldInfo[categoryName + ''] + '';

                                gr.isdisabled = varia.isdisabled + '';
                                gr.issupported = varia.isSupported + '';
                                gr.isservicevariable = varia.isservicevariable + '';


                                gr.type = varia.type;
                                gr.value_type = varia.val_type + '';
                                gr.field_regex = varia.regex + '';
                                gr.data_type = varia.data_type + '';
                                gr.uuid = varia.uuid + '';

                                gr.field_json = varia.field + "";
                                gr.is_hidden = (varia.isHidden + "" == 'true') ? true : false;

                                gr.insert();

                                catName = gr.catalog_item.name + '';


//                                 if (varia.isservicevariable + '' == 'true')
//                                     this._createOnChangeScript(fieldInfo[varia.name + ''] + '', catSysId + "");
                            }
                        }

                    }
                }
//priyanka More 
//                 this.logger.info("Set service variables values for " + catName + ".");
// 				this.logger.debug("Prince Logs outside for :::   " + profile_arr + " ::: " + profile_arr.length);
// 				for(var i = 0 ; i &lt; profile_arr.length ; i++){
// 					this.logger.debug("Prince Logs calling ... _createOnChangeScriptForDependee ");
// 					this._createOnChangeScriptForDependee(catSysId , profile_arr[i], true, "serviceVar" );
// 				}

            } 
			else {

                var profile = current.variables.application_profile + '';
                var catSysId = current.variables.cat_item + '';

                var service_data = JSON.parse(current.variables.service_data + '');

                this.logger.debug("Got Profile:- " + profile + " Catalog Item:- " + catSysId + " and Service Variables Data:- " + current.variables.service_data + " to update service variables.");

                var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                gr.addQuery('catalog_item', catSysId);
                gr.addQuery('application_profile', profile);
                gr.addQuery('isprofilevariable', false);
                gr.query();

                while (gr.next()) {
                    /*if((gr.category_name.name+'').indexOf('storage') != -1){
                    	gr.default_value = JSON.stringify(service_data[gr.service_name.name+''][gr.category_name.name+''][gr.sys_id+'']);
                    	gr.update();	
                    	this.logger.debug("Updated service storage variable "+ gr.default_value);
                    }else if((gr.category_name.name+'').indexOf('port') != -1){
                    	gr.default_value = JSON.stringify(service_data[gr.service_name.name+''][gr.category_name.name+''][gr.sys_id+'']);
                    	gr.update();	
                    	this.logger.debug("Updated service port list "+ gr.default_value);
                    }*/


                    var jsonData = service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''];

                    if (!jsonData.notCmplx || jsonData.notCmplx + '' == 'false') {
                        gr.default_value = JSON.stringify(service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + '']);
                        gr.update();
                        this.logger.debug("Updated service port list " + gr.default_value);
                    } else {
                        if (service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].data_type + '' == 'LOCAL' &amp;&amp; (service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].val_type + '' == 'DATE_TIME' || service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].val_type + '' == 'DATE'))
                            service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].value = this.appScriptInstance._formttedDateTime(service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].value + '', service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].val_type + '', true);

                        gr.default_value = service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].value + '';
                        gr.runtime_config = service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].runtime_config + '';
                        gr.update();

                        this.logger.debug("Updated service variable " + gr.variable.name + " with value " + gr.default_value + " and runtime config as " + gr.runtime_config + " againsts service " + gr.service_name.name + " and category " + gr.category_name.name + " in Variables properties table");
                        catName = gr.catalog_item.name + '';

                    }
                }

                this.logger.info("Updated service variables values for " + catName + ".");
            }

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts.setServiceVariables. Error:- " + e);
        }
    },

    setProfileVariables: function(current) {
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts.setProfileVariables.");
            this.logger.info("Setting profile variables properties." + JSON.stringify(current));

            var performAction = current.variables.type + '';
            var catName = '';

            if (performAction == 'new') {
//priyanka More			
                var profile = current.variables.multiple_application_profile + "";
				gs.info("Abh chaljayega" + profile + current.variables.multiple_application_profile);
				var profile_arr = profile.split(",");
				
                var blueprint = current.variables.blueprint;
                var catSysId = current.description;
                var variable_data = JSON.parse(current.variables.variable_data);

                this.logger.debug("Got Profile:- " + profile + " Blueprint:- " + blueprint + " Catalog Item:- " + catSysId + " and Service Variables Data:- " + current.variables.variable_data + " for setting profile variables");

                var fieldGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                fieldGR.addEncodedQuery('cat_item=' + catSysId + '^type!=19^type!=20');
                fieldGR.query();

                var fieldInfo = {};

                while (fieldGR.next()) {
                    fieldInfo[fieldGR.name] = fieldGR.sys_id + '';
                }

                this.logger.debug("Fethed the mapping of fields to sysIds. JSON string:- " + JSON.stringify(fieldInfo));

                var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
				
                for (var i in variable_data) {
                    var varia = variable_data[i];

                    if (varia.data_type + '' == 'LOCAL' &amp;&amp; (varia.val_type + '' == 'DATE_TIME' || varia.val_type + '' == 'DATE'))
                        varia.value = this.appScriptInstance._formttedDateTime(varia.value + '', varia.val_type + '', true);

                    gr.initialize();
                    gr.application_profile = varia.application_profile + '';
                    gr.catalog_item = catSysId + '';
                    gr.default_value = varia.value + '';
                    gr.isprofilevariable = varia.isprofilevariable + '';
                    gr.runtime_config = varia.runtime_config + '';
                    gr.uuid = varia.uuid + '';
                    gr.variable = fieldInfo[varia.name + ''] + '';
							gs.info("priyanka BP varable "+fieldInfo[varia.name + '']+" new catalog item variable "+gr.variable);
                    gr.isdisabled = varia.isdisabled + '';
                    gr.type = varia.type;
                    gr.value_type = varia.val_type + '';
                    gr.field_regex = varia.regex + '';
                    gr.data_type = varia.data_type + '';
                    gr.uuid = varia.uuid + '';
                    gr.field_json = varia.field + "";
                    gr.is_hidden = (varia.isHidden + "" == 'true') ? true : false;
                    gr.insert();
                    catName = gr.catalog_item.name + '';
                    this.logger.debug("Mapping profile variable " + varia.name + " with value " + varia.value + " and runtime config as " + varia.runtime_config + " againsts profile " + gr.application_profile.name + " in Variables properties table");


                    //if(varia.isprofilevariable+'' == "true")
                    //	this._createOnChangeScript(fieldInfo[varia.name+'']+'' , catSysId + "");
					
					
                }
				
//priyanka More				
			
				for(var i = 0 ; i &lt; profile_arr.length ; i++){
					
					this._createOnChangeScriptForDependee(catSysId , profile_arr[i], "profileVar" );
				}
				
                this.logger.info("Set profile variables values for " + catName + ".");
            }
			else {

               var profile = current.variables.multiple_application_profile + "";
				gs.info("Abh chaljayega" + profile + current.variables.multiple_application_profile);
				var profile_arr = profile.split(",");
                var catSysId = current.variables.cat_item + '';
                var delta_profile = (current.variables.delta_profiles + '').split(',');
                var variable_data = JSON.parse(current.variables.variable_data + '');

                var variable_data = JSON.parse(current.variables.variable_data + '');
                for (var c in variable_data) {
                    var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                    gr.addQuery('catalog_item', catSysId);
                    gr.addQuery('application_profile', variable_data[c].application_profile);
                    gr.addQuery('isprofilevariable', true);
                    gr.query();

                    while (gr.next()) {
                        if (variable_data[gr.sys_id + ''].data_type + '' == 'LOCAL' &amp;&amp; (variable_data[gr.sys_id + ''].val_type + '' == 'DATE_TIME' || variable_data[gr.sys_id + ''].val_type + '' == 'DATE'))
                            variable_data[gr.sys_id + ''].value = this.appScriptInstance._formttedDateTime(variable_data[gr.sys_id + ''].value + '', variable_data[gr.sys_id + ''].val_type + '', true);

                        gr.default_value = variable_data[gr.sys_id + ''].value + '';
                        gr.runtime_config = variable_data[gr.sys_id + ''].runtime_config + '';
                        gr.update();
                        catName = gr.catalog_item.name + '';
                        this.logger.debug("Updated profile variable " + gr.variable.name + " with value " + gr.default_value + " and runtime config as " + gr.runtime_config + " againsts profile " + gr.application_profile.name + " in Variables properties table");
                    }
                }
                this.logger.info("Updated profile variables values for " + catName + ".");

                var fieldGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                fieldGR.addEncodedQuery('cat_item=' + catSysId + '^type!=19^type!=20');
                fieldGR.query();

                var fieldInfo = {};

                while (fieldGR.next()) {
                    fieldInfo[fieldGR.name] = fieldGR.sys_id + '';
                }

                for (var c in variable_data) {
                    for (var k in delta_profile) {
                        if (variable_data[c].application_profile == delta_profile[k]) {
                            var varia = variable_data[c];

                            if (varia.data_type + '' == 'LOCAL' &amp;&amp; (varia.val_type + '' == 'DATE_TIME' || varia.val_type + '' == 'DATE'))
                                varia.value = this.appScriptInstance._formttedDateTime(varia.value + '', varia.val_type + '', true);

                            gr.initialize();
                            gr.application_profile = varia.application_profile + '';
                            gr.catalog_item = catSysId + '';
                            gr.default_value = varia.value + '';
                            gr.isprofilevariable = varia.isprofilevariable + '';
                            gr.runtime_config = varia.runtime_config + '';
                            gr.uuid = varia.uuid + '';
                            gr.variable = fieldInfo[varia.name + ''] + '';
                            gr.isdisabled = varia.isdisabled + '';
                            gr.type = varia.type;
                            gr.value_type = varia.val_type + '';
                            gr.field_regex = varia.regex + '';
                            gr.data_type = varia.data_type + '';
                            gr.uuid = varia.uuid + '';
                            gr.field_json = varia.field + "";
                            gr.is_hidden = (varia.isHidden + "" == 'true') ? true : false;
                            gr.insert();
                            catName = gr.catalog_item.name + '';
                            this.logger.debug("Mapping profile variable " + varia.name + " with value " + varia.value + " and runtime config as " + varia.runtime_config + " againsts profile " + gr.application_profile.name + " in Variables properties table");


//                             if (varia.isprofilevariable + '' == "true")
//                                 this._createOnChangeScript(fieldInfo[varia.name + ''] + '', catSysId + "");

                        }
                    }
                }
				
				for(var i = 0 ; i &lt; profile_arr.length ; i++){
					
					this._createOnChangeScriptForDependee(catSysId , profile_arr[i], "profileVar" );
				}
            }

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts.setProfileVariables. Error:- " + e);
        }
    },

    _createOnChangeScriptForDependee: function(catSysId, profileSysID , type) {
		try{
		
        var clientScriptVar = [];
        var variableProperty = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
        variableProperty.addQuery('catalog_item', catSysId);
		variableProperty.addNotNullQuery('field_json');
        variableProperty.addQuery('application_profile', profileSysID);
			
			if(type+'' == 'profileVar')
				variableProperty.addQuery('isprofilevariable', true);
			if(type+'' == 'serviceVar')
				variableProperty.addQuery('isservicevariable', true);
			
		variableProperty.query();
        while (variableProperty.next()) {
            var depend_on = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
            depend_on.addQuery('catalog_item', catSysId);
			depend_on.addNotNullQuery('field_json');
            depend_on.addQuery('application_profile', profileSysID);
			
				if(type+'' == 'profileVar')
					depend_on.addQuery('isprofilevariable', true);
				if(type+'' == 'serviceVar')
					depend_on.addQuery('isservicevariable', true);
			
            depend_on.query();
            while (depend_on.next()) {
				var dependent_var = '';
				if(type+'' == 'serviceVar'){
					
					dependent_var = '@@{' + variableProperty.variable.question_text + '}@@';
					gs.info("!!!!! serviceVar "+dependent_var);
				}
				if(type+'' == 'profileVar'){	
					
					dependent_var = '@@{' + variableProperty.variable.name + '}@@';
					gs.info("!!!!! profileVar "+dependent_var);
				}
				var field_json = depend_on.field_json+'';
				gs.info("Priyanka log dependent_var "+dependent_var+" "+field_json+" "+field_json.indexOf(dependent_var));
				if(field_json != '{}'){
					if (field_json.indexOf(dependent_var) != -1) {
						if (clientScriptVar.indexOf(variableProperty.variable.sys_id) === -1) {
							gs.info("!!!!! varaible push to array "+variableProperty.variable.name);
							clientScriptVar.push(variableProperty.variable.sys_id);
						}
						break;
					}
				}
            }
        }
		
        for (var j in clientScriptVar) {
			if(this._clientScriptExist(clientScriptVar[j] + '', catSysId + ""))
				continue;
			else
				this._createOnChangeScript(clientScriptVar[j] + '', catSysId + "");
        }
		}catch(e){
			this.logger.error("Inside _createOnChangeScriptForDependee caught exception :::: " + e)
		}
    },
    _clientScriptExist: function(clientScriptVar, catSysId){
		gs.info('_clientScriptExist'+clientScriptVar+' catSysId '+catSysId);
		var gr = new GlideRecord('catalog_script_client');
		gr.addQuery('name', 'Fetch values OnChange');
		gr.addQuery('cat_item', catSysId);
		gr.addQuery('cat_variable', clientScriptVar);
		gr.query();
		if(gr.next())
			return true;
		else
			return false;
	},
    setCredentialsData: function(current) {

        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts.setCredentialsData.");





            var catSysId = current.description;
            var catName = '';
            var performAction = current.variables.type + '';

            if (performAction == 'new') {
                var blueprint = current.variables.blueprint;
                var variable_data = JSON.parse(current.variables.credentials_data);

                this.logger.debug("Got Blueprint:- " + blueprint + " Catalog Item:- " + catSysId + " and Credentials Data:- " + current.variables.credentials_data + " for setting credetnails.");

                var gr = new GlideRecord(this.appUtil.configuration.table.Credentials + '');

                for (var i in variable_data) {
                    var varia = variable_data[i];

                    gr.initialize();

                    gr.catalog_item = catSysId + '';
                    gr.actual_name = i + '';
                    gr.description = varia.description + '';
                    gr.is_default = varia.is_default + '';
                    gr.is_secret_modified = varia.is_secret_modified + '';
                    gr.name = varia.credential_name.value + '';
                    gr.passphrase = (varia.passphrase) ? varia.passphrase.value + '' : '';
                    gr.passphrase_editable = (varia.passphrase) ? varia.passphrase.runtime_config + '' : '';
                    gr.password = (varia.password) ? varia.password.value + '' : '';
                    gr.secret_editable = (varia.password) ? varia.password.runtime_config + '' : '';
                    gr.ssh_private_key = (varia.ssh_private_key) ? varia.ssh_private_key.value + '' : '';
                    gr.ssh_private_key_editable = (varia.ssh_private_key) ? varia.ssh_private_key.runtime_config + '' : '';
                    gr.state = varia.state + '';
                    gr.type = varia.secret_type.value + '';
                    gr.username = varia.username.value + '';
                    gr.username_editable = varia.username.runtime_config + '';
                    gr.uuid = varia.uuid + '';

                    gr.username_isdisabled = varia.username_isdisabled + '';
                    gr.secret_isdisabled = varia.secret_isdisabled + '';
                    gr.ssh_private_key_isdisabled = varia.ssh_private_key_isdisabled + '';
                    gr.passphrase_isdisabled = varia.passphrase_isdisabled + '';

                    gr.credential_reference = varia.credential_reference.value + '';
                    gr.runtime = varia.runtime + '';

                    gr.insert();

                    catName = gr.catalog_item.name + '';
                    this.logger.debug("Mapped credentials data against catalog item " + gr.catalog_item);
                }

                // 				var gr = new GlideRecord(this.appUtil.configuration.table.variableSetTable+'');
                // 				gr.addQuery('variable_set', gs.getProperty('x_nuta2_nutanix_ca.credentials.variable.set')+'');
                // 				gr.addQuery('sc_cat_item', catSysId+'');
                // 				gr.query();

                // 				if(!gr.hasNext()){
                // 					gr.initialize();
                // 					gr.variable_set = gs.getProperty('x_nuta2_nutanix_ca.credentials.variable.set')+'';
                // 					gr.sc_cat_item = catSysId+''; 
                // 					gr.order = '51001';
                // 					gr.insert();	
                // 				}

                var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                gr.addQuery('variable', gs.getProperty('x_nuta2_nutanix_ca.credentials.mapping.variable.sys.id') + '');
                gr.addQuery('catalog_item', catSysId + '');
                gr.query();

                if (gr.next()) {
                    gr.default_value = current.variables.environment_mapping;
                    gr.update();
                } else {
                    gr.initialize();
                    gr.variable = gs.getProperty('x_nuta2_nutanix_ca.credentials.mapping.variable.sys.id') + '';
                    gr.application_profile = '';
                    gr.catalog_item = catSysId + '';
                    gr.default_value = current.variables.environment_mapping;
                    gr.isprofilevariable = false;
                    gr.runtime_config = false;
                    gr.uuid = '';
                    gr.service_name = '';
                    gr.category_name = '';
                    gr.insert();
                }

                // 				if(current.variables.environment_mapping+'' == 'true'){
                // 					var mapping_data = JSON.parse(current.variables.credentials_mapping);

                // 					for(var i in mapping_data){

                // 						var varia = mapping_data[i];

                // 						var gr = new GlideRecord(this.appUtil.configuration.table.Credentials+'');
                // 						gr.addQuery('catalog_item', catSysId+'');
                // 						gr.addQuery('environment', varia.environment+'');
                // 						gr.addQuery('project', varia.project+'');
                // 						gr.query();

                // 						if(!gr.hasNext()){
                // 							gr.initialize();

                // 							gr.catalog_item = catSysId+'';
                // 							gr.actual_name = i+'';
                // 							gr.description = varia.description+'';
                // 							gr.is_default = varia.is_default+'';
                // 							gr.is_secret_modified = varia.is_secret_modified+'';
                // 							gr.name = varia.credential_name.value+'';
                // 							gr.passphrase = (varia.passphrase)?varia.passphrase.value+'':'';
                // 							gr.passphrase_editable = (varia.passphrase)?varia.passphrase.runtime_config+'':'';
                // 							gr.password = (varia.password)?varia.password.value+'':'';
                // 							gr.secret_editable = (varia.password)?varia.password.runtime_config+'':'';
                // 							gr.ssh_private_key = (varia.ssh_private_key)?varia.ssh_private_key.value+'':'';
                // 							gr.ssh_private_key_editable = (varia.ssh_private_key)?varia.ssh_private_key.runtime_config+'':'';
                // 							gr.state = varia.state+'';
                // 							gr.type = varia.secret_type.value+'';
                // 							gr.username = varia.username.value+'';
                // 							gr.username_editable = varia.username.runtime_config+'';
                // 							gr.uuid = varia.uuid+'';
                // 							gr.environment = varia.environment+'';
                // 							gr.project = varia.project+'';

                // 							gr.username_isdisabled = varia.username_isdisabled+'';
                // 							gr.secret_isdisabled = varia.secret_isdisabled+'';
                // 							gr.ssh_private_key_isdisabled = varia.ssh_private_key_isdisabled+'';
                // 							gr.passphrase_isdisabled = varia.passphrase_isdisabled+'';				 

                // 							gr.insert();	
                // 						}
                // 					}
                // 				}

                this.logger.info("Set profile variables values for " + catName + ".");
            } else {
                var catSysId = current.variables.cat_item + '';
                var variable_data = JSON.parse(current.variables.credentials_data);

                for (var i in variable_data) {
                    var varia = variable_data[i];

                    var gr = new GlideRecord(this.appUtil.configuration.table.Credentials + '');
                    gr.addQuery('catalog_item=' + catSysId + '^uuid=' + varia.uuid);
                    gr.query();

                    if (gr.next()) {
                        gr.catalog_item = catSysId + '';
                        gr.description = varia.description + '';
                        gr.is_default = varia.is_default + '';
                        gr.is_secret_modified = varia.is_secret_modified + '';
                        gr.name = varia.credential_name.value + '';
                        gr.passphrase = (varia.passphrase) ? varia.passphrase.value + '' : '';
                        gr.passphrase_editable = (varia.passphrase) ? varia.passphrase.runtime_config + '' : '';
                        gr.password = (varia.password) ? varia.password.value + '' : '';
                        gr.secret_editable = (varia.password) ? varia.password.runtime_config + '' : '';
                        gr.ssh_private_key = (varia.ssh_private_key) ? varia.ssh_private_key.value + '' : '';
                        gr.ssh_private_key_editable = (varia.ssh_private_key) ? varia.ssh_private_key.runtime_config + '' : '';
                        gr.state = varia.state + '';
                        gr.type = varia.secret_type.value + '';
                        gr.username = varia.username.value + '';
                        gr.username_editable = varia.username.runtime_config + '';
                        gr.uuid = varia.uuid + '';

                        gr.username_isdisabled = varia.username_isdisabled + '';
                        gr.secret_isdisabled = varia.secret_isdisabled + '';
                        gr.ssh_private_key_isdisabled = varia.ssh_private_key_isdisabled + '';
                        gr.passphrase_isdisabled = varia.passphrase_isdisabled + '';

                        gr.credential_reference = varia.credential_reference.value + '';
                        gr.runtime = varia.runtime + '';

                        gr.update();
                        catName = gr.catalog_item.name + '';
                        this.logger.debug("Updated credentials data against catalog item " + gr.catalog_item);
                    }
                }

                // 				var gr = new GlideRecord(this.appUtil.configuration.table.variableSetTable+'');
                // 				gr.addQuery('variable_set', gs.getProperty('x_nuta2_nutanix_ca.credentials.variable.set')+'');
                // 				gr.addQuery('sc_cat_item', catSysId+'');
                // 				gr.query();

                // 				if(!gr.hasNext()){
                // 					gr.initialize();
                // 					gr.variable_set = gs.getProperty('x_nuta2_nutanix_ca.credentials.variable.set')+'';
                // 					gr.sc_cat_item = catSysId+''; 
                // 					gr.order = '51001';
                // 					gr.insert();	
                // 				}

                var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                gr.addQuery('variable', gs.getProperty('x_nuta2_nutanix_ca.credentials.mapping.variable.sys.id') + '');
                gr.addQuery('catalog_item', catSysId + '');
                gr.query();

                if (gr.next()) {
                    gr.default_value = current.variables.environment_mapping;
                    gr.update();
                } else {
                    gr.initialize();
                    gr.variable = gs.getProperty('x_nuta2_nutanix_ca.credentials.mapping.variable.sys.id') + '';
                    gr.application_profile = '';
                    gr.catalog_item = catSysId + '';
                    gr.default_value = current.variables.environment_mapping;
                    gr.isprofilevariable = false;
                    gr.runtime_config = false;
                    gr.uuid = '';
                    gr.service_name = '';
                    gr.category_name = '';
                    gr.insert();
                }

                // 				if(current.variables.environment_mapping+'' == 'true'){
                // 					var mapping_data = JSON.parse(current.variables.credentials_mapping);

                // 					for(var i in mapping_data){

                // 						var varia = mapping_data[i];

                // 						var gr = new GlideRecord(this.appUtil.configuration.table.Credentials+'');
                // 						gr.addQuery('catalog_item', catSysId+'');
                // 						gr.addQuery('environment', varia.environment+'');
                // 						gr.addQuery('project', varia.project+'');
                // 						gr.query();

                // 						if(!gr.hasNext()){
                // 							gr.initialize();

                // 							gr.catalog_item = catSysId+'';
                // 							gr.actual_name = i+'';
                // 							gr.description = varia.description+'';
                // 							gr.is_default = varia.is_default+'';
                // 							gr.is_secret_modified = varia.is_secret_modified+'';
                // 							gr.name = varia.credential_name.value+'';
                // 							gr.passphrase = (varia.passphrase)?varia.passphrase.value+'':'';
                // 							gr.passphrase_editable = (varia.passphrase)?varia.passphrase.runtime_config+'':'';
                // 							gr.password = (varia.password)?varia.password.value+'':'';
                // 							gr.secret_editable = (varia.password)?varia.password.runtime_config+'':'';
                // 							gr.ssh_private_key = (varia.ssh_private_key)?varia.ssh_private_key.value+'':'';
                // 							gr.ssh_private_key_editable = (varia.ssh_private_key)?varia.ssh_private_key.runtime_config+'':'';
                // 							gr.state = varia.state+'';
                // 							gr.type = varia.secret_type.value+'';
                // 							gr.username = varia.username.value+'';
                // 							gr.username_editable = varia.username.runtime_config+'';
                // 							gr.uuid = varia.uuid+'';
                // 							gr.environment = varia.environment+'';
                // 							gr.project = varia.project+'';

                // 							gr.username_isdisabled = varia.username_isdisabled+'';
                // 							gr.secret_isdisabled = varia.secret_isdisabled+'';
                // 							gr.ssh_private_key_isdisabled = varia.ssh_private_key_isdisabled+'';
                // 							gr.passphrase_isdisabled = varia.passphrase_isdisabled+'';				 

                // 							gr.insert();	
                // 						}
                // 					}
                // 				}

                this.logger.info("Updated credentials values for " + catName + ".");
            }
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts.setCredentialsData. Error:- " + e);
        }
    },

    _groupsToUsers: function(current) {

        var groups = (current.variables.assign_groups) ? (current.variables.assign_groups + "") : "";
        var users = (current.variables.assign_users) ? (current.variables.assign_users + "").split(",") : [];

        var grMembers = new GlideRecord("sys_user_grmember");
        grMembers.addEncodedQuery("group.sys_idIN" + groups);
        grMembers.query();
        while (grMembers.next()) {
            if (users.indexOf(grMembers.user.sys_id + "") == -1)
                users.push(grMembers.user.sys_id + "");
        }

        current.variables.assign_users = users.toString();

        return current;
    },

    configBPGeneralSettings: function(current, clientData, nonFilteredClientData) {

        try {

            this.logger.debug("Inside Nutanix_ConfigureSettingScripts.configBPGeneralSettings.");
            var lg = new x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge();
            var status = lg.hideAccessLocalGroupOption(); //to check if the given option is for local groups.

            if (status + "" == "false")
                current = this._groupsToUsers(current);

            var performAction = current.variables.type + '';

            if (performAction == 'new') {
                var blueprint = current.variables.blueprint + '';
                var blueprintType = current.variables.type_of_blueprint + '';
                var createCatalog = current.variables.create_catalog + '';

                this.logger.debug("Got Blueprint:- " + blueprint + " Blueprint Type:- " + blueprintType + " and Create Catalog:- " + createCatalog + " for configuring new catalog item.");

                var targetCatTable = 'x_nuta2_nutanix_ca_nutanix_catalog_items';
                var sourceCatTable = '';
                if (blueprintType == 'unpublished')
                    sourceCatTable = 'x_nuta2_nutanix_ca_nutanix_blueprint';
                else
                    sourceCatTable = 'x_nuta2_nutanix_ca_nutanix_marketplaceitems';

                var ans;
                if (createCatalog == 'yes')
                    ans = this._copyCatalogItem(sourceCatTable, targetCatTable, blueprint, current, blueprintType, clientData, nonFilteredClientData);
                else
                    ans = this._updateCatalogItem(sourceCatTable, targetCatTable, blueprint, current);

                this._insertIntoRuntimeConfigTable(ans, current);
                this._updateUserOverCalm(current);
                if (status + "" == "false") //updated version check the flag for referense.
                {
                    this._updateGroupOverCalm(current);
                } else {
                    this._updateGroupSnowRole(current);
                }

                return ans[0] + '';
            } else {

                var cat_item = current.variables.cat_item + '';

                this.logger.debug("Got Catalog Item:- " + cat_item + " for updating existing catalog item.");

                var gr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
                gr.addQuery('item_name', cat_item);
                gr.query();

                if (gr.next()) {
                    var cat = gr.item_name.getRefRecord();
                    cat.sys_name = current.variables.item_name + '';
                    cat.name = current.variables.item_name + '';
                    cat.short_description = current.variables.item_name + '';
                    cat.description_markdown = current.variables.description + '';
                    cat.description = this.appUtil.markdown_renderer(current.variables.description + '');
                    cat.update();

                    // 					var user_criteria = gr.user_criteria.getRefRecord();
                    // 					user_criteria.user = current.variables.assign_users;
                    var group = '';
                    if (status + "" == "false") {
                        group = current.variables.assign_groups;
                    } else {
                        group = current.variables.assign_local_groups;
                    }
                    var user_criteria = new sn_uc.UserCriteria(gr.user_criteria.sys_id);
                    user_criteria.update({
                        "user": "" + current.variables.assign_users,
                        "group": "" + group
                    }, "Update user criteria user Group");
                    //	user_criteria.update();

                    this._updateUserOverCalm(current);

                    if (status + "" == "false") {
                        this._updateGroupOverCalm(current);
                    } else {
                        this._updateGroupSnowRole(current);
                    }
                    gr.multiple_application_profile = current.variables.multiple_application_profile;
                    gr.multiple_projects = current.variables.multiple_project;
                    gr.update();
                    return gr.item_name + '';
                }

            }

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts.configBPGeneralSettings. Error:- " + e);
        }
    },

    _checkUsersUUID: function(current) {
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._checkUsersUUID.");

            var userGr = new GlideRecord('sys_user');
            userGr.addEncodedQuery('sys_idIN' + current.variables.assign_users + '^x_nuta2_nutanix_ca_nutanix_uuidISEMPTY');
            userGr.query();

            var taskUUIDList = [];

            while (userGr.next()) {

                var ldapGR = new GlideRecord('ldap_server_config');
                if (ldapGR.get(userGr.ldap_server + '')) {
                    var LDAPName = '';
                    var LDAPUuid = '';
                    // 				var ldap_rdn = ldapGR.rdn+'';
                    // 				ldap_rdn = ldap_rdn.replace(/DC=/g,"").replace(/,/g,".");
                    var dir_body = {
                        "kind": "directory_service",
                        "filter": 'url==' + ldapGR.server_url //+";domain_name=="+ldap_rdn
                    }

                    this.logger.debug("Body for directory services:: :: " + JSON.stringify(dir_body));

                    var response = this.appUtil.makeCalmApiCall("POST", this.appUtil.configuration.api.directoryServices + "", JSON.stringify(dir_body));
                    this.logger.debug("Response Body for directory :: " + response.getBody());

                    if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                        var parsed = JSON.parse(response.getBody());
                        parsed = parsed.entities;
                        for (var p in parsed) {
                            var par_entity = parsed[p];
                            var domain_name = par_entity.status.resources.domain_name + "";
                            //						if(domain_name == ldap_rdn){
                            if (par_entity.status.resources.url + '' == ldapGR.server_url + '' || par_entity.status.resources.url + '' == ldapGR.server_url + '/' || par_entity.status.resources.url + '/' == ldapGR.server_url + '') {
                                LDAPName = par_entity.status.name + '';
                                LDAPUuid = par_entity.metadata.uuid + '';
                                break;
                            }
                        }

                        //LDAPName = parsed.entities[0].status.name+'';
                        //LDAPUuid = parsed.entities[0].metadata.uuid+'';

                    } else {
                        this.logger.error("Nutanix_ConfigureSettingScripts._checkUsersUUID :- Error while updating directory:- " + response.haveError() + " Status code :- " + response.getStatusCode() + " Error :: " + response.getBody());
                    }

                    var body = {
                        "spec": {
                            "resources": {
                                "directory_service_user": {
                                    "user_principal_name": userGr.email + '',
                                    "directory_service_reference": {
                                        "kind": "directory_service",
                                        "name": LDAPName,
                                        "uuid": LDAPUuid

                                    }
                                }
                            }
                        },
                        "metadata": {
                            "kind": "user",
                            "name": userGr.name + ''
                        }
                    };
                    this.logger.debug("Body send for user :: " + JSON.stringify(body));
                    var response = this.appUtil.makeCalmApiCall("POST", "/users", JSON.stringify(body));
                    var res = JSON.parse(response.getBody());
                    if (response.getStatusCode() == '200' || response.getStatusCode() == '201' || response.getStatusCode() == '202') {

                        userGr.x_nuta2_nutanix_ca_nutanix_uuid = JSON.parse(response.getBody()).metadata.uuid + '';
                        userGr.update();

                        taskUUIDList.push(JSON.parse(response.getBody()).status.execution_context.task_uuid + '');

                    } else if (response.getStatusCode() == '400' &amp;&amp; res.message_list[0].reason == "DUPLICATE_ENTITY") {

                        var payload = {
                            "kind": "user",
                            "filter": "username==" + userGr.email + ''
                        };


                        var response = this.appUtil.makeCalmApiCall("POST", this.appUtil.configuration.api.getUsersList + "", this.appUtil.stringify(payload));

                        if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                            var parsedJSON = this.appUtil.parse(response.getBody());
                            var entities = parsedJSON.entities;
                            var entity = entities[0];
                            var uuid = entity.metadata.uuid + '';
                            userGr.x_nuta2_nutanix_ca_nutanix_uuid = uuid;
                            userGr.update();

                        } else {

                            this.logger.debug("Nutanix_ImportUsers.importUsers:- Connection users/list not established :- " + response.haveError() + " Status code :- " + response.getStatusCode());
                        }
                        ///

                    } else {
                        this.logger.error("Nutanix_ConfigureSettingScripts._checkUsersUUID :- Error while creating user entity in calm:- " + response.haveError() + " Status code :- " + response.getStatusCode() + " Error :: " + response.getBody());
                    }
                }
            }

            var taskComplete = true;
            var i = 0;
            do {
                if (i &gt;= taskUUIDList.length) {
                    i = 0;
                    taskComplete = true;
                }

                var response = this.appUtil.makeCalmApiCall("GET", "/tasks/" + taskUUIDList[i], '');
                var parsedTask = JSON.parse(response.getBody());
                if (parsedTask.status + '' == 'QUEUED' || parsedTask.status + '' == 'RUNNING') {
                    taskComplete = false;
                    i++;
                } else {
                    taskUUIDList.splice(i, 1);
                }

                if (taskUUIDList.length &lt; 1)
                    break;

            } while (taskComplete == false);

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._checkUsersUUID. Error:- " + e);
        }
    },

    _updateSnowRole: function(current) {

        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._updateSnowRole.");
            var users = (current.variables.assign_users + '').split(',');
            for (var i in users) {
                var gr = new GlideRecord("sys_user");
                gr.addQuery('sys_id', users[i] + '');
                gr.query();
                if (gr.next()) {
                    r = ['3376fd254f452b001200e5201310c717'];

                    /*var grProp = new GlideRecord('x_nuta2_nutanix_ca_calm_plugin_configuration');
		            if (grProp.get(gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id')))
					{	
		            if(grProp.use_external_credential_system)
		                  r.push('e76b74ba0ab3015700a3263b26e5e9d5');
					}*/
                    for (var i = 0; i &lt; r.length; i++) {
                        var grd = new GlideRecord('sys_user_has_role');
                        grd.addQuery('user', gr.sys_id);
                        grd.addQuery('role', r[i]);
                        grd.query();

                        if (!grd.hasNext()) {
                            grd.user = gr.sys_id;
                            grd.role = r[i];
                            grd.insert();
                        }
                    }
                }
            }
            var catSysId = current.variables.cat_item + '';
            var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
            gr.addQuery('catalog_item', catSysId);
            gr.query();
            var catName = "";
            if (gr.next())
                catName = gr.catalog_item.name + '';

            this.logger.info("Required plugin roles given to all the assigned users for catalog item::" + catName);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._updateSnowRole. Error:- " + e);
        }

    },

    _updateUserOverCalm: function(current) {
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._updateUserOverCalm.");

            if (!current.variables.assign_users)
                return;

            this._checkUsersUUID(current); //this create ldap user in calm and updates ldap user uuid in SNOW if user uuid is not present in calm.

            var projects = current.variables.multiple_project.toString();
            var project_array = projects.split(',');
            for (var k = 0; k &lt; project_array.length; k++) {
                this.logger.debug('Inside Nutanix_ConfigureSettingScripts._updateUserOverCalm. projects sys_id' + project_array[k]);
                var projectGR = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
                if (projectGR.get(project_array[k])) {
                    var projectUUID = projectGR.uuid;
                    this.logger.debug('Inside Nutanix_ConfigureSettingScripts._updateUserOverCalm. projects UUID ' + projectUUID);
                    var response = this.appUtil.makeCalmApiCall("GET", this.appUtil.configuration.api.projectInternal + "/" + projectUUID, '');
                }
                if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                    var parsed = this.appUtil.parse(response.getBody());
                    var acpRoles = parsed.spec.access_control_policy_list;

                    var acpConsumerRoleIndex = '';

                    for (var i in acpRoles) {
                        if (acpRoles[i].acp.resources.role_reference.uuid + '' == gs.getProperty('x_nuta2_nutanix_ca.cosumer.role.uuid') + '') {
                            acpConsumerRoleIndex = i;
                        }
                        parsed.spec.access_control_policy_list[i].operation = "UPDATE";
                    }

                    var userGr = new GlideRecord('sys_user');
                    userGr.addEncodedQuery('sys_idIN' + current.variables.assign_users);
                    userGr.query();

                    var userArr = {};

                    while (userGr.next()) {
                        userArr[userGr.sys_id + ''] = {
                            "uuid": (userGr) ? userGr.x_nuta2_nutanix_ca_nutanix_uuid + '' : '',
                            "email": (userGr) ? userGr.email + '' : ''
                        };
                    }

                    if (acpConsumerRoleIndex) { //if consumer role is there in project

                        var users = (current.variables.assign_users + '').split(',');
                        for (var i in users) {
                            parsed.spec.access_control_policy_list[acpConsumerRoleIndex].acp.resources.user_reference_list.push({
                                "name": (userArr[users[i] + '']) ? userArr[users[i] + ''].email + '' : '',
                                "kind": "user",
                                "uuid": (userArr[users[i] + '']) ? userArr[users[i] + ''].uuid + '' : ''
                            });

                            parsed.spec.project_detail.resources.user_reference_list.push({
                                "name": (userArr[users[i] + '']) ? userArr[users[i] + ''].email + '' : '',
                                "kind": "user",
                                "uuid": (userArr[users[i] + '']) ? userArr[users[i] + ''].uuid + '' : ''
                            });
                        }

                    } else { //pushes consumer role in project

                        var projectSubnet;
                        var project = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
                        project.addQuery('uuid', projectUUID + '');
                        project.setLimit(1);
                        project.query();
                        if (project.next()) {
                            projectSubnet = project.subnet + '';
                        }

                        var arr = [];

                        var gr = new GlideRecord('x_nuta2_nutanix_ca_subnet');
                        gr.addEncodedQuery('sys_idIN' + projectSubnet);
                        gr.query();
                        while (gr.next()) {
                            arr.push(gr.cluster_uuid + '');
                        }

                        var clusterEntitle = {
                            "left_hand_side": {
                                "entity_type": "cluster"
                            },
                            "operator": "IN",
                            "right_hand_side": {
                                "uuid_list": arr
                            }
                        };


                        var tmp = {
                            "acp": {
                                "name": "nuSnowAcp-" + projectUUID,
                                "resources": {
                                    "role_reference": {
                                        "name": "Consumer",
                                        "uuid": "49e8f061-0948-4705-953b-88915397bd60",
                                        "kind": "role"
                                    },
                                    "user_group_reference_list": [],
                                    "user_reference_list": [],
                                    "filter_list": {
                                        "context_list": [{
                                            "scope_filter_expression_list": [{
                                                "operator": "IN",
                                                "left_hand_side": "PROJECT",
                                                "right_hand_side": {
                                                    "uuid_list": [projectUUID + '']
                                                }
                                            }],
                                            "entity_filter_expression_list": [{
                                                "operator": "IN",
                                                "left_hand_side": {
                                                    "entity_type": "ALL"
                                                },
                                                "right_hand_side": {
                                                    "collection": "ALL"
                                                }
                                            }]
                                        }, {
                                            "entity_filter_expression_list": []
                                        }]
                                    }
                                },
                                "description": ""
                            },
                            "metadata": {
                                "kind": "access_control_policy"
                            },
                            "operation": "ADD"
                        };

                        var consumerFilter = JSON.parse(gs.getProperty('x_nuta2_nutanix_ca.consumer.entitlement.filter'));
                        tmp.acp.resources.filter_list.context_list[1].entity_filter_expression_list = consumerFilter["2.9"]; //gs.getProperty('x_nuta2_nutanix_ca.calm_version')];

                        tmp.acp.resources.filter_list.context_list[1].entity_filter_expression_list.push(clusterEntitle);

                        tmp.acp.resources.role_reference = {
                            "name": "Consumer",
                            "uuid": gs.getProperty('x_nuta2_nutanix_ca.cosumer.role.uuid') + '',
                            "kind": "role"
                        };

                        tmp.acp.resources.user_reference_list = [];

                        var users = (current.variables.assign_users + '').split(',');
                        for (var i in users) {

                            tmp.acp.resources.user_reference_list.push({
                                "name": (userArr[users[i] + '']) ? userArr[users[i] + ''].email + '' : '',
                                "kind": "user",
                                "uuid": (userArr[users[i] + '']) ? userArr[users[i] + ''].uuid + '' : ''
                            });

                            parsed.spec.project_detail.resources.user_reference_list.push({
                                "name": (userArr[users[i] + '']) ? userArr[users[i] + ''].email + '' : '',
                                "kind": "user",
                                "uuid": (userArr[users[i] + '']) ? userArr[users[i] + ''].uuid + '' : ''
                            });
                        }
                        parsed.spec.access_control_policy_list.push(tmp);

                    }

                    var requestBody = {
                        "spec": parsed.spec,
                        "api_version": parsed.api_version,
                        "metadata": parsed.metadata
                    }

                    var response = this.appUtil.makeCalmApiCall("PUT", this.appUtil.configuration.api.projectInternal + "/" + projectUUID, JSON.stringify(requestBody));

                    if (response.getStatusCode() == '200' || response.getStatusCode() == '201' || response.getStatusCode() == '202') {

                        this.logger.info("Nutanix_ConfigureSettingScripts._updateUserOverCalm:- Users successfuly updated in calm.");
                        this._updateSnowRole(current);
                    } else {
                        this.logger.error("Nutanix_ConfigureSettingScripts._updateUserOverCalm :- Error while updating users onto calm :- " + response.haveError() + " Status code :- " + response.getStatusCode() + " Error :: " + response.getBody());
                    }
                } else {
                    this.logger.error("Nutanix_ConfigureSettingScripts._updateUserOverCalm :- Connection to /projects_internal not established :- " + response.haveError() + " Status code :- " + response.getStatusCode());
                }
            }


        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._updateUserOverCalm. Error:- " + e);
        }
    },

    ///changes
    _checkGroupUUID: function(current) {
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._checkGroupsUUID.");
            var groupGr = new GlideRecord('sys_user_group');
            groupGr.addEncodedQuery('sys_idIN' + current.variables.assign_groups + '^x_nuta2_nutanix_ca_nutanix_group_uuidISEMPTY');
            groupGr.query();

            var taskUUIDList = [];

            while (groupGr.next()) {
                var groups = (current.variables.assign_groups.getDisplayValue() + '').split(',');

                var distinguishedName = groupGr.source.replace(/ldap:/g, ""); //"CN="+groups[i]+",CN=Users,DC=calsoftcalm,DC=com";

                var body = {
                    "api_version": "3.0",
                    "metadata": {
                        "kind": "user_group"
                    },
                    "spec": {
                        "resources": {
                            "directory_service_user_group": {
                                "distinguished_name": distinguishedName
                            }
                        }
                    }
                };
                this.logger.debug("Body send for group :: " + JSON.stringify(body));
                var response = this.appUtil.makeCalmApiCall("POST", "/user_groups", JSON.stringify(body));
                var res = JSON.parse(response.getBody());
                if (response.getStatusCode() == '200' || response.getStatusCode() == '201' || response.getStatusCode() == '202') {

                    groupGr.x_nuta2_nutanix_ca_nutanix_group_uuid = JSON.parse(response.getBody()).metadata.uuid + '';
                    groupGr.update();

                    taskUUIDList.push(JSON.parse(response.getBody()).status.execution_context.task_uuid + '');

                } else if (response.getStatusCode() == '400' &amp;&amp; res.message_list[0].reason == "DUPLICATE_ENTITY") {

                    var payload = {
                        "kind": "user_group",
                        "filter": "group_name==" + groupGr.name + ''
                    };


                    var response = this.appUtil.makeCalmApiCall("POST", this.appUtil.configuration.api.getGroupsList + "", this.appUtil.stringify(payload));

                    if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                        var parsedJSON = this.appUtil.parse(response.getBody());
                        var entities = parsedJSON.entities;
                        var entity = entities[0];
                        var uuid = entity.metadata.uuid + '';
                        groupGr.x_nuta2_nutanix_ca_nutanix_group_uuid = uuid;
                        groupGr.update();

                    } else {

                        this.logger.debug("Nutanix_ImportUsers.importUsers:- Connection users/list not established :- " + response.haveError() + " Status code :- " + response.getStatusCode());
                    }
                    ///
                } else {
                    this.logger.error("Nutanix_ConfigureSettingScripts._checkGroupsUUID :- Error while creating group entity in calm:- " + response.haveError() + " Status code :- " + response.getStatusCode() + " Error :: " + response.getBody());
                }
                //}
                //} 

                //} 
            }

            var taskComplete = true;
            var i = 0;
            do {
                if (i &gt;= taskUUIDList.length) {
                    i = 0;
                    taskComplete = true;
                }

                var response = this.appUtil.makeCalmApiCall("GET", "/tasks/" + taskUUIDList[i], '');
                var parsedTask = JSON.parse(response.getBody());
                if (parsedTask.status + '' == 'QUEUED' || parsedTask.status + '' == 'RUNNING') {
                    taskComplete = false;
                    i++;
                } else {
                    taskUUIDList.splice(i, 1);
                }

                if (taskUUIDList.length &lt; 1)
                    break;

            } while (taskComplete == false);

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._checkGroupUUID. Error:- " + e);
        }
    },

    _updateGroupSnowRole: function(current) {

        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._updateGroupSnowRole.");
            var groups = "";
            //Check ldap or local group to pick
            var lg = new x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge();
            var status = lg.hideAccessLocalGroupOption(); //to check if the given option is for local groups.
            if (status + "" == "false")
                groups = (current.variables.assign_groups + '').split(',');
            else
                groups = (current.variables.assign_local_groups + '').split(',');

            for (var i in groups) {
                var gr = new GlideRecord("sys_user_group");
                gr.addQuery('sys_id', groups[i] + '');
                gr.query();
                if (gr.next()) {
                    r = ['3376fd254f452b001200e5201310c717', 'e098ecf6c0a80165002aaec84d906014'];

                    var grProp = new GlideRecord('x_nuta2_nutanix_ca_calm_plugin_configuration');
                    if (grProp.get(gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id'))) {
                        if (grProp.use_external_credential_system)
                            r.push('e76b74ba0ab3015700a3263b26e5e9d5');
                    }
                    for (var i = 0; i &lt; r.length; i++) {
                        var grd = new GlideRecord('sys_group_has_role');
                        grd.addQuery('group', gr.sys_id);
                        grd.addQuery('role', r[i]);
                        grd.query();

                        if (!grd.hasNext()) {
                            grd.group = gr.sys_id;
                            grd.role = r[i];
                            grd.insert();
                        }
                    }
                }
            }
            var catSysId = current.variables.cat_item + '';
            var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
            gr.addQuery('catalog_item', catSysId);
            gr.query();
            var catName = "";
            if (gr.next())
                catName = gr.catalog_item.name + '';

            this.logger.info("Required plugin roles given to all the assigned groups for catalog item::" + catName);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._updateGroupSnowRole. Error:- " + e);
        }

    },

    _updateGroupOverCalm: function(current) {
        try {

            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._updateGroupOverCalm.");

            if (!current.variables.assign_groups)
                return;

            this._checkGroupUUID(current); //this create ldap group in calm and updates ldap group uuid in SNOW if group uuid is not present in calm.
            var projects = current.variables.multiple_project.toString();
            var project_array = projects.split(',');
            for (var k = 0; k &lt; project_array.length; k++) {
                this.logger.debug('Inside Nutanix_ConfigureSettingScripts._updateGroupOverCalm. projects sys_id' + project_array[k]);
                var projectGR = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
                if (projectGR.get(project_array[k])) {
                    var projectUUID = projectGR.uuid;
                    var response = this.appUtil.makeCalmApiCall("GET", this.appUtil.configuration.api.projectInternal + "/" + projectUUID, '');
                }
                if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {
                    var parsed = this.appUtil.parse(response.getBody());
                    var acpRoles = parsed.spec.access_control_policy_list;
                    var acpConsumerRoleIndex = '';

                    for (var i in acpRoles) {
                        if (acpRoles[i].acp.resources.role_reference.uuid + '' == gs.getProperty('x_nuta2_nutanix_ca.cosumer.role.uuid') + '') {
                            acpConsumerRoleIndex = i;
                        }
                        parsed.spec.access_control_policy_list[i].operation = "UPDATE";
                    }

                    var groupGr = new GlideRecord('sys_user_group');
                    groupGr.addEncodedQuery('sys_idIN' + current.variables.assign_groups);
                    groupGr.query();

                    var groupArr = {};

                    while (groupGr.next()) {
                        groupArr[groupGr.sys_id + ''] = {
                            "uuid": (groupGr) ? groupGr.x_nuta2_nutanix_ca_nutanix_group_uuid + '' : '',
                            "name": (groupGr) ? groupGr.name + '' : ''
                        };
                    }
                    if (acpConsumerRoleIndex) { //if consumer role is there in project

                        var groups = (current.variables.assign_groups + '').split(',');
                        for (var i in groups) {
                            parsed.spec.access_control_policy_list[acpConsumerRoleIndex].acp.resources.user_group_reference_list.push({
                                "name": (groupArr[groups[i] + '']) ? groupArr[groups[i] + ''].name + '' : '',
                                "kind": "user_group",
                                "uuid": (groupArr[groups[i] + '']) ? groupArr[groups[i] + ''].uuid + '' : ''
                            });

                            parsed.spec.project_detail.resources.external_user_group_reference_list.push({
                                "name": (groupArr[groups[i] + '']) ? groupArr[groups[i] + ''].name + '' : '',
                                "kind": "user_group",
                                "uuid": (groupArr[groups[i] + '']) ? groupArr[groups[i] + ''].uuid + '' : ''
                            });
                        }


                    } else { //pushes consumer role in project

                        //var tmp = {"acp":{"name":"nuSnowAcp-"+current.variables.project,"resources":{"role_reference":{"name":"Consumer","uuid":"49e8f061-0948-4705-953b-88915397bd60","kind":"role"},"user_group_reference_list":[],"user_reference_list":[],"filter_list":{"context_list":[{"scope_filter_expression_list":[{"operator":"IN","left_hand_side":"PROJECT","right_hand_side":{"uuid_list":[current.variables.project+'']}}],"entity_filter_expression_list":[{"operator":"IN","left_hand_side":{"entity_type":"ALL"},"right_hand_side":{"collection":"ALL"}}]},{"entity_filter_expression_list":[]}]}},"description":"untitledAcp-e3c568f8-e11b-71e3-a916-493940647e79"},"metadata":{"kind":"access_control_policy"},"operation":"ADD"};

                        var projectSubnet;
                        var project = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
                        project.addQuery('uuid', projectUUID + '');
                        project.setLimit(1);
                        project.query();
                        if (project.next()) {
                            projectSubnet = project.subnet + '';
                        }

                        var arr = [];

                        var gr = new GlideRecord('x_nuta2_nutanix_ca_subnet');
                        gr.addEncodedQuery('sys_idIN' + projectSubnet);
                        gr.query();
                        while (gr.next()) {
                            arr.push(gr.cluster_uuid + '');
                        }

                        var clusterEntitle = {
                            "left_hand_side": {
                                "entity_type": "cluster"
                            },
                            "operator": "IN",
                            "right_hand_side": {
                                "uuid_list": arr
                            }
                        };


                        var tmp = {
                            "acp": {
                                "name": "nuSnowAcp-" + current.variables.project,
                                "resources": {
                                    "role_reference": {
                                        "name": "Consumer",
                                        "uuid": "49e8f061-0948-4705-953b-88915397bd60",
                                        "kind": "role"
                                    },
                                    "user_group_reference_list": [],
                                    "user_reference_list": [],
                                    "filter_list": {
                                        "context_list": [{
                                            "scope_filter_expression_list": [{
                                                "operator": "IN",
                                                "left_hand_side": "PROJECT",
                                                "right_hand_side": {
                                                    "uuid_list": [current.variables.project + '']
                                                }
                                            }],
                                            "entity_filter_expression_list": [{
                                                "operator": "IN",
                                                "left_hand_side": {
                                                    "entity_type": "ALL"
                                                },
                                                "right_hand_side": {
                                                    "collection": "ALL"
                                                }
                                            }]
                                        }, {
                                            "entity_filter_expression_list": []
                                        }]
                                    }
                                },
                                "description": ""
                            },
                            "metadata": {
                                "kind": "access_control_policy"
                            },
                            "operation": "ADD"
                        };

                        var consumerFilter = JSON.parse(gs.getProperty('x_nuta2_nutanix_ca.consumer.entitlement.filter'));
                        tmp.acp.resources.filter_list.context_list[1].entity_filter_expression_list = consumerFilter["2.9"]; //gs.getProperty('x_nuta2_nutanix_ca.calm_version')];

                        tmp.acp.resources.filter_list.context_list[1].entity_filter_expression_list.push(clusterEntitle);



                        tmp.acp.resources.role_reference = {
                            "name": "Consumer",
                            "uuid": gs.getProperty('x_nuta2_nutanix_ca.cosumer.role.uuid') + '',
                            "kind": "role"
                        };

                        tmp.acp.resources.user_group_reference_list = [];

                        var groups = (current.variables.assign_groups + '').split(',');
                        for (var i in groups) {

                            tmp.acp.resources.user_group_reference_list.push({
                                "name": (groupArr[groups[i] + '']) ? groupArr[groups[i] + ''].name + '' : '',
                                "kind": "user_group",
                                "uuid": (groupArr[groups[i] + '']) ? groupArr[groups[i] + ''].uuid + '' : ''
                            });

                            parsed.spec.project_detail.resources.external_user_group_reference_list.push({
                                "name": (groupArr[groups[i] + '']) ? groupArr[groups[i] + ''].name + '' : '',
                                "kind": "user_group",
                                "uuid": (groupArr[groups[i] + '']) ? groupArr[groups[i] + ''].uuid + '' : ''
                            });
                        }
                        parsed.spec.access_control_policy_list.push(tmp);
                    }

                    var requestBody = {
                        "spec": parsed.spec,
                        "api_version": parsed.api_version,
                        "metadata": parsed.metadata
                    }

                    var response = this.appUtil.makeCalmApiCall("PUT", this.appUtil.configuration.api.projectInternal + "/" + projectUUID, JSON.stringify(requestBody));


                    if (response.getStatusCode() == '200' || response.getStatusCode() == '201' || response.getStatusCode() == '202') {
                        this.logger.info("Nutanix_ConfigureSettingScripts._updateGroupOverCalm:- Groups successfuly updated in calm.");
                        this._updateGroupSnowRole(current);
                    } else {
                        this.logger.error("Nutanix_ConfigureSettingScripts._updateGroupOverCalm :- Error while updating groups onto calm :- " + response.haveError() + " Status code :- " + response.getStatusCode() + " Error :: " + response.getBody());
                    }
                } else {
                    this.logger.error("Nutanix_ConfigureSettingScripts._updateGroupOverCalm :- Connection to /projects_internal not established :- " + response.haveError() + " Status code :- " + response.getStatusCode());
                }
            }

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._updateGroupOverCalm. Error:- " + e);
        }
    },
    ////changes over

    _updateCatalogItem: function(source, target, bpSys_id, current) {

        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._updateCatalogItem.");
            var catItemSysId = current.variables.cat_item + '';

            var lg = new x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge();
            var status = lg.hideAccessLocalGroupOption(); //to check if the given option is for local groups.

            var ans = [];

            var assignCriteria = new GlideRecord(this.appUtil.configuration.table.catalogUserCriteria + '');
            assignCriteria.addQuery('sc_cat_item', catItemSysId);
            assignCriteria.query();

            this.logger.info("Updated user &amp; group entitlement to " + current.variables.assign_users + " :: " + current.variables.assign_groups);

            if (assignCriteria.next()) {
                var user_criteria = assignCriteria.user_criteria.getRefRecord();

                user_criteria.user = current.variables.assign_users;
                if (status + "" == "false") {
                    user_criteria.group = current.variables.assign_groups;
                } else {
                    user_criteria.group = current.variables.assign_local_groups;
                }

                var criteriaSysId = user_criteria.update();

                ans.push(catItemSysId);
                ans.push(criteriaSysId);
            }

            return ans;
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._updateCatalogItem. Error:- " + e);
        }
    },

    _copyCatalogItem: function(source, target, bpSys_id, current, blueprintType, clientData, nonFilteredClientData) {
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._copyCatalogItem.");

            var sourceGR = new GlideRecord(source);
            sourceGR.addQuery('sys_id', bpSys_id);
            sourceGR.query();

            var ans = [];
            var nicSysIdList = [];

            if (sourceGR.next()) {

                var profileSysID = '';
                var appSysID = '';
                var targetGr = sourceGR;
                var projectSysID = '';
                var environmentSysId = '';

                targetGr.sys_name = current.variables.item_name + '';
                targetGr.name = current.variables.item_name + '';
                targetGr.short_description = current.variables.item_name + '';
                targetGr.description_markdown = current.variables.description + '';
                targetGr.description = this.appUtil.markdown_renderer(current.variables.description + '');
                targetGr.active = true;
                targetGr.blueprint_name = bpSys_id + '';
                targetGr.sys_class_name = target + '';
                if (blueprintType == "published") {

                    var parsedClientData = JSON.parse(clientData);

                    targetGr.cloned_bp_json = nonFilteredClientData;
                    targetGr.cloned_bp_uuid = (parsedClientData.uuid + '') ? parsedClientData.uuid + '' : "";
                    targetGr.cloned_bp_name = (parsedClientData.name + '') ? parsedClientData.name + '' : "";
                }

                var catItemSysId = targetGr.insert();

                var imageBase64Str = gs.getProperty('x_nuta2_nutanix_ca.default.image');

                var gr = new GlideRecord('sys_attachment');
                gr.addQuery('table_sys_id', catItemSysId); //tablesys_id of the record
                gr.query();
                if (gr.next()) {
                    var kk = new GlideSysAttachment();
                    imageBase64Str = kk.getContentBase64(gr);
                }

                var attachGR = new GlideSysAttachment();
                attachGR.writeBase64(targetGr, 'picture', 'image/png', imageBase64Str);

                attachGR = new GlideSysAttachment();
                attachGR.writeBase64(targetGr, 'icon', 'image/png', gs.getProperty('x_nuta2_nutanix_ca.default.icons'));




                this.logger.debug("Created catalog item with sysId " + catItemSysId);
                this.logger.info("Catalog item " + current.variables.item_name + " creating.");

                var fieldGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                fieldGR.addEncodedQuery('cat_item=' + bpSys_id);
                fieldGR.query();

                while (fieldGR.next()) {

                    var oldSysId = fieldGR.sys_id + '';

                    var newField = fieldGR;
                    newField.cat_item = catItemSysId + '';
                    var fieldSysId = newField.insert();

                    /**Advance variable Select box choices**/
                    if (fieldGR.type + '' == 5) {
                        var glideRec = new GlideRecord('question_choice');
                        glideRec.addQuery('question', oldSysId + '');
                        glideRec.query();
                        while (glideRec.next()) {
                            glideRec.question = fieldSysId;
                            var x = glideRec.insert();

                        }
                    }
					// Multiple value insert code
					if (fieldGR.type + '' == 21) {
						
						var grOptions = new GlideRecord("x_nuta2_nutanix_ca_generic_table_for_dropdown");
						grOptions.addQuery("variable", oldSysId + "");
						grOptions.query();
						var grNewOptions = new GlideRecord("x_nuta2_nutanix_ca_generic_table_for_dropdown");
						while(grOptions.next()) {
							grNewOptions.initialize();
							grNewOptions.variable = fieldSysId + "";
							grNewOptions.name = grOptions.name + "";
							grNewOptions.value = grOptions.value + "";
							grNewOptions.insert();
						}
						
						newField.reference_qual = "variable=" + fieldSysId;
						newField.update();
					}

                    /**Advance variable Select box choices**/
                    if (fieldGR.name + '' == 'default_project')
                        projectSysID = fieldSysId;

                    if (fieldGR.name + '' == 'default_profile')
                        profileSysID = fieldSysId;

                    if (fieldGR.name + '' == 'default_app_name')
                        appSysID = fieldSysId;

                    if (parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2")) {
                        if (fieldGR.name + '' == 'default_environment')
                            environmentSysId = fieldSysId;
                    }


                    if ((fieldGR.name + '').indexOf('_nic_') != -1) {
                        nicSysIdList.push(fieldGR.sys_id + '');

                    }
                }

                this.logger.debug("Created variables for catalog item " + current.variables.item_name);

                /*var insVar = new GlideRecord(this.appUtil.configuration.table.varaiblesTable+''); //Inserts variable to check sync or delete
                insVar.addQuery('cat_item', catItemSysId);
                insVar.query();
                if(insVar.next()) {
                	insVar.initialize();
                	insVar.type = 6;
                	insVar.cat_item = catItemSysId+'';
                	insVar.active = true;
                	insVar.question_text = 'sync_flag';
                	insVar.name = 'sync_flag';
                	insVar.mandatory = 'false';
                	insVar.order = 0;
                	insVar.insert();
                }*/

                //Hide containers on order page
                var hideGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                hideGR.addQuery('cat_item', catItemSysId);
                hideGR.addQuery('active', true);
                hideGR.orderBy('order');
                var previousGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                previousGR.addQuery('cat_item', catItemSysId);
                previousGR.addQuery('active', true);
                previousGR.orderBy('order');
                hideGR.query();
                previousGR.query();
                while (hideGR.next()) {
                    if (hideGR.type == 20 &amp;&amp; previousGR.type == 19) {
                        hideGR.active = false;
                        previousGR.active = false;
                        previousGR.update();
                        hideGR.update();
                    }
                    previousGR.next();
                }


                var lg = new x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge();
                var status = lg.hideAccessLocalGroupOption(); //to check if the given option is for local groups.
                // 				var user_criteria = new GlideRecord(this.appUtil.configuration.table.userCriteria+'');
                // 				user_criteria.initialize();
                // 				user_criteria.name = "Nutanix_"+current.variables.item_name+"_Entitlement";
                // 				user_criteria.user = current.variables.assign_users;
                // 				if(status+"" == "false")
                // 					{
                // 						user_criteria.group = current.variables.assign_groups;
                // 					}
                // 				else
                // 					{
                // 						user_criteria.group = current.variables.assign_local_groups;
                // 					}				
                // 				user_criteria.role = gs.getProperty('x_nuta2_nutanix_ca.admin.role.sysId');
                // 				user_criteria.active = true;
                // 				user_criteria.advanced = true;
                // 				user_criteria.match_all = false;
                // 				user_criteria.script = "answer = false;";
                // 				var criteriaSysId = user_criteria.insert(); 
                // 				gs.info('user_criteria.group '+user_criteria.group);


                var user_criteria = new sn_uc.UserCriteria();
                user_criteria.setName("Nutanix_" + current.variables.item_name + "_Entitlement");
                user_criteria.setUsers(current.variables.assign_users);
                var group = '';
                if (status + "" == "false") {
                    group = current.variables.assign_groups;
                } else {
                    group = current.variables.assign_local_groups;
                }
                user_criteria.setGroups(group);
                user_criteria.setRoles(gs.getProperty('x_nuta2_nutanix_ca.admin.role.sysId'));
                user_criteria.setActive(true);
                user_criteria.setAdvanced(true);
                user_criteria.setMatchAll(false);
                user_criteria.setScript("answer = false;");
                var criteriaSysId = user_criteria.create();


                this.logger.debug("Entitled users &amp; groups to catalog item " + current.variables.item_name);

                /*				var assignCriteria = new GlideRecord(this.appUtil.configuration.table.catalogUserCriteria+'');
                				assignCriteria.initialize();
                				assignCriteria.sc_cat_item = catItemSysId+'';
                				assignCriteria.user_criteria = criteriaSysId+'';
                				assignCriteria.insert();*/

                var assignCriteria = new sn_sc.CatItem(catItemSysId);
                assignCriteria.availableForUserCriteria("add", [criteriaSysId]);

                ans.push(catItemSysId);
                ans.push(criteriaSysId);

                /*var onLoadclientScript = new GlideRecord(this.appUtil.configuration.table.catalogClientScript+'');
                onLoadclientScript.initialize();
                onLoadclientScript.name = "Get sync status on load";
                onLoadclientScript.type = "onLoad";
                onLoadclientScript.applies_to = "item";
                onLoadclientScript.cat_item = catItemSysId;
                onLoadclientScript.active = true;
                onLoadclientScript.order=100;
                //onLoadclientScript.sys_policy=protected;

                onLoadclientScript.description = 'This script is auto created thorugh runtime module for saving sync status.';

                onLoadclientScript.applies_catalog = true;
                onLoadclientScript.ui_type = "0";
                onLoadclientScript.applies_req_item = false;
                onLoadclientScript.applies_sc_task = false;
                onLoadclientScript.script = "function onLoad() { g_form.setValue('sync_flag', ''); var a=new GlideAjax('Nutanix_ClientServerScriptBridge');a.addParam('sysparm_name','checkQueue');a.getXML(responseParse);} function responseParse(response) {var b=response.responseXML.documentElement.getAttribute('answer');g_form.setValue('sync_flag', b);}";
                onLoadclientScript.insert();

                this.logger.debug("Created onLoad get sync value script on catalog item "+current.variables.item_name);

                var onSubmitclientScript = new GlideRecord(this.appUtil.configuration.table.catalogClientScript+'');
                onSubmitclientScript.initialize();
                onSubmitclientScript.name = "Prevent form submit";
                onSubmitclientScript.type = "onSubmit";
                onSubmitclientScript.applies_to = "item";
                onSubmitclientScript.cat_item = catItemSysId;
                onSubmitclientScript.active = true;
                onSubmitclientScript.order=100;
                //onLoadclientScript.sys_policy=protected;

                onSubmitclientScript.description = 'This script is auto created thorugh runtime module for preventing submission of form during a sync or delete.';

                onSubmitclientScript.applies_catalog = true;
                onSubmitclientScript.ui_type = "0";
                onSubmitclientScript.applies_req_item = false;
                onSubmitclientScript.applies_sc_task = false;
                onSubmitclientScript.script = "function onSubmit() { var sync_stat = g_form.getValue('sync_flag'); if(sync_stat == 'true'){return true;}else{return false;} }";
                onSubmitclientScript.insert();

                this.logger.debug("Created onSubmit validation script on catalog item "+current.variables.item_name);*/




                var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Check Catalog Item Validity",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "active": false,
                    "order": 1,
                    "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = "function onLoad() {  var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+''; var projectUUID = getParameterValue('projectUUID') + ''; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; } if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName); } 				 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true'; 				 }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   } }";
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();







                var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Get Project and Profile List onLoad",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "active": "true",
                    "order": "100",
                    "description": "This script is auto created thorugh runtime module for getting projects and profile list.",
                    "applies_catalog": "true",
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = "";
                if (parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2")) {
                    onLoadScript = "function onLoad() {var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchProjectAndProfileList');ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse);function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var parsed = JSON.parse(answer);var projectList = parsed.projectList;g_form.clearOptions('default_project');for (var i = 0; i &lt; projectList.length; i++) {var project = projectList[i];g_form.addOption('default_project', project.uuid, project.name)} var project = projectList[0]; g_form.setValue('default_project', project.uuid);if (projectList.length == 1) { g_form.setReadOnly('default_project', true)}}}";
                } else {   	
                 onLoadScript = "function onLoad() { var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchProjectAndProfileList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer);var projectList = parsed.projectList; g_form.clearOptions('default_project');for (var i = 0; i &lt; projectList.length; i++) { var project = projectList[i]; g_form.addOption('default_project', project.uuid, project.name);}var profileList = parsed.profileList.split(','); g_form.clearOptions('default_profile'); for (i = 0; i &lt; profileList.length; i++) { g_form.addOption('default_profile', profileList[i] + '', profileList[i] + ''); } g_form.setValue('default_profile', profileList[0]);if (projectList.length == 1) { g_form.setReadOnly('default_project', true);} if (profileList.length == 1) { g_form.setReadOnly('default_profile', true);} var cat_sys_id = g_form.getUniqueValue();var profile = g_form.getValue('default_profile').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse);}function varResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service; var sess_json = {};var var_array = [];for (var i in prof_json) {var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = i + '';sess_json['IO:'+i] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);for (var j in serv_json) {var_array = [];for (var k in serv_json[j]) {var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:'+k] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(sess_json);}}function getAdvancedVars(variable_json) {var act_var_JSON = JSON.stringify(variable_json);var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name', 'variableArrayParser');gajax.addParam('sysparm_type', 'catalog');gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + '');gajax.addParam('sysparm_varJson', act_var_JSON);gajax.getXML(getVarResponse);}function getVarResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null')return;var parsedResponse = JSON.parse(answer);for (var i in parsedResponse) {var row = parsedResponse[i];var sys_id = 'IO:' + row.sys_id;var type = row.type + '';if (row.state == 'SUCCESS') {if(type == 'LOCAL')g_form.setValue(sys_id, row.value);if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') {g_form.clearOptions(sys_id);for (var k = 0; k &lt; (row.value).length; k++) {g_form.addOption(sys_id + '', row.value[k], row.value[k]);}}}if (row.state == 'ERROR') {g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}}}";	
                }
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();

                //			this.logger.debug("Created onLoad script to get project and profile list on catalog item "+current.variables.item_name);

                var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Get Credentials OnLoad",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "active": true,
                    "order": 900,
                    "description": "This script is auto created thorugh runtime module for getting Credentials list.",
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);          	
                var onLoadScript = "function onLoad() { var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchCredentialsList');ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse, null); function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer'); var credArr = {}; var parsed = JSON.parse(answer);for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + '').toLowerCase().replace(/ /g, '_');g_form.setValue(name + '_credential_name', credential.name + ''); g_form.setReadOnly(name + '_credential_name', true); g_form.setValue(name + '_secret_type', credential.type + '', (credential.type + '' == 'KEY') ? 'SSH Private Key' : 'Password'); g_form.setReadOnly(name + '_secret_type', true); g_form.setValue(name + '_username', credential.username.value); g_form.setReadOnly(name + '_username', credential.username.readOnly); g_form.setDisplay(name + '_username', !credential.username.readOnly); if ((credential.type == 'KEY')) {g_form.setValue(name + '_ssh_private_key', credential.ssh_private_key.value); g_form.setReadOnly(name + '_ssh_private_key', credential.ssh_private_key.readOnly); g_form.setValue(name + '_passphrase', credential.passphrase.value); g_form.setReadOnly(name + '_passphrase', credential.passphrase.readOnly); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_ssh_private_key', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + '_passphrase', !credential.passphrase.readOnly); } else { g_form.setValue(name + '_password', ''); credArr[name + '_password'] = credential.password.value; g_form.setReadOnly(name + '_password', credential.password.readOnly); g_form.setDisplay(name + '_password', !credential.password.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false');}g_form.setDisplay(name + '_credential_reference', 'false'); if (credential.credential_reference &amp;&amp; credential.credential_reference.name) {g_form.setDisplay(name + '_credential_reference', 'true');g_form.addOption(name + '_credential_reference', credential.credential_reference.uuid + '', credential.credential_reference.name + '');g_form.setReadOnly(name + '_credential_reference', credential.credential_reference.readOnly);g_form.setDisplay(name + '_credential_reference', !credential.credential_reference.readOnly);g_form.setDisplay(name + '_ssh_private_key', 'false');g_form.setDisplay(name + '_passphrase', 'false');g_form.setDisplay(name + '_password', 'false');g_form.setDisplay(name + '_secret_type', 'false');}} sessionStorage['credentials_' + g_form.getUniqueValue()] = JSON.stringify(credArr); }}";
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();

                //			this.logger.debug("Created onLoad script to get credentials data on catalog item "+current.variables.item_name);	

                /* Fetching Dynamic values for advance variable*/

                var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Fetch dynamic value for advance variables onload",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "active": true,
                    "order": 10,
                    "description": "This script is created for fetching dynamic values for advance variables onload.",
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = " function onLoad() { var cat_sys_id = g_form.getUniqueValue(); var elemen = g_form.nameMap; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'advanceVariableDynamicOptions'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parse = JSON.parse(answer); var keys = Object.keys(parse[0]); var fieldRegex = parse[1]; parse = parse[0]; sessionStorage['FieldRegex_' + g_form.getUniqueValue()] = JSON.stringify(fieldRegex); for (var i = 0; i &lt; keys.length; i++) { var row = parse[keys[i] + '']; if (row.options.state == 'SUCCESS') { g_form.clearOptions(keys[i] + ''); for (var k = 0; k &lt; (row.options.values).length; k++) { g_form.addOption(keys[i] + '', row.options.values[k], row.options.values[k]); }} else {  g_form.showFieldMsg(keys[i], 'Error in variable: ' + keys[i] + ': ' + row.options.values[0], 'error'); }}}}";
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();

                //	this.logger.debug("Created onLoad script to fetch dynamic values for advance variable on catalog item "+current.variables.item_name);
                /* Fetching Dynamic values for advance variable*/


                var catalogScriptGR = new sn_sc.CatalogClientScript();
                catalogScriptGR.setAttributes({
                    "name": "Fetch form data on change of profile",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": "" + catItemSysId,
                    "cat_variable": "IO:" + profileSysID,
                    "active": true,
                    "order": 100,
                    "description": 'This script is auto created thorugh runtime module for fetching and setting form data and visibility.',
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false,
                });
                catalogScriptGR.appliesToCatalogItem(true);
                var script = '';
                if (parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2")) {
                    script = "function onChange(control, oldValue, newValue, isLoading) {if (newValue == '') {return;} var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getFieldDetails'); ga.addParam('cat_item_sys_id', g_form.getUniqueValue()); ga.addParam('fieldNameArray', g_form.getFieldNames()); ga.getXML(parseFieldResponse); function parseFieldResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var object1 = JSON.parse(answer); for (var i in object1) { if (object1[i].var_type == 'formatter' || object1[i].var_type == 'container' || object1[i].var_type == 'checkbox_container' || object1[i].var_type == 'undefined' || object1[i].var_type == 'Container Start') {continue;}g_form.setDisplay(object1[i].var_type + '', false);g_form.setReadOnly(object1[i].var_type + '', true);}} g_form.setDisplay('provider_icons', 'true'); g_form.setReadOnly('default_project', false); g_form.setReadOnly('default_app_name', false); g_form.setReadOnly('default_profile', false); g_form.setDisplay('default_project', true); g_form.setDisplay('default_app_name', true); g_form.setDisplay('default_profile', true); var profile = newValue; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchOrderFormData'); ga.addParam('sysparm_profile', profile); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchOrderFormData'); ga.addParam('sysparm_profile', profile); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse1, null); function parseResponse1(response) { var answer1 = response.responseXML.documentElement.getAttribute('answer'); var object1 = JSON.parse(answer1); for (var i in object1) { var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) {if (i.indexOf('cluster_name') == -1) {if (object1[i].var_type + '' == 'masked') {fielVal[i] = parsed[i].value;g_form.setValue(i + '', '');} else {g_form.setValue(i + '', parsed[i].value + '');}g_form.setReadOnly(i + '', parsed[i].readOnly + '');g_form.setDisplay(i + '', !parsed[i].readOnly);} else {g_form.setDisplay(i + '', !parsed[i].readOnly);g_form.setReadOnly(i + '', true);}}sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);}}}}";
                } else {
                 script = "function onChange(control, oldValue, newValue, isLoading) {if ( newValue == '') {return;}var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'getFieldDetails');ga.addParam('cat_item_sys_id', g_form.getUniqueValue());ga.addParam('fieldNameArray', g_form.getFieldNames());ga.getXML(parseFieldResponse);function parseFieldResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var object1 = JSON.parse(answer);for (var i in object1) {if (object1[i].var_type == 'formatter' || object1[i].var_type == 'container' || object1[i].var_type == 'checkbox_container' || object1[i].var_type == 'undefined' || object1[i].var_type == 'Container Start') {continue;}g_form.setDisplay(object1[i].var_type+'', false);g_form.setReadOnly(object1[i].var_type+'', true);}}g_form.setDisplay('provider_icons', 'true');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = newValue;var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile);ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse, null);function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile);ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse1, null);function parseResponse1(response){var answer1 = response.responseXML.documentElement.getAttribute('answer');var object1 = JSON.parse(answer1);for (var i in object1) {var fielVal = {};var parsed = JSON.parse(answer);for (var i in parsed) {if (i.indexOf('cluster_name') == -1) {if (object1[i].var_type+'' == 'masked') {fielVal[i] = parsed[i].value;g_form.setValue(i + '', '');} else {g_form.setValue(i + '', parsed[i].value + '');}g_form.setReadOnly(i + '', parsed[i].readOnly + '');g_form.setDisplay(i + '', !parsed[i].readOnly);} else {g_form.setDisplay(i + '', !parsed[i].readOnly);g_form.setReadOnly(i + '', true);}}sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);}}}}";
                }
                catalogScriptGR.addScript(script);
                var ScriptId = catalogScriptGR.create();


                /*Onload script for subnet*/

                /*		var onLoadclientScript = new GlideRecord(this.appUtil.configuration.table.catalogClientScript+'');
                		onLoadclientScript.initialize();
                		onLoadclientScript.name = "Get Subnet Info";
                		onLoadclientScript.type = "onLoad";
                		onLoadclientScript.applies_to = "item";
                		onLoadclientScript.cat_item = catItemSysId;
                		onLoadclientScript.active = true;
                		onLoadclientScript.order=50;

                		onLoadclientScript.description = 'This script is created for getting subnet list.';

                		onLoadclientScript.applies_catalog = true;
                		onLoadclientScript.ui_type = "0";
                		onLoadclientScript.applies_req_item = false;
                		onLoadclientScript.applies_sc_task = false;
                		onLoadclientScript.script = "function onLoad() { var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getSubnet');ga.addParam('sysparm_catSysID', catalogSysId);ga.getXML(processAnswer);function processAnswer(response) {var ans = response.responseXML.documentElement.getAttribute('answer');sessionStorage['clusterName_' + g_form.getUniqueValue()] = ans;ans = JSON.parse(ans);var catalog_clusterJSON = ans.catalog_data;clusterJSON = ans.cluster_info;var nicList = [];for(var m in clusterJSON){nicList.push(clusterJSON[m].subnet);}for (var k in catalog_clusterJSON) {for (var i in catalog_clusterJSON[k].nics) {if (catalog_clusterJSON[k].value + '') {for (var l in clusterJSON) {var subnetList = clusterJSON[l].subnet;if (l != catalog_clusterJSON[k].value + '')for (var s in subnetList) g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', s);}}else{var opt = g_form.getElement(catalog_clusterJSON[k].nics[i] + '');for (var x=1, n = opt.options.length; x &lt; n; x++) {var present = false;var val = opt.options[x].value+'';for(var s=0; s &lt; nicList.length ;s++){if (nicList[s][val]) {present =true;break;}} if(!present){ g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', opt.options[x].value+''); x--;n--; } }} }}}}";
                		onLoadclientScript.insert();*/

                var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Get Subnet Info",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": "" + catItemSysId,
                    "active": false,
                    "order": 50,
                    "description": "This script is created for getting subnet list.",
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = "function onLoad() { var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getSubnet');ga.addParam('sysparm_catSysID', catalogSysId);ga.getXML(processAnswer);function processAnswer(response) {var ans = response.responseXML.documentElement.getAttribute('answer');sessionStorage['clusterName_' + g_form.getUniqueValue()] = ans;ans = JSON.parse(ans);var catalog_clusterJSON = ans.catalog_data;clusterJSON = ans.cluster_info;var nicList = [];for(var m in clusterJSON){nicList.push(clusterJSON[m].subnet);}for (var k in catalog_clusterJSON) {for (var i in catalog_clusterJSON[k].nics) {if (catalog_clusterJSON[k].value + '') {for (var l in clusterJSON) {var subnetList = clusterJSON[l].subnet;if (l != catalog_clusterJSON[k].value + '')for (var s in subnetList){ /*g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', s);*/}}}{var opt = g_form.getElement(catalog_clusterJSON[k].nics[i] + '');for (var x=1, n = opt.options.length; x &lt; n; x++) {var present = false;var val = opt.options[x].value+'';for(var s=0; s &lt; nicList.length ;s++){if (nicList[s][val]) {present =true;break;}} if(!present){g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', opt.options[x].value+''); x--;n--; } }} }}}}";
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();

                /*End of Onload script for subnet*/
                /**/

                for (var x = 0; x &lt; nicSysIdList.length; x++) {
                    var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript.setAttributes({
                        "name": "Populate Nic on change of Nic Sys_id : " + x,
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": '' + catItemSysId,
                        "cat_variable": "IO:" + nicSysIdList[x],
                        "active": true,
                        "order": 400,
                        "description": "This script is created for onChange of Nic",
                        "applies_catalog": true,
                        "ui_type": "10",
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onChangecatalogClientScript.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } var clusterJson = JSON.parse(sessionStorage.getItem( 'clusterName_'+g_form.getUniqueValue() )); var catCluster = clusterJson.catalog_data; var clusterInfo = clusterJson.cluster_info; var clusterVal;for (var i in clusterInfo) {for (var k in clusterInfo[i].subnet) {if (k == newValue) {clusterVal = i + ''; }}}var clustername, relatedNic;for (var i in catCluster) {var nic = catCluster[i].nics; for (var k in nic) { var nicElem = nic[k]; if ('" + nicSysIdList[x] + "' == k) { if (!catCluster[i].value) { g_form.setValue(catCluster[i].name, clusterVal); relatedNic = catCluster[i].nics; addNicOptions(relatedNic);}else{g_form.setValue(catCluster[i].name, clusterVal);relatedNic = catCluster[i].nics;}}}} if(typeof clusterVal == \"undefined\"){ g_form.showFieldMsg(catCluster[i].name,'This Nic is not associated with the project, Please select another Nic. To Filterout unassociated Nic reload the page.', 'error');} function addNicOptions(relatedNic) {for (var n in relatedNic) {for (var l in clusterInfo) {if (l != clusterVal &amp;&amp; clusterVal) for (var j in clusterInfo[l].subnet) { g_form.removeOption(relatedNic[n], j); }}}}}";
                    onChangecatalogClientScript.addScript(onChangeScript);
                    var onChangeCatalogClientScriptId = onChangecatalogClientScript.create();
                    this.logger.debug("Created onChange script to populate Nic SYS id  " + catalogScriptGR.cat_variable);

                }

                /**/
                this.logger.debug("Created onChange script to get form data on catalog item " + current.variables.item_name);


                var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript.setAttributes({
                    "name": "Check AppName OnChange",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "cat_variable": "IO:" + appSysID,
                    "active": true,
                    "order": 100,
                    "description": "This script is auto created thorugh runtime module for checking application name.",
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false,

                });
                onChangecatalogClientScript.appliesToCatalogItem(true);
                var onChangeScript ="function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } var name = newValue; if ((newValue.length != ((newValue.trim()).length)) || (!(/^[_-\\w ]+$/.test(name) &amp;&amp; (name.trim().lastIndexOf('-') != (name.trim().length - 1))))) { g_form.setValue('default_app_name', ''); g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and in between spaces are allowed and cannot end with hyphens(-). Leading and trailing spaces are not allowed.'); } }";
                onChangecatalogClientScript.addScript(onChangeScript);
                var OnChangeCatalogScriptId = onChangecatalogClientScript.create();

                this.logger.debug("Created onChange script to check application name on " + current.variables.item_name);

                var onSubmitcatalogScriptGR = new sn_sc.CatalogClientScript();
                onSubmitcatalogScriptGR.setAttributes({
                    "name": "Check AppName OnSubmit",
                    "type": "onSubmit",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "active": false,
                    "order": 100,
                    "description": "This script is auto created thorugh runtime module for checking application name on submit.",
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false,
                });
                onSubmitcatalogScriptGR.appliesToCatalogItem(true);
                var onSubmitscript = "function onSubmit() { var result = true; var name = g_form.getValue('default_app_name'); if (!(/^[_-\\w ]+$/.test(name) &amp;&amp; (name.trim().lastIndexOf('-') != (name.trim().length - 1)))) { g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and spaces are allowed and cannot end with hyphens(-).'); result = false; } var errorFieldName = ''; var errorIntFieldName = ''; var parse = JSON.parse(sessionStorage.getItem('FieldRegex_' + g_form.getUniqueValue())); var keys = Object.keys(parse); for (var i = 0; i &lt; keys.length; i++) { var row = parse[keys[i] + '']; var patt = row.regex + ''; var reg = new RegExp(patt); var value = g_form.getValue(keys[i] + ''); var dataType = (row.data_type + '' == 'EXEC_SECRET' || row.data_type + '' == 'HTTP_SECRET' || row.data_type + '' == 'EXEC_LOCAL' || row.data_type + '' == 'HTTP_LOCAL') ? 'Dynamic' : row.data_type + ''; if (row.type + '' == 21) { var splitted = value.split(','); var actualVal = row.listRegex; var count = 0; for (var j = 0, n = splitted.length; j &lt; n; j++) { var listVal = actualVal[splitted[j] + ''];  if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') &amp;&amp; j == n - 1 &amp;&amp; listVal.includes('\n')){ while(listVal.indexOf('\n') != -1){ listVal = listVal.replace('\n','');} if (reg.test(listVal)) { count++;} } if (count == n) row.status = true; } else { if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') &amp;&amp; value.includes('\n')){while(value.indexOf('\n') != -1){value = value.replace('\n','');}} if (reg.test(value)) { row.status = true; } } if (value &amp;&amp; row.status == false) { result = false; g_form.hideFieldMsg(keys[i] + ''); if(dataType == ''){ errorIntFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'This is a Integer field.Please provide a integer value.'); } else{ errorFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'Value does not match specified regex: ' + row.regex); } }} if (result) {   var parse = JSON.parse(sessionStorage.getItem('fieldValues_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 			 parse = JSON.parse(sessionStorage.getItem('credentials_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 		 sessionStorage.removeItem('fieldValues_' + g_form.getUniqueValue()); sessionStorage.removeItem('credentials_' + g_form.getUniqueValue());      sessionStorage.removeItem('clusterName_' + g_form.getUniqueValue()); sessionStorage.removeItem('FieldRegex_' + g_form.getUniqueValue());} else { errorIntFieldName = (errorIntFieldName.endsWith(',')) ? errorIntFieldName.substr(0, errorIntFieldName.length - 1) : errorIntFieldName; errorFieldName = (errorFieldName.endsWith(',')) ? errorFieldName.substr(0, errorFieldName.length - 1) : errorFieldName; if(errorIntFieldName != '' ) g_form.addErrorMessage('Variables are Integer field.Please provide suitable values: ' + errorIntFieldName); if(errorFieldName != '' ) g_form.addErrorMessage('Variables value does not match specified Regex.Please provide suitable values: ' + errorFieldName);  return false; }var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+'';var profileName = (g_form.getValue('default_profile')+'').trim(); if(profileName == '') return; var projectUUID = (g_form.getValue('default_project')+'').trim(); if(projectUUID == '') return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName);ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; }if(flds[i].label == \"Project\"  &amp;&amp; flds[i].prettyName == \"default_project\")continue;if(flds[i].label == \"Profile\"  &amp;&amp; flds[i].prettyName == \"default_profile\")continue;if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName);  /*	 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true'; 	*/			} }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   }}";
                onSubmitcatalogScriptGR.addScript(onSubmitscript);
                var onSubmitcatalogScriptId = onSubmitcatalogScriptGR.create();

                this.logger.debug("Created onSubmit script to check application name on " + current.variables.item_name);

                var onLoadCatalogClientScriptGR = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScriptGR.setAttributes({
                    "name": "Hide Order details on request",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "active": true,
                    "order": 10,
                    "description": "Hide values on request details.",
                    "applies_catalog": "false",
                    "ui_type": "10",
                    "applies_req_item": "true",
                    "applies_sc_task": "false"
                });
                onLoadCatalogClientScriptGR.appliesToCatalogItem(false);
                onLoadCatalogClientScriptGR.appliesToRequestedItem(true);
                var onLoadScriptHide = "function onLoad() {if(g_form.getTableName() + '' == 'sc_req_item') {var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;}g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'false');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_environment', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = g_form.getValue('default_profile') + '';var cat_sys_id = g_form.getValue('cat_item') + '';var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile + '');ga.addParam('sysparm_catSysID', cat_sys_id + '');ga.getXML(parseResponse);} function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var nameTypeMap = {};var flds = g_form.nameMap;for (var i in flds) {nameTypeMap[flds[i].prettyName + ''] = fldType[flds[i].realName + ''] + '';}var fielVal = {};var parsed = JSON.parse(answer);for (var i in parsed) {if (i.indexOf('cluster_name') == -1) {if (nameTypeMap[i + ''] + '' == 'masked') {fielVal[i] = parsed[i].value;g_form.setValue(i + '', '');}g_form.setReadOnly(i + '', true); g_form.setDisplay(i + '', !parsed[i].readOnly);} else {g_form.setDisplay(i + '', !parsed[i].readOnly);g_form.setReadOnly(i + '', true);}}sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);}}";
                onLoadCatalogClientScriptGR.addScript(onLoadScriptHide);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScriptGR.create();



                var onChangecatalogClientScript1 = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript1.setAttributes({
                    "name": "Get Subnet Info on project change",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "cat_variable": "IO:" + projectSysID,
                    "active": true,
                    "order": 600,
                    "description": "This script is auto created thorugh runtime module for checking application name on submit.",
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false,

                });
                onChangecatalogClientScript1.appliesToCatalogItem(true);
                var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (newValue == '') { return; }try{var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getSubnet');ga.addParam('sysparm_catSysID', catalogSysId); ga.addParam('sysparm_ProjectUuid', newValue);ga.addParam('sysparm_ProjectUuid', newValue);ga.getXML(processAnswer);function processAnswer(response) {var ans = response.responseXML.documentElement.getAttribute('answer');sessionStorage['clusterName_' + g_form.getUniqueValue()] = ans;ans = JSON.parse(ans);var catalog_clusterJSON = ans.catalog_data;clusterJSON = ans.cluster_info;var nicList = [];for (var m in clusterJSON) {nicList.push(clusterJSON[m].subnet);}var nic_variable_namme = [];for (var n in catalog_clusterJSON) {var nics = catalog_clusterJSON[n].nics;for(var k in  nics) nic_variable_namme.push(nics[k]);}var catNicJson = {\"nic\": nic_variable_namme,\"nicList\": nicList};var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'setSubnet');ga.addParam('sysparm_catSysID', catalogSysId);ga.addParam('sysparm_catNicJson', JSON.stringify(catNicJson));ga.getXML(processAnswer1);function processAnswer1(response) {var ans = response.responseXML.documentElement.getAttribute('answer');}}}catch (err){}}";
                onChangecatalogClientScript1.addScript(onChangeScript);
                var OnChangeCatalogScriptId = onChangecatalogClientScript1.create();

                this.logger.debug("Created onChange script to check application name on " + current.variables.item_name);

                var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Check Catalog Item Validity project",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "cat_variable": "IO:" + projectSysID,
                    "active": true,
                    "order": 1,
                    "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') { return;}  var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+''; var profileName = (g_form.getValue('default_profile')+'').trim();if(profileName == '') return;var projectUUID = (newValue+'').trim();if(projectUUID == '')return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName); ga.addParam('cat_item_sys_id', g_form.getUniqueValue()); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); }  }    function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   }  function clearFieldValue(message) {alert(message); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getFieldDetails');ga.addParam('cat_item_sys_id', g_form.getUniqueValue());ga.addParam('fieldNameArray', g_form.getFieldNames());ga.getXML(parseResponse1);function parseResponse1(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var object = JSON.parse(answer);for(var i in object){if (object[i].var_type == 'formatter' || object[i].var_type == 'container' || object[i].var_type == 'checkbox_container' || object[i].var_type == 'undefined' || object[i].var_type == 'Container Start') {continue;}if (object[i].var_name.indexOf('cluster_name') == -1) g_form.clearValue(object[i].var_name);}}self.location = '/sp?id=sc_category&amp;catalog_id=240abede37112300fdfc097973990e24';}}";
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();


                var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Check Catalog Item Validity profile",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "cat_variable": "IO:" + profileSysID,
                    "active": true,
                    "order": 1,
                    "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true); 
                var onLoadScript = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') { return;}  var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+'';var profileName = (newValue+'').trim(); if(profileName == '') return; var projectUUID = (g_form.getValue('default_project')+'').trim(); if(projectUUID == '') return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName); ga.addParam('cat_item_sys_id', g_form.getUniqueValue());ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } }function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   } function clearFieldValue(message) {alert(message); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getFieldDetails');ga.addParam('cat_item_sys_id', g_form.getUniqueValue());ga.addParam('fieldNameArray', g_form.getFieldNames());ga.getXML(parseResponse1);function parseResponse1(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var object = JSON.parse(answer);for(var i in object){if (object[i].var_type == 'formatter' || object[i].var_type == 'container' || object[i].var_type == 'checkbox_container' || object[i].var_type == 'undefined' || object[i].var_type == 'Container Start') {continue;}if (object[i].var_name.indexOf('cluster_name') == -1) g_form.clearValue(object[i].var_name);}}self.location = '/sp?id=sc_category&amp;catalog_id=240abede37112300fdfc097973990e24';}}";
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();

                var onChangecatalogClientScript2 = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript2.setAttributes({
                    "name": "Set Session Vars",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "cat_variable": "IO:" + profileSysID,
                    "active": true,
                    "order": 700,
                    "description": "This script is auto created thorugh runtime module for setting session json.",
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false,

                });
                onChangecatalogClientScript2.appliesToCatalogItem(true);
                var onChangeScriptSess = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') {return;}var cat_sys_id = g_form.getUniqueValue();var profile = (newValue + '').trim();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse);function varResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');console.log(answer);var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service;var sess_json = {};for (var i in prof_json) {var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = i + '';sess_json['IO:' + i] = curr_value;}for (var j in serv_json) {for (var k in serv_json[j]) {var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:' + k] = curr_value;}}sessionStorage['varValues'] = JSON.stringify(sess_json);}}";
                onChangecatalogClientScript2.addScript(onChangeScriptSess);
                var OnChangeCatalogScriptId = onChangecatalogClientScript2.create();

                this.logger.debug("Created onChange script to set Session variables " + current.variables.item_name);

                var onChangecatalogClientScript3 = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript3.setAttributes({
                    "name": "Fetch dependencies on change of profile",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "cat_variable": "IO:" + profileSysID,
                    "active": true,
                    "order": 700,
                    "description": "This script is auto created thorugh runtime module for getting variables on change of profile.",
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false,

                });
                onChangecatalogClientScript3.appliesToCatalogItem(true);
                var onChangeScriptVars = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') {return;}var cat_sys_id = g_form.getUniqueValue();var profile = (newValue + '').trim();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse);}function varResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service;var sess_json = {};var var_array = [];for (var i in prof_json) {var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = i + '';sess_json['IO:' + i] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);for (var j in serv_json) {var_array = [];for (var k in serv_json[j]) {var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:' + k] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(sess_json);}function getAdvancedVars(variable_json) {var act_var_JSON = JSON.stringify(variable_json);var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name', 'variableArrayParser');gajax.addParam('sysparm_type', 'catalog');gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + '');gajax.addParam('sysparm_varJson', act_var_JSON);gajax.getXML(getVarResponse);}function getVarResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null') return;var parsedResponse = JSON.parse(answer);for (var i in parsedResponse) {var row = parsedResponse[i];var sys_id = 'IO:' + row.sys_id;var type = row.type + '';if (row.state == 'SUCCESS') {if (type == 'LOCAL') g_form.setValue(sys_id, row.value);if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') {g_form.clearOptions(sys_id);for (var k = 0; k &lt; (row.value).length; k++) {g_form.addOption(sys_id + '', row.value[k], row.value[k]);}}}if (row.state == 'ERROR') {g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}}}";
                onChangecatalogClientScript3.addScript(onChangeScriptVars);
                var OnChangeCatalogScriptId = onChangecatalogClientScript3.create();

                this.logger.debug("Created onChange script to set Session variables " + current.variables.item_name);
				
				 var catalogScriptGR = new sn_sc.CatalogClientScript();	
                catalogScriptGR.setAttributes({	
                    "name": "Service portal fixes",	
                    "type": "onChange",	
                    "applies_to": "item",	
                    "cat_item": "" + catItemSysId,	
                    "cat_variable": "IO:" + profileSysID,	
                    "active": true,	
                    "order": 300,	
                    "description": 'This script is auto created thorugh runtime module for service portal fixes.',	
                    "applies_catalog": true,	
                    "ui_type": "10",	
                    "applies_req_item": false,	
                    "applies_sc_task": false,	
                });	
                catalogScriptGR.appliesToCatalogItem(true);	
                var Script = "function onChange(control, oldValue, newValue, isLoading) {try {if (isLoading) {return;} if (newValue == '') { var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + '' === 'default_profile' || elemen[i] + '' === 'default_project' || elemen[i] + '' === 'default_environment' || elemen[i] + '' === 'default_app_name') g_form.setDisplay(elemen[i], true);else {g_form.setMandatory(elemen[i], false);       g_form.setDisplay(elemen[i], false);}}g_form.setDisplay('default_profile', true);g_form.setDisplay('default_project', true); g_form.setDisplay('default_environment', true);         g_form.setDisplay('default_app_name', true); g_form.setMandatory('default_profile', true);} else {var credentials = g_form.getFieldNames();for (var i in credentials) {if (credentials[i].includes('_password') || credentials[i].includes('_private_key') || credentials[i].includes('_passphrase')) {g_form.setVisible(credentials[i] + '', false);}}var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'extraFields');ga.addParam('sysparm_catSysID', g_form.getUniqueValue());ga.addParam('sysparm_fieldNames', g_form.getFieldNames());ga.addParam('sysparm_profile', newValue); ga.getXML(parseResponse);function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var object = JSON.parse(answer);var extraFields = JSON.parse(object.extraFields);var privateFields = JSON.parse(object.privateFields);var showRuntimeVariables = JSON.parse(object.showRuntimeVariables);var secretVariables = JSON.parse(object.secretVariables);var extraCredentials = JSON.parse(object.extraCredentials);for (var i in extraFields) g_form.setVisible(extraFields[i] + '', false);for (var j in privateFields) g_form.setVisible(privateFields[j] + '', false);for (var k in showRuntimeVariables) g_form.setVisible(showRuntimeVariables[k] + '', true);for (var l in secretVariables) g_form.clearValue(secretVariables[l] + '');for (var m in extraCredentials) g_form.setVisible(extraCredentials[k] + '', true);} }}catch (e) {console.log('Service portal fix' + e);}}";	
                catalogScriptGR.addScript(Script);	
                var ScriptId = catalogScriptGR.create();	

                if (parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2")) {
                    this.logger.debug("Created On Change of Project (calm evirment 3.2) client script on  " + current.variables.item_name);
                    var onChangeCatalogProject = new sn_sc.CatalogClientScript();
                    onChangeCatalogProject.setAttributes({
                        "name": "On Change of Project",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": '' + catItemSysId,
                        "cat_variable": "IO:" + projectSysID,
                        "active": true,
                        "order": 700,
                        "description": "This script is auto created thorugh runtime module for getting variables on change of project.",
                        "applies_catalog": true,
                        "ui_type": "10",
                        "applies_req_item": false,
                        "applies_sc_task": false,

                    });
                    onChangeCatalogProject.appliesToCatalogItem(true);
                    var onChangeProjectScript = "function onChange(control, oldValue, newValue, isLoading){if (isLoading || newValue == ''){return;}var project = g_form.getValue('default_project');var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchEnvironments');ga.addParam('sysparm_project', project);ga.getXML(parseResponse);function parseResponse(response){var answer = response.responseXML.documentElement.getAttribute('answer');var result = JSON.parse(answer);if (result.length == 0) {g_form.hideFieldMsg('default_environment', true);g_form.clearOptions('default_environment');g_form.showFieldMsg('default_environment', 'This Project has no valid Environments configured, you cannot proceed with the launch.  Please contact your administrator'); g_form.hideFieldMsg('default_profile', true);g_form.clearOptions('default_profile');var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + '' === 'default_profile' || elemen[i] + '' === 'default_project' || elemen[i] + '' === 'default_environment' || elemen[i] + '' === 'default_app_name') g_form.setDisplay(elemen[i], true); else { g_form.setMandatory(elemen[i], false); g_form.setDisplay(elemen[i], false);}} g_form.setMandatory('default_profile', true);g_form.showFieldMsg('default_profile', 'There are no applicable Profile(s) that match the selected Environment.  Please choose a different Environment to proceed.'); g_form.setDisplay('default_profile', true);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setMandatory('default_profile', true);}else{g_form.clearMessages();g_form.clearOptions('default_environment');for (var i = 0; i &lt; result.length; i++){var jsonObj = result[i];g_form.addOption('default_environment', jsonObj.UUID + '', jsonObj.Name + '');} var jsonobj = result[0]; g_form.setValue('default_environment',jsonObj.UUID);}}}";
                    onChangeCatalogProject.addScript(onChangeProjectScript);
                    var OnChangeCatalogScriptId = onChangeCatalogProject.create();
                    this.logger.debug("Created On Change of Project (calm evirment 3.2) client script on  " + current.variables.item_name);


                    this.logger.debug("Created On Change of Environment (calm evirment 3.2) client script on  " + current.variables.item_name);
                    var onChangeCatalogEnvironment = new sn_sc.CatalogClientScript();
                    onChangeCatalogEnvironment.setAttributes({
                        "name": "On Change of Environment variable",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": '' + catItemSysId,
                        "cat_variable": "IO:" + environmentSysId,
                        "active": true,
                        "order": 700,
                        "description": "This script is auto created thorugh runtime module for getting variables on change of project.",
                        "applies_catalog": true,
                        "ui_type": "10",
                        "applies_req_item": false,
                        "applies_sc_task": false,

                    });
                    onChangeCatalogEnvironment.appliesToCatalogItem(true);
                    var onChangeEnvironmentScript = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') {return;}var def_project; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchProfilesBasisOnEnvironment');ga.addParam('sysparm_env', g_form.getValue('default_environment'));ga.addParam('sysparm_proValue', g_form.getValue('default_project'));ga.addParam('sysparm_sysID', g_form.getUniqueValue());ga.getXML(parseData);function parseData(response) {var answer = response.responseXML.documentElement.getAttribute('answer');answer = JSON.parse(answer);if (answer.length == 0) {g_form.hideFieldMsg('default_profile', true);g_form.clearOptions('default_profile');g_form.showFieldMsg('default_profile', 'There are no applicable Profile(s) that match the selected Environment.  Please choose a different Environment to proceed.');var elemen = g_form.getFieldNames();for (var i in elemen) {if (elemen[i] + '' === 'default_profile' || elemen[i] + '' === 'default_project' || elemen[i] + '' === 'default_environment' || elemen[i] + '' === 'default_app_name' )g_form.setDisplay(elemen[i], true);else{g_form.setMandatory(elemen[i], false);g_form.setDisplay(elemen[i], false);}}g_form.setDisplay('default_profile', true);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);     g_form.setMandatory('default_profile', true);} else {g_form.setReadOnly('default_profile', false);var elemen = g_form.getFieldNames();for (var i in elemen) {g_form.setDisplay(elemen[i], true);}         g_form.hideFieldMsg('default_profile', true);g_form.clearOptions('default_profile');for (var i = 0; i &lt; answer.length; i++) {g_form.addOption('default_profile', answer[i], answer[i]);}g_form.setValue('default_profile', answer[0]); if (answer.length == 1) {g_form.setReadOnly('default_profile', true);}}var cat_sys_id = g_form.getUniqueValue();var profile = g_form.getValue('default_profile').trim();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse);}function varResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service;var sess_json = {};var var_array = [];for (var i in prof_json) {var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = i + '';sess_json['IO:' + i] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);for (var j in serv_json) {var_array = [];for (var k in serv_json[j]) {var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:' + k] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(sess_json);}}function getAdvancedVars(variable_json) {var act_var_JSON = JSON.stringify(variable_json);var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name', 'variableArrayParser');gajax.addParam('sysparm_type', 'catalog');gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + '');gajax.addParam('sysparm_varJson', act_var_JSON);gajax.getXML(getVarResponse);}function getVarResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');if (answer + '' == '' || answer + '' == 'undefined' || answer + '' == 'null') return;var parsedResponse = JSON.parse(answer);for (var i in parsedResponse) {var row = parsedResponse[i];var sys_id = 'IO:' + row.sys_id;var type = row.type + '';if (row.state == 'SUCCESS') {if (type == 'LOCAL') g_form.setValue(sys_id, row.value);if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') {g_form.clearOptions(sys_id);for (var k = 0; k &lt; (row.value).length; k++) {g_form.addOption(sys_id + '', row.value[k], row.value[k]);}}}if (row.state == 'ERROR') {g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}}}";
                    onChangeCatalogEnvironment.addScript(onChangeEnvironmentScript);
                    var OnChangeCatalogScriptId = onChangeCatalogEnvironment.create();
                    this.logger.debug("Created On Change of Environment (calm evirment 3.2) client script on  " + current.variables.item_name);
                }



                var cat_ui_policy = new GlideRecord(this.appUtil.configuration.table.catalogUIPolicy + '');
                cat_ui_policy.initialize();
                cat_ui_policy.catalog_item = catItemSysId;
                cat_ui_policy.short_description = 'Make Variables RITM ReadOnly';
                cat_ui_policy.applies_catalog = false;
                cat_ui_policy.applies_sc_task = false;
                cat_ui_policy.applies_req_item = true;
                cat_ui_policy.run_scripts = true;
                cat_ui_policy.script_true = 'function onCondition() { g_form.setVariablesReadOnly(true); }';
                cat_ui_policy.insert();



                this.logger.debug("Created ui policy to make field readonly on RITM on catalog item " + current.variables.item_name);

            }

            this.logger.info("New Catalog item " + current.variables.item_name + " creation completed.");
            return ans;

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._copyCatalogItem. Error:- " + e);
        }
    },

    _insertIntoRuntimeConfigTable: function(ans, current) {
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._insertIntoRuntimeConfigTable.");

            var createCatalog = current.variables.create_catalog + '';

            if (createCatalog == 'yes') {

                // 				var project = new GlideRecord(this.appUtil.configuration.table.Project+'');
                // 				project.addQuery('sys_id', current.variables.project+'');
                // 				project.setLimit(1);
                // 				project.query();
                // 				project.next();

                var gr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
                gr.initialize();
                gr.multiple_application_profile = current.variables.multiple_application_profile + '';
                //gr.assigned_users = current.variables.assign_users+'';
                gr.user_criteria = ans[1];
                gr.blueprint = current.variables.blueprint + '';
                //gr.description = current.variables.description+'';
                gr.item_name = ans[0] + '';
                gr.multiple_projects = current.variables.multiple_project + '';
                gr.insert();

                this.logger.info("Inserting value and runtime value of fields into variable proerpteis table.");
            } else {
                var gr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
                gr.addQuery('item_name', current.variables.cat_item + '');
                gr.query();
                if (gr.next()) {
                    gr.application_profile = gr.application_profile + ',' + current.variables.application_profile + '';
                    gr.update();
                }

                this.logger.info("Updating value and runtime value of fields into variable proerpteis table.");
            }

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._insertIntoRuntimeConfigTable. Error:- " + e);
        }

    },

    setMultiProfileServiceVariables: function(current) {
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts.setMultiProfileServiceVariables.");

            var performAction = current.variables.type + '';
            var catName = '';


            if (performAction == 'new') {
                var profile = current.variables.multiple_application_profile+'';
				var profile_arr = profile.split(",");
                var blueprint = current.variables.blueprint;
                var catSysId = current.description;
                var multiprofile_service_data = JSON.parse(current.variables.service_data);

                this.logger.debug("Got Profile:- " + profile + " Blueprint:- " + blueprint + " Catalog Item:- " + catSysId + " and Service Variables Data:- " + current.variables.service_data + " for setting service variables");

                var fieldGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                fieldGR.addEncodedQuery('cat_item=' + catSysId);
                fieldGR.query();

                var fieldInfo = {};

                while (fieldGR.next()) {
                    fieldInfo[fieldGR.name] = fieldGR.sys_id + '';
                }


                this.logger.debug("Fethed the mapping of fields to sysIds. JSON string:- " + JSON.stringify(fieldInfo));
                for (var c in multiprofile_service_data) {
                    var profile = multiprofile_service_data[c].profile_sys_id;
                    var profile_gr = new GlideRecord('x_nuta2_nutanix_ca_application_profile');
                    if (profile_gr.get(profile)) {}


                    var service_data = multiprofile_service_data[c].service_configuration;

                    var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');

                    for (var i in service_data) {
                        var serviceName = i;
                        var categoryList = service_data[i];

                        for (var j in categoryList) {
                            var categoryName = j;
                            var category = categoryList[j];

                            var keys = Object.keys(category);

                            if (!category[keys[0]].notCmplx || category[keys[0]].notCmplx + '' == 'false') {

                                this.logger.debug("Mapping PortList variables " + JSON.stringify(category[keys[0]]) + " in Varaibles properties table");

                                gr.initialize();
                                var temp1 = categoryName.replace(profile_gr.name + '_', '');
                                gr.variable = fieldInfo[temp1 + ''] + '';
                                gr.application_profile = profile + '';
                                gr.catalog_item = catSysId + '';
                                gr.default_value = JSON.stringify(category[keys[0]]);
                                gr.isprofilevariable = 'false';
                                gr.runtime_config = 'false';
                                gr.uuid = '';
                                var temp2 = serviceName.replace(profile_gr.name + '_', '');
                                gr.service_name = fieldInfo[temp2 + ''] + '';
                                var temp3 = categoryName.replace(profile_gr.name + '_', '');
                                gr.category_name = fieldInfo[temp3 + ''] + '';
                                gr.insert();

                            } else {
                                for (var k in category) {
                                    var varia = category[k];

                                    this.logger.debug("Mapping service variable " + varia.name + " with value " + varia.value + " and runtime config as " + varia.runtime_config + " againsts service " + serviceName + " and category " + categoryName + " in Varaibles properties table");

                                    if (varia.data_type + '' == 'LOCAL' &amp;&amp; (varia.val_type + '' == 'DATE_TIME' || varia.val_type + '' == 'DATE'))
                                        varia.value = this.appScriptInstance._formttedDateTime(varia.value + '', varia.val_type + '', true);


                                    gr.initialize();
                                    var temp1 = (varia.name).replace(profile_gr.name + '_', '');

                                    gr.variable = fieldInfo[temp1 + ''] + '';
                                    gr.application_profile = profile + '';
                                    gr.catalog_item = catSysId + '';
                                    gr.default_value = varia.value + '';
                                    gr.isprofilevariable = varia.isprofilevariable + '';
                                    gr.runtime_config = varia.runtime_config + '';
                                    gr.uuid = varia.uuid + '';
                                    var temp = serviceName.replace(profile_gr.name + '_', '');
                                    gr.service_name = fieldInfo[temp + ''] + '';
                                    var temp1 = categoryName.replace(profile_gr.name + '_', '');
                                    gr.category_name = fieldInfo[temp1 + ''] + '';

                                    gr.isdisabled = varia.isdisabled + '';
                                    gr.issupported = varia.isSupported + '';
                                    gr.isservicevariable = varia.isservicevariable + '';


                                    gr.type = varia.type;
                                    gr.value_type = varia.val_type + '';
                                    gr.field_regex = varia.regex + '';
                                    gr.data_type = varia.data_type + '';
                                    gr.uuid = varia.uuid + '';

                                    gr.field_json = varia.field + "";
                                    gr.is_hidden = (varia.isHidden + "" == 'true') ? true : false;


                                    gr.insert();

                                    catName = gr.catalog_item.name + '';

//                                     if (varia.isservicevariable + '' == 'true')
//                                         this._createOnChangeScript(fieldInfo[varia.name + ''] + '', catSysId + "");
                                }
                            }

                        }
                    }

                    this.logger.info("Set service variables values for " + catName + ".");
                }
				
				this.logger.info("Set service variables values for " + catName + ".");
			
				for(var i = 0 ; i &lt; profile_arr.length ; i++){
				
					this._createOnChangeScriptForDependee(catSysId , profile_arr[i], "serviceVar" );
				}
            }
			else {

                var profile = current.variables.multiple_application_profile+'';
				var profile_arr = profile.split(",");
                var blueprint = current.variables.blueprint;
                var catSysId = current.description;
                var multiprofile_service_data = JSON.parse(current.variables.service_data);
                var delta_profiles = ((current.variables.delta_profiles).toString()).split(',');

                // 				gs.info("##### Profile : "+profile+" blueprint "+blueprint+" catSysId "+catSysId+"  multiprofile_service_data "+multiprofile_service_data+" delta_profiles "+delta_profiles+"type of delta profile "+typeof delta_profiles+" delta_profiles [0] "+delta_profiles[0]);

                var service_data = JSON.parse(current.variables.service_data + '');


                for (var c in multiprofile_service_data) {
                    var profile = multiprofile_service_data[c].profile_sys_id;

                    var profile_gr = new GlideRecord('x_nuta2_nutanix_ca_application_profile');
                    if (profile_gr.get(profile)) {}
                    var service_data = multiprofile_service_data[c].service_configuration;

                    var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                    gr.addQuery('catalog_item', catSysId);
                    gr.addQuery('application_profile', profile);
                    gr.addQuery('isprofilevariable', false);
                    gr.query();

                    while (gr.next()) {
                        var jsonData = service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''];

                        if (!jsonData.notCmplx || jsonData.notCmplx + '' == 'false') {
                            gr.default_value = JSON.stringify(service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + '']);
                            gr.update();
                            this.logger.debug("Updated service port list " + gr.default_value);
                        } else {
                            if (service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].data_type + '' == 'LOCAL' &amp;&amp; (service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].val_type + '' == 'DATE_TIME' || service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].val_type + '' == 'DATE'))
                                service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].value = this.appScriptInstance._formttedDateTime(service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].value + '', service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].val_type + '', true);

                            gr.default_value = service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].value + '';
                            gr.runtime_config = service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].runtime_config + '';
                            gr.update();

                            this.logger.debug("Updated service variable " + gr.variable.name + " with value " + gr.default_value + " and runtime config as " + gr.runtime_config + " againsts service " + gr.service_name.name + " and category " + gr.category_name.name + " in Variables properties table");
                            catName = gr.catalog_item.name + '';

                        }
                    }
                }
                this.logger.info("Updated service variables values for " + catName + ".");

                var multiprofile_service_data = JSON.parse(current.variables.service_data);
                var fieldGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                fieldGR.addEncodedQuery('cat_item=' + catSysId);
                fieldGR.query();

                var fieldInfo = {};

                while (fieldGR.next()) {
                    fieldInfo[fieldGR.name] = fieldGR.sys_id + '';
                }

                for (var c in multiprofile_service_data) {
                    var profile = multiprofile_service_data[c].profile_sys_id;
                    var profile_gr = new GlideRecord('x_nuta2_nutanix_ca_application_profile');
                    if (profile_gr.get(profile)) {}

                    var service_data = multiprofile_service_data[c].service_configuration;
                    for (var i in delta_profiles) {
                        if (profile + '' == delta_profiles[i] + '') {
                            var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');

                            for (var i in service_data) {
                                var serviceName = i;
                                var categoryList = service_data[i];

                                for (var j in categoryList) {
                                    var categoryName = j;
                                    var category = categoryList[j];

                                    var keys = Object.keys(category);

                                    if (!category[keys[0]].notCmplx || category[keys[0]].notCmplx + '' == 'false') {

                                        this.logger.debug("Mapping PortList variables " + JSON.stringify(category[keys[0]]) + " in Varaibles properties table");

                                        gr.initialize();
                                        var temp1 = categoryName.replace(profile_gr.name + '_', '');
                                        gr.variable = fieldInfo[temp1 + ''] + '';
                                        gr.application_profile = profile + '';
                                        gr.catalog_item = catSysId + '';
                                        gr.default_value = JSON.stringify(category[keys[0]]);
                                        gr.isprofilevariable = 'false';
                                        gr.runtime_config = 'false';
                                        gr.uuid = '';
                                        var temp2 = serviceName.replace(profile_gr.name + '_', '');
                                        gr.service_name = fieldInfo[temp2 + ''] + '';
                                        var temp3 = categoryName.replace(profile_gr.name + '_', '');
                                        gr.category_name = fieldInfo[temp3 + ''] + '';
                                        gr.insert();

                                    } else {
                                        for (var k in category) {
                                            var varia = category[k];

                                            this.logger.debug("Mapping service variable " + varia.name + " with value " + varia.value + " and runtime config as " + varia.runtime_config + " againsts service " + serviceName + " and category " + categoryName + " in Varaibles properties table");

                                            if (varia.data_type + '' == 'LOCAL' &amp;&amp; (varia.val_type + '' == 'DATE_TIME' || varia.val_type + '' == 'DATE'))
                                                varia.value = this.appScriptInstance._formttedDateTime(varia.value + '', varia.val_type + '', true);


                                            gr.initialize();
                                            var temp1 = (varia.name).replace(profile_gr.name + '_', '');
                                            gr.variable = fieldInfo[temp1 + ''] + '';
                                            gr.application_profile = profile + '';
                                            gr.catalog_item = catSysId + '';
                                            gr.default_value = varia.value + '';
                                            gr.isprofilevariable = varia.isprofilevariable + '';
                                            gr.runtime_config = varia.runtime_config + '';
                                            gr.uuid = varia.uuid + '';
                                            var temp = serviceName.replace(profile_gr.name + '_', '');
                                            gr.service_name = fieldInfo[temp + ''] + '';
                                            var temp1 = categoryName.replace(profile_gr.name + '_', '');
                                            gr.category_name = fieldInfo[temp1 + ''] + '';

                                            gr.isdisabled = varia.isdisabled + '';
                                            gr.issupported = varia.isSupported + '';
                                            gr.isservicevariable = varia.isservicevariable + '';


                                            gr.type = varia.type;
                                            gr.value_type = varia.val_type + '';
                                            gr.field_regex = varia.regex + '';
                                            gr.data_type = varia.data_type + '';
                                            gr.uuid = varia.uuid + '';

                                            gr.field_json = varia.field + "";
                                            gr.is_hidden = (varia.isHidden + "" == 'true') ? true : false;

                                            gr.insert();

                                            catName = gr.catalog_item.name + '';

//                                             if (varia.isservicevariable + '' == 'true')
//                                                 this._createOnChangeScript(fieldInfo[varia.name + ''] + '', catSysId + "");
                                        }
                                    }

                                }
                            }
                        }
                    }
                }
				
				for(var i = 0 ; i &lt; profile_arr.length ; i++){
					
					this._createOnChangeScriptForDependee(catSysId , profile_arr[i], "serviceVar" );
				}
            }

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts.setMultiProfileServiceVariables. Error:- " + e);
        }
    },

    _onChangeScripts: function(variaJSON, catSysId) {
        try {
            for (var i in variaJSON) {
                this._createOnChangeScript(i, catSysId);
            }
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._onChangeScripts. Error:- " + e);
        }
    },

    _createOnChangeScript: function(varSysId, catSysId) {
        try {
            var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
            onChangecatalogClientScript.setAttributes({
                "name": "Fetch values OnChange",
                "type": "onChange",
                "applies_to": "item",
                "cat_item": '' + catSysId,
                "cat_variable": "IO:" + varSysId,
                "active": true,
                "order": 1000,
                "description": "This script is auto created thorugh runtime module for fetching values.",
                "applies_catalog": "true",
                "ui_type": "10",
                "applies_req_item": false,
                "applies_sc_task": false,
            });
            onChangecatalogClientScript.appliesToCatalogItem(true);
             var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) {try{ if(!sessionStorage['varValues'])return; var control_id = 'IO:"+varSysId +"';var varValues = JSON.parse(sessionStorage['varValues']);oldValue = varValues[control_id + '']; if (isLoading || newValue == '' || oldValue + '' == newValue + '') { return; }console.log(oldValue);console.log(newValue); function varResponse(response){var answer=response.responseXML.documentElement.getAttribute('answer');var varJSON=JSON.parse(answer);var prof_json=varJSON.profile;var serv_json=varJSON.service;var var_array=[];for(var i in prof_json){var field=prof_json[i];var curr_value=g_form.getValue('IO:'+i);varValues['IO:' + i] = curr_value + '';var parsed_field=JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value=curr_value,parsed_field.sys_id=i+'',var_array.push(parsed_field);}getAdvancedVars(var_array);for(var j in serv_json){var_array=[];for(var k in serv_json[j]){var field=serv_json[j][k];var curr_value=g_form.getValue('IO:'+k);varValues['IO:' + k] = curr_value + '';var parsed_field=JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value=curr_value,parsed_field.sys_id=k+'',var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(varValues);}function getAdvancedVars(variable_json){var act_var_JSON=JSON.stringify(variable_json);var gajax=new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name','variableArrayParser'),gajax.addParam('sysparm_type','catalog'),gajax.addParam('sysparm_parentUuid',g_form.getUniqueValue()+''),gajax.addParam('sysparm_varJson',act_var_JSON),gajax.getXML(getVarResponse);}function getVarResponse(response){ var answer=response.responseXML.documentElement.getAttribute('answer');if(answer+''==''||answer+''=='undefined'||answer+''=='null')return;var parsedResponse=JSON.parse(answer);for(var i in parsedResponse){var row=parsedResponse[i];var sys_id='IO:'+row.sys_id;var type=row.type+'';if(row.state=='SUCCESS'&amp;&amp; (type=='EXEC_LOCAL'||type=='HTTP_LOCAL'||type=='EXEC_SECRET'||type=='HTTP_SECRET')){g_form.clearOptions(sys_id);for(var k=0;k&lt;row.value.length;k++)g_form.addOption(sys_id+'',row.value[k],row.value[k]); g_form.setValue(sys_id,row.value);} else {if(row.data_type + '' != 'BASE'){g_form.clearOptions(sys_id); for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + '', row.options[k], row.options[k]);} g_form.setValue(sys_id, row.value);}row.state=='ERROR'&amp;&amp;g_form.addErrorMessage('Error in variable: '+row.name+': '+row.error[0]);}}var cat_sys_id=g_form.getUniqueValue();var profile=g_form.getValue('default_profile').trim();var ga=new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name','fetchLaunchVars'),ga.addParam('sysparm_catsysid',cat_sys_id),ga.addParam('sysparm_profile',profile),ga.getXML(varResponse);}catch(e){console.log('Fetch values OnChange'+e)}}";
            onChangecatalogClientScript.addScript(onChangeScript);
            var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
			
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._createOnChangeScript. Error:- " + e);
        }
    },

    // calm 3.2 Envirment task

    fetchProfilesBasisOnEnvironment: function() {
        try {
            var body = new Object();
            var profile = [];
            body["api_version"] = "3.0";
            var metadata = {};
            var api_info;
            if (this.getParameter('sysparm_type') + "" == "x_nuta2_nutanix_ca_nutanix_marketplaceitems") {
                metadata.kind = "marketplace_item";
                api_info = "calm_marketplace_items";
            } else {
                metadata.kind = "blueprint";
                api_info = "blueprints";
            }
            metadata["categories"] = {};
            //sysparm_blueprint
            var project_reference = {};
            project_reference["kind"] = "project";
            project_reference["name"] = this.getParameter("sysparm_pro") + "";
            project_reference["uuid"] = this.getParameter("sysparm_proValue") + "";
            metadata["project_reference"] = project_reference;

            body["metadata"] = metadata;
            var specs = {};
            var environment_profile_pairs = [];
            var environment = {};
            environment["uuid"] = this.getParameter("sysparm_env") + "";
            var app_profile = this.getParameter("sysparm_profile");
            app_profile = app_profile.split(",");
            for (var i = 0; i &lt; app_profile.length; i++) {
                var profile_obj = {};
                var gr = new GlideRecord("x_nuta2_nutanix_ca_application_profile");
                if (gr.get(app_profile[i])) {
                    profile_obj.app_profile = {
                        "name": gr.name + ""
                    };
                    profile.push(gr.name + "");
                }
                profile_obj.environment = environment;
                environment_profile_pairs.push(profile_obj);
            }
            specs["environment_profile_pairs"] = environment_profile_pairs;
            var final_profile = [];
            body["spec"] = specs;
            this.appUtil = new Nutanix_Calm_Utils();
            this.logger.debug("Nutanix_ConfigureSettingScripts.fetchProfilesBasisOnEnvironment" + JSON.stringify(body));
            var response = this.appUtil.makeCalmApiCall('POST', '/' + api_info + '/' + this.getParameter("sysparm_blueprint") + "/patch_with_environment/validate", JSON.stringify(body));
            this.logger.debug("Nutanix_ConfigureSettingScripts.fetchProfilesBasisOnEnvironment" + JSON.stringify(response.getBody()) + response.getStatusCode());
            if (response.getStatusCode() + "" == "200" || response.getStatusCode() + "" == "201") {
                response = JSON.parse(response.getBody());
                var environment_profile_pair = response.status.environment_profile_pairs;

                for (var i = 0; i &lt; environment_profile_pair.length; i++) {
                    var name = environment_profile_pair[i].app_profile.name + "";
                    var state = environment_profile_pair[i].state;
                    if (profile.indexOf(name) != -1) {
                        if (state == "valid") {
                            final_profile.push(name);
                        }
                    }
                }
            } else {
                this.logger.error("Nutanix_ConfigureSettingScripts.fetchProfilesBasisOnEnvironment patch_with_environment/validate call failed response statusCode : " + response.getStatusCode());
            }
            return JSON.stringify(final_profile);
        } catch (e) {
            this.logger.error("Nutanix_ConfigureSettingScripts.fetchProfilesBasisOnEnvironment " + e);
        }

    },
    fetchEnvironments: function() {
        this.logger.debug("inside Nutanix_ConfigureSettingScripts.fetchEnvironments");
        var project = this.getParameter("sysparm_project");
        var gr_pro = new GlideRecord("x_nuta2_nutanix_ca_nutanix_project");
        gr_pro.addQuery("uuid", project);
        gr_pro.query();
        var arr = [];
        if (gr_pro.next()) {
            var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_environment");
            gr.addQuery("project", gr_pro.sys_id);
            gr.query();
            while (gr.next()) {
                var obj = {};
                obj["Name"] = (gr.name + "");
                obj["UUID"] = (gr.uuid + "");
                arr.push(obj);
            }
        }
        return (JSON.stringify(arr));
    },

    type: 'Nutanix_ConfigureSettingScripts'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-11-13 16:38:54&lt;/sys_created_on&gt;&lt;sys_id&gt;75c3833837fd2300fdfc097973990e2f&lt;/sys_id&gt;&lt;sys_mod_count&gt;573&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_ConfigureSettingScripts&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_75c3833837fd2300fdfc097973990e2f&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-05-14 17:31:54&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1164771172</payload_hash>
<remote_update_set display_value="Nutanix Calm 1.4.4 Service Portal patch">05f5233707003010f76cfdac7c1ed0c0</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2021-05-18 07:53:49</sys_created_on>
<sys_id>c5f5233707003010f76cfdac7c1ed0c2</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1797e615dbb0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2021-05-18 07:53:49</sys_updated_on>
<table/>
<target_name>Nutanix_ConfigureSettingScripts</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>52e309f6aac4bc109b634cce241323e4</update_guid>
<update_guid_history>52e309f6aac4bc109b634cce241323e4:-1164771172,2f83493a14c4bc10a3193bd9a1fe5700:-1785983923,189f08fe9cc0bc105032da0bc7749497:484367703,74ea0f2ecfcc7c10138247c15ca236b3:653844417,56a536224fc07c1001c2cb9d7e381cc0:1854644139,3a4a7a9650083c10c2d6e2a750165773:-1651728514,abbb987db5487810574e9b37df1619ed:213554611,0705d435c04878108b46bed693923961:-1647332622,5ddd00f9fc087810d3f6d7c1f9174ace:16459002,f3b67fedad047810caaa77f8672b595f:-1183035278,fadf222102c8f41011ef0bdc7f9725f6:1582148719,16a7de61bb08f4109bf2ce38855191ad:-1968237729,f47553d9aac4b4106e2f2e13be85082b:-1394259762,b2a0ad11b500b4104eb069ed214419f0:500803982,f7ea0ce42e08f010b6b1c88e69fea749:1820385952,017a33100c08f01072d6343d2ffafb50:1306971744,10ec83c4e848b010f292c978da116ec3:1286648248,84a083cc4d08b010a9097d949f7a1cbc:155489049,ef712608d4c4b010a98a2db971f19035:-2141390013,ad79b5c4bcc0b010ed9198a47f269d8c:1644289389,2559bd009fc0b0108f4f6f6e8dc62a42:43605913,f1c339c071c0b010b93617862211448f:1644289389,1c517d401dc0b010572998b495f7c9c0:-1351097034,721fa83d362f28108363497ea8f356a7:1157360293,eedd47e9cd27681020d0c90f90a37fe2:-1990655154,6ab8f6a1cce368109583e4533fc6b283:-1266365220,34c67229dca36810558c2a469fe9896c:87151291,b484baa1d26368109245e2c89995a749:-512811207,32b106957aebe4104796d2010939ae05:-405231282,b1d5d515f9e7a8505fb188c4af8b231b:132657891,4b9cd85549a3a850d093933c9f95ac6e:507366021,4713200d87af2850b32d4af94ad3685e:1440960590,ecc0a8c5c3af2850d0dee44408f80dc6:-1993900778,9a0d94cd8b6f2850ab2282139c4043b3:1306150294,53db9c0da16f2850975b01f53935e2c3:-1583125994,ee8a90c9a36f28505f9551f8e0291146:214031638,ce455045346f28502af2b491b00c40d2:-1624668436,fe9314c15a6f2850303675024d31ce43:1826400305,cb3d0489bf2f28501ad5297df59c16f0:1951564893,7fb984c5c72f2850cbecba977910bd81:-582875435,5918c445782f2850bf433cf2e694fdb4:-2108094509,44b48c01ab2f2850ad95267705577198:1893397508,2d1208cd7aeb2850fb5d2da4f729c118:-1733382002,d7eebbf8d1eb2850e298505166ab0782:-521504728,236d73f4b4eb2850a2b24fd829505b9b:-935469780,249b77b466eb285032c9bdab68c60e92:1682391145,e4f93fb0efeb28502a575d94bbf30e4a:1651276655,ae95f330e6eb2850195124c16bbf7d55:-462100539,8364b7bcbdab2850fbfddf7e687580a2:256920279,115c40b804232850c1183477545117c4:-1255463558,474b80f4422328509d269696e92b8fc9:340943639,80d5487891efe450671e0718b9dc66f9:100882704,dc2fb3e44dafe450c313c30cab4b9521:340943639,1f2bd7a003e7e450e6eb129df63cb2b4:100882704,2347d72809a7e450b1af51331bb6ec9a:668987982,d434136403a7e450786ef1ba30daa5e5:22389811,8362d36c0667e450e606de1d0fed92cd:667012180,b22c215405af6450cd40778e814ebf8e:1833007974,491ba9d04eaf6450a3bff18d4aa5c854:1827052757,2385a9dcdb6f645041aafb2b65708083:-1034692083,6af3695c546f6450cfeb59a611a82cea:618212707,90f2a1d82c6f6450daa19525e8f3aa8a:987303739,fbc305a70d1fe050a42e952e1d40137f:1833007974,efc470eb29dbe0505fa96e6c4b906f9d:-1416969524,b87914ab385be050fd5e0f557aaf7b9b:117290690,a45773d7fcd7e050ed9751160a9dbbd8:1912824130,b6367b57d0d7e050dc14e992f47a8f7f:-836145166,2fe4b757eed7e05070529c2f42af0735:-1258053161,c6c29fdf2117e0501ffd8693aae415e6:1659772540,d7dd4f976c17e0504b8c1e2a3b70fec1:-1280678162,33fb0f974217e050eaa9ee1d0299cc2b:-113263504,5a848b9b67d3e0505785827e25d3baff:1659772540,faf3c39bb0d3e0507162945b56e6e625:1493245432,b8d2c5d575dfe01034fc2d3e54575de4:158990900,809a7c1de91fe0102128764dca7dd8eb:834025564,b9ed9bc965df24503629bc7f741aebd1:-1993524322,64b8d789bfdba01036b2502b2c0ebf9d:-1915626394,bbdd9388a15f2450e65b1273479d3467:-141594718,93becf4c071f2450ff28c82bf47befd4:-1050357894,26f17a44dddb24507c6f4aa652eda058:1224266282,24448ebaa7cf2050d41d3bd8653ca0ec:1218027852,1e08766288cbac1083086ef2e1aaa936:-1936212047,ec194aaead0bac10ff520a2297801186:1739986338,838d084dd143281079ac392fd6cff77a:-1927416986,0d6ccc0d69432810c5633ca896acfbdf:911724301,fc93efbc1ccfe410e6b35bed6dd35ea3:554908490,43af97b892cfe410ac07c2d5a377a938:1472524450,f26d93345acfe4102a7645a71749e0b7:641264607,b62b17bc0e8fe410fbf8235e5b30a2a3:-631008750,46ca5bfcea8fe4100b53e4584f3088d1:733467951,779893bc868fe410329a4304c36475dd:-96592498,7d56dfb8418fe4100a134622b1f0f21c:2007383658,a4dc9c38c287e41056a7a8d6e7224d0b:-586159130,613adc743a87e4104cc68ece7ba2c209:-1475190068,d258b32c0cc3e4108a90204ad156188c:-886329138,65925ad0cd83a410fe02d069c36aca23:-305273394,ff487d98bb03a4105211c9208e116b75:1364124702,ff65f554a903a41066a05948e9db84ef:-980442061,d6747118fe03a410c555457408fe282a:-895676518,712f0598f08b64106dbb4264b101f5fd:1004114738,d2c691cca54be0107658ba5e0a8765bc:697515414,f4afbc88ee0be010b87459a5867f6a52:-1313523081,3dcdc8886107e0100313a90e7004002b:-564455622,7d523ffb3ab2e010c0acb8c8b59af4f8:440669397,862a8fbbb0bea010a627a3fe66541f17:1185386627,7289837f9bbea010447b6a21430ebe35:1117790567,18fdbc7f913aa010e5d49fc89cdaf187:-173041377,2b3a4dfe053ee4508d9d386aef728b50:429861134,4655c53ac73ee45006d10b55b1939580:-161288432,25adf8b2a73ee4502e41a54d8dd03a47:-478890791,0386b0b2bc3ee450deb6f19e1c469307:938936195,6023307ed9fae450dca129054dc8cdf2:-478890791,22a17cfa36fae45030f4ae11384943dc:-2097323161,f930343ac7fae450d4d51a270f7bd6ed:-1580751824,f725c4ba187ae450741531718b6f6c1a:-161288432,29fd33660b7ae450bcec80d14f5282a5:-914290836,38e9dad2ad3a6450fa340c0f764880f0:-161288432,6347569a3df664507579f137d74d3a28:-350190014,4306965ef8f66450044c423808fa187a:429942047,155871363d62e410be96e4af0745af83:550277159,b3b3713a0422e410036cbae8dadf1443:137480909,ed2291cb4ded241013131dfee3ed461b:1055099831,3953b9cef365a010879f0e61063d4c69:-1189841817,212d2cc80b332300b37707f308e476c1:1474472888,f59628442833230071a89ca6b270db68:1965922265,6ba2a04459332300ca516c1c7858641c:1972821307,d1f91d282127230047fb7bb529b251aa:1875771069,9eb751580623a300728067ec014302b1:735878130,b8bb45103323a300eeb03b9d3723b0a4:2106653218,5f29c95c80ef6300bd14f3f931fa2778:-1905033145,459e8c1c886f63001e5629fe3f399576:6470929,3441c0d0746f6300f6a24017558e6142:1065809142,e0e04490ea6f63009b31fe085a3eaac5:-1024757928,8b8f73c0506f6300fe2f5e3dd5f26376:1406690245,99661f48fdeb63007af502f7381a2bca:-2100029723,c2e17fd7a0fc60100b2c969d15cb9faa:-596981149,f8efe5de95c4a0106fd1b0496026b898:205606953,132e5d1234c4a010bf43a33447b8b39d:-960065880,67bb115eba84a010eadba7979b589813:-21633336,2217d5960b84a0107a5915252dc95b43:1740580877,a6235152e084a0103c33be1f72c3d471:1705107376,9100595a9144a01067ac626f449643cc:-1649855386,9f41499e6504a010f5dd1ee0e278f2bc:1265128700,79cdf146170c60102eeec4d465c7533c:1994581026,5ca73d8eeec86010251b88407087d45d:-1004091363,d7f4f1caa8c86010968c7995dc3be964:935160829,9542350ae5c860101e19fa5a820eefdc:-2130383463,786524427a846010479d5816caf764e5:511704233,14e4684a9844601081b0d4a5d7d885d7:871484670,fad9dc0a484460100bb8a798c573f3cb:-298300494,fcc8900a5744601023d143c315e5a286:1290917975,d9179446d0446010df7ea0068fd3c44b:405614430,b94558c2fb446010dcf7d4febd79b3c3:871484670,fc22d082784460103db73bb425fcf4ac:605359006,1dab840e81046010a1e5ec9fa8115a49:1393768782,c96868b9c1482010e244fd9ac1d53f2a:2121208221,a6981cf5f2482010e6d46b133ba1ba33:1050941749,9f3cc63c1d4e2b00438236adba734174:-1120900491,f7303320e1822b00177d2c1680536996:-1500211880,561ea7accf422b0027fe031da348653e:500570330,bb6d276c7f422b004f97230988beb4a8:-942158918,fe4a63e8c4422b00a591c7a2e5aeb8ad:-697012778,7ff910d4524ea70047ba5af7ca42c234:-1047898512,c41276e7e77d2700a63880e71adb3d79:-141350877,f60f995b8871e30086dbc880cf48b609:1513819955,79fcd9d77971e300fb4dcefdd37d2d70:1482287239,8939d113a371e300a34a11c1834498df:-534529906,d1786fe472422b002c6aeafe5bf5ee5e:-1040130432,6c536b6423422b006906a3929284b7c9:1886024193,8befd3e06c422b00145ece7eee2a5441:15587755,d41121d46542e7001a1b7f8a23aaafdc:-1800816530,c36f4c01c744a010bc272dec8b6d51b5:-1992233950,3248880d3b04a0103c45025bd26de8a7:-1833017365,e5ef7026ad6f54109779aa46c92e7e55:1616147809,3b597156de675410891a2698dcd4ca07:1468196792,3a2bad867d2b1410d9dac4514743f219:1772913191,feaaad86952b1410317f8f1d658bbcec:-1254919706,23abdcf57ce7d0103c5b5edb4a71aecf:1764433557,59ea94b5f8e7d010ea8299fd9e75887a:-753471165,93730c714ea7d01077140b51ed4d3cfe:-751229948,77330c71fea7d01062b3c14a819bdef8:542176913,2d6a3ba93b67d0101ce0751dc9ea10bb:1448084201,da653b658267d01034ab5c3def396063:542176913,473373254567d0105c3b1d5171ac2c28:1792133874,fb2cabadc727d010b24700d423a62928:-250492030,f5d6f9a5622f10108080bf8d18a618e1:-1645470349,4c138a5c86a758507f8695f2ca83325f:493161386,61eb4977269b50103dbf4b75ddab8a94:1504385365,3f160d33ba9b501032911850aafc408c:-914725237,60bbb4f7135b5010139930b83d0f207b:302458098,1313fc7f4b1b5010290277d3432a814d:-1911876119,2e4f24fb791b5010717da4595e2887eb:1219622821,e7335873bad750105bbe533f70a032da:-1485932751,e22272af6c53501074adbbd31a2402e1:-419111573,01cd622b425350104ca81c4ce6702148:2118911264,517f962f52135010fee974753b88da65:-1065961815,73fe802318db10109541fb8132f18c71:1216174146,338c8c2f2e9b1010c1e2abbabf9b4a9e:385987718,2b607c3f3d1bd450d6a922f1a4575363:1523216832,7549e03bb01bd45064bb456b3f447cac:-234921222,1ad5e477941bd4501fa785ac9534364f:-1592605335,7c9ed4bf0fd7d450b49787418fec7828:576627197,a18b44b31cd7d4502e49c3aec3e3b008:1688714709,29fc787908571410876a9e22fdf8619b:583337574,99ede14147d75010274002e989ce77dd:120880822,99ede14147d75010274002e989ce77dd:120880822,01c4a1c54a9750105fa35fd8aab0baed:439881143,a6ce9501d897501054a59a0567ac42d6:836513344,899170788d135c10d5b177180dc24a61:640050117,dd603cf4d0135c107aca48f5373ec5de:-303458123,6bf7acfc55df1c10154465dc91375f6c:-115022120,3c6fd87432df1c1034cc3d6d0bc942a0:1081999118,723c107081df1c10d6e31ff5f045018f:-870727260,481154b8dc9f1c100703c7b5d3372204:383365488,173ce7e407db1c106aece7ae472767cd:-567547525,e14a8b9c62db1010a496d2ed65c2661a:-91061928,cfc11b3708c754d0695e583e9a1918a5:-296104871,70ae3d3bb08354d04dc5edee7aa6e45f:441255059,574df1f7d58354d0c0a87f5fc3868668:956178587,390c75b7728354d02b5f307b64574dc2:-1351873308,c73bbd77228354d0991376a931dea14c:1256712282,c10a75379e8354d04a6e168264ee53e3:-2127086092,1265f1bfd34354d07cd8b3cd1f5603a6:-396219039,691135fbdf4354d030e5f154e3312d4f:-234903201,ec76a9f35d4354d09204d7795eb59f72:-1253139043,039421b32f4354d04cdc0ea92cadf628:940653822,f57cd1fb0b0354d01ae5d9eef3d0795f:-488094675,b8e81d3b830354d0388aec38e55e6c88:-2144132685,ca7919a7fd4714d0a64f271480dd6d24:685798717,d1e020639ac314d0b8fa09384f7d57a7:-2099009295,138fd02310c314d0c4fae880df0e7af0:143662967,88205f06054b10d0b02f1810216e66f8:685798717,743f8306de4b10d063c1848a76c48223:-1291645390,399dd5a99103dc905c9bf7235ce89294:-1207036688,917adde5a303dc90a297aa48f6d2d6b3:2003293769,818a706135cf9c90e0f083f40b1ba3fc:-2103326838,8625f82d4c8f9c902c6610f62a70f0c2:-597556588,7942f8a9498f9c90c8f22969c4bfff32:-1605008784,a37038e5508f9c90296d6d39246bcec8:-401960118,04703bf613fad4903275d5659ab8f81e:-1762417155,ff672fb249fad490bb798419c20f22c0:-1873121497,c91b6dbd377e14904c01cdd3bc83bba7:1359013221,d478a93d2d7e1490a5e60e247d60ead8:1501598115,e904a73e6eb61010292cfeacf87d2da1:155501108,65e363f62f7a1010d738833403ed3e39:427396727,477b67a9fa3a1490ceea85a2693eb5c7:155501108,e76827295a3a1490138aed134da9331b:-1899152686,8adf9b61ad3a14908310dc7b8eb34281:-507960406,935c832588f61490adb01dab256a0754:24904520,14fc54e1de321490c3a35897ea3410d8:716531111,3b6b98a12a3214908c1d64f25279bfcd:-1666429400,d34a58611f321490f4995223a831ad34:-1642306225,b4b810215d321490512818f65d9e6b48:1733716174,d2e294e999fed090afda973b9de8b327:1394301855,04d0dc29e6fed0904aa155090e148120:-144045150,53ac4ca561fed0908ee63f58961b82c7:-389488878,2f1cb71d0fbed0901ebbb3857d788e79:543662722,568af399c2bed09081b600760d227d5f:1661295588,04b83fd5c1bed090a8675be210ecfcc4:1656238787,886677551fbed090d38bbb607c9c5313:1305716251,7d033f15c1bed09072f7bf3fd5602837:-79049203,855233d1e6bed0909ccf5f9c9b59edab:309169823,1a4bd755167ed090c9b52697c8ba14fe:27088900,9bc65f11b87ed090eeb8bde59030ba98:1394301855,fb9357dde43ed09079265241c9c91ce0:-93387691,72547c6f11ae5850c13d1d49e56bdee6:1394301855,c96599512c62905024ae4b3d5ac373b7:-1669528031,b6a3059194229050763f555512b9180b:-284922511,aaa535a953a29050cf38ca1363487a01:1193455576,c2f100dd602e5050693b1f3752efd324:1322678583,ace193c1296a5050fca98491f73491de:-477761495,642e8b41956a50507dd22dc81afce3d1:-538805311,019c4301b46a50504bb9cb090e5cc219:1916441340,78e9074d172a5050e52ed589ee2ef167:1609290262,fc588b49a32a50500444c9f8296d7c2e:-2096700546,0d844b091e2a5050dd7f60d59ec39ddf:-79214327,632ef24d8de650506ed6fe3151f81c6d:-373439574,177ee0c525a250501b6d69f96c2d694d:-701988418,9d592441daa25050b68c7b0e79582b59:360210720,88be14c54f625050e61eb228012cedde:917309523,f670b4ddfb161410a0975df8f413d521:2077919840,7e0b2c1d0e1614105f3696393301aae3:-72533004,184046011d9ed010e300d102c32f301c:-715965028,90bbfdc9395ed010c2f3b1ff4867e8b3:-13659457,e6f9f189345ed0107b2951c1f7aa1c87:1064577111,0799f189fa5ed010972dd0e46f095156:-238330391,12d87d09b95ed0107cb4c4e459ab6075:1414545481,4c37f5c56c5ed010bd8dabe06e852117:-376272774,359e5145c11ed0107072abdb48059b84:278584425,baa7558deedad010a344a56537224e61:1488621107,2ce6558d37dad010fae6d242ae057895:251392005,ec35154d91dad010bb51f07f11512c3e:-901654972,ceae0509d5dad0103adabe44a034b08d:-1315935573,f1cb414588dad010370f04f3a46c057f:1921044531,689b05050adad010c542c02b395e323a:-1976106943,ce178101f0dad010e1c49ec8eba6c5bd:900685137,919fb405259ad01094991830f974b215:572694065,c3d82e5cad7954907f585133ac06cb4a:367926821,56b7661c56795490b0117f3b3e1cdbaa:-10997159,79b466580f795490100d42fe603dad5f:-1463756687,71d3a618ac795490143def04c2c9f999:578847982,fedada10827954900e92e8dc600bf822:1508533470,4184112da4709010023afd0e8912e206:-1304121442,59427715a97c5010253d3162c09cd605:1672077125,0e1c9bc9bd70501026072e2fce04603f:-1696037193,0ef9aac54ffc10109e275ed6d9537e16:-1510549871,16f1d768e9e45410bfef2650e98cae0b:-821684643,0bc5329450a814104c71f33c0add4964:1729157361,39a3ba5432a814103e75e7d88e0f250a:1134027802,9680b21090a81410979ddd72407eef45:1343230461,c26b715c286414101b04e2c8a3da224e:-792562923,cc36bd94f9641410b6794fd209216816:-1031812228,a3cc68845f28d010874bdc545005556f:-421654938,c390e300c6e51850f9c40065d2855311:-1246477275,1770e3002de518501ba21a66525fed1c:-613914437,8ecf1f8466a51850071322a05ae3ffaa:-1246477275,5117d6371719d45006ff80b04798badf:229974658,8da41be081201010ff90899edc1ca396:761914233,7f07f8fa45dcd01079a3f3e96b12d745:1441129369,cb571bceb1945410a6e0b100cfe9b914:1852015472,ef8f740a10d41410266d18df81bd2522:131914711,3a530b423958141033ddb9ff199c0ed9:500727157,0af643994f5c90103db93df66b009f72:264889966,1141c395ab5c9010601a618c416f46b1:207544514,3cd5e7bca3885c101981cc6b518ae787:-1002475025,f87e83bcd1485c106fc853b4069fe5b5:-1630455096,e7629104a804d81010c7420357e323ef:1232571184,f2885f7b8dff0010f0f3a43d2a66c0aa:1105432602,b97916b8726f4410582a64c64b2586be:-1630455096,b0fcdd68a8ef041039b79b64435ab3e4:341934940,6d2c596850ef0410e4c3fd677658d3a9:-1218067992,21a95960d5ef0410cb24b4ec8dc2077f:1375546830,bd074533dd4700108c5db65544c2a98f:-433684952,301205bb56070010a73148f05504d2f4:-3703672,35cbb03782070010d724eeea767f04d4:-564052287,3978fc3307070010aeaadefd5748a0e1:-1472079261,3d94fc7f56c300100ea708849661f7b2:1142192920,35fdacf34ec30010f13bc23dc7786c31:8974399,81aa607328c300101b7a0a9f00381787:758546023,401d1c77bd8300100935a707cf548edc:-384532710,784758bf914300100b10621c3bad7b2d:-36623750,e881dc3f5b430010b40038df400377c5:1295454032,c78e04bb8d4300101f50541e115bca71:-1754500143,e93d4c3b08430010979a7a125747f7f0:-379511406,f89c44f745430010282a6d4af79f7905:433066943,447b04f742430010440d885102beb3a7:1011731344,880bccb74b43001046edbc36bba4884d:734471731,e7aa4c773e430010b434c7ff4e7ef841:-1110072733,762900777c4300105510f1c6a5052abd:734471731,f2d7c4f3a3430010cafa4bd758fde0cb:1766667701,3f1740ff5e030010132172f97d67ca35:1753664431,5941c8bf6b03001054872b496434a21b:807302527,db80843f4b0300109d63fda06f10eca8:-263901409,417fffebf603001008a365b303f72de6:69598990,71aeb7eb860300106c7c8f4508fbc9a0:1753664431,01ad37ab88030010c986213bc115d3ca:-208832367,58dcfb6b86030010a34a81075873ef14:1766667701,121af7272a03001009ab9976cd6bed29:-1607519703,ce73a66bf8b68410e9c07000e02916c4:-57930953,d451222b26b6841087489011f30e75b6:-381101280,8c5f5e276ab68410ba39afede2446c7b:-890874136,9e1d5ae3e7b684100339bf7a01e6a43b:-620470049,c7a75a6fd5768410941b3dce833d748e:1469333225,9b259eebc47684107e1023cb1c6fbb9f:-524501578,732496eb97768410f484799f0a4f177a:-497400972,b113d2ab9d768410e35a8fe74fee1278:-1012912641,1e31126ba87684109d5c9a6d35c750c2:43925247,b7001267737684101d400a0775839730:-437178942,a766740e92fe40103e3f863adb2e9092:1268951249,04e1640e0dbe401011b7706344935cf8:-239240839,dd5a677dadba40106aa00f0d916864ac:1095057568,07c16f35cdfa40104f1c07a91c2ac52d:917203043,e3206b35bbfa40106647f348fc073487:-590043976,fb0c5f350cfa4010f0ba046b7baf427a:131038949,26a13befef028490634c7bb39cf479fc:1926821837,958353624a86c0901d328ed271e87b3e:-563937869,3367b59aed86809073bc8b46fa2ab99d:-830559596,f34cee14a72d841081df93c50e07e302:-237997336,8a98a8f6f41180105950414ef43f6161:953689350,5a5f95fee3510010e2cf4bbfd0370ae9:302572807,5a5f95fee3510010e2cf4bbfd0370ae9:302572807,7997ea43de790c10e3e092efabbbdd43:-1104788231,9187805286d14c10e8c3674e78911b9e:302572807,c935c012a6d14c108257a28113b72436:430891913,eb64c05e0a914c10fcf8adb691b397d9:571139561,18bc7bc24b914c10e90a4c1b56baea4f:1632915295,1580b706e2514c10855293d1569f7c7c:2094765251,4c7931e51cd5c8107848c21df6cc50fc:1556213633,ae2edd2dac55c810087e2268adea253e:1153012001,73e21dada115c8103cde317d94539d66:-997519306,c7a9091d2a5988108222b683ab5b63eb:1271438391,0285945970d58810d3b68004a6f0194f:-1745742247,1f63d05983d588102329be5ffaea2778:1732867349,da901cdd859588106707b9d3029e5040:2098909439,8c187da43a19081041b75e8aa4532f25:1690824889,6768f4e261b7b300ca3e73c0d7969871:325342875,d75c5e164cff7300ede4950da89a0a0f:-1320290326,c9f4565ea6bf7300667ee61596d6dd2e:2118546932,6e636e563d373300cba8a65445bef3a4:-655341986,86da0a9a44b33300e999508e4ea972ba:-1090911937,c61a3c46173373003dc1f013844f4ab8:324025723,3663f00267337300214186de493732b7:-845583615,00cfac0e65ff3300fce4d1c52e0b3625:-1129561287,85a13306daf7730025d253826e870827:392385327,84fb63ce0ab77300142ad6b13f628718:890990618,4ce26b42c2b77300a460ce607442cac2:1126117023,2e92e7029bb773001f29508d30e65998:-2065220906,2b316702a9b77300795ee4bbae32ac74:-661318934,063d8c11287b330010fb98d876606287:890154701,0a994f1ca33773009dd2c15cf28a73f5:1038442192,54e58f586a377300811a73c8cd304c56:-2039858672,4fd48b5820377300afc31fdd8668d423:-1938493409,470fe21c6fb3730034e4acd01adada0d:280064304,1f74e65c05737300f2a8b70948dcf622:141017344,92c2e65c1673730063873f246388b01c:678875932,deb09144a3bb7300118aa76ff67e1cba:280064304,ab809544febb73007fe599a694298a95:1494440481,dfee010475bb7300fbd0c7fe88ef533c:1381773573,5791e17b0d637300cb2c9a4ee9a92c3c:-1969894150,830d55b3d463730046ee46cc04b1c961:-669344185,c06452945d337300944c75a29cc639fd:907799312,dfdf3d40633733008df14512dcf03f91:50681350,921c69841cf3330099dd8a667db905e8:535357156,7741214016f33300def83efe3ed33dc8:863150788,18ac51c8feb33300a09410bd02542e0d:230182039,697bdd88a0b33300697bd2125a3dcb36:-1337519963,a84ba53926a33300209ddd97ff9de9bb:-1331551696,987e9db949633300bb915c9d87adb702:-1204987844,db2385a1cbe37300bc260a3783ac72ce:811441335,76da5021a2637300fce7e72131319331:1740202500,a6b59c2dac2373006f8fa06c237c209d:-985102419,b4ff8c69cd237300dee7521539b677ca:1945066666,243be34d00e33300c0aaad712704d52f:1044321641,45c8e74dcee33300d92e77bb6c43198c:1725016939,965e5bc5f3e33300497838e9132be89a:1753245222,d2a1ee7846a33300260bb049db96da53:364212093,6554e2e6fb13330010c64d50b684d29d:-1394626435,0466eb21e1173300acf1ece0e3649503:1778433155,100e33d0015b3300cf0383108c233e45:1131244627,21a4ff94c31b33005f5e71e277e08f3d:-1075620266,7b8b679c6e97330064b0a5bc09503000:1516109094,52daa39cfd9733007dc540e19f3108fe:672435482,34e807d315c3370001c7124391c75ce8:94759328,624c5adf838ff3005b7c8b421542b0ff:504857174,0ae4047ac9cb73001bc67b5f48adf4ba:-86295255,5b1d5f12cb0373002bce42d4de4ec0be:-1287143617,42bfbe864d073300d3182ca39c8555c1:701244212,5aa57a0e29c3330068d02bd7cdb59c17:1807279883,3629e602c9c3330087f57b72154d02ad:1347524982,65082ace6b833300f6f55144e80cf857:-677665913,62366e4e9e833300e82f42fcb4c19d8b:990937220,58d366cab5833300f29978cf0869ab05:-352350045,00285bc5df837300b103d9bc0c53c374:-778962601,a9a71bc561837300e1f09041c4d0628b:2037413206,2f7cc30dd2437300a9859a6c001ddb46:-219844982,9b847601b70373008cc393f96f5ec211:-1387136593,2a991e09b78f330011ffb80176730142:-906416427,99a71645b88f33002d76e4b04e332342:1958624469,f207da815f8f330077406a4957b2a567:257146343,93d356c1918f330072f0b781a7533953:106077413,9cd549f4cc433300b26b6d9d27428d37:-1369396865,f20097c8a6033300806c9230d8994b48:-448753601,589b4ab31e7233004fd3309efa27cf3c:1974094018,153f53baf57e730032caf64126d2bba7:33853828,e3ac537aa87e73003a0ddf3f4f89b550:138630921,d867a23ae2ba730077bb6386a0f2e6b5:1731138489,e127a23a7cba730034354c1e8cc3c5a4:1152582658,d7762eb690ba7300d0564000084b7de8:-49912054,2e0626be4d7a73000ba1ba01200b1c02:1678772428,e32bd6fea87a730012b35aeec0b25683:602055586,48fa96be7b7a73000a841e495a6d1e41:-1905818123,d08a5a7ece7a73003a4079f044589867:1904241583,26d9d67e3f7a7300ee6d7649ce64c53f:434135891,8b19563ebb7a730000cc17dbedda6b91:-94918848,f1526a6ebc327300a96bf74d00f8aa31:-1010189881,29b1e62ed532730001a493ac7dd34908:-817716970,3cd0eaea8e3273004fb99f65613fcd5c:-255171661,30502a6ac43273005d803d667dc3e5b5:-400456261,1a9eda2a4b327300e6f1192fbc649553:-255171661,07879aa2913273007c520a557343d775:498285572,40a512eed0fe3300d9d35170a14a5d28:1787849148,4a0b0eaa83fe33001122c54494ffa17a:-1822617279,dede39e2d5fe33002f5dcc97175a2197:1054489759,296ef9a2eefe33006edeb841972bc623:-887367164,91cd71a208fe330062a106165a031a5e:-1873449987,920d752282fe33005f747b201873198a:-1753676557,8c5c39eedcbe33004cb3a3127fb3acb0:1188112532,aaa98deeca3e3300b88c1d0338ea29e4:-376017060,2996c52e3c3e33007035eb85121a39d4:-1750782075,ff94c9ea813e33009e393373f3ba4cd6:2120070419,ea027f10ee1f3300e502b51b065e0a9a:-899913992,5c017310f71f33001e04f48a26d50ae8:-1432309888,4bc197908a9b3300e0a6475c8c66e716:-1678403529,d66e3ad4dd97330052bbd3bb66ab3414:-1138936593,5d54bdb3c2f6330019c8a5602c613a4e:1854812464,d70ec5b7977633009b7172a89393f0d3:203285200,3dac857742763300b6b410d94c00606d:1086779680,be5ff5cc9bf23700d40fd0154254b24c:-275912241,fdf61dc0eeb23700d5b0b00be92c2e3b:-1713452353,c993d900e3b2370067f8bbbb8d430d54:200946659,e49ec10c59723700bd152d48ae00e0c9:-1947942160</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_properties_bbb212901b83a4107f2a8515ec4bcbaf</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties"><sys_properties action="INSERT_OR_UPDATE"><choices/><description>Migration of 1.4.4 for 3.2 calm version</description><ignore_cache>true</ignore_cache><is_private>false</is_private><name>x_nuta2_nutanix_ca.1_4_4</name><read_roles>x_nuta2_nutanix_ca.calm_admin,x_nuta2_nutanix_ca.user</read_roles><suffix>x_nuta2_nutanix_ca.1_4_4</suffix><sys_class_name>sys_properties</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2021-03-18 11:50:08</sys_created_on><sys_id>bbb212901b83a4107f2a8515ec4bcbaf</sys_id><sys_mod_count>11</sys_mod_count><sys_name>x_nuta2_nutanix_ca.1_4_4</sys_name><sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_properties_bbb212901b83a4107f2a8515ec4bcbaf</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2021-05-11 13:22:12</sys_updated_on><type>string</type><value>0</value><write_roles/></sys_properties><sys_translated_text action="delete_multiple" query="documentkey=bbb212901b83a4107f2a8515ec4bcbaf"/></record_update>]]></payload>
<payload_hash>-1700800412</payload_hash>
<remote_update_set display_value="Nutanix Calm 1.4.4 Service Portal patch">05f5233707003010f76cfdac7c1ed0c0</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2021-05-18 07:53:49</sys_created_on>
<sys_id>c9f5233707003010f76cfdac7c1ed0c1</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1795ba05c760000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2021-05-18 07:53:49</sys_updated_on>
<table/>
<target_name>x_nuta2_nutanix_ca.1_4_4</target_name>
<type>System Property</type>
<update_domain>global</update_domain>
<update_guid>1bfd24b1d2c4b810c9ff9267bee60432</update_guid>
<update_guid_history>1bfd24b1d2c4b810c9ff9267bee60432:-1700800412,c6bea6ed4088f41087aaab30c151f1b3:-1680463037,f6aced193a00b4104b19fd585808a041:-1700800412,efb152cca604b01056ab84d3f9d01936:-1680463037,0b311e887404b0107fb5f9bcc281a9bd:-1700800412,bac76c73b8776010a4802f3c4616c7b6:-1680463037,ff3764735a77601055c6b561e3b3cac3:-1700800412,8846e833a5776010296c5085a94171fa:-1680463037,781c7030000be410e0672360b423b214:-1700800412,f1645214f583a410386a3c310ef9a25c:397221077,dc3312d00583a41008a4a231bf001290:-612748853,4013dad09483a4109732064e0d646ee0:143488782</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sc_cat_item_d4d3da7f37d12300fdfc097973990e11</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sc_cat_item"&gt;&lt;sc_cat_item action="INSERT_OR_UPDATE"&gt;&lt;access_type/&gt;&lt;active&gt;true&lt;/active&gt;&lt;availability&gt;on_desktop&lt;/availability&gt;&lt;billable&gt;false&lt;/billable&gt;&lt;category/&gt;&lt;cost&gt;0&lt;/cost&gt;&lt;custom_cart/&gt;&lt;delivery_plan/&gt;&lt;delivery_plan_script/&gt;&lt;delivery_time&gt;1970-01-03 00:00:00&lt;/delivery_time&gt;&lt;description&gt;&lt;![CDATA[&lt;p&gt;&lt;span style="font-size: 10pt; color: #000080;"&gt;Finally, a unique catalog item name needs to be specified in General Settings tab along with optional description.  This catalog item needs to be assigned to specific ServiceNow users or groups to provide right level of access of this catalog item.&lt;/span&gt;&lt;/p&gt;]]&gt;&lt;/description&gt;&lt;display_price_property&gt;non_zero&lt;/display_price_property&gt;&lt;entitlement_script/&gt;&lt;flow_designer_flow/&gt;&lt;group/&gt;&lt;hide_sp&gt;true&lt;/hide_sp&gt;&lt;icon/&gt;&lt;ignore_price&gt;true&lt;/ignore_price&gt;&lt;image/&gt;&lt;list_price&gt;0&lt;/list_price&gt;&lt;location/&gt;&lt;mandatory_attachment&gt;false&lt;/mandatory_attachment&gt;&lt;meta/&gt;&lt;mobile_hide_price&gt;false&lt;/mobile_hide_price&gt;&lt;mobile_picture/&gt;&lt;mobile_picture_type&gt;use_desktop_picture&lt;/mobile_picture_type&gt;&lt;model/&gt;&lt;name&gt;General Settings&lt;/name&gt;&lt;no_attachment_v2&gt;false&lt;/no_attachment_v2&gt;&lt;no_cart&gt;true&lt;/no_cart&gt;&lt;no_cart_v2&gt;false&lt;/no_cart_v2&gt;&lt;no_delivery_time_v2&gt;false&lt;/no_delivery_time_v2&gt;&lt;no_order&gt;true&lt;/no_order&gt;&lt;no_order_now&gt;false&lt;/no_order_now&gt;&lt;no_proceed_checkout&gt;false&lt;/no_proceed_checkout&gt;&lt;no_quantity&gt;true&lt;/no_quantity&gt;&lt;no_quantity_v2&gt;false&lt;/no_quantity_v2&gt;&lt;no_search&gt;false&lt;/no_search&gt;&lt;no_wishlist_v2&gt;false&lt;/no_wishlist_v2&gt;&lt;omit_price&gt;false&lt;/omit_price&gt;&lt;order&gt;0&lt;/order&gt;&lt;ordered_item_link/&gt;&lt;picture/&gt;&lt;preview&gt;JavaScript: popupOpenStandard("com.glideapp.servicecatalog_cat_item_view.do?v=1&amp;amp;sysparm_id=d4d3da7f37d12300fdfc097973990e11&amp;amp;sysparm_preview=true", "summary");&lt;/preview&gt;&lt;price&gt;0&lt;/price&gt;&lt;recurring_frequency/&gt;&lt;recurring_price&gt;0&lt;/recurring_price&gt;&lt;request_method/&gt;&lt;roles/&gt;&lt;sc_catalogs&gt;240abede37112300fdfc097973990e24&lt;/sc_catalogs&gt;&lt;sc_ic_item_staging/&gt;&lt;sc_ic_version/&gt;&lt;short_description/&gt;&lt;show_variable_help_on_load&gt;false&lt;/show_variable_help_on_load&gt;&lt;start_closed&gt;false&lt;/start_closed&gt;&lt;sys_class_name&gt;sc_cat_item&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-29 00:18:00&lt;/sys_created_on&gt;&lt;sys_id&gt;d4d3da7f37d12300fdfc097973990e11&lt;/sys_id&gt;&lt;sys_mod_count&gt;11&lt;/sys_mod_count&gt;&lt;sys_name&gt;General Settings&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sc_cat_item_d4d3da7f37d12300fdfc097973990e11&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;priyanka.more&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-05-05 13:25:17&lt;/sys_updated_on&gt;&lt;template/&gt;&lt;type&gt;item&lt;/type&gt;&lt;use_sc_layout&gt;false&lt;/use_sc_layout&gt;&lt;vendor/&gt;&lt;visible_bundle&gt;true&lt;/visible_bundle&gt;&lt;visible_guide&gt;true&lt;/visible_guide&gt;&lt;visible_standalone&gt;true&lt;/visible_standalone&gt;&lt;workflow display_value="Nutanix_Configure Calm BP Setting Workflow"&gt;68b660d837256300fdfc097973990e97&lt;/workflow&gt;&lt;/sc_cat_item&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=d4d3da7f37d12300fdfc097973990e11"/&gt;&lt;fx_price action="delete_multiple" query="id=d4d3da7f37d12300fdfc097973990e11"/&gt;&lt;fx_price action="INSERT_OR_UPDATE"&gt;&lt;amount&gt;0&lt;/amount&gt;&lt;currency display_value="USD"&gt;USD&lt;/currency&gt;&lt;field&gt;price&lt;/field&gt;&lt;id&gt;d4d3da7f37d12300fdfc097973990e11&lt;/id&gt;&lt;parent/&gt;&lt;reference_amount&gt;0&lt;/reference_amount&gt;&lt;reference_currency display_value="USD"&gt;USD&lt;/reference_currency&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-29 00:18:00&lt;/sys_created_on&gt;&lt;sys_id&gt;09e3da7f37d12300fdfc097973990e2a&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;girishgyani&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-10-29 00:18:00&lt;/sys_updated_on&gt;&lt;table&gt;sc_cat_item&lt;/table&gt;&lt;type&gt;calculated&lt;/type&gt;&lt;/fx_price&gt;&lt;fx_price action="INSERT_OR_UPDATE"&gt;&lt;amount&gt;0&lt;/amount&gt;&lt;currency display_value="USD"&gt;USD&lt;/currency&gt;&lt;field&gt;recurring_price&lt;/field&gt;&lt;id&gt;d4d3da7f37d12300fdfc097973990e11&lt;/id&gt;&lt;parent/&gt;&lt;reference_amount&gt;0&lt;/reference_amount&gt;&lt;reference_currency display_value="USD"&gt;USD&lt;/reference_currency&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-29 00:18:00&lt;/sys_created_on&gt;&lt;sys_id&gt;41e3da7f37d12300fdfc097973990e2c&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;girishgyani&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-10-29 00:18:00&lt;/sys_updated_on&gt;&lt;table&gt;sc_cat_item&lt;/table&gt;&lt;type&gt;calculated&lt;/type&gt;&lt;/fx_price&gt;&lt;/record_update&gt;</payload>
<payload_hash>176084983</payload_hash>
<remote_update_set display_value="Nutanix Calm 1.4.4 Service Portal patch">05f5233707003010f76cfdac7c1ed0c0</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2021-05-18 07:53:49</sys_created_on>
<sys_id>cdf5233707003010f76cfdac7c1ed0c0</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1795ba05b740000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2021-05-18 07:53:49</sys_updated_on>
<table/>
<target_name>General Settings</target_name>
<type>Catalog Item</type>
<update_domain>global</update_domain>
<update_guid>062531bbb03b60105ca83f8fcf828d55</update_guid>
<update_guid_history>062531bbb03b60105ca83f8fcf828d55:176084983,8a1531bbd63b6010722b269dd409834e:-1837929268,31fc725c07a81410d88b59b0bea799fe:-30974113,4782c2228b57b300658152f2c4aa93bd:1454926521,29127026e1132300af8fb583190ba745:-104254999,29a13ce247132300ce33ecac1b409b19:1793299681,178c2af16222230056513f3509f22591:1274952420,335cdfd36d79e3002cedf5d914392d5e:-1601554982,436350c9f2a123001e0debc4c71511e6:-414505272,082cb9dc9a6963008c178120a392383a:1994684070,45e316ff29d123002dbbc9e5e8c5e14f:-1908565505</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
</unload>
