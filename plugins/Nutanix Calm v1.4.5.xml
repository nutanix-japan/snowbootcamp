<?xml version="1.0" encoding="UTF-8"?><unload unload_date="2022-01-03 07:26:36">
<sys_remote_update_set action="INSERT_OR_UPDATE">
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<application_name>Nutanix Calm</application_name>
<application_scope>x_nuta2_nutanix_ca</application_scope>
<application_version>1.1.2</application_version>
<collisions/>
<commit_date/>
<deleted/>
<description/>
<inserted/>
<name>Nutanix Calm v1.4.5 Complete Build</name>
<origin_sys_id/>
<parent display_value=""/>
<release_date/>
<remote_base_update_set display_value=""/>
<remote_parent_id/>
<remote_sys_id>d43df77d1bb0011081326464604bcb91</remote_sys_id>
<state>loaded</state>
<summary/>
<sys_class_name>sys_remote_update_set</sys_class_name>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-01-03 07:26:35</sys_created_on>
<sys_id>346d737d1bb0011081326464604bcb11</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-01-03 07:26:35</sys_updated_on>
<update_set display_value=""/>
<update_source display_value=""/>
<updated/>
</sys_remote_update_set>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_security_acl_6211655cdb5623000462fe1b68961938</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_security_acl"><sys_security_acl action="INSERT_OR_UPDATE"><active>false</active><admin_overrides>true</admin_overrides><advanced>false</advanced><condition/><description/><name>sysauto_script</name><operation display_value="write">write</operation><script/><sys_class_name>sys_security_acl</sys_class_name><sys_created_by>girishgyani</sys_created_by><sys_created_on>2018-12-06 16:40:50</sys_created_on><sys_id>6211655cdb5623000462fe1b68961938</sys_id><sys_mod_count>3</sys_mod_count><sys_name>sysauto_script</sys_name><sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_security_acl_6211655cdb5623000462fe1b68961938</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2021-08-05 12:30:09</sys_updated_on><type display_value="record">record</type></sys_security_acl></record_update>]]></payload>
<payload_hash>-494294284</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.4.5 Complete Build">346d737d1bb0011081326464604bcb11</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-01-03 07:26:35</sys_created_on>
<sys_id>306d737d1bb0011081326464604bcb14</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17e1ed24d690000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-01-03 07:26:35</sys_updated_on>
<table>sysauto_script</table>
<target_name>sysauto_script</target_name>
<type>Access Control</type>
<update_domain>global</update_domain>
<update_guid>dbcad79543313010bbd916f79a7168ba</update_guid>
<update_guid_history>dbcad79543313010bbd916f79a7168ba:-494294284,267adb55423130108b35e531a13d7cde:-581367795,2f5a3316bea1301004a22f7c65067405:-494294284,7c41295c83562300574426ba095598d3:1128399877</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_caeab4864f337300d8494ebf9310c73e</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;public&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Migration_Script&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;true&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Migration_Script&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Migration_Script = Class.create();
Migration_Script.prototype = {
	initialize: function() {
		this.appUtil = new Nutanix_Calm_Utils();
        this.logger = new Nutanix_Calm_Logger();
        this.createVariable = new Nutanix_CreateCatalogVariables();
        this.appScriptInstance = new Nutanix_ImportApplicationProfiles();
    },
	checkForTheRuntimeConfigurationsCatalogItems: function() {
        try {
			var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
			gr.query();
			if (gr.hasNext() &amp;&amp; (gs.getProperty('x_nuta2_nutanix_ca.1_4_5') == '0')) {
            this.logger.info("Migration to V 1_4_5 require");
            return true;
        }
        this.logger.info("Migration to V 1_4_5 not require");
		gs.setProperty("x_nuta2_nutanix_ca.1_4_5","1");
        return false;
        } catch (e) {
			this.logger.error("Exception caught inside Migration_script.checkForTheRuntimeConfigurationsCatalogItems() Error : - " + e);
        }
    },
    updateTheFetchOnChangeClientScripts: function() {
        try {
			var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
			gr.query();
			while(gr.next()) {//nameINFetch dependencies on change of profile,On Change of Environment variable
				var catalogScriptGR = new GlideRecord('catalog_script_client');
                catalogScriptGR.addQuery('cat_item', gr.item_name + '');
				catalogScriptGR.addEncodedQuery('nameINFetch values OnChange,On Change of Environment variable,Fetch dependencies on change of profile,Fetch form data on change of profile,Hide Order details on request');
				catalogScriptGR.query();
				
				var catalogClientScript = new sn_sc.CatalogClientScript();
				var fieldList = [];
				var envFieldSysID;
				var profilesysID;
				var fetchformSysID ;
                while (catalogScriptGR.next()) {
					var field = (catalogScriptGR.cat_variable + '').replace("IO:", '');
					catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					if(catalogScriptGR.name + '' == 'Fetch values OnChange' &amp;&amp; fieldList.indexOf(field) == -1)
						fieldList.push(field);
					else if(catalogScriptGR.name + '' == 'On Change of Environment variable')
						envFieldSysID = field;
					else if(catalogScriptGR.name + '' == 'Fetch dependencies on change of profile')
						profilesysID = field;
					else if(catalogScriptGR.name + '' == 'Fetch form data on change of profile')
						fetchformSysID = field;
						
				}
				
				var fieldListLength = fieldList.length;
				while(fieldListLength--){
						var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                        onChangecatalogClientScript.setAttributes({
                        "name": "Fetch values OnChange",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item":  gr.item_name + '',
                        "cat_variable": "IO:" + fieldList[fieldListLength],
                        "active": true,
                        "order": 1000,
                        "description": "This script is auto created thorugh runtime module for fetching values.",
                        "applies_catalog": "true",
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,
                    });
                    onChangecatalogClientScript.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) {if (!sessionStorage['varValues']) return;var varValues = JSON.parse(sessionStorage['varValues']);oldValue = varValues[control.id + ''];if (isLoading || newValue == '' || oldValue + '' == newValue + '') {    new GlideModal().get('loader').destroy();return;}function varResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service; var var_array = [];for (var i in prof_json) {if (i + '' == control.id + '')continue;var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);varValues['IO:' + i] = curr_value + '';var parsed_field = JSON.parse(field);parsed_field.def_val = parsed_field.value + '';parsed_field.value = curr_value, parsed_field.sys_id = i + '', var_array.push(parsed_field);} getAdvancedVars(var_array);for (var j in serv_json) {var_array = [];for (var k in serv_json[j]) {if (control.id + '' == k) {continue;}var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);varValues['IO:' + k] = curr_value + '';var parsed_field = JSON.parse(field);parsed_field.def_val = parsed_field.value + '';parsed_field.value = curr_value, parsed_field.sys_id = k + '', var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(varValues);}function getAdvancedVars(variable_json) {var act_var_JSON = JSON.stringify(variable_json);var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name', 'variableArrayParser'),gajax.addParam('sysparm_field', control.id +''), gajax.addParam('sysparm_type', 'catalog'), gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + ''),gajax.addParam('sysparm_varJson', act_var_JSON), gajax.getXML(getVarResponse);}function getVarResponse(response) { new GlideModal().get('loader').destroy();var answer = response.responseXML.documentElement.getAttribute('answer');if (answer + '' == '' || answer + '' == 'undefined' || answer + '' == 'null') return;var parsedResponse = JSON.parse(answer);for (var i in parsedResponse) {var row = parsedResponse[i]; var sys_id = 'IO:' + row.sys_id;if (control.id + '' == sys_id) {continue;}var type = row.type + '';if (row.state == 'SUCCESS' &amp;&amp; (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET')) {g_form.clearOptions(sys_id);for (var k = 0; k &lt; row.value.length; k++) g_form.addOption(sys_id + '', row.value[k], row.value[k]);g_form.setValue(sys_id, row.value);} else {if (row.data_type + '' != 'BASE') {g_form.clearOptions(sys_id);for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + '', row.options[k], row.options[k]);}g_form.setValue(sys_id, row.value);}if (row.state == 'ERROR') {g_form.clearOptions(sys_id); g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}}}var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching variables...'); loadingDialog.renderWithContent(''+loadingHTML);var cat_sys_id = g_form.getUniqueValue();var profile = g_form.getValue('default_profile').trim();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars'), ga.addParam('sysparm_catsysid', cat_sys_id), ga.addParam('sysparm_profile', profile), ga.getXML(varResponse, null, loadingDialog);}";
					onChangecatalogClientScript.addScript(onChangeScript);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
					var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(OnChangeCatalogScriptId)) {
                        grChange.setValue("sys_scope", "global");
                        grChange.update();
                    }
				}
				
				//environment..
				var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                        onChangecatalogClientScript.setAttributes({
                        "name": "On Change of Environment variable",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item":  gr.item_name + '',
                        "cat_variable": "IO:" + envFieldSysID,
                        "active": true,
                        "order": 1000,
                        "description": "This script is auto created thorugh runtime module for fetching values.",
                        "applies_catalog": "true",
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,
                    });
                    onChangecatalogClientScript.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading){if (isLoading || newValue == '') {return;} var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\";var loadingDialog = new GlideModal('environment_loader', true);loadingDialog.setTitle('Fetching Profiles...');loadingDialog.renderWithContent('' + loadingHTML);var gUrl = new GlideURL();gUrl.setFromCurrent();var def_project;for (var i = 0; i &lt; g_form.getControl('default_project').options.length; i++){if (g_form.getControl('default_project').options[i].value == g_form.getValue('default_project')) {def_project = g_form.getControl('default_project').options[i].innerText;break;}}var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchProfilesBasisOnEnvironment');ga.addParam('sysparm_env', g_form.getValue('default_environment'));ga.addParam('sysparm_proValue', g_form.getValue('default_project'));ga.addParam('sysparm_pro', def_project + '');ga.addParam('sysparm_profile', gUrl.getParam('profileSysId'));ga.addParam('sysparm_blueprint', gUrl.getParam('uuid'));ga.addParam('sysparm_type', gUrl.getParam('type'));ga.getXML(parseData);function parseData(response) {var answer = response.responseXML.documentElement.getAttribute('answer');jslog(' On Change of Environment variable answer' + answer);answer = JSON.parse(answer);if (answer.length == 0) {g_form.hideFieldMsg('default_profile', true); g_form.clearOptions('default_profile');g_form.showFieldMsg('default_profile', 'There are no applicable Profile(s) that match the selected Environment.  Please choose a different Environment to proceed.');var elemen = g_form.elements;for (var i in elemen) {g_form.setDisplay(elemen[i].fieldName, false);}g_form.setDisplay('default_profile', true);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setMandatory('default_profile', true);}else{var elemen = g_form.elements;for (var i in elemen) {g_form.setDisplay(elemen[i].fieldName, true);}g_form.hideFieldMsg('default_profile', true);g_form.clearOptions('default_profile');for (var i = 0; i &lt; answer.length; i++) {g_form.addOption('default_profile', answer[i], answer[i]);}if (answer.length == 1) {g_form.setReadOnly('default_profile', true);}}new GlideModal().get('environment_loader').destroy();new GlideModal().get('environment_loader').destroy();new GlideModal().get('environment_loader').destroy();}}";
					onChangecatalogClientScript.addScript(onChangeScript);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(OnChangeCatalogScriptId)) {
                        grChange.setValue("sys_scope", "global");
                        grChange.update();
                    }
				
				//Profile..
				
				var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                        onChangecatalogClientScript.setAttributes({
                        "name": "Fetch dependencies on change of profile",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item":  gr.item_name + '',
                        "cat_variable": "IO:" + profilesysID,
                        "active": true,
                        "order": 1000,
                        "description": "This script is auto created thorugh runtime module for fetching values.",
                        "applies_catalog": "true",
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,
                    });
                    onChangecatalogClientScript.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + '').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchLaunchVars'); ga.addParam('sysparm_catsysid', cat_sys_id); ga.addParam('sysparm_profile', profile); ga.getXML(varResponse);}function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); console.log(answer); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue('IO:' + i); var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value = curr_value; parsed_field.sys_id = i + ''; sess_json['IO:' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue('IO:' + k); var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value = curr_value; parsed_field.sys_id = k + ''; sess_json['IO:' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage['varValues'] = JSON.stringify(sess_json);}function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); gajax.addParam('sysparm_name', 'variableArrayParser'); gajax.addParam('sysparm_type', 'catalog'); gajax.addParam('sysparm_field', 'onLoad');gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + ''); gajax.addParam('sysparm_varJson', act_var_JSON); gajax.getXML(getVarResponse);}function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) {var row = parsedResponse[i]; var sys_id = 'IO:' + row.sys_id; var type = row.type + ''; if (row.state == 'SUCCESS' &amp;&amp; (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET')) {g_form.clearOptions(sys_id);for (var k = 0; k &lt; row.value.length; k++) g_form.addOption(sys_id + '', row.value[k], row.value[k]);g_form.setValue(sys_id, row.value);} else {if (row.data_type + '' != 'BASE') {g_form.clearOptions(sys_id);for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + '', row.options[k], row.options[k]);}g_form.setValue(sys_id, row.value);}if (row.state == 'ERROR') {g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}}new GlideModal().get('variables_loader').destroy(); }";
					onChangecatalogClientScript.addScript(onChangeScript);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(OnChangeCatalogScriptId)) {
                        grChange.setValue("sys_scope", "global");
                        grChange.update();
                    }
				
				//formDataDisplay
				
					var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                        onChangecatalogClientScript.setAttributes({
                        "name": "Fetch form data on change of profile",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item":  gr.item_name + '',
                        "cat_variable": "IO:" + fetchformSysID,
                        "active": true,
                        "order": 1000,
                        "description": "This script is auto created thorugh runtime module for fetching values.",
                        "applies_catalog": "true",
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,
                    });
                    onChangecatalogClientScript.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading ) { return; } if(newValue == '') return; var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; } g_form.setMandatory(flds[i].prettyName, false); g_form.setDisplay(flds[i].prettyName, false); } g_form.setVariablesReadOnly(true); g_form.setDisplay('provider_icons', false); g_form.setReadOnly('default_project', false); g_form.setReadOnly('default_app_name', false); g_form.setReadOnly('default_profile', false); g_form.setDisplay('default_project', true); g_form.setDisplay('default_app_name', true); g_form.setDisplay('default_profile', true);g_form.setMandatory('default_profile', true); g_form.setDisplay('default_environment', true); g_form.setReadOnly('default_environment', false); var profile = newValue; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchOrderFormData'); ga.addParam('sysparm_profile', profile); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } var nameTypeMap = {}; var flds = g_form.nameMap; for (var i in flds) { nameTypeMap[flds[i].prettyName + ''] = fldType[flds[i].realName + ''] + ''; } var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf('cluster_name') == -1) { if (nameTypeMap[i + ''] + '' == 'masked') { fielVal[i] = parsed[i].value; g_form.setValue(i + '', ''); } else { g_form.setValue(i + '', parsed[i].value + ''); } g_form.setReadOnly(i + '', parsed[i].readOnly + ''); g_form.setDisplay(i + '', !parsed[i].readOnly); } else { g_form.setDisplay(i + '', !parsed[i].readOnly); g_form.setReadOnly(i + '', true); } } sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal); new GlideModal().get('loader').destroy(); var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchCredentialsList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var credArr = {}; var parsed = JSON.parse(answer); for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + '').toLowerCase().replace(/ /g, '_'); g_form.setValue(name + '_credential_name', credential.name + ''); g_form.setReadOnly(name + '_credential_name', true); g_form.setValue(name + '_secret_type', credential.type + '', (credential.type + '' == 'KEY') ? 'SSH Private Key' : 'Password'); g_form.setReadOnly(name + '_secret_type', true); g_form.setValue(name + '_username', credential.username.value); g_form.setReadOnly(name + '_username', credential.username.readOnly); g_form.setDisplay(name + '_username', !credential.username.readOnly); if ((credential.type == 'KEY')) { g_form.setValue(name + '_ssh_private_key', credential.ssh_private_key.value); g_form.setReadOnly(name + '_ssh_private_key', credential.ssh_private_key.readOnly); g_form.setValue(name + '_passphrase', credential.passphrase.value); g_form.setReadOnly(name + '_passphrase', credential.passphrase.readOnly); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_ssh_private_key', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + '_passphrase', !credential.passphrase.readOnly); } else { g_form.setValue(name + '_password', ''); credArr[name + '_password'] = credential.password.value; g_form.setReadOnly(name + '_password', credential.password.readOnly); g_form.setDisplay(name + '_password', !credential.password.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); } g_form.setDisplay(name + '_credential_reference', 'false'); if (credential.credential_reference &amp;&amp; credential.credential_reference.name) { g_form.setDisplay(name + '_credential_reference', 'true'); g_form.addOption(name + '_credential_reference', credential.credential_reference.uuid + '', credential.credential_reference.name + ''); g_form.setReadOnly(name + '_credential_reference', credential.credential_reference.readOnly); g_form.setDisplay(name + '_credential_reference', !credential.credential_reference.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_secret_type', 'false'); } } sessionStorage['credentials_' + g_form.getUniqueValue()] = JSON.stringify(credArr); new GlideModal().get('loader').destroy(); } }}";
					onChangecatalogClientScript.addScript(onChangeScript);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(OnChangeCatalogScriptId)) {
                        grChange.setValue("sys_scope", "global");
                        grChange.update();
                    }
				
				
		//onload
				
			var onLoadCatalogClientScriptGR = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScriptGR.setAttributes({
                    "name": "Hide Order details on request",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": gr.item_name + '',
                    "active": true,
                    "order": 10,
                    "description": "Hide values on request details.",
                    "applies_catalog": "false",
                    "ui_type": "0",
                    "applies_req_item": "true",
                    "applies_sc_task": "false"
                });
                onLoadCatalogClientScriptGR.appliesToCatalogItem(false);
                onLoadCatalogClientScriptGR.appliesToRequestedItem(true);
               var onLoadScriptHide = "function onLoad() {if(g_form.getTableName() + '' == 'sc_req_item') {var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;}g_form.setMandatory(flds[i].prettyName,false);g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'false');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_environment', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = g_form.getValue('default_profile') + '';var cat_sys_id = g_form.getValue('cat_item') + '';var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile + '');ga.addParam('sysparm_catSysID', cat_sys_id + '');ga.getXML(parseResponse);} function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var nameTypeMap = {};var flds = g_form.nameMap;for (var i in flds) {nameTypeMap[flds[i].prettyName + ''] = fldType[flds[i].realName + ''] + '';}var fielVal = {};var parsed = JSON.parse(answer);for (var i in parsed) {if (i.indexOf('cluster_name') == -1) {if (nameTypeMap[i + ''] + '' == 'masked') {fielVal[i] = parsed[i].value;g_form.setValue(i + '', '');}g_form.setReadOnly(i + '', true); g_form.setDisplay(i + '', !parsed[i].readOnly);} else {g_form.setDisplay(i + '', !parsed[i].readOnly);g_form.setReadOnly(i + '', true);}}sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);}}";
                onLoadCatalogClientScriptGR.addScript(onLoadScriptHide);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScriptGR.create();
				 var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onLoadCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "global");
                        grChange.update();
                    }
		}
            gs.setProperty("x_nuta2_nutanix_ca.1_4_5","1");
      } catch (e) {
				this.logger.error("Exception caugh inside Migration_script.updateTheFetchOnChangeClientScripts() Error : - " + e);
        }
    },
    addEnvironmentVariableToAllCatalogs: function() {
    try {
		if((parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2")) &amp;&amp; (gs.getProperty('x_nuta2_nutanix_ca.1_4_4') == '0') ){
			
			var mpi_cat_item = new GlideRecord('x_nuta2_nutanix_ca_nutanix_marketplaceitems');
			mpi_cat_item.query();
			while(mpi_cat_item.next()){
				var grItem = new GlideRecord("item_option_new");
				grItem.addQuery('name','default_environment');
				grItem.addQuery('cat_item',mpi_cat_item.sys_id + "");
				grItem.query();
				if(!grItem.hasNext()){
					grItem.initialize();
					grItem.type = 5;
					grItem.cat_item = mpi_cat_item.sys_id + "";
					grItem.active = true;
					grItem.question_text = 'Environment';
					grItem.name = 'default_environment';
					grItem.order = 2;
					var env_SysID = grItem.insert();  
				}
			}
			
			var bp_cat_item = new GlideRecord('x_nuta2_nutanix_ca_nutanix_blueprint');
			bp_cat_item.query();
			while(bp_cat_item.next()){
				var grItem = new GlideRecord("item_option_new");
				grItem.addQuery('name','default_environment');
				grItem.addQuery('cat_item', bp_cat_item.sys_id + "");
				grItem.query();
				if(!grItem.hasNext()){
					grItem.initialize();
					grItem.type = 5;
					grItem.cat_item = bp_cat_item.sys_id + "";
					grItem.active = true;
					grItem.question_text = 'Environment';
					grItem.name = 'default_environment';
					grItem.order = 2;
					var env_SysID = grItem.insert();
				}
			}
			

			var cat_items = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
			cat_items.query();
			while (cat_items.next()) {
				var grItem = new GlideRecord("item_option_new");
				grItem.initialize();
				grItem.type = 5;
				grItem.cat_item = cat_items.item_name + "";
				grItem.active = true;
				grItem.question_text = 'Environment';
				grItem.name = 'default_environment';
				grItem.order = 2;
				grItem.sys_scope = "global";
				var env_SysID = grItem.insert();



				//Creating new scripts:
				var projectSysID = "";
				var profileSysID = "";
				var app_name_SysID = "";
				var env_variable_SysID = "";
				var grItemProf = new GlideRecord("item_option_new");
				grItemProf.addQuery("cat_item", cat_items.item_name);
				var qc = grItemProf.addQuery("name", "default_project");
				qc.addOrCondition('name', 'default_profile');
				qc.addOrCondition('name', 'default_app_name');
				qc.addOrCondition('name', 'default_environment');
				grItemProf.query();

				while (grItemProf.next()) {
					if (grItemProf.name + '' == "default_project")
						projectSysID = grItemProf.sys_id + "";
					if (grItemProf.name + '' == "default_profile")
						profileSysID = grItemProf.sys_id + "";
					if (grItemProf.name + '' == "default_app_name")
						app_name_SysID = grItemProf.sys_id + "";
					if (grItemProf.name + '' == "default_environment")
						env_variable_SysID = grItemProf.sys_id + "";
				}
	//             gs.info("**************** projectSysID " + projectSysID + " profileSysID " + profileSysID);


				var onChangeCatalogProject = new sn_sc.CatalogClientScript();
				onChangeCatalogProject.setAttributes({
					"name": "On Change of Project",
					"type": "onChange",
					"applies_to": "item",
					"cat_item": cat_items.item_name + '',
					"cat_variable": "IO:" + projectSysID,
					"active": true,
					"order": 700,
					"description": "This script is auto created thorugh runtime module for getting variables on change of project.",
					"applies_catalog": true,
					"ui_type": "0",
					"applies_req_item": false,
					"applies_sc_task": false,

				});
				onChangeCatalogProject.appliesToCatalogItem(true);
				var onChangeProjectScript = "function onChange(control, oldValue, newValue, isLoading){if (isLoading || newValue == ''){return;}var project = g_form.getValue('default_project');var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchEnvironments');ga.addParam('sysparm_project', project);ga.getXML(parseResponse);function parseResponse(response){var answer = response.responseXML.documentElement.getAttribute('answer');var result = JSON.parse(answer);if (result.length == 0) {g_form.hideFieldMsg('default_environment', true);g_form.clearOptions('default_environment');g_form.showFieldMsg('default_environment', 'This Project has no valid Environments configured, you cannot proceed with the launch.  Please contact your administrator'); g_form.hideFieldMsg('default_profile', true);g_form.clearOptions('default_profile');g_form.setMandatory('default_profile', true);g_form.showFieldMsg('default_profile', 'There are no applicable Profile(s) that match the selected Environment.  Please choose a different Environment to proceed.');var elemen = g_form.elements;for (var i in elemen) { g_form.setDisplay(elemen[i].fieldName, false);} g_form.setDisplay('default_profile', true);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setMandatory('default_profile', true);}else{g_form.clearMessages();g_form.clearOptions('default_environment');for (var i = 0; i &lt; result.length; i++){var jsonObj = result[i];g_form.addOption('default_environment', jsonObj.UUID + '', jsonObj.Name + '');}}}}";
				onChangeCatalogProject.addScript(onChangeProjectScript);
				var OnChangeCatalogScriptId = onChangeCatalogProject.create();
				var gr = new GlideRecord('catalog_script_client');
				if (gr.get(OnChangeCatalogScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
	//             gs.info("catalog client script  71 " + OnChangeCatalogScriptId);
			


				var onChangeCatalogEnvironment = new sn_sc.CatalogClientScript();
				onChangeCatalogEnvironment.setAttributes({
					"name": "On Change of Environment variable",
					"type": "onChange",
					"applies_to": "item",
					"cat_item": cat_items.item_name + '', 
					"cat_variable": "IO:" + env_variable_SysID,
					"active": true,
					"order": 700,
					"description": "This script is auto created thorugh runtime module for getting variables on change of project.",
					"applies_catalog": true,
					"ui_type": "0",
					"applies_req_item": false,
					"applies_sc_task": false,

				});
				onChangeCatalogEnvironment.appliesToCatalogItem(true);
				var onChangeEnvironmentScript = "function onChange(control, oldValue, newValue, isLoading){if (isLoading || newValue == '') {return;} var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\";var loadingDialog = new GlideModal('environment_loader', true);loadingDialog.setTitle('Fetching Profiles...');loadingDialog.renderWithContent('' + loadingHTML);var gUrl = new GlideURL();gUrl.setFromCurrent();var def_project;for (var i = 0; i &lt; g_form.getControl('default_project').options.length; i++){if (g_form.getControl('default_project').options[i].value == g_form.getValue('default_project')) {def_project = g_form.getControl('default_project').options[i].innerText;break;}}var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchProfilesBasisOnEnvironment');ga.addParam('sysparm_env', g_form.getValue('default_environment'));ga.addParam('sysparm_proValue', g_form.getValue('default_project'));ga.addParam('sysparm_pro', def_project + '');ga.addParam('sysparm_profile', gUrl.getParam('profileSysId'));ga.addParam('sysparm_blueprint', gUrl.getParam('uuid'));ga.addParam('sysparm_type', gUrl.getParam('type'));ga.getXML(parseData);function parseData(response) {var answer = response.responseXML.documentElement.getAttribute('answer');jslog(' On Change of Environment variable answer' + answer);answer = JSON.parse(answer);if (answer.length == 0) {g_form.hideFieldMsg('default_profile', true); g_form.clearOptions('default_profile');g_form.showFieldMsg('default_profile', 'There are no applicable Profile(s) that match the selected Environment.  Please choose a different Environment to proceed.');var elemen = g_form.elements;for (var i in elemen) {g_form.setDisplay(elemen[i].fieldName, false);}g_form.setDisplay('default_profile', true);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setMandatory('default_profile', true);}else{var elemen = g_form.elements;for (var i in elemen) {g_form.setDisplay(elemen[i].fieldName, true);}g_form.hideFieldMsg('default_profile', true);g_form.clearOptions('default_profile');for (var i = 0; i &lt; answer.length; i++) {g_form.addOption('default_profile', answer[i], answer[i]);}if (answer.length == 1) {g_form.setReadOnly('default_profile', true);}}new GlideModal().get('environment_loader').destroy();new GlideModal().get('environment_loader').destroy();new GlideModal().get('environment_loader').destroy();var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue('default_profile').trim();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse);}function varResponse(response){var answer = response.responseXML.documentElement.getAttribute('answer');var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service;var sess_json = {};var var_array = [];for (var i in prof_json){var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i); var parsed_field = JSON.parse(field);parsed_field.value = curr_value; parsed_field.sys_id = i + '';sess_json['IO:' + i] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);for (var j in serv_json){var_array = [];for (var k in serv_json[j]){var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:' + k] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(sess_json);}}function getAdvancedVars(variable_json){var act_var_JSON = JSON.stringify(variable_json);var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); gajax.addParam('sysparm_name', 'variableArrayParser');gajax.addParam('sysparm_type', 'catalog');gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + '');gajax.addParam('sysparm_varJson', act_var_JSON);gajax.getXML(getVarResponse);}function getVarResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');if (answer + '' == '' || answer + '' == 'undefined' || answer + '' == 'null') return;var parsedResponse = JSON.parse(answer);for (var i in parsedResponse) {var row = parsedResponse[i];var sys_id = 'IO:' + row.sys_id;var type = row.type + '';if (row.state == 'SUCCESS'){if (type == 'LOCAL') g_form.setValue(sys_id, row.value);if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET'){g_form.clearOptions(sys_id);for (var k = 0; k &lt; (row.value).length; k++){g_form.addOption(sys_id + '', row.value[k], row.value[k]);}}}if (row.state == 'ERROR') {g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}}}";
				onChangeCatalogEnvironment.addScript(onChangeEnvironmentScript);
				var OnChangeCatalogScriptId = onChangeCatalogEnvironment.create();
				var gr = new GlideRecord('catalog_script_client');
				if (gr.get(OnChangeCatalogScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
	//             gs.info("catalog client script  100 " + OnChangeCatalogScriptId);

				var catalogScriptGR = new GlideRecord('catalog_script_client');
				catalogScriptGR.addQuery('cat_item', cat_items.item_name + '');
				catalogScriptGR.query();
				while (catalogScriptGR.next()) {
					//  gs.info(catalogScriptGR.name + "catalog client script updatated");
					if (catalogScriptGR.name + '' == "Get Project and Profile List onLoad") {
	//                     gs.info("final If " + catalogScriptGR.name + "catalog client script updatated");
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Fetch form data on change of profile") {
						this.logger.info(" final If " + catalogScriptGR.name + "catalog client script updatated");
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Check AppName OnChange") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Check AppName OnSubmit") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Hide Order details on request") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
				}
				

				var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
				onLoadCatalogClientScript.setAttributes({
					"name": "Get Project and Profile List onLoad",
					"type": "onLoad",
					"applies_to": "item",
					"cat_item": cat_items.item_name + '',
					"active": "true",
					"order": "100",
					"description": "This script is auto created thorugh runtime module for getting projects and profile list.",
					"applies_catalog": "true",
					"ui_type": "0",
					"applies_req_item": false,
					"applies_sc_task": false
				});
				onLoadCatalogClientScript.appliesToCatalogItem(true);
				var onLoadScript = "function onLoad() {var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchProjectAndProfileList');ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse);function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var parsed = JSON.parse(answer);var projectList = parsed.projectList;g_form.clearOptions('default_project');for (var i = 0; i &lt; projectList.length; i++) {var project = projectList[i];g_form.addOption('default_project', project.uuid, project.name)} if (projectList.length == 1) { g_form.setReadOnly('default_project', true)}new GlideModal().get('loader').destroy();}}";
				onLoadCatalogClientScript.addScript(onLoadScript);
				var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
				var gr = new GlideRecord('catalog_script_client');
				if (gr.get(onLoadCatalogClientScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
	//             gs.info("catalog client script  140 " + onLoadCatalogClientScriptId);

				var catalogScriptGR = new sn_sc.CatalogClientScript();
				catalogScriptGR.setAttributes({
					"name": "Fetch form data on change of profile",
					"type": "onChange",
					"applies_to": "item",
					"cat_item": cat_items.item_name + '',
					"cat_variable": "IO:" + profileSysID,
					"active": true,
					"order": 100,
					"description": 'This script is auto created thorugh runtime module for fetching and setting form data and visibility.',
					"applies_catalog": true,
					"ui_type": "0",
					"applies_req_item": false,
					"applies_sc_task": false,
				});
				catalogScriptGR.appliesToCatalogItem(true);
				var script = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading ) { return; } if(newValue == '') return; var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; } g_form.setDisplay(flds[i].prettyName, false); } g_form.setVariablesReadOnly(true); g_form.setDisplay('provider_icons', false); g_form.setReadOnly('default_project', false); g_form.setReadOnly('default_app_name', false); g_form.setReadOnly('default_profile', false); g_form.setDisplay('default_project', true); g_form.setDisplay('default_app_name', true); g_form.setDisplay('default_profile', true);g_form.setMandatory('default_profile', true); g_form.setDisplay('default_environment', true); g_form.setReadOnly('default_environment', false); var profile = newValue; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchOrderFormData'); ga.addParam('sysparm_profile', profile); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } var nameTypeMap = {}; var flds = g_form.nameMap; for (var i in flds) { nameTypeMap[flds[i].prettyName + ''] = fldType[flds[i].realName + ''] + ''; } var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf('cluster_name') == -1) { if (nameTypeMap[i + ''] + '' == 'masked') { fielVal[i] = parsed[i].value; g_form.setValue(i + '', ''); } else { g_form.setValue(i + '', parsed[i].value + ''); } g_form.setReadOnly(i + '', parsed[i].readOnly + ''); g_form.setDisplay(i + '', !parsed[i].readOnly); } else { g_form.setDisplay(i + '', !parsed[i].readOnly); g_form.setReadOnly(i + '', true); } } sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal); new GlideModal().get('loader').destroy(); var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchCredentialsList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var credArr = {}; var parsed = JSON.parse(answer); for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + '').toLowerCase().replace(/ /g, '_'); g_form.setValue(name + '_credential_name', credential.name + ''); g_form.setReadOnly(name + '_credential_name', true); g_form.setValue(name + '_secret_type', credential.type + '', (credential.type + '' == 'KEY') ? 'SSH Private Key' : 'Password'); g_form.setReadOnly(name + '_secret_type', true); g_form.setValue(name + '_username', credential.username.value); g_form.setReadOnly(name + '_username', credential.username.readOnly); g_form.setDisplay(name + '_username', !credential.username.readOnly); if ((credential.type == 'KEY')) { g_form.setValue(name + '_ssh_private_key', credential.ssh_private_key.value); g_form.setReadOnly(name + '_ssh_private_key', credential.ssh_private_key.readOnly); g_form.setValue(name + '_passphrase', credential.passphrase.value); g_form.setReadOnly(name + '_passphrase', credential.passphrase.readOnly); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_ssh_private_key', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + '_passphrase', !credential.passphrase.readOnly); } else { g_form.setValue(name + '_password', ''); credArr[name + '_password'] = credential.password.value; g_form.setReadOnly(name + '_password', credential.password.readOnly); g_form.setDisplay(name + '_password', !credential.password.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); } g_form.setDisplay(name + '_credential_reference', 'false'); if (credential.credential_reference &amp;&amp; credential.credential_reference.name) { g_form.setDisplay(name + '_credential_reference', 'true'); g_form.addOption(name + '_credential_reference', credential.credential_reference.uuid + '', credential.credential_reference.name + ''); g_form.setReadOnly(name + '_credential_reference', credential.credential_reference.readOnly); g_form.setDisplay(name + '_credential_reference', !credential.credential_reference.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_secret_type', 'false'); } } sessionStorage['credentials_' + g_form.getUniqueValue()] = JSON.stringify(credArr); new GlideModal().get('loader').destroy(); } }}";
				catalogScriptGR.addScript(script);
				var ScriptId = catalogScriptGR.create();
				if (gr.get(ScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
				
			 //   gs.info("catalog client script  170 " + ScriptId);
				
				var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
				onChangecatalogClientScript.setAttributes({
				      "name":"Check AppName OnChange",
				      "type":"onChange",
				      "applies_to":"item",
				      "cat_item":cat_items.item_name + '',
				      "cat_variable":"IO:"+app_name_SysID,
				      "active":true,
				      "order":100,
				      "description":"This script is auto created thorugh runtime module for checking application name.",
				      "applies_catalog":true,
				      "ui_type":"0",
				      "applies_req_item":false,
				      "applies_sc_task":false,

				});
				onChangecatalogClientScript.appliesToCatalogItem(true);
                var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') {return;}var name = newValue; if ((newValue.length != ((newValue.trim()).length))  || (!(/^[_-\\w ]+$/.test(name) &amp;&amp; (name.trim().lastIndexOf('-') != (name.trim().length - 1))))) {g_form.clearValue('default_app_name'); g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and in between spaces are allowed and cannot end with hyphens(-). Leading and trailing spaces are not allowed.');}}";
                onChangecatalogClientScript.addScript(onChangeScript);
                var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
				var gr = new GlideRecord('catalog_script_client');
				if (gr.get(OnChangeCatalogScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
				
				
				 var onSubmitcatalogScriptGR = new sn_sc.CatalogClientScript();
                onSubmitcatalogScriptGR.setAttributes({
                    "name": "Check AppName OnSubmit",
                    "type": "onSubmit",
                    "applies_to": "item",
                    "cat_item": cat_items.item_name + '',
                    "active": true,
                    "order": 100,
                    "description": "This script is auto created thorugh runtime module for checking application name on submit.",
                    "applies_catalog": true,
                    "ui_type": "0",
                    "applies_req_item": false,
                    "applies_sc_task": false,
                });
                onSubmitcatalogScriptGR.appliesToCatalogItem(true);
                var onSubmitscript = "function onSubmit() { var result = true; var name = g_form.getValue('default_app_name'); if (!(/^[_-\\w ]+$/.test(name) &amp;&amp; (name.trim().lastIndexOf('-') != (name.trim().length - 1)))) { g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and spaces are allowed and cannot end with hyphens(-).'); result = false; } var errorFieldName = ''; var errorIntFieldName = ''; var parse = JSON.parse(sessionStorage.getItem('FieldRegex_' + g_form.getUniqueValue())); var keys = Object.keys(parse); for (var i = 0; i &lt; keys.length; i++) { var row = parse[keys[i] + '']; var patt = row.regex + ''; var reg = new RegExp(patt); var value = g_form.getValue(keys[i] + ''); var dataType = (row.data_type + '' == 'EXEC_SECRET' || row.data_type + '' == 'HTTP_SECRET' || row.data_type + '' == 'EXEC_LOCAL' || row.data_type + '' == 'HTTP_LOCAL') ? 'Dynamic' : row.data_type + ''; if (row.type + '' == 21) { var splitted = value.split(','); var actualVal = row.listRegex; var count = 0; for (var j = 0, n = splitted.length; j &lt; n; j++) { var listVal = actualVal[splitted[j] + ''];  if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') &amp;&amp; j == n - 1 &amp;&amp; listVal.includes('\n')){ while(listVal.indexOf('\n') != -1){ listVal = listVal.replace('\n','');} if (reg.test(listVal)) { count++;} } if (count == n) row.status = true; } else { if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') &amp;&amp; value.includes('\n')){while(value.indexOf('\n') != -1){value = value.replace('\n','');}} if (reg.test(value)) { row.status = true; } } if (value &amp;&amp; row.status == false) { result = false; g_form.hideFieldMsg(keys[i] + ''); if(dataType == ''){ errorIntFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'This is a Integer field.Please provide a integer value.'); } else{ errorFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'Value does not match specified regex: ' + row.regex); } }} if (result) {   var parse = JSON.parse(sessionStorage.getItem('fieldValues_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 			 parse = JSON.parse(sessionStorage.getItem('credentials_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 		 sessionStorage.removeItem('fieldValues_' + g_form.getUniqueValue()); sessionStorage.removeItem('credentials_' + g_form.getUniqueValue());      sessionStorage.removeItem('clusterName_' + g_form.getUniqueValue()); sessionStorage.removeItem('FieldRegex_' + g_form.getUniqueValue());var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\" ;var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Validating field value with regex..'); loadingDialog.renderWithContent(''+loadingHTML);} else { errorIntFieldName = (errorIntFieldName.endsWith(',')) ? errorIntFieldName.substr(0, errorIntFieldName.length - 1) : errorIntFieldName; errorFieldName = (errorFieldName.endsWith(',')) ? errorFieldName.substr(0, errorFieldName.length - 1) : errorFieldName; if(errorIntFieldName != '' ) g_form.addErrorMessage('Variables are Integer field.Please provide suitable values: ' + errorIntFieldName); if(errorFieldName != '' ) g_form.addErrorMessage('Variables value does not match specified Regex.Please provide suitable values: ' + errorFieldName); new GlideModal().get('loader').destroy(); return false; }var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+'';var profileName = (g_form.getValue('default_profile')+'').trim(); if(profileName == '') return; var projectUUID = (g_form.getValue('default_project')+'').trim(); if(projectUUID == '') return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName);ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; }if(flds[i].label == \"Project\"  &amp;&amp; flds[i].prettyName == \"default_project\")continue;if(flds[i].label == \"Profile\"  &amp;&amp; flds[i].prettyName == \"default_profile\")continue;if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName);  /*	 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true'; 	*/			} }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   }}";
                onSubmitcatalogScriptGR.addScript(onSubmitscript);
                var onSubmitcatalogScriptId = onSubmitcatalogScriptGR.create();
				var gr = new GlideRecord('catalog_script_client');
				if (gr.get(onSubmitcatalogScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
				
				 var onLoadCatalogClientScriptGR = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScriptGR.setAttributes({
                    "name": "Hide Order details on request",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": cat_items.item_name + '',
                    "active": true,
                    "order": 10,
                    "description": "Hide values on request details.",
                    "applies_catalog": "false",
                    "ui_type": "0",
                    "applies_req_item": "true",
                    "applies_sc_task": "false"
                });
                onLoadCatalogClientScriptGR.appliesToCatalogItem(false);
                onLoadCatalogClientScriptGR.appliesToRequestedItem(true);
                var onLoadScriptHide = "function onLoad() {if(g_form.getTableName() + '' == 'sc_req_item') {var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;}g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'false');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_environment', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = g_form.getValue('default_profile') + '';var cat_sys_id = g_form.getValue('cat_item') + '';var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile + '');ga.addParam('sysparm_catSysID', cat_sys_id + '');ga.getXML(parseResponse);} function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var nameTypeMap = {};var flds = g_form.nameMap;for (var i in flds) {nameTypeMap[flds[i].prettyName + ''] = fldType[flds[i].realName + ''] + '';}var fielVal = {};var parsed = JSON.parse(answer);for (var i in parsed) {if (i.indexOf('cluster_name') == -1) {if (nameTypeMap[i + ''] + '' == 'masked') {fielVal[i] = parsed[i].value;g_form.setValue(i + '', '');}g_form.setReadOnly(i + '', true); g_form.setDisplay(i + '', !parsed[i].readOnly);} else {g_form.setDisplay(i + '', !parsed[i].readOnly);g_form.setReadOnly(i + '', true);}}sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);}}";
                onLoadCatalogClientScriptGR.addScript(onLoadScriptHide);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScriptGR.create();
				if (gr.get(onLoadCatalogClientScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
			}
		 this.fetchValuesOnChangeClientScript();
			
		}
		if((parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &lt; parseFloat("3.2")) &amp;&amp; (gs.getProperty('x_nuta2_nutanix_ca.1_4_4') == '0')){
			
			var cat_items1 = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
			cat_items1.query();
			while (cat_items1.next()) {
 			
				
				var grItemProf1 = new GlideRecord("item_option_new");
				grItemProf1.addQuery("cat_item", cat_items1.item_name);
				var qc = grItemProf1.addQuery("name", "default_profile");
				qc.addOrCondition('name', 'default_app_name');
				grItemProf1.query();
				var profileSysID,appSysID ;
				while (grItemProf1.next()) {
					if (grItemProf1.name + '' == "default_profile")
						profileSysID = grItemProf1.sys_id + "";
					if (grItemProf1.name + '' == "default_app_name")
						appSysID = grItemProf1.sys_id + "";
				}
 				
				
				var catalogScriptGR = new GlideRecord('catalog_script_client');
				catalogScriptGR.addQuery('cat_item', cat_items1.item_name + '');
				catalogScriptGR.query();
				while (catalogScriptGR.next()) {
					if (catalogScriptGR.name + '' == "Fetch dependencies on change of profile") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Get Project and Profile List onLoad") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Check AppName OnChange") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Fetch form data on change of profile") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Check AppName OnSubmit") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					if (catalogScriptGR.name + '' == "Hide Order details on request") {
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
				}
 				
				
				var catalogScriptGR = new sn_sc.CatalogClientScript();
                catalogScriptGR.setAttributes({
                    "name": "Fetch form data on change of profile",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": cat_items1.item_name + '',
                    "cat_variable": "IO:" + profileSysID,
                    "active": true,
                    "order": 100,
                    "description": 'This script is auto created thorugh runtime module for fetching and setting form data and visibility.',
                    "applies_catalog": true,
                    "ui_type": "0",
                    "applies_req_item": false,
                    "applies_sc_task": false,
                });
                catalogScriptGR.appliesToCatalogItem(true);
				var script =  "function onChange(control, oldValue, newValue, isLoading) {if (newValue == '') {return;} var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialogbox = new GlideModal('loader', true);loadingDialogbox.setTitle('Fetching Order Form Data...'); loadingDialogbox.renderWithContent(''+loadingHTML);var fldType = {};var elemen = g_form.elements;for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;} g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'false');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = newValue;var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile);ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse, null, loadingDialogbox);function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer');   var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; }  var nameTypeMap = {}; var flds = g_form.nameMap; for(var i in flds){ nameTypeMap[flds[i].prettyName+''] = fldType[flds[i].realName+'']+''; } 		  var fielVal = {};  var parsed = JSON.parse(answer);for (var i in parsed) {if(i.indexOf('cluster_name') == -1){ if(nameTypeMap[i+'']+'' == 'masked'){ fielVal[i] = parsed[i].value; g_form.setValue(i + '', ''); } else{ g_form.setValue(i + '', parsed[i].value + ''); }			 g_form.setReadOnly(i + '', parsed[i].readOnly + ''); g_form.setDisplay(i + '', !parsed[i].readOnly);	 }else{ g_form.setDisplay(i + '', !parsed[i].readOnly);	 g_form.setReadOnly(i + '', true);	 			}		}   sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);		  new GlideModal().get('loader').destroy();var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\";var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching Credentials List...'); loadingDialog.renderWithContent(''+loadingHTML); var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchCredentialsList');ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) {var answer = response.responseXML.documentElement.getAttribute('answer'); var credArr = {}; var parsed = JSON.parse(answer);for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + '').toLowerCase().replace(/ /g, '_');g_form.setValue(name + '_credential_name', credential.name + ''); g_form.setReadOnly(name + '_credential_name', true); g_form.setValue(name + '_secret_type', credential.type + '', (credential.type + '' == 'KEY') ? 'SSH Private Key' : 'Password'); g_form.setReadOnly(name + '_secret_type', true); g_form.setValue(name + '_username', credential.username.value); g_form.setReadOnly(name + '_username', credential.username.readOnly); g_form.setDisplay(name + '_username', !credential.username.readOnly); if ((credential.type == 'KEY')) {g_form.setValue(name + '_ssh_private_key', credential.ssh_private_key.value); g_form.setReadOnly(name + '_ssh_private_key', credential.ssh_private_key.readOnly); g_form.setValue(name + '_passphrase', credential.passphrase.value); g_form.setReadOnly(name + '_passphrase', credential.passphrase.readOnly); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_ssh_private_key', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + '_passphrase', !credential.passphrase.readOnly); } else { g_form.setValue(name + '_password', ''); credArr[name + '_password'] = credential.password.value; g_form.setReadOnly(name + '_password', credential.password.readOnly); g_form.setDisplay(name + '_password', !credential.password.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false');}g_form.setDisplay(name + '_credential_reference', 'false'); if (credential.credential_reference &amp;&amp; credential.credential_reference.name) {g_form.setDisplay(name + '_credential_reference', 'true');g_form.addOption(name + '_credential_reference', credential.credential_reference.uuid + '', credential.credential_reference.name + '');g_form.setReadOnly(name + '_credential_reference', credential.credential_reference.readOnly);g_form.setDisplay(name + '_credential_reference', !credential.credential_reference.readOnly);g_form.setDisplay(name + '_ssh_private_key', 'false');g_form.setDisplay(name + '_passphrase', 'false');g_form.setDisplay(name + '_password', 'false');g_form.setDisplay(name + '_secret_type', 'false');}} sessionStorage['credentials_' + g_form.getUniqueValue()] = JSON.stringify(credArr); new GlideModal().get('loader').destroy();}}}";
				catalogScriptGR.addScript(script);
                var ScriptId = catalogScriptGR.create();
			    var gr = new GlideRecord('catalog_script_client');
				if (gr.get(ScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
 			   
			
				var onChangecatalogClientScript3 = new sn_sc.CatalogClientScript();
				onChangecatalogClientScript3.setAttributes({
						 "name":"Fetch dependencies on change of profile",
						 "type":"onChange",
						 "applies_to":"item",
						 "cat_item": cat_items1.item_name + '',
						 "cat_variable":"IO:"+profileSysID,
						 "active":true,
						 "order":700,
						 "description":"This script is auto created thorugh runtime module for getting variables on change of profile.",
						 "applies_catalog":true,
						 "ui_type":"0",
						 "applies_req_item":false,
						 "applies_sc_task":false,

				});
				onChangecatalogClientScript3.appliesToCatalogItem(true);
                var onChangeScriptVars= "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + '').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchLaunchVars'); ga.addParam('sysparm_catsysid', cat_sys_id); ga.addParam('sysparm_profile', profile); ga.getXML(varResponse);}function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); console.log(answer); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue('IO:' + i); var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value = curr_value; parsed_field.sys_id = i + ''; sess_json['IO:' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue('IO:' + k); var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value = curr_value; parsed_field.sys_id = k + ''; sess_json['IO:' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage['varValues'] = JSON.stringify(sess_json);}function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); gajax.addParam('sysparm_name', 'variableArrayParser'); gajax.addParam('sysparm_type', 'catalog'); gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + ''); gajax.addParam('sysparm_varJson', act_var_JSON); gajax.getXML(getVarResponse);}function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) {var row = parsedResponse[i]; var sys_id = 'IO:' + row.sys_id; var type = row.type + ''; if (row.state == 'SUCCESS') { if (type == 'LOCAL') g_form.setValue(sys_id, row.value); if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; (row.value).length; k++) { g_form.addOption(sys_id + '', row.value[k], row.value[k]); } } } if (row.state == 'ERROR') { g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]); } new GlideModal().get('variables_loader').destroy(); }}";
                onChangecatalogClientScript3.addScript(onChangeScriptVars);
                var OnChangeCatalogScriptId = onChangecatalogClientScript3.create();			
			    var gr = new GlideRecord('catalog_script_client');
				if (gr.get(OnChangeCatalogScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
 				
				
				var project_load = new sn_sc.CatalogClientScript();
				project_load.setAttributes({
					 "name":"Get Project and Profile List onLoad",
				     "type":"onLoad",
				     "applies_to":"item",
				     "cat_item":cat_items1.item_name + '',
				     "active":"true",
				     "order":"100",
				     "description":"This script is auto created thorugh runtime module for getting projects and profile list.",
				     "applies_catalog":"true",
				     "ui_type":"0",
					 "applies_req_item":false,
				     "applies_sc_task":false
				});
                project_load.appliesToCatalogItem(true);
				var onLoadScript = "function onLoad() { var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching Project And Profile'); loadingDialog.renderWithContent(''+loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchProjectAndProfileList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null , loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer);var projectList = parsed.projectList; g_form.clearOptions('default_project');for (var i = 0; i &lt; projectList.length; i++) { var project = projectList[i]; g_form.addOption('default_project', project.uuid, project.name);}var profileList = parsed.profileList.split(','); g_form.clearOptions('default_profile'); for (i = 0; i &lt; profileList.length; i++) { g_form.addOption('default_profile', profileList[i] + '', profileList[i] + ''); } g_form.setValue('default_profile', profileList[0]);if (projectList.length == 1) { g_form.setReadOnly('default_project', true);} if (profileList.length == 1) { g_form.setReadOnly('default_profile', true);} new GlideModal().get('loader').destroy();var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\";var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching variables...'); loadingDialog.renderWithContent(''+loadingHTML);var cat_sys_id = g_form.getUniqueValue();var profile = g_form.getValue('default_profile').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse, null, loadingDialog);}function varResponse(response, loadingDialog) {var answer = response.responseXML.documentElement.getAttribute('answer');var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service; var sess_json = {};var var_array = [];for (var i in prof_json) {var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = i + '';sess_json['IO:'+i] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);for (var j in serv_json) {var_array = [];for (var k in serv_json[j]) {var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:'+k] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(sess_json);}}function getAdvancedVars(variable_json) {var act_var_JSON = JSON.stringify(variable_json);var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name', 'variableArrayParser');gajax.addParam('sysparm_type', 'catalog');gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + '');gajax.addParam('sysparm_varJson', act_var_JSON);gajax.getXML(getVarResponse);}function getVarResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null')return;var parsedResponse = JSON.parse(answer);for (var i in parsedResponse) {var row = parsedResponse[i];var sys_id = 'IO:' + row.sys_id;var type = row.type + '';if (row.state == 'SUCCESS') {if(type == 'LOCAL')g_form.setValue(sys_id, row.value);if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') {g_form.clearOptions(sys_id);for (var k = 0; k &lt; (row.value).length; k++) {g_form.addOption(sys_id + '', row.value[k], row.value[k]);}}}if (row.state == 'ERROR') {g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}}}";
				 project_load.addScript(onLoadScript);
                var project_load_ScriptId = project_load.create();
				var gr = new GlideRecord('catalog_script_client');
				if (gr.get(project_load_ScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
 				
				
				var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
				onChangecatalogClientScript.setAttributes({
				      "name":"Check AppName OnChange",
				      "type":"onChange",
				      "applies_to":"item",
				      "cat_item":cat_items1.item_name + '',
				      "cat_variable":"IO:"+appSysID,
				      "active":true,
				      "order":100,
				      "description":"This script is auto created thorugh runtime module for checking application name.",
				      "applies_catalog":true,
				      "ui_type":"0",
				      "applies_req_item":false,
				      "applies_sc_task":false,

				});
				onChangecatalogClientScript.appliesToCatalogItem(true);
                var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') {return;}var name = newValue; if ((newValue.length != ((newValue.trim()).length))  || (!(/^[_-\\w ]+$/.test(name) &amp;&amp; (name.trim().lastIndexOf('-') != (name.trim().length - 1))))) {g_form.clearValue('default_app_name'); g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and in between spaces are allowed and cannot end with hyphens(-). Leading and trailing spaces are not allowed.');}}";
                onChangecatalogClientScript.addScript(onChangeScript);
                var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
				var gr = new GlideRecord('catalog_script_client');
				if (gr.get(OnChangeCatalogScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
 				
				
				var onSubmitcatalogScriptGR = new sn_sc.CatalogClientScript();
                onSubmitcatalogScriptGR.setAttributes({
                    "name": "Check AppName OnSubmit",
                    "type": "onSubmit",
                    "applies_to": "item",
                    "cat_item": cat_items1.item_name + '',
                    "active": true,
                    "order": 100,
                    "description": "This script is auto created thorugh runtime module for checking application name on submit.",
                    "applies_catalog": true,
                    "ui_type": "0",
                    "applies_req_item": false,
                    "applies_sc_task": false,
                });
                onSubmitcatalogScriptGR.appliesToCatalogItem(true);
                var onSubmitscript = "function onSubmit() { var result = true; var name = g_form.getValue('default_app_name'); if (!(/^[_-\\w ]+$/.test(name) &amp;&amp; (name.trim().lastIndexOf('-') != (name.trim().length - 1)))) { g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and spaces are allowed and cannot end with hyphens(-).'); result = false; } var errorFieldName = ''; var errorIntFieldName = ''; var parse = JSON.parse(sessionStorage.getItem('FieldRegex_' + g_form.getUniqueValue())); var keys = Object.keys(parse); for (var i = 0; i &lt; keys.length; i++) { var row = parse[keys[i] + '']; var patt = row.regex + ''; var reg = new RegExp(patt); var value = g_form.getValue(keys[i] + ''); var dataType = (row.data_type + '' == 'EXEC_SECRET' || row.data_type + '' == 'HTTP_SECRET' || row.data_type + '' == 'EXEC_LOCAL' || row.data_type + '' == 'HTTP_LOCAL') ? 'Dynamic' : row.data_type + ''; if (row.type + '' == 21) { var splitted = value.split(','); var actualVal = row.listRegex; var count = 0; for (var j = 0, n = splitted.length; j &lt; n; j++) { var listVal = actualVal[splitted[j] + ''];  if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') &amp;&amp; j == n - 1 &amp;&amp; listVal.includes('\n')){ while(listVal.indexOf('\n') != -1){ listVal = listVal.replace('\n','');} if (reg.test(listVal)) { count++;} } if (count == n) row.status = true; } else { if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') &amp;&amp; value.includes('\n')){while(value.indexOf('\n') != -1){value = value.replace('\n','');}} if (reg.test(value)) { row.status = true; } } if (value &amp;&amp; row.status == false) { result = false; g_form.hideFieldMsg(keys[i] + ''); if(dataType == ''){ errorIntFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'This is a Integer field.Please provide a integer value.'); } else{ errorFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'Value does not match specified regex: ' + row.regex); } }} if (result) {   var parse = JSON.parse(sessionStorage.getItem('fieldValues_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 			 parse = JSON.parse(sessionStorage.getItem('credentials_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 		 sessionStorage.removeItem('fieldValues_' + g_form.getUniqueValue()); sessionStorage.removeItem('credentials_' + g_form.getUniqueValue());      sessionStorage.removeItem('clusterName_' + g_form.getUniqueValue()); sessionStorage.removeItem('FieldRegex_' + g_form.getUniqueValue());var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\" ;var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Validating field value with regex..'); loadingDialog.renderWithContent(''+loadingHTML);} else { errorIntFieldName = (errorIntFieldName.endsWith(',')) ? errorIntFieldName.substr(0, errorIntFieldName.length - 1) : errorIntFieldName; errorFieldName = (errorFieldName.endsWith(',')) ? errorFieldName.substr(0, errorFieldName.length - 1) : errorFieldName; if(errorIntFieldName != '' ) g_form.addErrorMessage('Variables are Integer field.Please provide suitable values: ' + errorIntFieldName); if(errorFieldName != '' ) g_form.addErrorMessage('Variables value does not match specified Regex.Please provide suitable values: ' + errorFieldName); new GlideModal().get('loader').destroy(); return false; }var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+'';var profileName = (g_form.getValue('default_profile')+'').trim(); if(profileName == '') return; var projectUUID = (g_form.getValue('default_project')+'').trim(); if(projectUUID == '') return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName);ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; }if(flds[i].label == \"Project\"  &amp;&amp; flds[i].prettyName == \"default_project\")continue;if(flds[i].label == \"Profile\"  &amp;&amp; flds[i].prettyName == \"default_profile\")continue;if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName);  /*	 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true'; 	*/			} }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   }}";
                onSubmitcatalogScriptGR.addScript(onSubmitscript);
                var onSubmitcatalogScriptId = onSubmitcatalogScriptGR.create();
				var gr = new GlideRecord('catalog_script_client');
				if (gr.get(onSubmitcatalogScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
				 var onLoadCatalogClientScriptGR = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScriptGR.setAttributes({
                    "name": "Hide Order details on request",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": cat_items1.item_name + '',
                    "active": true,
                    "order": 10,
                    "description": "Hide values on request details.",
                    "applies_catalog": "false",
                    "ui_type": "0",
                    "applies_req_item": "true",
                    "applies_sc_task": "false"
                });
                onLoadCatalogClientScriptGR.appliesToCatalogItem(false);
                onLoadCatalogClientScriptGR.appliesToRequestedItem(true);
                var onLoadScriptHide = "function onLoad() {if(g_form.getTableName() + '' == 'sc_req_item') {var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;}g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'false');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_environment', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = g_form.getValue('default_profile') + '';var cat_sys_id = g_form.getValue('cat_item') + '';var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile + '');ga.addParam('sysparm_catSysID', cat_sys_id + '');ga.getXML(parseResponse);} function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var nameTypeMap = {};var flds = g_form.nameMap;for (var i in flds) {nameTypeMap[flds[i].prettyName + ''] = fldType[flds[i].realName + ''] + '';}var fielVal = {};var parsed = JSON.parse(answer);for (var i in parsed) {if (i.indexOf('cluster_name') == -1) {if (nameTypeMap[i + ''] + '' == 'masked') {fielVal[i] = parsed[i].value;g_form.setValue(i + '', '');}g_form.setReadOnly(i + '', true); g_form.setDisplay(i + '', !parsed[i].readOnly);} else {g_form.setDisplay(i + '', !parsed[i].readOnly);g_form.setReadOnly(i + '', true);}}sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);}}";
                onLoadCatalogClientScriptGR.addScript(onLoadScriptHide);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScriptGR.create();
				if (gr.get(onLoadCatalogClientScriptId)) {
					gr.setValue("sys_scope", "global");
					gr.update();
				}
				
			}
		 this.fetchValuesOnChangeClientScript();
		}
		gs.setProperty('x_nuta2_nutanix_ca.1_4_4', '1');
	} catch (e) {
        this.logger.error("Exception caught inside migraation_script.addEnvironmentVariableToAllCatalogs : " + e);
    }
},
    
    isCatalogItemsAvailable: function() {
        var cat_items = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        cat_items.query();
        if (cat_items.hasNext() &amp;&amp; (gs.getProperty('x_nuta2_nutanix_ca.1_4_4') == '0')) {
            this.logger.info("Migration to V 1_4_4 require");
            return true;
        }
		this.logger.info("Migration to V 1_4_4 not require");
        return false;
    },
	fetchValuesOnChangeClientScript: function() {
		
		var cat_items1 = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
		cat_items1.query();
		while (cat_items1.next()) {
				
				var catalogScriptGR = new GlideRecord('catalog_script_client');
				catalogScriptGR.addQuery('cat_item', cat_items1.item_name + '');
				catalogScriptGR.query();
				while (catalogScriptGR.next()) {
					if (catalogScriptGR.name + '' == "Fetch values OnChange") {
						
						var field = (catalogScriptGR.cat_variable+'').replace("IO:",'');
						
								var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
								onChangecatalogClientScript.setAttributes({
									"name":"Fetch values OnChange",
									"type":"onChange",
									"applies_to":"item",
									"cat_item":cat_items1.item_name+'',
									"cat_variable":"IO:"+field,
									"active":true,
									"order":1000,
									"description":"This script is auto created thorugh runtime module for fetching values.",
									"applies_catalog":"true",
									"ui_type":"0",
									"applies_req_item":false,
									"applies_sc_task":false,
								});
								onChangecatalogClientScript.appliesToCatalogItem(true);
								var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if(!sessionStorage['varValues'])return; var varValues = JSON.parse(sessionStorage['varValues']);oldValue = varValues[control.id + '']; if (isLoading || newValue == '' || oldValue + '' == newValue + '') {new GlideModal().get('loader').destroy(); return; }jslog(oldValue);jslog(newValue); function varResponse(response,loadingDialog){var answer=response.responseXML.documentElement.getAttribute('answer');var varJSON=JSON.parse(answer);var prof_json=varJSON.profile;var serv_json=varJSON.service;var var_array=[];for(var i in prof_json){var field=prof_json[i];var curr_value=g_form.getValue('IO:'+i);varValues['IO:' + i] = curr_value + '';var parsed_field=JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value=curr_value,parsed_field.sys_id=i+'',var_array.push(parsed_field);}getAdvancedVars(var_array);for(var j in serv_json){var_array=[];for(var k in serv_json[j]){var field=serv_json[j][k];var curr_value=g_form.getValue('IO:'+k);varValues['IO:' + k] = curr_value + '';var parsed_field=JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value=curr_value,parsed_field.sys_id=k+'',var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(varValues);}function getAdvancedVars(variable_json){var act_var_JSON=JSON.stringify(variable_json);var gajax=new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name','variableArrayParser'),gajax.addParam('sysparm_type','catalog'),gajax.addParam('sysparm_parentUuid',g_form.getUniqueValue()+''),gajax.addParam('sysparm_varJson',act_var_JSON),gajax.getXML(getVarResponse);}function getVarResponse(response){ new GlideModal().get('loader').destroy(); var answer=response.responseXML.documentElement.getAttribute('answer');if(answer+''==''||answer+''=='undefined'||answer+''=='null')return;var parsedResponse=JSON.parse(answer);for(var i in parsedResponse){var row=parsedResponse[i];var sys_id='IO:'+row.sys_id;var type=row.type+'';if(row.state=='SUCCESS'&amp;&amp; (type=='EXEC_LOCAL'||type=='HTTP_LOCAL'||type=='EXEC_SECRET'||type=='HTTP_SECRET')){g_form.clearOptions(sys_id);for(var k=0;k&lt;row.value.length;k++)g_form.addOption(sys_id+'',row.value[k],row.value[k]); g_form.setValue(sys_id,row.value);} else {if(row.data_type + '' != 'BASE'){g_form.clearOptions(sys_id); for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + '', row.options[k], row.options[k]);} g_form.setValue(sys_id, row.value);}row.state=='ERROR'&amp;&amp;g_form.addErrorMessage('Error in variable: '+row.name+': '+row.error[0]);}}var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching variables...'); loadingDialog.renderWithContent(''+loadingHTML);var cat_sys_id=g_form.getUniqueValue();var profile=g_form.getValue('default_profile').trim();var ga=new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name','fetchLaunchVars'),ga.addParam('sysparm_catsysid',cat_sys_id),ga.addParam('sysparm_profile',profile),ga.getXML(varResponse,null,loadingDialog);}";
								onChangecatalogClientScript.addScript(onChangeScript);
								var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
								var gr = new GlideRecord('catalog_script_client');
								if (gr.get(OnChangeCatalogScriptId)) {
									gr.setValue("sys_scope", "global");
									gr.update();
								}
						
						var catalogClientScript = new sn_sc.CatalogClientScript();
						catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					}
					
				}
		}
		
	},
    isMigrationNeeded: function() {
        var cat_items = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        cat_items.addEncodedQuery('multiple_application_profileISEMPTY^multiple_projectsISEMPTY^state=active^ORstate=draft');
        cat_items.query();
        if (cat_items.hasNext()) {
            this.logger.info("Migration to V 1_4 require");
            return true;
        }
        this.logger.info("Migration to V 1_4 not require");
        return false;
    },

    updateCatalog: function() {
        this.logger.info("Migration to V1_4 Started");

        gs.setProperty('x_nuta2_nutanix_ca.migration.script.ran', 'true');

        this.catalogItem_1_4();
        var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        gr.query();
        while (gr.next()) {
            try {
                this.clientScript_1_4(gr.item_name);
                this.logger.info(gr.item_name.name + " Catalog client script succesfully migrated.");
            } catch (e) {
                this.logger.error(gr.item_name.name + " Catalog Item was not migrated due to issue in catalog client script.");
            }
        }
    },


    clientScript_1_4: function(catSysId) {
        var catalogScriptGR = new GlideRecord(this.appUtil.configuration.table.catalogClientScript + '');
        catalogScriptGR.addQuery('cat_item', catSysId);
        catalogScriptGR.query();
        this.logger.info("ctalog client Script " + catalogScriptGR.getRowCount() + "to be updatated");
        while (catalogScriptGR.next()) {
            this.logger.info(catalogScriptGR.name + "catalog client script updatated");
            if (catalogScriptGR.name + '' == "Fetch form data on change of profile") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);

            }
            if (catalogScriptGR.name + '' == "Get Project and Profile List onLoad") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
            }
            if (catalogScriptGR.name + '' == "Hide Order details on request") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
            }
            if (catalogScriptGR.name + '' == "Get Subnet Info") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
            }
            if (catalogScriptGR.name + '' == "Get Subnet Info on project change") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
            }
            if (catalogScriptGR.name + '' == "Check Catalog Item Validity") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
            }

        }
        var profileSysID = new GlideRecord('item_option_new');
        profileSysID.addEncodedQuery('cat_item=' + catSysId + '^nameLIKEdefault_profile');
        profileSysID.query();
        profileSysID.next();
        var catalogScriptGR = new sn_sc.CatalogClientScript();
        catalogScriptGR.setAttributes({
            "name": "Fetch form data on change of profile",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": "" + catSysId,
            "cat_variable": "IO:" + profileSysID.sys_id,
            "active": true,
            "order": 100,
            "description": 'This script is auto created thorugh runtime module for fetching and setting form data and visibility.',
            "applies_catalog": true,
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        catalogScriptGR.appliesToCatalogItem(true);
        var Script = "function onChange(control, oldValue, newValue, isLoading) {if (newValue == '') {return;} var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialogbox = new GlideModal('loader', true);loadingDialogbox.setTitle('Fetching Order Form Data...'); loadingDialogbox.renderWithContent(''+loadingHTML);var fldType = {};var elemen = g_form.elements;for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;} g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'false');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = newValue;var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile);ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse, null, loadingDialogbox);function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer');   var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; }  var nameTypeMap = {}; var flds = g_form.nameMap; for(var i in flds){ nameTypeMap[flds[i].prettyName+''] = fldType[flds[i].realName+'']+''; } 		  var fielVal = {};  var parsed = JSON.parse(answer);for (var i in parsed) {if(i.indexOf('cluster_name') == -1){ if(nameTypeMap[i+'']+'' == 'masked'){ fielVal[i] = parsed[i].value; g_form.setValue(i + '', ''); } else{ g_form.setValue(i + '', parsed[i].value + ''); }			 g_form.setReadOnly(i + '', parsed[i].readOnly + ''); g_form.setDisplay(i + '', !parsed[i].readOnly);	 }else{ g_form.setDisplay(i + '', !parsed[i].readOnly);	 g_form.setReadOnly(i + '', true);	 			}		}   sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);		  new GlideModal().get('loader').destroy();}} var cat_sys_id = g_form.getUniqueValue();	var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchProjectAndProfileList');ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer); var projectList = parsed.projectList; if (projectList.length == 1) { g_form.setReadOnly('default_project', true);}}";
        catalogScriptGR.addScript(Script);
        var ScriptId = catalogScriptGR.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Fetch form data on change of profile\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(ScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }


        var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
        onLoadCatalogClientScript.setAttributes({
            "name": "Get Project and Profile List onLoad",
            "type": "onLoad",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "active": "true",
            "order": "100",
            "description": "This script is auto created thorugh runtime module for getting projects and profile list.",
            "applies_catalog": "true",
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        onLoadCatalogClientScript.appliesToCatalogItem(true);
        var onLoadScript = "function onLoad() { var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching Project And Profile'); loadingDialog.renderWithContent(''+loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchProjectAndProfileList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null , loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer);var projectList = parsed.projectList; g_form.clearOptions('default_project');for (var i = 0; i &lt; projectList.length; i++) { var project = projectList[i]; g_form.addOption('default_project', project.uuid, project.name);}var profileList = parsed.profileList.split(','); g_form.clearOptions('default_profile'); for (i = 0; i &lt; profileList.length; i++) { g_form.addOption('default_profile', profileList[i] + '', profileList[i] + ''); } g_form.setValue('default_profile', profileList[0]);if (projectList.length == 1) { g_form.setReadOnly('default_project', true);} if (profileList.length == 1) { g_form.setReadOnly('default_profile', true);} new GlideModal().get('loader').destroy();var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\";var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching variables...'); loadingDialog.renderWithContent(''+loadingHTML);var cat_sys_id = g_form.getUniqueValue();var profile = g_form.getValue('default_profile').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse, null, loadingDialog);}function varResponse(response, loadingDialog) {var answer = response.responseXML.documentElement.getAttribute('answer');var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service; var sess_json = {};var var_array = [];for (var i in prof_json) {var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = i + '';sess_json['IO:'+i] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);for (var j in serv_json) {var_array = [];for (var k in serv_json[j]) {var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:'+k] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(sess_json);}}function getAdvancedVars(variable_json) {var act_var_JSON = JSON.stringify(variable_json);var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name', 'variableArrayParser');gajax.addParam('sysparm_type', 'catalog');gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + '');gajax.addParam('sysparm_varJson', act_var_JSON);gajax.getXML(getVarResponse);}function getVarResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null')return;var parsedResponse = JSON.parse(answer);for (var i in parsedResponse) {var row = parsedResponse[i];var sys_id = 'IO:' + row.sys_id;var type = row.type + '';if (row.state == 'SUCCESS') {if(type == 'LOCAL')g_form.setValue(sys_id, row.value);if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') {g_form.clearOptions(sys_id);for (var k = 0; k &lt; (row.value).length; k++) {g_form.addOption(sys_id + '', row.value[k], row.value[k]);}}}if (row.state == 'ERROR') {g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}}}";
        onLoadCatalogClientScript.addScript(onLoadScript);
        var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Get Project and Profile List onLoad\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(onLoadCatalogClientScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }

        var onLoadCatalogClientScriptGR = new sn_sc.CatalogClientScript();
        onLoadCatalogClientScriptGR.setAttributes({
            "name": "Hide Order details on request",
            "type": "onLoad",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "active": true,
            "order": 10,
            "description": "Hide values on request details.",
            "applies_catalog": "false",
            "ui_type": "0",
            "applies_req_item": "true",
            "applies_sc_task": "false",
            "sys_scope": "global"
        });
        onLoadCatalogClientScriptGR.appliesToCatalogItem(false);
        onLoadCatalogClientScriptGR.appliesToRequestedItem(true);
        var onLoadScriptHide = "function onLoad() {if(g_form.getTableName() + '' == 'sc_req_item') {var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;}g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'false');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_environment', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = g_form.getValue('default_profile') + '';var cat_sys_id = g_form.getValue('cat_item') + '';var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile + '');ga.addParam('sysparm_catSysID', cat_sys_id + '');ga.getXML(parseResponse);} function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var nameTypeMap = {};var flds = g_form.nameMap;for (var i in flds) {nameTypeMap[flds[i].prettyName + ''] = fldType[flds[i].realName + ''] + '';}var fielVal = {};var parsed = JSON.parse(answer);for (var i in parsed) {if (i.indexOf('cluster_name') == -1) {if (nameTypeMap[i + ''] + '' == 'masked') {fielVal[i] = parsed[i].value;g_form.setValue(i + '', '');}g_form.setReadOnly(i + '', true); g_form.setDisplay(i + '', !parsed[i].readOnly);} else {g_form.setDisplay(i + '', !parsed[i].readOnly);g_form.setReadOnly(i + '', true);}}sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);}}";
        onLoadCatalogClientScriptGR.addScript(onLoadScriptHide);
        var onLoadCatalogClientScriptId = onLoadCatalogClientScriptGR.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Hide values on request details.\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(onLoadCatalogClientScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }

        /*Insert new Scripts Get Subnet Info on project change*/
        var oldGR = new GlideRecord('item_option_new');
        oldGR.addEncodedQuery('cat_item=' + catSysId + '^nameLIKEdefault_project');
        oldGR.query();
        oldGR.next();
        var onChangecatalogClientScript1 = new sn_sc.CatalogClientScript();
        onChangecatalogClientScript1.setAttributes({
            "name": "Get Subnet Info on project change",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "cat_variable": "IO:" + oldGR.sys_id,
            "active": true,
            "order": 600,
            "description": "This script is auto created thorugh runtime module for checking application name on submit.",
            "applies_catalog": true,
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        onChangecatalogClientScript1.appliesToCatalogItem(true);
        var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (newValue == '') { return; }var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getSubnet');ga.addParam('sysparm_catSysID', catalogSysId);ga.addParam('sysparm_ProjectUuid', newValue);ga.getXML(processAnswer);function processAnswer(response) {var ans = response.responseXML.documentElement.getAttribute('answer');sessionStorage['clusterName_' + g_form.getUniqueValue()] = ans;ans = JSON.parse(ans);var catalog_clusterJSON = ans.catalog_data;clusterJSON = ans.cluster_info;var nicList = [];for(var m in clusterJSON){nicList.push(clusterJSON[m].subnet);}for (var k in catalog_clusterJSON) {for (var i in catalog_clusterJSON[k].nics) {if (catalog_clusterJSON[k].value + '') {for (var l in clusterJSON) {var subnetList = clusterJSON[l].subnet;if (l != catalog_clusterJSON[k].value + '')for (var s in subnetList){ /*g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', s);*/}}}{var opt = g_form.getElement(catalog_clusterJSON[k].nics[i] + '');for (var x=1, n = opt.options.length; x &lt; n; x++) {var present = false;var val = opt.options[x].value+'';for(var s=0; s &lt; nicList.length ;s++){if (nicList[s][val]) {present =true;break;}} if(!present){g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', opt.options[x].value+''); x--;n--; } }} }}}}";
        onChangecatalogClientScript1.addScript(onChangeScript);
        var OnChangeCatalogScriptId = onChangecatalogClientScript1.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Get Subnet Info on project change\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(OnChangeCatalogScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }

        var projectSysID = new GlideRecord('item_option_new');
        projectSysID.addEncodedQuery('cat_item=' + catSysId + '^nameLIKEdefault_project');
        projectSysID.query();
        projectSysID.next();
        var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
        onLoadCatalogClientScript.setAttributes({
            "name": "Check Catalog Item Validity project",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "cat_variable": "IO:" + projectSysID,
            "active": true,
            "order": 1,
            "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
            "applies_catalog": true,
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        onLoadCatalogClientScript.appliesToCatalogItem(true);
        var onLoadScript = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') { return;} var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+''; var profileName = (g_form.getValue('default_profile')+'').trim();if(profileName == '') return;var projectUUID = (newValue+'').trim();if(projectUUID == '')return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; }  if(flds[i].label == \"Project\"  &amp;&amp; flds[i].prettyName == \"default_project\")continue;if(flds[i].label == \"Profile\"  &amp;&amp; flds[i].prettyName == \"default_profile\")continue;if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName);/* self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true'; */			}	 }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   } }";
        onLoadCatalogClientScript.addScript(onLoadScript);
        var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Check Catalog Item Validity project\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(onLoadCatalogClientScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }


        var profileSysID = new GlideRecord('item_option_new');
        profileSysID.addEncodedQuery('cat_item=' + catSysId + '^nameLIKEdefault_profile');
        profileSysID.query();
        profileSysID.next();
        var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
        onLoadCatalogClientScript.setAttributes({
            "name": "Check Catalog Item Validity profile",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "cat_variable": "IO:" + profileSysID.sys_id,
            "active": true,
            "order": 1,
            "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
            "applies_catalog": true,
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        onLoadCatalogClientScript.appliesToCatalogItem(true);
        var onLoadScript = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') { return;} var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+'';var profileName = (newValue+'').trim(); if(profileName == '') return; var projectUUID = (g_form.getValue('default_project')+'').trim(); if(projectUUID == '') return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName);ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; } if(flds[i].label == \"Project\"  &amp;&amp; flds[i].prettyName == \"default_project\")continue;if(flds[i].label == \"Profile\"  &amp;&amp; flds[i].prettyName == \"default_profile\")continue;if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName);/*	 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true'; 	*/			 }}  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   } }";
        onLoadCatalogClientScript.addScript(onLoadScript);
        var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Check Catalog Item Validity profile\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(onLoadCatalogClientScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }


    },
	
    catalogItem_1_4: function() {
        var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        gr.addEncodedQuery('multiple_application_profileISEMPTY^multiple_projectsISEMPTY^state=active^ORstate=draft');
        gr.query();
        while (gr.next()) {
            try {
                gr.multiple_projects = gr.project;
                gr.multiple_application_profile = gr.application_profile;
                gr.update();
                this.logger.info("V1.4 migration, " + gr.item_name.name + " Catalog Item was migrated.");
            } catch (e) {
                this.logger.error("V1.4 migration, " + gr.item_name.name + " Catalog Item was not migrated due to issue in some field type and the value it contained.");
            }
        }
    },

    copyFieldJson: function() {

        this.logger.info("V1.4 migration: Migrating old variables");
        var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        gr.addQuery("state", "active");
        gr.query();
        while (gr.next()) {
            this._createOnChangeSessionScript(gr.item_name.sys_id);
            var grVars = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
            grVars.addEncodedQuery('catalog_item=' + gr.item_name.sys_id + '^isprofilevariable=true^ORisservicevariable=true');
            grVars.query();
            while (grVars.next()) {
                var grVarsBp = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
                grVarsBp.addQuery('catalog_item', gr.blueprint + "");
                grVarsBp.addQuery('uuid', grVars.uuid + "");
                grVarsBp.query();
                if (grVarsBp.next()) {
                    this._createOnChangeScript(grVars.variable.sys_id + "", gr.item_name.sys_id + "");
                    grVars.field_json = grVarsBp.field_json + '';
                    grVars.update();
                }
            }
        }

    },

    _createOnChangeSessionScript: function(catSysId) {

        var profileSysID = new GlideRecord('item_option_new');
        profileSysID.addEncodedQuery('cat_item=' + catSysId + '^nameLIKEdefault_profile');
        profileSysID.query();
        profileSysID.next();

        var onChangecatalogClientScript3 = new sn_sc.CatalogClientScript();
        onChangecatalogClientScript3.setAttributes({
            "name": "Fetch dependencies on change of profile",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "cat_variable": "IO:" + profileSysID.sys_id,
            "active": true,
            "order": 700,
            "description": "This script is auto created thorugh runtime module for getting variables on change of profile.",
            "applies_catalog": true,
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,

        });
        onChangecatalogClientScript3.appliesToCatalogItem(true);
        var onChangeScriptVars = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + '').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchLaunchVars'); ga.addParam('sysparm_catsysid', cat_sys_id); ga.addParam('sysparm_profile', profile); ga.getXML(varResponse);}function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); console.log(answer); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue('IO:' + i); var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value = curr_value; parsed_field.sys_id = i + ''; sess_json['IO:' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue('IO:' + k); var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value = curr_value; parsed_field.sys_id = k + ''; sess_json['IO:' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage['varValues'] = JSON.stringify(sess_json);}function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); gajax.addParam('sysparm_name', 'variableArrayParser'); gajax.addParam('sysparm_type', 'catalog'); gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + ''); gajax.addParam('sysparm_varJson', act_var_JSON); gajax.getXML(getVarResponse);}function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) {var row = parsedResponse[i]; var sys_id = 'IO:' + row.sys_id; var type = row.type + ''; if (row.state == 'SUCCESS') { if (type == 'LOCAL') g_form.setValue(sys_id, row.value); if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; (row.value).length; k++) { g_form.addOption(sys_id + '', row.value[k], row.value[k]); } } } if (row.state == 'ERROR') { g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]); } new GlideModal().get('variables_loader').destroy(); }}";
        onChangecatalogClientScript3.addScript(onChangeScriptVars);
        var OnChangeCatalogScriptId = onChangecatalogClientScript3.create();
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(OnChangeCatalogScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }

        var onChangecatalogClientScript2 = new sn_sc.CatalogClientScript();
        onChangecatalogClientScript2.setAttributes({
            "name": "Set Session Vars",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "cat_variable": "IO:" + profileSysID.sys_id,
            "active": true,
            "order": 700,
            "description": "This script is auto created thorugh runtime module for setting session json.",
            "applies_catalog": true,
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        onChangecatalogClientScript2.appliesToCatalogItem(true);
        var onChangeScriptSess = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') {return;}var cat_sys_id = g_form.getUniqueValue();var profile = (newValue + '').trim();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse);function varResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');jslog(answer);var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service;var sess_json = {};for (var i in prof_json) {var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = i + '';sess_json['IO:' + i] = curr_value;}for (var j in serv_json) {for (var k in serv_json[j]) {var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:' + k] = curr_value;}}sessionStorage['varValues'] = JSON.stringify(sess_json);}}";
        onChangecatalogClientScript2.addScript(onChangeScriptSess);
        var OnChangeCatalogScriptId = onChangecatalogClientScript2.create();
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(OnChangeCatalogScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }

        this.logger.debug("Created onChange script to set Session variables ");
    },

    _createOnChangeScript: function(varSysId, catSysId) {
        try {
            this.logger.info("V1.4 migration: Creating onChange Scripts");
            var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
            onChangecatalogClientScript.setAttributes({
                "name": "Fetch values OnChange",
                "type": "onChange",
                "applies_to": "item",
                "cat_item": '' + catSysId,
                "cat_variable": "IO:" + varSysId,
                "active": true,
                "order": 100,
                "description": "This script is auto created thorugh runtime module for fetching values.",
                "applies_catalog": "true",
                "ui_type": "0",
                "applies_req_item": false,
                "applies_sc_task": false,
                "sys_scope": "global"
            });
            onChangecatalogClientScript.appliesToCatalogItem(true);
            var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if(!sessionStorage['varValues'])return; var varValues = JSON.parse(sessionStorage['varValues']);oldValue = varValues[control.id + '']; if (isLoading || newValue == '' || oldValue + '' == newValue + '') {new GlideModal().get('loader').destroy(); return; }jslog(oldValue);jslog(newValue); function varResponse(response,loadingDialog){var answer=response.responseXML.documentElement.getAttribute('answer');var varJSON=JSON.parse(answer);var prof_json=varJSON.profile;var serv_json=varJSON.service;var var_array=[];for(var i in prof_json){var field=prof_json[i];var curr_value=g_form.getValue('IO:'+i);varValues['IO:' + i] = curr_value + '';var parsed_field=JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value=curr_value,parsed_field.sys_id=i+'',var_array.push(parsed_field);}getAdvancedVars(var_array);for(var j in serv_json){var_array=[];for(var k in serv_json[j]){var field=serv_json[j][k];var curr_value=g_form.getValue('IO:'+k);varValues['IO:' + k] = curr_value + '';var parsed_field=JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value=curr_value,parsed_field.sys_id=k+'',var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(varValues);}function getAdvancedVars(variable_json){var act_var_JSON=JSON.stringify(variable_json);var gajax=new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name','variableArrayParser'),gajax.addParam('sysparm_type','catalog'),gajax.addParam('sysparm_parentUuid',g_form.getUniqueValue()+''),gajax.addParam('sysparm_varJson',act_var_JSON),gajax.getXML(getVarResponse);}function getVarResponse(response){ new GlideModal().get('loader').destroy(); var answer=response.responseXML.documentElement.getAttribute('answer');if(answer+''==''||answer+''=='undefined'||answer+''=='null')return;var parsedResponse=JSON.parse(answer);for(var i in parsedResponse){var row=parsedResponse[i];var sys_id='IO:'+row.sys_id;var type=row.type+'';if(row.state=='SUCCESS'&amp;&amp; (type=='EXEC_LOCAL'||type=='HTTP_LOCAL'||type=='EXEC_SECRET'||type=='HTTP_SECRET')){g_form.clearOptions(sys_id);for(var k=0;k&lt;row.value.length;k++)g_form.addOption(sys_id+'',row.value[k],row.value[k]); g_form.setValue(sys_id,row.value);} else {if(row.data_type + '' != 'BASE'){g_form.clearOptions(sys_id); for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + '', row.options[k], row.options[k]);} g_form.setValue(sys_id, row.value);}row.state=='ERROR'&amp;&amp;g_form.addErrorMessage('Error in variable: '+row.name+': '+row.error[0]);}}var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching variables...'); loadingDialog.renderWithContent(''+loadingHTML);var cat_sys_id=g_form.getUniqueValue();var profile=g_form.getValue('default_profile').trim();var ga=new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name','fetchLaunchVars'),ga.addParam('sysparm_catsysid',cat_sys_id),ga.addParam('sysparm_profile',profile),ga.getXML(varResponse,null,loadingDialog);}";
            onChangecatalogClientScript.addScript(onChangeScript);
            var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
            this.logger.info("V1.4 migration, " + catSysId + " Fetch values OnChange catalog client script created.");
            var gr = new GlideRecord('catalog_script_client');
            if (gr.get(OnChangeCatalogScriptId)) {
                gr.setValue("sys_scope", "global");
                gr.update();
            }
        } catch (e) {
            this.logger.error("Exception caught inside Migration_Script._createOnChangeScript. Error:- " + e);
        }
    },

    type: 'Migration_Script'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2019-09-11 10:09:24&lt;/sys_created_on&gt;&lt;sys_id&gt;caeab4864f337300d8494ebf9310c73e&lt;/sys_id&gt;&lt;sys_mod_count&gt;148&lt;/sys_mod_count&gt;&lt;sys_name&gt;Migration_Script&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_caeab4864f337300d8494ebf9310c73e&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-07-13 17:53:02&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>942722367</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.4.5 Complete Build">346d737d1bb0011081326464604bcb11</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-01-03 07:26:35</sys_created_on>
<sys_id>346d737d1bb0011081326464604bcb13</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17e1ed138930000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-01-03 07:26:35</sys_updated_on>
<table/>
<target_name>Migration_Script</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>7028428a44d53010c1b87755ecd15b1b</update_guid>
<update_guid_history>7028428a44d53010c1b87755ecd15b1b:942722367,618b714211d5301041ae84b418fae96d:-1942728233,e0b1c10ad4d130101fe6a69ab93e3447:-1009747617,397c3c06c3d13010d882e5dd68bd05be:-1605575298,4f5cb80651d13010ed4f002e566844f0:-1353169315,0afb44b4535530107384f27ecc8f103d:-57606340,ae5a44749b553010c4fee518bba3d982:-1067315875,1deff768c215301051e956e35af960c0:1535536410,1a673fa0ac153010d9fe858fae4d71d4:1111149809,acfa020815d53010d8c0856b81547229:710172544,ed9a024871d5301029d97d9dcead9732:-810970093,b5684244e8d530103e8a132df66793ee:-1110566222,a345b9c0a89530102f409eda80e2a69a:-148746295,730d610870553010f2ac30ea2b80f31e:1189553387,a6f72d08845530109fa71c1d1f3c4751:465295556,bfefa8bf9d01b0106ee8eb9096994906:184489179,569e7ba3f4c970108cce95fe44f1b77f:815448707,8e53632753cdb410117032dadf28f8b4:-1586753179,0635852fee09b4102f0f6d8db631801a:1083306717,d282c16b5a09b4109080414cc7049fa9:-1292438715,785ef4a73e09b4107ce93dacd54f9568:-730310953,122d3c67d809b41002982eceae7fb701:1528106518,02bab3938245b410cfd5d6c875e1ec33:-294932510,3fc58179f5c5701009b9a23d4b9f4a66:-64071947,4f35413503c57010df31491561b8773b:610240660,c91c35e5f08d3010770c1c093b5eeb9d:-1110779083,37ebb1e5a48d30107216f3615989f6f5:-1157056010,dc3ba86d7b89301087bc52abb4de56d8:-2067725401,02ccff1dc80530107fff432a0191c988:978993168,c255c5f66dc4bc10f1705dbb4e97e0d6:-1109679404,d62adbee0c00bc10fa6982c207e50b8f:-938829013,49aab656cd083c106f340f9e02a56b90:-1734164096,55f87296b0083c10c4342345f7d84afd:-1609613233,bfff2c82c684f8100c5db50630ef1f6f:722887562,19a7984eaa80f810aa30186ef864a7d2:-1233627957,0f630c06cb40f810d7ee72a14e79be16:-521573323,91a349f9570c3050f87fa75e0ef678c6:1482369167,300df475a80c3050c352b2029387233f:612141019,b8c4b07d6fc83050989f6eb5b57f3dde:726323892,ad34bc3db7c8305081358ee7d4a87ace:1482146395,cd8338f93dc830501505b498d87a4a3d:1573019862,334824f5dfcc78101c89c5d93198227a:-1227885991,175c547dd14878100fd31d90d5f69fed:1169846369,1fafe6218dc8f4104596af8184e1b011:-720350223,412d26a96788f410c124dba629ce846a:-1798572143,498c22a90988f410776a564955d584a2:-867119740,924a16252d08f410d7c3267812b9409f:2092517432,cec542998640b410af329e8914cab513:-1672704215,419cad19bb00b4103c24a1faac51bd21:-382632969,c44268c2a3b92010f8037d330688f89c:-817609419,d4a037756b356010049369bed1960b5c:321711684,4b99783f18306010975804e74f21f0fd:-833368849,b9703433933060105ae5ef3bc0ec66b4:1000706849,197fc16b53fc2010843e38a314d1de01:-439317812,b2ba0d6b18bc20105208c7f5e549926d:2098178244,52ec371fbdfc60105ee76cae1fc14867:535339084,23ce549372b460106e9a8da327817362:1084760422,a979a70395346010d7bca5bb7cbd7672:530587356,f42ed103d4ac60102f4d80a7c9bc20e4:1702884945,d45055cf2a2c6010fc83c472232b4237:616941326,ad97b199e7a0a01087e6296ca746e877:1930885726,18c57159bfa0a0107b9349c7b7e768c7:1848365702,e11e0acdec286010d5016313aa8a39ce:-853561603,901ccec51d286010ad34cbed1f6181ed:-1084338431,bed53dc5e7e460106714528214f26f01:1408175284,7a22b1092ee46010e1fa12a4abbfbebf:-123892049,d5d5258592a46010f8061da235deca65:627640957,a1856d4537a46010ae72c042254dd109:1406714032,2f141d0d51e8e050b1ab8ae6565ba48d:-845142013,2cdfc0701caca05033384a629ef3b17b:2142404088,192a8c340d2ca050a88e659c03abc712:-1080722118,1997087cdce8a0507474b0138e8eaecb:514958393,afe3c87c7ca8a05061cc40460b965cbe:-1541715594,2350b222c884e010f8a75a518aec8a3d:-41385206,0e6fe6a2a144e010bca144d7cdf3f196:-1102985943,d9dc2fd24fb3a410fe9fcc9d62222f50:-1469873954,fd93ce5f8fe36010f8c94281d1e907cc:160055078,4b51ce9bbee36010b6f82541f72a287f:-575326538,ef8fb55b2be36010bd6ddeae5169c0b0:1366020,2eac399752e360106fa3c126a7b8dbd0:-1988079278,ca2bf197a3e3601010653a38e39a8bba:1949172809,e41fa95fcca3601087110000b30cae81:1624193497,41a9e5d701a360109fe99f4c0e48f69a:118896578,db88e646215328502a302a7ba650c4d7:-968929448,2be66282185328501e4c31f3dfd9855f:-978935699,dd13059913dfe01048ab85fed9a8b407:2130190675,e2db7c99fe1fe010052d4c603789092c:1175978801,ae6e9bc9a6df24501b2d6d924f56cdb1:-815861837,d0691fc9d6dba010a42a58717226f2ba:-359754939,c11e1788fa5f24508ed093a3684ca2e3:-1096120895,ea0917445d5f24505fa91859ed7e5637:1614014441,2d1487440a1f2450cd31913520a38d15:148956159,26b4c6fa7acf205001d442dcb2e5e35c:-1822618430,0f193ae25bcbac107a3437976f9e8f50:1576682166,3c9d577498cfe4101a45a013dda6b794:2018940530,9cfa97bca58fe410696adb3330839baf:106374574,03b817bc628fe410186ba17a476dc778:1741628813,a9be433ce04fe4108e955b93ee172e89:-1764988119,645b03b0318fe410ac2c3fbdf7a5ed09:-1159529184,74f703b0d88fe4104ce63bdf59e96201:302834688,bdcf363cdf4fe410a5c2ad1cfe263f54:120077110,2c6f3238954fe410ec13af9440db65b4:-2087249129,f104f2b05b4fe4102598b192f3d6f9dd:1780587574,bf613abca20fe4102413f9bbb06fd252:-1728770921,0d603ebcac0fe4106fa127ea9beab149:-324153062,6709d270730fe410251987f1abf5b097:846296896,f48892303a0fe410049b833e6779627e:-22190541,e522563c49cbe4105c25970c37a60ff2:-1617558480,f5f1c134400be410fc78212be6757903:1443369704,868bccfc3307e410ba754bd463b37f23:860664901,edf356ec674fa4100078e74afd17c072:1152600773,39455c20880ba410a804ba4d27132eea:-1999482427,5ef4dc24520ba41029393b3fdec119df:88895795,8bcfd65c0d83a410cfdbb3a7d375ef7e:142322403,e09e921c4983a410b8a36c83f2512565:-176275878,aa2cde988283a410606c08b8502ef47e:1683341362,e2269214c183a4100b1d716544355dae:-1085842769,92359a541783a41009b85fb2563db52c:423638413,85f7cc8da595649049a5f92a39515a38:-1671888124,a50cc04d0304a010d9e06307ee334b0a:-1435386113,20e7800d5304a010e25bf925369f0997:2069133929,9a314da67e6f54106849e7642e6e92b6:175809751,a799715618675410d72ca6b5433c3031:2114252140,8d25cdd630a35410a9c4b394f93d421c:634838339,025ab502246b141092561d35ebcf395f:-1070049925,249214c250e31410c0f5c7cc8b582da8:1541575440,13d75efdd3a750109bd9a5857eef766d:2140628624,66c52031d12bd0107741bda29317207b:812274704,a5f46c312b2bd010a9324c1a97cb6a79:-2088715855,d7fbd4b5e6e7d010977039698d86385a:-1845678258,fdba54f573e7d010d0fbc3255a827352:1712006664,b0990c39bda7d0106693c68f6285ad93:163655485,ada4f3259267d010e307908d3856c9f0:745814570,5a158204172b9010f0ef7bb83ba779b6:869112296,247dc508e6679010115cd078465f1a9d:-1108733538,8d56a101f41750102e39357d41da928a:-993732319,cf04e84d01135010dd3401cc9cd40f56:-947411583,c33a1c056213501027b75accf99002b4:1592620463,46c75c055a1350101aaebed65445e27c:1471297535,b40bf9706ad710103440c5aaae477384:1933924403,53022024d21350109bdc074d55bd8bf6:350800390,479294284bdf1010b37ded70cf7c21fc:1105798470,369f0864a4df10109a37324f02e536ac:1151522099,3d8a8f10df1f101058d18586073f1b69:-1687325504,08b89c0163c75c908290bf7147f54842:901634930,66786d50ee83d89027e982b625aa6619:-1217183196,443319949f87d0104c96842f47285f5d:-804901250,fc25415c1147d010cfde50e1cad46aef:-1852353262,8cf14d98ee47d01073d2af49e4e581fa:1481362477,3351c5987347d0109e0071da0819f5de:-50525092,1c9db094ec47d010f3dc881df45e612c:-1874550043,66e7b410a547d0104b11948a9abb313d:849508809,d033f4106947d010ba51dd0066299872:2052980060,061f68909407d010d07bdfc3bde72dfb:-276613048,f5bbe4dcefc3d0107eb2e582eea2a0a3:927928773,df96a4d818c3d0106955cd2460128be0:-805653090,8c25a45896c3d010bd40cf31680e6ed2:-2091770536,a983ec582cc3d010aa1842bafb8a9b60:1328227568,06c1189c3e83d0107fc9cff8189b52d2:-1901943432,3bdf4018b483d01064c13aa922d1dc1c:934422790,d60b059fb7ba5010e540b304a8d9f10e:1500667199,fb790d5b4c7a50100ec0a46114923695:806665422,1a2ac2cffbb25010655dd9a7144de1a7:1521625119,32b1e16f972298503552fe8fefd8b8d9:-551997769,c76b1f26783b84101699a4e185cba18b:-753688393,097b64f2a41100103d297aa02e5c1a8d:-912298074,470bb568d71908104151472ef344ea38:-741977356,e8b97d2867190810ced38c88647e1927:867468443,72bd17fe6c41041045fca46ec9ce8b74:1563531241,c694e3b73c7f330077f703ee6df280c0:907140764,af00f5aefd3bb300d33393d88e1ec300:-931762699,9c8795a61ff7b3009da79fc6d24e2fe4:909114287,80b9f06670b7b300a0dc0713f4a1201c:-1866674801,d143b8eacebb3300a9b26b1f21873d8d:-1840373311,9fd0b82689bb3300e81365b9698843c5:210928253,8fd9a0e215bb330064f496ab81075243:-630791341,a70df396e43b330039398af0d931612b:1631528564,2f9aa6da0f37330088be1cd81c61cf6b:185703213,127aa6daff373300429261ee6d857564:-1848709098,cf3aaa9abf3733000042c1b2f32cb215:-304031332,ff2aae9a5a3733002a5c8c2a06ec8ccf:344153237,e5e4a696e0373300423e76365a56f98c:-2078374087,18a6d25a95f33300e3097677b4d030d3:489118318,8c96521e2ff33300a084c7c921fc9116:-2111722977,562196d63fb33300c2baf2d26a8f0b75:-896639251,a4f2ca96dbb33300ac3ce7d0e49b826a:-1385597839,25c1429257b333000e63959788a73a41:-940423726,4ab1b95a3e333300409bc2c1f0615602:546104125,b920355a5f7333006d2374e3d4d84234:527834964,60642d1afa333300deab36de8709c65a:-1575383558,fdfad51693333300f0aba0a5886da3cc:612375769,c709d5928d333300db64d85c27324fef:-548422816,f71bda4abb37730041004c07e4f84ef4:-293315480,40159a4666f37300332d5ff896b245f7:2037898708,e9f30e4a26f373007bbfe229bc083bc9:-1598826147,45152dce777373007b61d0fd0d7b6348:1031060289,034269424db373000478953c57913805:574640253,57b1a1428fb373003e7f8a5c292ce8b4:-1118767405,3ea1614251b37300ce5fd7d09f82f6fa:-81791376,46afd1ce8f737300fe6c21326add9110:-1812907213,c7ee5542777373009ce66e45d66d3cb4:1275437037,0f8acd0a7e3373009915d4ad8a677bff:81599683,763bf0427f3373004bc5657665a53663:616933246</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sysauto_script_86712ae337c5a300fdfc097973990eec</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sysauto_script"&gt;&lt;sysauto_script action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;business_calendar/&gt;&lt;condition/&gt;&lt;conditional&gt;false&lt;/conditional&gt;&lt;entered_time/&gt;&lt;name&gt;Nutanix_Import Inventories Job&lt;/name&gt;&lt;offset/&gt;&lt;offset_type/&gt;&lt;run_as/&gt;&lt;run_as_tz/&gt;&lt;run_dayofmonth&gt;1&lt;/run_dayofmonth&gt;&lt;run_dayofweek&gt;1&lt;/run_dayofweek&gt;&lt;run_period/&gt;&lt;run_start&gt;2018-10-15 20:23:09&lt;/run_start&gt;&lt;run_time&gt;1970-01-01 09:00:00&lt;/run_time&gt;&lt;run_type&gt;daily&lt;/run_type&gt;&lt;script&gt;&lt;![CDATA[var appUtil;
if(current.active+'' == 'false'){
	appUtil = new Nutanix_Calm_Logger();
	appUtil.error(current.name+' schedule job is in active false state. Please activate it before executing the same.');
}else{
	updateCalmVersion();
	if(new x_nuta2_nutanix_ca.Migration_Script().checkForTheRuntimeConfigurationsCatalogItems()){
		var appUtil = new Nutanix_Calm_Utils();
		appUtil.insertIntoQueue('startMigration_1_4_5', '', '', '', 'Migrating to v1.4.5', 'This process is migrating v1.4.4 to v1.4.5');
	}
	if(new x_nuta2_nutanix_ca.Migration_Script().isCatalogItemsAvailable()){
		appUtil = new Nutanix_Calm_Utils();
		appUtil.insertIntoQueue('startMigration_1_4_4', '', '', '', 'Migrating to v1.4.4', 'This process is migrating v1.4 to v1.4.4');
	}
	if(new x_nuta2_nutanix_ca.Migration_Script().isMigrationNeeded()){
		appUtil = new Nutanix_Calm_Utils();
		appUtil.insertIntoQueue('startMigration', '', '', '', 'Migrating to v1.4', 'This process is migrating v1.3 to v1.4.');
	}
	if(gs.getProperty('x_nuta2_nutanix_ca.1_4_3')+'' == '0'){
		var appUtil = new Nutanix_Calm_Utils();
		appUtil.migrateV1_4_3();
	}
    else{
		appUtil = new Nutanix_Calm_Utils();
		appUtil.insertIntoQueue('startInventorySync', '', '', '', 'Start inventory sync', 'This process is invoking the import of all the inventories.');
	}
}
//to update the calm version on the execution of every Scheduled Job.
function updateCalmVersion(){
	var previous_calm_vesrsion = parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version'));
	var new_calm_version ;
	gs.setProperty('x_nuta2_nutanix_ca.calm_version', '');
	
	var plug_property = new GlideRecord('x_nuta2_nutanix_ca_calm_plugin_configuration');
	plug_property.get(gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id'));
	
	var logger = new Nutanix_Calm_Logger();
    var utils = new Nutanix_Calm_Utils();

    var authResp = utils.makeCalmApiCall("post", "/projects/list", '{"kind" : "project"}');
    var statusCode = authResp.getStatusCode();
   
    if (authResp.getStatusCode() == '200' || authResp.getStatusCode() == '201') {

        var verResp = utils.makeCalmApiVersionCall("get", "/apps/version", '');
        if (verResp.getStatusCode() == '200' || verResp.getStatusCode() == '201') {
            var response = verResp.getBody();
			
			new_calm_version = parseFloat(response.split('.')[0] + '.' + response.split('.')[1]);
			if((parseFloat(new_calm_version) == parseFloat("3.2")) &amp;&amp; (parseFloat(new_calm_version) &gt; parseFloat(previous_calm_vesrsion))){
				gs.setProperty('x_nuta2_nutanix_ca.1_4_4', '0');
			}
			
            plug_property.calm_version = response.split('.')[0] + '.' + response.split('.')[1];
            gs.setProperty('x_nuta2_nutanix_ca.calm_version', plug_property.calm_version);    
            plug_property.update();
			logger.info('Schedule Job Calm Version updated-&gt;' + plug_property.calm_version);
        } else {
            plug_property.calm_version = '';
            plug_property.update();

            gs.addErrorMessage('Nutanix Calm Version cannot be detected.Please check the logs and retry saving properties.');
            logger.error('Schedule Job Calm Version cannot be detected. Error-&gt;' + verResp.getBody());
        }
}
}]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sysauto_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-15 20:23:44&lt;/sys_created_on&gt;&lt;sys_id&gt;86712ae337c5a300fdfc097973990eec&lt;/sys_id&gt;&lt;sys_mod_count&gt;50&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_Import Inventories Job&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sysauto_script_86712ae337c5a300fdfc097973990eec&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-06-29 08:12:03&lt;/sys_updated_on&gt;&lt;time_zone/&gt;&lt;upgrade_safe&gt;false&lt;/upgrade_safe&gt;&lt;/sysauto_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>-72932247</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.4.5 Complete Build">346d737d1bb0011081326464604bcb11</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-01-03 07:26:35</sys_created_on>
<sys_id>386d737d1bb0011081326464604bcb11</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17e1ed1383e0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-01-03 07:26:35</sys_updated_on>
<table/>
<target_name>Nutanix_Import Inventories Job</target_name>
<type>Scheduled Script Execution</type>
<update_domain>global</update_domain>
<update_guid>0f5ffcaf48c5b4101a94a1202548025b</update_guid>
<update_guid_history>0f5ffcaf48c5b4101a94a1202548025b:-72932247,2a4aa4ed8c893010c3d953b609293d0f:-72932247,8bb45fbba76b2010a066cb3ae28dea38:-2076531287,f0f2363b25efa0103ad9e43db1eee781:-672501994,6216db5b2549201066457bc6c8cfc82b:1317566638,26382a0fc0c9ec50d230cfd42e63ffa8:1631041166,70a77fbc5bc0a010d0d99fdc32a2f9ca:-643791617,fd17ec59f0a7101099c4e43c6e99324e:1059249552,a84646688d0a10108600bbff1fe7639e:149388791,adf1d5453b423300efd7591e2fc93e58:1075233700,adf1d5453b423300efd7591e2fc93e58:1075233700,faaf0cf0634e73003339e40aa173204f:-1548821773,a02c70bfe14033004b36e28116fd7049:-1358784723,32de5d76ef5223009c39603892521554:31952376,d2de2dfdfb122300393a95c77f95b312:-573038441,1b7ead1068d6230054f1dc278008ea21:380856702,d44d65dcad962300011786037f9b043b:392291058,e4532a778e8663005c806592b361b513:1644852760,c673e2bda60a630005bb12698cc6c3e8:551727958,64b79a758e0a630076dee1dfb95c6827:-1723359011,947abddc0082e700dc589dabbaaad2b8:324155052,ac42a01c1d4ea700daa9985af01c1cc9:783621195,ffac5ae834612300eb1d3d4f2d95a64f:-242358860,aa378e6cd12123008df41e96cb544720:-1289391876,ff35ccf9dd51230037da5fb64b6afa08:-1690682619,193746fc21d12300b1009d10d6df0b00:1801983291,00897574c7d12300a302387c737e2a69:140282053,bca32e27e0c5a300f140a7e32713acdd:-1947656956</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_properties_bbb212901b83a4107f2a8515ec4bcbaf</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties"><sys_properties action="INSERT_OR_UPDATE"><choices/><description>Migration of 1.4.4 for 3.2 calm version</description><ignore_cache>true</ignore_cache><is_private>false</is_private><name>x_nuta2_nutanix_ca.1_4_4</name><read_roles>x_nuta2_nutanix_ca.calm_admin,x_nuta2_nutanix_ca.user</read_roles><suffix>x_nuta2_nutanix_ca.1_4_4</suffix><sys_class_name>sys_properties</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2021-03-18 11:50:08</sys_created_on><sys_id>bbb212901b83a4107f2a8515ec4bcbaf</sys_id><sys_mod_count>14</sys_mod_count><sys_name>x_nuta2_nutanix_ca.1_4_4</sys_name><sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_properties_bbb212901b83a4107f2a8515ec4bcbaf</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2021-07-13 17:52:27</sys_updated_on><type>string</type><value>1</value><write_roles/></sys_properties><sys_translated_text action="delete_multiple" query="documentkey=bbb212901b83a4107f2a8515ec4bcbaf"/></record_update>]]></payload>
<payload_hash>-1680463037</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.4.5 Complete Build">346d737d1bb0011081326464604bcb11</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-01-03 07:26:35</sys_created_on>
<sys_id>386d737d1bb0011081326464604bcb12</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17e1ed1387c0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-01-03 07:26:35</sys_updated_on>
<table/>
<target_name>x_nuta2_nutanix_ca.1_4_4</target_name>
<type>System Property</type>
<update_domain>global</update_domain>
<update_guid>9c08428aa1d530105a6e24811cbdb32d</update_guid>
<update_guid_history>9c08428aa1d530105a6e24811cbdb32d:-1680463037,9bf7c6422dd53010c7e9dad0cc4a9224:-1700800412,d98b8e4873d530103963259b4e619d1d:-1680463037,0c8b4a487ed5301076aa422c48e3e392:-1700800412,0ddefca7bb09b4108091f409843213dc:-1680463037,8fce70e71009b41046db90c556a6b340:-1700800412,efb5457d72c57010180d5900b1a7122e:-1680463037,49b5c539f8c570109eca2e4132ca9922:-1700800412,fe654179d6c57010684118378a5965b1:-1680463037,e06585b5a1c57010eb95adebcdfa2e6d:-1700800412,fb4a33190dc130103e4d5330958fef05:-1680463037,781c7030000be410e0672360b423b214:-1700800412,f1645214f583a410386a3c310ef9a25c:397221077,dc3312d00583a41008a4a231bf001290:-612748853,4013dad09483a4109732064e0d646ee0:143488782</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_ui_action_2435e709db7e23009f42bd51399619fe</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_ui_action"&gt;&lt;sys_ui_action action="INSERT_OR_UPDATE"&gt;&lt;action_name&gt;sysverb_update_and_stay&lt;/action_name&gt;&lt;active&gt;true&lt;/active&gt;&lt;client&gt;false&lt;/client&gt;&lt;client_script_v2&gt;&lt;![CDATA[function onClick(g_form) {

}]]&gt;&lt;/client_script_v2&gt;&lt;comments/&gt;&lt;condition&gt;!(current.isNewRecord() &amp;amp;&amp;amp; !current.canCreate()) &amp;amp;&amp;amp; current.canWrite()&lt;/condition&gt;&lt;form_action&gt;false&lt;/form_action&gt;&lt;form_button&gt;false&lt;/form_button&gt;&lt;form_button_v2&gt;false&lt;/form_button_v2&gt;&lt;form_context_menu&gt;false&lt;/form_context_menu&gt;&lt;form_link&gt;false&lt;/form_link&gt;&lt;form_menu_button_v2&gt;false&lt;/form_menu_button_v2&gt;&lt;form_style/&gt;&lt;hint/&gt;&lt;isolate_script&gt;false&lt;/isolate_script&gt;&lt;list_action&gt;false&lt;/list_action&gt;&lt;list_banner_button&gt;false&lt;/list_banner_button&gt;&lt;list_button&gt;false&lt;/list_button&gt;&lt;list_choice&gt;false&lt;/list_choice&gt;&lt;list_context_menu&gt;false&lt;/list_context_menu&gt;&lt;list_link&gt;false&lt;/list_link&gt;&lt;list_save_with_form_button&gt;false&lt;/list_save_with_form_button&gt;&lt;list_style/&gt;&lt;messages/&gt;&lt;name&gt;Save&lt;/name&gt;&lt;onclick/&gt;&lt;order&gt;0&lt;/order&gt;&lt;script&gt;&lt;![CDATA[action.setRedirectURL(current);
current.update();
if (! current.isActionAborted())
    action.setRedirectURL(current);]]&gt;&lt;/script&gt;&lt;show_insert&gt;false&lt;/show_insert&gt;&lt;show_multiple_update&gt;false&lt;/show_multiple_update&gt;&lt;show_query&gt;false&lt;/show_query&gt;&lt;show_update&gt;true&lt;/show_update&gt;&lt;sys_class_name&gt;sys_ui_action&lt;/sys_class_name&gt;&lt;sys_created_by&gt;mumtaz.ansari&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2019-01-03 06:44:48&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;2435e709db7e23009f42bd51399619fe&lt;/sys_id&gt;&lt;sys_mod_count&gt;8&lt;/sys_mod_count&gt;&lt;sys_name&gt;Save&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_action_2435e709db7e23009f42bd51399619fe&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-08-05 12:39:48&lt;/sys_updated_on&gt;&lt;table&gt;x_nuta2_nutanix_ca_calm_plugin_configuration&lt;/table&gt;&lt;ui11_compatible&gt;true&lt;/ui11_compatible&gt;&lt;ui16_compatible&gt;false&lt;/ui16_compatible&gt;&lt;/sys_ui_action&gt;&lt;/record_update&gt;</payload>
<payload_hash>-219475587</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.4.5 Complete Build">346d737d1bb0011081326464604bcb11</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-01-03 07:26:35</sys_created_on>
<sys_id>3c6d737d1bb0011081326464604bcb14</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17e1ed24d750000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-01-03 07:26:35</sys_updated_on>
<table>x_nuta2_nutanix_ca_calm_plugin_configuration</table>
<target_name>Save</target_name>
<type>UI Action</type>
<update_domain>global</update_domain>
<update_guid>e80dd319da313010dcf454edc6332bde</update_guid>
<update_guid_history>e80dd319da313010dcf454edc6332bde:-219475587,c5d0990bd9bbc4105cef5ca634b697ca:-849869170,4a462f490b7e23000c2e5afb7e662194:-1067794959,6e16e749657e2300f2aa9684e638e413:-1138648309,e4a52709427e2300c54921cb97997ff8:-1067794959,c6952f09297e23004e40a9828e482d61:-1138648309,4d852b09017e23003828052eae2a5ab6:-1067794959,b16527097f7e23002e00be2ab69fa651:445581751,a25527090f7e2300e7e64ee0cb8a58f4:1489624556</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_92e8017f37112300fdfc097973990e33</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Nutanix_FetchConfigureSettingDropdown&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Nutanix_FetchConfigureSettingDropdown&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Nutanix_FetchConfigureSettingDropdown = Class.create();
Nutanix_FetchConfigureSettingDropdown.prototype = {
    
	initialize: function() {
        this.appUtil = new Nutanix_Calm_Utils();
        this.logger = new Nutanix_Calm_Logger();

        this.disabledFields = gs.getProperty('x_nuta2_nutanix_ca.disabled.fields') + '';
    },
	
    _insertIntoOptions: function(var_json) {

        try {

            var sys_id = var_json.sys_id + "";
            var grQuestionChoice = new GlideRecord("x_nuta2_nutanix_ca_generic_table_for_dropdown");
            grQuestionChoice.addQuery('variable', sys_id + "");
            grQuestionChoice.query();
            grQuestionChoice.deleteMultiple();


            for (var i = 0; i &lt; var_json.options.length; i++) {
                var grQuestionChoice = new GlideRecord("x_nuta2_nutanix_ca_generic_table_for_dropdown");
                grQuestionChoice.initialize();
                grQuestionChoice.variable = sys_id + "";
                grQuestionChoice.name = var_json.options[i] + "";
                grQuestionChoice.value = var_json.options[i] + "";
                grQuestionChoice.insert();
            }
        } catch (e) {
            gs.info("In _insertIntoOptions:" + e);
        }
    },

    _sysIdToValue: function(values) {
        var sys_id_arr = values.split(",");
        var val_arr = [];
        for (var i = 0; i &lt; sys_id_arr.length; i++) {
            var grQuestionChoice = new GlideRecord("x_nuta2_nutanix_ca_generic_table_for_dropdown");
            grQuestionChoice.get(sys_id_arr[i] + "");
            val_arr.push(grQuestionChoice.value + "");
        }
        return val_arr.toString();
    },

    variableArrayParser: function(type, parent_uuid, var_array, field) { //field
		try{
		this.logger.debug("Inside Nutanix_ClientServerScriptBridge.variableArrayParser.");
        if (field != "onLoad") {
            var grItem = new GlideRecord("item_option_new");
            field = field.replace("IO:", "");
            grItem.get(field);
            field = grItem.name + "";
        }

        var cat_launch = false;
        if (type + "" == 'catalog') {
            cat_launch = true;
            var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
            gr.addQuery("item_name", parent_uuid);
            gr.query();
            if (gr.next()) {
                parent_uuid = gr.blueprint.uuid + "";
                type = "blueprints";
                if ("" + gr.item_name.category.title == "Un-Published Blueprints") {
                    type = "blueprints";
                }
                if ("" + gr.item_name.category.title == "Published Blueprints") {
                    type = "published";
                }

            }
        }
		
        var parsed_var_array = JSON.parse(var_array);
        var pre_map = {};
        var extApiFlag = false;
		var str = [];
			
        for (var i = 0; i &lt; parsed_var_array.length; i++) {
            var var_data = parsed_var_array[i];

            var hasMacros = (this.appUtil._createMacroArray(var_data.def_val + "").length != 0);
            if (hasMacros)
                var_data.value = var_data.def_val;
            var depends_on = this.appUtil.getMacroDependencies(JSON.stringify(var_data));
			
			
           
			if (field != "onLoad" ) {
                if (depends_on.all_dep.indexOf(field) != -1) {
                    str.push(var_data.name);
                }
            }
            pre_map[var_data.name] = {
                "depends_on": depends_on,
                "value": (hasMacros) ? var_data.def_val + "" : var_data.value + "",
                "uuid": var_data.uuid,
                "type": var_data.type,
                "data_type": var_data.data_type,
                "name": var_data.name,
                "sys_id": (var_data.sys_id) ? var_data.sys_id : "",
                "catalog_launch": cat_launch
            };

            if (var_data.type == 'EXEC_LOCAL' || var_data.type == 'HTTP_LOCAL' || var_data.type == 'EXEC_SECRET' || var_data.type == 'HTTP_SECRET') {
                pre_map[var_data.name].requiresApiCall = true;
            } else {
                if (var_data.options &amp;&amp; var_data.options.choices &amp;&amp; var_data.options.choices.length != 0) {
                    pre_map[var_data.name].options = var_data.options.choices;
                    pre_map[var_data.name].data_type = "LIST_SINGLE";
                }
                if (var_data.data_type + "" == 'LIST') {
                    if (cat_launch)
                        pre_map[var_data.name].value = this._sysIdToValue(var_data.value);
                    pre_map[var_data.name].data_type = var_data.data_type;
                }
            }
        

		}
		gs.info(" Inside Nutanix_ClientServerScriptBridge.variableArrayParser Pre_map :: " + JSON.stringify(pre_map))
		var result = this.getHttpValues(type, parent_uuid, JSON.stringify(pre_map),str);
		return result;
		}catch(e){
			this.logger.error("Exception caught Inside Nutanix_ClientServerScriptBridge.variableArrayParser . Error : - " + e);
		}
    },

    fetchLaunchVars: function(catSysId, profile) {

        var varJSON = {
            "profile": {},
            "service": {}
        };
        var grProfile = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
        grProfile.addQuery('application_profile.name', profile + "");
        grProfile.addQuery('catalog_item', catSysId + "");
        grProfile.addQuery('isprofilevariable', true);
        grProfile.orderBy('variable.name');
        grProfile.query();
        while (grProfile.next())
            varJSON.profile[grProfile.variable.sys_id + ""] = grProfile.field_json + "";
        var grService = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
        grService.addQuery('catalog_item', catSysId);
        grService.addQuery('isservicevariable', true);
        grService.orderBy('variable.name');
        grService.query();
        while (grService.next()) {
            varJSON.service[grService.service_name.question_text + ""] = {};
        }

        grService.query();
        while (grService.next()) {
            varJSON.service[grService.service_name.question_text + ""][grService.variable.sys_id + ""] = grService.field_json + "";
        }

        //[grService.sys_id] = {"field_json": grService.field_json + ""};
        //varJSON["service"][grService.service_name] = {"sys_id": grService.sys_id, "field_json": grService.field_json};
        return JSON.stringify(varJSON);
    },

    fieldValidation: function(catSysId, fieldValueMap) {
        try {
            this.logger.debug("Inside Nutanix_ClientServerScriptBridge.fieldValidation.");
            var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
            gr.addEncodedQuery('catalog_item=' + catSysId + '^isprofilevariable=true^ORisservicevariable=true^ORfield_regexISNOTEMPTY');
            gr.query();

            var fieldValReg = {};
            while (gr.next()) {

                var listRegex = {};
                if (gr.type + '' == 21) {
                    var filter = (gr.variable.reference_qual + '').substr(9, (gr.variable.reference_qual + '').length);
                    var genTable = new GlideRecord('x_nuta2_nutanix_ca_generic_table_for_dropdown');
                    genTable.addQuery('variable', filter);
                    genTable.query();
                    while (genTable.next()) {
                        listRegex[genTable.sys_id + ''] = genTable.value + '';
                    }


                }
                fieldValReg[gr.variable.name + ''] = {
                    "status": false,
                    "regex": gr.field_regex + '',
                    "type": gr.type + '',
                    "data_type": gr.data_type + '',
                    "listRegex": listRegex
                };
            }
            return JSON.stringify(fieldValReg);

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fieldValidation. Error:- " + e);
        }

    },


    hideAccessLocalGroupOption: function() //hide the option
    {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.hideAccessLocalGroupOption.");

            var lg = new GlideRecord('x_nuta2_nutanix_ca_calm_plugin_configuration');
            lg.addQuery();
            lg.query();
            while (lg.next()) {
                return lg.use_local_groups;

            }
        } catch (e) {
            this.logger.error("Error caught in Nutanix_FetchConfigureSettingDropdown.hideAccessLocalGroupOption:" + e);
        }
    },

    supportStatusMPI: function(bpSysID) {
        try {
            //             gs.info(bpSysID);
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.supportStatusMPI.");
            var ss = new GlideRecord('x_nuta2_nutanix_ca_nutanix_marketplaceitems');
            if (ss.get(bpSysID)) {
                return ss.support_status;
            }
        } catch (e) {
            this.logger.error("Error caught in Nutanix_FetchConfigureSettingDropdown.supportStatusMPI: " + e);
        }
    },

    advanceVariableDynamicOptions: function(catSysId, fieldValueMap) {
        try {

            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.advanceVariableDynamicOptions.");
            /*var launch_set_json = {};
			var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties+'');
			gr.addEncodedQuery('catalog_item='+catSysId+'^isprofilevariable=true^ORisservicevariable=true');//^data_typeINEXEC_SECRET,HTTP_SECRET,EXEC_LOCAL,HTTP_LOCAL');
			
			gr.query();
			
		
			var catalog =  new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
			catalog.addQuery('item_name',catSysId);
			catalog.query();
			
			var profile_json = {};
			var service_json = {};
			while(gr.next()) {
				var type = gr.data_type + "";
				var requires_api_call = false;
				
				if(type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET')
					requires_api_call = true;
				
				if(gr.isprofilevariable + "" == "true") {
					profile_json[gr.variable.question_text + ""] = {
						"sys_id" : gr.sys_id+'',
						"value" : gr.default_value + "",
						"depends_on" : JSON.parse(gr.field_json + ""),
						"uuid": gr.uuid + "",
						"type": type,
						"requiresApiCall": requires_api_call,
						"name": gr.variable.name+'',
						"question_text": gr.variable.question_text+''
					};
					
				}
				if(gr.isservicevariable + "" == "true") {
					service_json[gr.variable.question_text+''] = {
						"sys_id" : gr.sys_id+'',
						"value" : gr.default_value + "",
						"depends_on" : JSON.parse(gr.field_json + ""),
						"uuid": gr.uuid + "",
						"type": type,
						"requiresApiCall": requires_api_call,
						"name": gr.variable.name+'',
						"question_text": gr.variable.question_text+''
					};
				}
			}
			launch_set_json = {"profile_json": profile_json, "service_json": service_json};
			gs.info("Launch Page:"+JSON.stringify(launch_set_json));
			
			launch_set_json.profile_json = JSON.parse(this.getHttpValues('blueprints', catalog.blueprint.uuid + "" , JSON.stringify(launch_set_json.profile_json)));
			launch_set_json.service_json = JSON.parse(this.getHttpValues('blueprints', catalog.blueprint.uuid + "" , JSON.stringify(launch_set_json.service_json)));
			
			gs.info("Result:"+JSON.stringify(launch_set_json));
			return;*/
            var advanceFields = [];
            advanceFields[0] = {};
            advanceFields[1] = JSON.parse(this.fieldValidation(catSysId));
            return JSON.stringify(advanceFields);

        } catch (e) {
            this.logger.error("Error caught in Nutanix_FetchConfigureSettingDropdown.advanceVariableDynamicOptions:" + e);
        }
    },

    _substituteMacroEscript: function(value, all_values) {

        var macro_split = value.split("@@{");
        for (var i = 0; i &lt; macro_split.length; i++) {
            if (macro_split[i].includes("}@@")) { //@@{Prince}@@
                var internal_split = macro_split[i].split("}@@");
                if (!all_values[internal_split[0]])
                    return '';
                internal_split[0] = (all_values[internal_split[0]].value + "").replace(/\n/g, "");
                macro_split[i] = internal_split.join('');
            }
        }
        return macro_split.join('');
    },

    _substituteMacro: function(value, all_values) {
		var macro_split = value.split("@@{");
        for (var i = 0; i &lt; macro_split.length; i++) {
            if (macro_split[i].includes("}@@")) { //@@{Prince}@@
                var internal_split = macro_split[i].split("}@@");
                if (!all_values[internal_split[0]])
                    return '';
				internal_split[0] = unescape(all_values[internal_split[0]].value + "");
                macro_split[i] = (internal_split.join('')).replace(/\n/g, "");
			}
        }
		
        return (macro_split.join(''));
    },

    _createOverrideVarBody: function(all_values, variable_json) {

        try {
            var type = variable_json.type + "";
            var override_array = [];

            if (type == "EXEC_LOCAL" || type == "EXEC_SECRET") {
                override_array.push({
                    "key": "script",
                    "value": this._substituteMacroEscript(variable_json.depends_on.script.value, all_values)
                });
            }

            if (type == "HTTP_LOCAL" || type == "HTTP_SECRET") {
                var supported_fields = {
                    "content_type": "",
                    "url": "",
                    "request_body": "",
                    "response_paths": ""
                };
                for (var i in supported_fields) {

                    var val = (variable_json.depends_on[i].value) ? variable_json.depends_on[i].value + "" : "";

                    if (i == "response_paths") {
                        val = (variable_json.depends_on[i].value) ? variable_json.depends_on[i].value : {};
                        var var_name = {};
                        for (var k in val)
                            var_name[k] = this._substituteMacro(val[k] + "", all_values);
                        override_array.push({
                            "key": i,
                            "value": var_name
                        });
                    } else {
                        override_array.push({
                            "key": i,
                            "value": this._substituteMacro(val, all_values)
                        });
                    }
                }

            }

            return JSON.stringify(override_array);
        } catch (e) {
            gs.info("override_array er" + e);
        }
    },

    getHttpValues: function(type, parent_uuid, pre_map,str) {
        try {
			
			gs.info("Pre Value Map :: " + JSON.stringify(pre_map));
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getHttpValues. type : " + type + " parent_uuid : " + parent_uuid + " pre_map : " + pre_map);

            var post_value_map = {};
            pre_map = JSON.parse(pre_map);
            var top_pre_map = {};
            for (var i in pre_map) {
                top_pre_map[i] = this.appUtil.createPreMap(pre_map[i].depends_on, pre_map[i].type);
            }

            var top_post_map = this.appUtil.createDependencyMap(top_pre_map);
            var dependency_array = top_post_map.Dep_array;
            var error_array = top_post_map.error_map;
            var mpi_uuid, bp_name, project_uuid, environment_uuid;
            if (type == 'unpublished') {
                var table_name = (type == 'unpublished') ? this.appUtil.configuration.table.Blueprint + '' : 'x_nuta2_nutanix_ca_nutanix_marketplaceitems';
                var grBlueprint = new GlideRecord(table_name);
                if (grBlueprint.get(parent_uuid)) {
                    parent_uuid = grBlueprint.uuid + '';
                    type = 'blueprints';
                }
            }
            if (type == 'published') {
                var table_name = (type == 'unpublished') ? this.appUtil.configuration.table.Blueprint + '' : 'x_nuta2_nutanix_ca_nutanix_marketplaceitems';
                var grBlueprint = new GlideRecord(table_name);
                if (grBlueprint.get(parent_uuid)) {
                    mpi_uuid = grBlueprint.uuid + '';
                    bp_name = grBlueprint.name;

                    var bp_project = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_projects_blueprints_relationship');
                    bp_project.addEncodedQuery('catalog_item.sys_id=' + parent_uuid);
                    bp_project.query();
                    while (bp_project.next()) {
                        project_uuid = bp_project.projects.uuid;
                        environment_uuid = bp_project.projects.environment_uuid;
                    }
                    parent_uuid = this.mpiPatchingBp(mpi_uuid, bp_name, project_uuid, environment_uuid);
                    type = 'blueprints';
                } else {
                    var grBlueprint = new GlideRecord(table_name);
                    grBlueprint.addEncodedQuery('uuidLIKE' + parent_uuid);
                    grBlueprint.query();
                    if (grBlueprint.next()) {
                        mpi_uuid = grBlueprint.uuid + '';
                        bp_name = grBlueprint.name;
                        var bp_project = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_projects_blueprints_relationship');
                        bp_project.addEncodedQuery('catalog_item.sys_id=' + grBlueprint.sys_id);
                        bp_project.query();
                        while (bp_project.next()) {
                            project_uuid = bp_project.projects.uuid;
                            environment_uuid = bp_project.projects.environment_uuid;
                        }
                        parent_uuid = this.mpiPatchingBp(mpi_uuid, bp_name, project_uuid, environment_uuid);
                        type = 'blueprints';
                    }
                }
            }
			
            for (var pos = 0; pos &lt; dependency_array.length; pos++) {

                var var_json = pre_map[dependency_array[pos]];
                this.logger.debug("!!!!! var_json \n" + JSON.stringify(var_json));
                if (!var_json) {
                    this.logger.error('Dependent variable "' + dependency_array[pos] + '" not found.');
                    continue;
                }


                if (!var_json.requiresApiCall) {
                    if (var_json.data_type + "" == "LIST_SINGLE" || var_json.data_type + "" == 'LIST') {
                        var_json.options = this._substituteMacro(var_json.options.toString(), pre_map).split(',');
                        var_json.value = this._substituteMacro(var_json.value, pre_map); //2,33,44
                    } else
                        var_json.value = this._substituteMacro(var_json.value, pre_map);

                    if (var_json.depends_on.all_dep.length != 0 &amp;&amp; var_json.data_type + "" == "LIST" &amp;&amp; var_json.catalog_launch) {
                        this._insertIntoOptions(var_json);
                    }
                    if ((str.length == 0 || ( str.length &gt; 0  &amp;&amp; str.indexOf(var_json.name) != -1)) &amp;&amp; var_json.depends_on.all_dep.length != 0)
                        post_value_map[dependency_array[pos]] = var_json;
                      continue;
                }
			//	if(!var_json.value){
				if(str.length == 0 || ( str.length &gt; 0  &amp;&amp; str.indexOf(var_json.name) != -1)){
				var var_uuid = var_json.uuid;
                var options = {
                    "state": "",
                    "values": []
                };

                var request_body = JSON.stringify({
                    "requestId": "",
                    "overridden_field": this._createOverrideVarBody(pre_map, var_json)
                });
				
                var sendValuesBody = this.appUtil.makeCalmApiCall('POST', '/' + type + '/' + parent_uuid + '/variables/' + var_uuid + '/values', request_body + "");
				
                if (!sendValuesBody){
					continue;
				}
                var parsedSendValueBody = JSON.parse(sendValuesBody.getBody());
                var valPollBody = {
                    "requestId": parsedSendValueBody.request_id,
                    "trlId": parsedSendValueBody.trl_id
                };
				
                var getValuesBody = this.appUtil.makeCalmApiCall('POST', '/' + type + '/' + parent_uuid + '/variables/' + var_uuid + '/values', JSON.stringify(valPollBody));
				
               
                if (!getValuesBody){
                    
					continue;
		}
				var parsedValueBody = JSON.parse(getValuesBody.getBody());
                var execState = parsedValueBody.state + "";
					
				
                while (execState == 'RUNNING' || execState == 'running') {
					
                    getValuesBody = this.appUtil.makeCalmApiCall('POST', '/' + type + '/' + parent_uuid + '/variables/' + var_uuid + '/values', JSON.stringify(valPollBody));
					
                    parsedValueBody = JSON.parse(getValuesBody.getBody());
                    execState = parsedValueBody.state + "";
                }

                if (parsedValueBody.state == 'SUCCESS') {
                    var_json.state = parsedValueBody.state;
                    var_json.default_value = var_json.value + "";
                    var_json.value = [];
                    for (var i in parsedValueBody.values)
                        var_json.value[i] = parsedValueBody.values[i];
                } else {
					
                    var_json.state = parsedValueBody.state;
					
                    var_json.error = [];
                    for (var j in parsedValueBody.message_list)
                        var_json.error[j] = parsedValueBody.message_list[j].message;
                }
				
				//if(str.length == 0 || ( str.length &gt; 0  &amp;&amp; str.indexOf(var_json.name) != -1))
					post_value_map[dependency_array[pos]] = var_json;
				}
			}
			
			gs.info("Post Value Map :: " + JSON.stringify(post_value_map));
            return JSON.stringify(post_value_map);

        } catch (e) {
            this.logger.error("Error caught in Nutanix_FetchConfigureSettingDropdown.getHttpValues:" + e);
        }
    },



    getSubnet: function(catalog) {
        try {
            var clusterJson = {};
            var catalogSysid;
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getSubnet");
            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
            gr.addQuery('item_name', catalog);
            gr.query();
            if (gr.next()) {
                var grProject = new GlideRecord(this.appUtil.configuration.table.Project + '');
                grProject.addQuery('sys_id', gr.project + '');
                grProject.query();
                if (grProject.next()) {
                    var subnetList = grProject.subnet.split(',');
                    for (var x in subnetList) {
                        var grSubnet = new GlideRecord(this.appUtil.configuration.table.subnet + '');
                        grSubnet.addQuery('sys_id', subnetList[x]);
                        grSubnet.query();
                        if (grSubnet.next()) {
                            if (!clusterJson[grSubnet.cluster_name + '']) {
                                clusterJson[grSubnet.cluster_name + ''] = {};
                                clusterJson[grSubnet.cluster_name + '']['uuid'] = grSubnet.cluster_uuid + '';
                                clusterJson[grSubnet.cluster_name + '']['subnet'] = {};
                            }

                            clusterJson[grSubnet.cluster_name + '']['subnet'][grSubnet.uuid + ''] = grSubnet.name + '';
                        }

                    }


                }

            }
            /*setting session*/
            var grCat = new GlideRecord('x_nuta2_nutanix_ca_nutanix_catalog_items');
            grCat.addQuery('sys_id', catalog);
            grCat.query();
            if (grCat.next()) {
                var gr = new GlideRecord('item_option_new');
                gr.addQuery('cat_item.name', grCat.name + '');
                gr.query();
                var catalog_clusterJSON = {};
                while (gr.next()) {
                    if ((gr.name + '').endsWith('cluster_name') &amp;&amp; gr.question_text == 'Cluster Name') {
                        catalog_clusterJSON[gr.sys_id + ''] = {};
                        catalog_clusterJSON[gr.sys_id + '']['name'] = gr.name + '';
                        catalog_clusterJSON[gr.sys_id + '']['label'] = gr.question_text + '';
                        catalog_clusterJSON[gr.sys_id + '']['value'] = gr.default_value + '';
                    }
                }

                for (var k in catalog_clusterJSON) {
                    var serviceName = (catalog_clusterJSON[k].name + '').slice(0, (catalog_clusterJSON[k].name).length - 12);
                    catalog_clusterJSON[k]['nics'] = {};
                    var gr = new GlideRecord('item_option_new');
                    gr.addQuery('cat_item.name', grCat.name + '');
                    gr.query();
                    while (gr.next()) {
                        if ((gr.name + '').indexOf(serviceName) != -1 &amp;&amp; (gr.name + '').indexOf('_nic_') != -1) {
                            catalog_clusterJSON[k]['nics'][gr.sys_id + ''] = gr.name + '';
                        }
                    }
                }
            }

            /**/


            var catNicJson = {
                "catalog_data": catalog_clusterJSON,
                "cluster_info": clusterJson
            };
            return (JSON.stringify(catNicJson));

        } catch (e) {
            this.logger.error("Inside Nutanix_FetchConfigureSettingDropdown.getSubnet." + e);
        }
    },

    getNutanixSubnetList: function(projects) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getNutanixSubnetList.");
            var subnetListJSON = {};
            var project_array = projects.split(',');
            var project_subnet = [];
            for (var i = 0; i &lt; project_array.length; i++) {
                var projectSubnet = new GlideRecord(this.appUtil.configuration.table.Project);
                if (projectSubnet.get(project_array[i] + '')) {
                    if (projectSubnet.subnet != '') {
                        var subnetList = projectSubnet.subnet.split(',');
                        for (var k in subnetList) {
                            if ((project_subnet.indexOf(subnetList[k])) == -1)
                                project_subnet.push(subnetList[k]);
                        }
                    }
                }
            }

            for (var j in project_subnet) {
                var subnetListGR = new GlideRecord(this.appUtil.configuration.table.subnet);
                subnetListGR.addQuery('sys_id', subnetList[j] + '');
                subnetListGR.query();
                if (subnetListGR.next()) {
                    subnetListJSON[subnetListGR.uuid + ''] = {
                        "name": subnetListGR.name + '',
                        "cluster_name": subnetListGR.cluster_name + '',
                        "cluster_uuid": subnetListGR.cluster_uuid + ''
                    };
                }
            }

            return subnetListJSON;
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getNutanixSubnetList. Error:- " + e);
        }
    },

    getServiceVariableDetails: function(projects, blueprint, profiles, type, bpType) {

        try {
            var subnet_info = this.getNutanixSubnetList(project);
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getServiceVariableDetails.");
            var project_array = projects.split(',');
            var profile_array = profiles.split(',');
            var project = project_array[0];
            var profile = profile_array[0];

            var variables = new GlideRecord(this.appUtil.configuration.table.applicationProfiles + '');
            if (variables.get(profile)) {
                this.logger.info("Fetching variables associated with profile " + variables.name);
            }
            var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
            gr.addQuery('application_profile', profile);
            gr.addQuery('catalog_item', blueprint);
            gr.addQuery('isprofilevariable', false);
            gr.orderBy('variable.order');
            gr.query();

            var answer = {};

            var i = 0;

            while (gr.next()) {

                if (!answer[gr.service_name.name + ''])
                    answer[gr.service_name.name + ''] = {};

                var categoryName = gr.category_name.name + '';

                if (gr.category_name.name + '' == gr.variable.name + '') {

                    if (!answer[gr.service_name.name + ''][gr.category_name.name + ''])
                        answer[gr.service_name.name + ''][gr.category_name.name + ''] = {};

                    if (bpType == "published" &amp;&amp; type == "new") {

                        var ans = (this.getVariablePatchedValue(type + '', gr.default_value + '', gr.sys_id, gr.variable.name + '', gr.category_name.name + '', gr.category_name.question_text + ''));
                        this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getServiceVariableDetails.Patched Value for " + gr.variable.name + " :: " + ans);
                        answer[gr.service_name.name + ''][gr.category_name.name + '']['new_' + gr.sys_id + ''] = (ans) ? JSON.parse(ans) : [];
                        answer[gr.service_name.name + ''][gr.category_name.name + '']['new_' + gr.sys_id + ''].notCmplx = false;


                    } else {
                        answer[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''] = (gr.default_value + '') ? JSON.parse(gr.default_value + '') : {};
                        answer[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].notCmplx = false;
                    }

                } else {

                    /*if (gr.is_hidden == true)
                        continue;*/


                    if (!answer[gr.service_name.name + ''][gr.category_name.name + ''])
                        answer[gr.service_name.name + ''][gr.category_name.name + ''] = {};
                    var catname = (gr.category_name.name + '').substring(((gr.service_name.name + '').length) + 1);
                    var varname = (gr.variable.name + '').substring(((gr.service_name.name + '').length) + 1);
                    var default_value = "";
                    var runtime_config = gr.runtime_config + '';
                    var isdisabled = gr.isdisabled + '';
                    var ans, parsedAns;
                    if (catname == "ssh_keys" &amp;&amp; bpType == "published") {
                        var hasKey;
                        var gr_ssh = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                        gr_ssh.addQuery('application_profile', profile);
                        gr_ssh.addQuery('catalog_item', blueprint);
                        gr_ssh.addQuery('isprofilevariable', false);
                        gr_ssh.addQuery('variable.name', 'CONTAINS', 'key_0');
                        gr_ssh.orderBy('variable.order');
                        gr_ssh.query();
                        if (gr_ssh.next()) {
                            hasKey = "true";
                        }
                        if (hasKey != "true") {
                            ans = this.getVariablePatchedValue(type + '', gr.default_value + '', gr.sys_id, gr.variable.name + '', gr.category_name.name + '', gr.category_name.question_text + '', "true");
                            parsedAns = (ans) ? JSON.parse(ans) : {};
                            answer[gr.service_name.name + ''][gr.category_name.name + ''] = parsedAns;
                        }

                    }
                    if ((!gr.default_value) &amp;&amp; bpType == "published") {
                        ans = this.getVariablePatchedValue(type + '', gr.default_value + '', gr.sys_id, gr.variable.name + '', gr.category_name.name + '', gr.category_name.question_text + '');
                        parsedAns = (ans) ? JSON.parse(ans) : "";
                        this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getServiceVariableDetails.Patched Value for " + gr.variable.name + " :: " + ans);
                        if (parsedAns) {
                            default_value = parsedAns.value + '';
                            var isSupported = (default_value + '' == 'Cloud-init' || default_value + '' == 'Sysprep' || (varname + '').startsWith('key_') || (this.disabledFields.includes(varname) &amp;&amp; varname + '' != 'name' &amp;&amp; varname + '' != 'type')) ? false : true;
                            //runtime_config = (parsedAns.runtime+'') ? parsedAns.runtime+'' : gr.runtime_config+'';
                            runtime_config = ((default_value + '').indexOf('@@') != -1 || isSupported + '' == 'false') ? false : (parsedAns.runtime + '') ? parsedAns.runtime + '' : gr.runtime_config + '';
                            isdisabled = ((default_value + '').indexOf('@@') != -1 || isSupported + '' == 'false') ? true : (runtime_config + '' == 'true') ? false : true; // ((default_value+'').indexOf('@@') != -1 || (this.disabledFields.includes(varname) &amp;&amp; varname+''!='name' &amp;&amp; varname+''!='type')) ? true : (runtime_config+'' == 'true') ? false : true;
                            // 							
                        }
                    }

                    /*Advanced Variable*/
                    var opt = [];
                    if (gr.variable.type + '' == 5 &amp;&amp; gr.isservicevariable == true) {
                        var optionRec = new GlideRecord("question_choice");
                        optionRec.addQuery('question', gr.variable + '');
                        optionRec.query();
                        while (optionRec.next()) {

                            opt.push(optionRec.value + '');

                        }


                    } else if (gr.variable.type + '' == 21 &amp;&amp; gr.isservicevariable == true) {
                        var varRefRec = gr.variable.getRefRecord().reference_qual + '';
                        varRefRec = varRefRec.substr(9, varRefRec.length);
                        var optionRec = new GlideRecord(this.appUtil.configuration.table.dropDownTable + '');
                        optionRec.addQuery('variable', varRefRec);
                        optionRec.query();
                        while (optionRec.next()) {

                            opt.push(optionRec.value + '');
                        }


                    }

                    answer[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''] = {
                        'name': gr.variable.name + '',
                        'question_text': gr.variable.question_text + '',
                        'value': (gr.default_value + '') ? gr.default_value + '' : default_value,
                        'runtime_config': (gr.default_value + '') ? gr.runtime_config + '' : runtime_config,
                        'type': gr.variable.type + '',
                        'isprofilevariable': gr.isprofilevariable + '',
                        'uuid': gr.uuid + '',
                        'isdisabled': (gr.default_value + '') ? gr.isdisabled + '' : isdisabled,

                        'isSupported': gr.issupported + '',
                        'isservicevariable': gr.isservicevariable + '',

                        'notCmplx': true,

                        'val_type': gr.value_type + '',
                        'description': gr.variable.help_text + '',
                        'mandatory': gr.variable.mandatory + '',
                        'regex': gr.field_regex + '',
                        'options': opt,
                        'data_type': gr.data_type + '',
                        'serviceField': (gr.isprofilevariable + '' == 'false' &amp;&amp; gr.isservicevariable + '' == 'false') ? true : false,
                        "field_json": (gr.isservicevariable + '' == 'true') ? this.appUtil.getMacroDependencies(gr.field_json + "") : {},
                        "field": (gr.isservicevariable + '' == 'true') ? gr.field_json + "" : "{}",
                        "isHidden": gr.is_hidden + ""
                    };
                }
                i++;
            }

            this.logger.debug("Final answer" + i + " :: " + JSON.stringify(answer));
            var returnJSON = {};
            returnJSON['service_configuration'] = answer;
            returnJSON['subnet_list'] = subnet_info;
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getServiceVariableDetails. return : " + JSON.stringify(returnJSON));
            return JSON.stringify(returnJSON);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getServiceVariableDetails. Error:- " + e);
        }

    },

    getVariablePatchedValue: function(type, value, grSysid, varname, categoryName, categoryNameText, sshFlag) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getVariablePatchedValue for variable :: " + varname + ",Category Name :: " + categoryNameText + ",SSh flag :: " + sshFlag);
            if ((!value || (varname == categoryName) || categoryNameText == "SSH Keys")) {
                var ans = {
                    "value": "",
                    "runtime": false
                };
                var session = gs.getSession();
                var bpResponse = JSON.parse(session.getClientData('Cloned_bp_response'));

                var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                gr.addQuery("sys_id", grSysid);
                gr.query();
                if (gr.next()) {
                    var profileUUID = "";
                    for (var i in bpResponse) {
                        var serviceJSON = bpResponse[i];
                        if (serviceJSON.name.toLowerCase() + '' == gr.service_name.name + '') {

                            for (var k in serviceJSON.profile) {
                                var profile = serviceJSON.profile[k];
                                if (profile.name == gr.application_profile.name + '') {
                                    profileUUID = profile.uuid + '';
                                    break;
                                }
                            }

                            if (serviceJSON.substrate[profileUUID]) {
                                this.logger.debug("Patching :: Found profile :: " + gr.application_profile.name + '');
                                var substrateJSON = serviceJSON.substrate[profileUUID];
                                var categoryJSON = "";
                                var insideCategoryJSON = "";
                                switch (gr.category_name.question_text + '') {

                                    case "Connection":
                                        categoryJSON = "readiness_probe";
                                        break;

                                    case "VM Configuration": //categoryJSON = "create_spec";
                                        //break;

                                    case "Storage": //categoryJSON = "create_spec";
                                        //break;
                                    case "Network Adapters":

                                    case "Network Profiles":

                                    case "OS Profile":

                                    case "OS Profile Script":

                                    case "Management Optional":

                                    case "Storage Profile":

                                    case "Disks":

                                    case "Networking":

                                    case "Categories":

                                    case "API ACCESS":

                                    case "Blank Disks":

                                    case "Images":

                                    case "SSH Keys":

                                    case "Storage Profile Data Disks":

                                    case "Guest Customization":

                                    case "VDisks":
                                        categoryJSON = "create_spec";
                                        break;

                                }
                                var runtime = "";
                                var field;
                                var fieldName;
                                var editables = substrateJSON.editables[categoryJSON];
                                for (var l in substrateJSON) {

                                    if (l + '' == categoryJSON) {

                                        //this.logger.debug("Patching :: Category :: "+categoryJSON);

                                        if (categoryJSON == "create_spec") {
                                            fieldName = varname.substring(serviceJSON.name.length + 1);
                                            // 												if((categoryName) &amp;&amp; categoryName == "categories"){
                                            // 													var ansCat = {};var q=1;
                                            // 													var edit = (editables.categories) ? editables.categories : "false";
                                            // 													var disable = (edit == "true") ?  "false" : "true";
                                            // 													for( var b in substrateJSON[l].categories ){

                                            // 														ansCat['category_'+q] =	{
                                            // 																				  "name":  serviceJSON.name+'_'+b,
                                            // 																				  "question_text": b+'',
                                            // 																				  "value": substrateJSON[l].categories[b],
                                            // 																				  "runtime_config": edit,
                                            // 																				  "type": "6",
                                            // 																				  "isprofilevariable": "false",
                                            // 																				  "uuid": "",
                                            // 																				  "isdisabled": disable,
                                            // 																				  "notCmplx": true
                                            // 																				};
                                            // 													}

                                            // 													return JSON.stringify(ansCat);
                                            // 												}
                                            if (categoryNameText == "VM Configuration") {
                                                for (var b in substrateJSON[l]) {
                                                    if (b == fieldName) {
                                                        ans.value = (substrateJSON[l][b]) ? substrateJSON[l][b] : '';
                                                        if (fieldName != "template" &amp;&amp; fieldName != "datastore" &amp;&amp; fieldName != "host") ans.runtime = (editables[b]) ? (editables[b]) : false;
                                                        return JSON.stringify(ans);
                                                    }
                                                }
                                            }

                                            for (var s in substrateJSON[l].resources) {

                                                var varServiceName = serviceJSON.name.toLowerCase() + '_' + s + '';

                                                if (categoryNameText == "SSH Keys" &amp;&amp; sshFlag == "true" &amp;&amp; s == "sshKeys") {

                                                    var ansSSH = {};
                                                    var q = 0;
                                                    var edit = "false";
                                                    var disable = "true";
                                                    for (var b in substrateJSON[l].resources.sshKeys) {

                                                        for (var w in editables.resources.sshKeys) {
                                                            if (b == w)
                                                                edit = editables.resources.sshKeys[w] + '';
                                                        }
                                                        ansSSH['new_ssh_key_' + q] = {
                                                            "name": serviceJSON.name + '_key_' + b,
                                                            "question_text": 'key ' + b + '',
                                                            "value": substrateJSON[l].resources.sshKeys[b],
                                                            "runtime_config": edit,
                                                            "type": "6",
                                                            "isprofilevariable": "false",
                                                            "uuid": "",
                                                            "isdisabled": (edit == "true") ? "false" : "true",
                                                            "isSupported": "true",
                                                            "isservicevariable": "false",
                                                            "notCmplx": true
                                                        };
                                                        q++;

                                                    }

                                                    return JSON.stringify(ansSSH);
                                                } else if (categoryNameText == "Management Optional" &amp;&amp; s == "guestCustomization") {
                                                    if (fieldName == "startup_script") {
                                                        ans.value = (substrateJSON[l].resources[s].startupScript) ? substrateJSON[l].resources[s].startupScript : '';
                                                        ans.runtime = (editables.resources.guestCustomization &amp;&amp; editables.resources.guestCustomization.startupScript) ? editables.resources.guestCustomization.startupScript : false;
                                                        return JSON.stringify(ans);
                                                    } else if (fieldName == "security_groups") {
                                                        var groups = (substrateJSON[l].resources.tags.items &amp;&amp; substrateJSON[l].resources.tags.items[0]) ? substrateJSON[l].resources.tags.items[0] : '';
                                                        for (var p = 1; p &lt; substrateJSON[l].resources.tags.items.length; p++)
                                                            groups = groups + ',' + substrateJSON[l].resources.tags.items[i];
                                                        ans.value = groups;
                                                        ans.runtime = (editables.resources.tags &amp;&amp; editables.resources.tags.items) ? editables.resources.tags.items : false;

                                                        return JSON.stringify(ans);
                                                    }

                                                } else if (categoryNameText == "API ACCESS" &amp;&amp; s == "serviceAccounts") {
                                                    ans.value = (substrateJSON[l].resources[s][0].email) ? substrateJSON[l].resources[s][0].email : "";
                                                    ans.runtime = (editables.resources.serviceAccounts[0] &amp;&amp; editables.resources.serviceAccounts[0].email) ? editables.resources.serviceAccounts[0].email : false;
                                                    return JSON.stringify(ans);
                                                } else if (categoryNameText == "Disks" &amp;&amp; s == "disks") {
                                                    for (var j in substrateJSON[l].resources[s]) {
                                                        substrateJSON[l].resources[s][j].runtime = {};
                                                        substrateJSON[l].resources[s][j].disabled = {};
                                                        for (var x in editables.resources.disks)
                                                            if (x == j) {
                                                                substrateJSON[l].resources[s][j].runtime = (editables.resources.disks[x]) ? (editables.resources.disks[x]) : {};
                                                                substrateJSON[l].resources[s][j].disabled = substrateJSON[l].resources[s][j].runtime;
                                                            }
                                                    }

                                                    return JSON.stringify(substrateJSON[l].resources[s]);
                                                } else if (categoryNameText == "Networking" &amp;&amp; s == "networkInterfaces") {
                                                    for (var j in substrateJSON[l].resources[s]) {
                                                        substrateJSON[l].resources[s][j].runtime = {};
                                                        substrateJSON[l].resources[s][j].disabled = {};
                                                        for (var x in editables.resources.networkInterfaces)
                                                            if (x == j) {
                                                                substrateJSON[l].resources[s][j].runtime = (editables.resources.networkInterfaces[x]) ? (editables.resources.networkInterfaces[x]) : {};
                                                                substrateJSON[l].resources[s][j].disabled = substrateJSON[l].resources[s][j].runtime;
                                                            }
                                                    }
                                                    return JSON.stringify(substrateJSON[l].resources[s]);
                                                } else if (categoryNameText == "Blank Disks" &amp;&amp; s == "blankDisks") {
                                                    for (var j in substrateJSON[l].resources[s]) {
                                                        substrateJSON[l].resources[s][j].runtime = {};
                                                        substrateJSON[l].resources[s][j].disabled = {};
                                                        for (var x in editables.resources.blankDisks)
                                                            if (x == j) {
                                                                substrateJSON[l].resources[s][j].runtime = (editables.resources.blankDisks[x]) ? editables.resources.blankDisks[x] : {};
                                                                substrateJSON[l].resources[s][j].disabled = substrateJSON[l].resources[s][j].runtime;
                                                            }
                                                    }

                                                    return JSON.stringify(substrateJSON[l].resources[s]);
                                                } else if (categoryNameText == "Images" &amp;&amp; s == "disk_list") {
                                                    var bootIndex = (substrateJSON[l].resources.boot_config &amp;&amp; substrateJSON[l].resources.boot_config.boot_device &amp;&amp; substrateJSON[l].resources.boot_config.boot_device.disk_address &amp;&amp; substrateJSON[l].resources.boot_config.boot_device.disk_address.device_index + '') ? substrateJSON[l].resources.boot_config.boot_device.disk_address.device_index : -1;
                                                    for (var j in substrateJSON[l].resources[s]) {
                                                        substrateJSON[l].resources[s][j].runtime = {};
                                                        substrateJSON[l].resources[s][j].disabled = {};
                                                        substrateJSON[l].resources[s][j].bootable = (bootIndex == j) ? true : false;
                                                        for (var x in editables.resources.disk_list)
                                                            if (x == j) {
                                                                substrateJSON[l].resources[s][j].runtime = (editables.resources.disk_list[x]) ? editables.resources.disk_list[x] : {};
                                                                substrateJSON[l].resources[s][j].disabled = substrateJSON[l].resources[s][j].runtime;
                                                            }
                                                    }

                                                    return JSON.stringify(substrateJSON[l].resources[s]);
                                                } else if (categoryNameText == "Storage Profile Data Disks" &amp;&amp; s == "storage_profile") {
                                                    for (var j in substrateJSON[l].resources[s].data_disk_list) {
                                                        substrateJSON[l].resources[s].data_disk_list[j].runtime = {};
                                                        substrateJSON[l].resources[s].data_disk_list[j].disabled = {};
                                                        for (var x in editables.resources.storage_profile.data_disk_list)
                                                            if (x == j) {
                                                                substrateJSON[l].resources[s].data_disk_list[j].runtime = (editables.resources.storage_profile &amp;&amp; editables.resources.storage_profile.data_disk_list[x]) ? editables.resources.storage_profile.data_disk_list[x] : {};
                                                                substrateJSON[l].resources[s].data_disk_list[j].disabled = substrateJSON[l].resources[s].data_disk_list[j].runtime;
                                                            }
                                                    }

                                                    return JSON.stringify(substrateJSON[l].resources[s].data_disk_list);
                                                } else if (categoryNameText == "OS Profile" &amp;&amp; s == "os_profile") {
                                                    for (var j in substrateJSON[l].resources[s].secrets) {
                                                        substrateJSON[l].resources[s].secrets[j].runtime = {};
                                                        substrateJSON[l].resources[s].secrets[j].disabled = {};
                                                        for (var x in editables.resources.os_profile.secrets)
                                                            if (x == j) {
                                                                substrateJSON[l].resources[s].secrets[j].runtime = (editables.resources.os_profile &amp;&amp; editables.resources.os_profile.secrets[x]) ? editables.resources.os_profile.secrets[x] : {};
                                                                substrateJSON[l].resources[s].secrets[j].disabled = substrateJSON[l].resources[s].secrets[j].runtime;

                                                            }
                                                    }

                                                    return JSON.stringify(substrateJSON[l].resources[s].secrets);
                                                } else if (categoryNameText == "OS Profile Script" &amp;&amp; s == "os_profile") {

                                                    ans.value = (substrateJSON[l].resources[s].linux_config &amp;&amp; substrateJSON[l].resources[s].linux_config.custom_data + '') ? substrateJSON[l].resources[s].linux_config.custom_data + '' : "";
                                                    ans.runtime = (editables.resources.os_profile &amp;&amp; editables.resources.os_profile.linux_config &amp;&amp; editables.resources.os_profile.linux_config.custom_data) ? editables.resources.os_profile.linux_config.custom_data : false;

                                                    return JSON.stringify(ans);

                                                } else if (categoryNameText == "Guest Customization" &amp;&amp; s == "guest_customization") {
                                                    varname = varname.substring(serviceJSON.name.length + 1);
                                                    for (var j in substrateJSON[l].resources[s].linux_data) {
                                                        if (varname == "dns_search_path" &amp;&amp; j == varname) {
                                                            ans.value = (substrateJSON[l].resources[s].linux_data.dns_search_path[0] + '') ? substrateJSON[l].resources[s].guest_customization.linux_data.dns_search_path[0] + '' : "";
                                                            ans.runtime = (editables.resources.guest_customization &amp;&amp; editables.resources.guest_customization.linux_data &amp;&amp; editables.resources.guest_customization.linux_data.dns_search_path[0]) ? editables.resources.guest_customization.linux_data.dns_search_path[0] : false;
                                                            return JSON.stringify(ans);
                                                        } else if (j == varname) {
                                                            ans.value = substrateJSON[l].resources[s].linux_data[j] + '';
                                                            for (var x in editables.resources.guest_customization.linux_data) {
                                                                if (x == varname) {
                                                                    ans.runtime = editables.resources.guest_customization.linux_data[x] + '';
                                                                    return JSON.stringify(ans);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (fieldName == "script") {

                                                        ans.value = (substrateJSON[l].resources[s].cloud_init &amp;&amp; substrateJSON[l].resources[s].cloud_init.user_data) ? substrateJSON[l].resources[s].cloud_init.user_data : ((substrateJSON[l].resources[s].sysprep &amp;&amp; substrateJSON[l].resources[s].sysprep.unattend_xml) ? substrateJSON[l].resources[s].sysprep.unattend_xml : (substrateJSON[l].resources[s].cloud_init) ? substrateJSON[l].resources[s].cloud_init : '');
                                                        ans.runtime = (editables.resources.guest_customization &amp;&amp; editables.resources.guest_customization.cloud_init) ? (editables.resources.guest_customization.cloud_init) : false;
                                                        return (JSON.stringify(ans));
                                                    } else if (fieldName == "install_type") {
                                                        ans.value = (substrateJSON[l].resources[s].sysprep &amp;&amp; substrateJSON[l].resources[s].sysprep.install_type) ? substrateJSON[l].resources[s].sysprep.install_type : "";
                                                        ans.runtime = false;
                                                        return (JSON.stringify(ans));
                                                    } else if (fieldName == "type") {
                                                        ans.value = (substrateJSON[l].resources[s].sysprep) ? 'Sysprep' : 'Cloud-init';
                                                        ans.runtime = false;
                                                        return (JSON.stringify(ans));
                                                    }
                                                } else if (varname == (serviceJSON.name.toLowerCase() + '_' + 'storage') &amp;&amp; s == "block_device_map") {

                                                    substrateJSON[l].resources[s].root_disk.runtime = "";
                                                    substrateJSON[l].resources[s].root_disk.disabled = "";
                                                    substrateJSON[l].resources[s].root_disk.runtime = (editables.resources.block_device_map.root_disk.size_gb) ? editables.resources.block_device_map.root_disk.size_gb + '' : 'false';
                                                    substrateJSON[l].resources[s].root_disk.disabled = substrateJSON[l].resources[s].root_disk.runtime;
                                                    for (var j in substrateJSON[l].resources[s].data_disk_list) {

                                                        substrateJSON[l].resources[s].data_disk_list[j].runtime = 'false';
                                                        substrateJSON[l].resources[s].data_disk_list[j].disabled = 'false';
                                                        if (editables &amp;&amp; editables.resources &amp;&amp; editables.resources.block_device_map &amp;&amp; editables.resources.block_device_map.data_disk_list[j] &amp;&amp; editables.resources.block_device_map.data_disk_list[j].size_gb) {
                                                            var runtime_data = editables.resources.block_device_map.data_disk_list[j].size_gb;
                                                            substrateJSON[l].resources[s].data_disk_list[j].runtime = (runtime_data) ? runtime_data + '' : 'false';
                                                            substrateJSON[l].resources[s].data_disk_list[j].disabled = substrateJSON[l].resources[s].data_disk_list[j].runtime;
                                                        }
                                                    }
                                                    return JSON.stringify(substrateJSON[l].resources[s]);
                                                } else if (varname == (serviceJSON.name.toLowerCase() + '_vdisks') &amp;&amp; s == "disk_list") {
                                                    for (var j in substrateJSON[l].resources[s]) {
                                                        substrateJSON[l].resources[s][j].runtime = {};
                                                        substrateJSON[l].resources[s][j].disabled = {};
                                                        for (var x in editables.resources.disk_list) {
                                                            if (x == j) {
                                                                substrateJSON[l].resources[s][j].runtime = editables.resources.disk_list[j];
                                                                substrateJSON[l].resources[s][j].disabled = substrateJSON[l].resources[s][j].runtime;
                                                            }
                                                        }
                                                    }
                                                    return JSON.stringify(substrateJSON[l].resources[s]);
                                                } else if (varname == (serviceJSON.name.toLowerCase() + '_network_adapters') &amp;&amp; s == "nic_list") {
                                                    for (var j in substrateJSON[l].resources[s]) {
                                                        substrateJSON[l].resources[s][j].runtime = {};
                                                        substrateJSON[l].resources[s][j].disabled = {};
                                                        for (var x in editables.resources.nic_list)
                                                            if (x == j) {
                                                                substrateJSON[l].resources[s][j].runtime = (editables.resources.nic_list[j]) ? (editables.resources.nic_list[j]) : {};
                                                                substrateJSON[l].resources[s][j].disabled = substrateJSON[l].resources[s][j].runtime;
                                                            }
                                                    }
                                                    return JSON.stringify(substrateJSON[l].resources[s]);
                                                } else if (categoryNameText == "Storage Profile" &amp;&amp; s == "storage_profile") {
                                                    for (var j in substrateJSON[l].resources[s].image_details) {
                                                        varServiceName = serviceJSON.name.toLowerCase() + '_' + j;
                                                        if (varname == varServiceName) {
                                                            ans.value = (substrateJSON[l].resources[s].image_details[j]) ? (substrateJSON[l].resources[s].image_details[j] + '') : "";
                                                            ans.runtime = (editables.resources.storage_profile.image_details &amp;&amp; editables.resources.storage_profile.image_details[j]) ? (editables.resources.storage_profile.image_details[j]) : false;
                                                            if ((varname.indexOf("use_custom_image") != -1) &amp;&amp; !ans.value) ans.value = "false";
                                                            return JSON.stringify(ans);
                                                        }

                                                    }
                                                    for (var j in substrateJSON[l].resources[s].os_disk_details) {
                                                        varServiceName = serviceJSON.name.toLowerCase() + '_' + substrateJSON[l].resources[s].image_details[j];
                                                        if (varname == varServiceName) {
                                                            ans.value = (substrateJSON[l].resources[s].os_disk_details[j]) ? (substrateJSON[l].resources[s].os_disk_details[j]) : "";
                                                            ans.runtime = (editables.resources.storage_profile.os_disk_details[j]) ? (editables.resources.storage_profile.os_disk_details[j]) : false;
                                                            return JSON.stringify(ans);
                                                        }
                                                    }
                                                    if (varname.indexOf("use_managed_disks") != -1) {
                                                        ans.value = (substrateJSON[l].resources[s].is_managed) ? (substrateJSON[l].resources[s].is_managed) : "";
                                                        ans.runtime = (editables.resources.storage_profile.is_managed) ? (editables.resources.storage_profile.is_managed) : false;
                                                        return JSON.stringify(ans);
                                                    }
                                                } else if (categoryNameText == "Network Profiles" &amp;&amp; s == "nw_profile") {
                                                    for (var j in substrateJSON[l].resources[s].nic_list) {
                                                        substrateJSON[l].resources[s].nic_list[j].runtime = {};
                                                        substrateJSON[l].resources[s].nic_list[j].disabled = {};
                                                        for (var x in editables.resources.nw_profile.nic_list)
                                                            if (x == j) {
                                                                substrateJSON[l].resources[s].nic_list[j].runtime = (editables.resources.nw_profile.nic_list[j]) ? editables.resources.nw_profile.nic_list[j] : {};
                                                                substrateJSON[l].resources[s].nic_list[j].disabled = substrateJSON[l].resources[s].nic_list[j].runtime;
                                                            }
                                                    }
                                                    return JSON.stringify(substrateJSON[l].resources[s].nic_list);
                                                } else if (varname + '' == varServiceName + '') {
                                                    field = substrateJSON[l].resources[s];
                                                    if (!(field.constructor == Object || field.constructor == Array)) {
                                                        ans.value = substrateJSON[l].resources[s] + '';
                                                        ans.runtime = this.checkEditable(editables, varname, categoryJSON, serviceJSON.name.toLowerCase() + '_') + '';
                                                        return JSON.stringify(ans);
                                                    } else if (s == "security_group_list") {
                                                        var sec = field[0].security_group_id + '';
                                                        for (var m = 1; m &lt; field.length; m++) {
                                                            sec += "," + field[m].security_group_id + '';
                                                        }
                                                        ans.value = sec + '';
                                                        ans.runtime = this.checkEditable(editables, varname, categoryJSON, serviceJSON.name.toLowerCase() + '_') + '';
                                                        return JSON.stringify(ans);
                                                    }
                                                } else if (categoryNameText == "VM Configuration" &amp;&amp; s == "hw_profile" &amp;&amp; varname.indexOf("hardware_profile") != -1) {
                                                    ans.value = (substrateJSON[l].resources[s].vm_size) ? substrateJSON[l].resources[s].vm_size : '';
                                                    ans.runtime = (editables.resources.hw_profile.vm_size) ? (editables.resources.hw_profile.vm_size) : false;
                                                    return JSON.stringify(ans);
                                                } else if (categoryNameText == "SSH Keys" &amp;&amp; fieldName == "block_project_wide_ssh_key" &amp;&amp; s == "metadata" &amp;&amp; sshFlag != "true") {
                                                    var blockValue = false;
                                                    for (var data in substrateJSON[l].resources[s]) {
                                                        if (substrateJSON[l].resources[s][data].key + '' == 'block-project-ssh-keys') {
                                                            blockValue = substrateJSON[l].resources[s][data].value + '';
                                                            ans.runtime = (editables.resources.metadata.items[data]) ? (editables.resources.metadata.items[data]) : false;
                                                        }
                                                    }
                                                    ans.value = blockValue;
                                                    return JSON.stringify(ans);
                                                }
                                            }
                                        } else if (categoryJSON == "readiness_probe") {
                                            for (var s in substrateJSON[l]) {
                                                var varServiceName = serviceJSON.name.toLowerCase() + '_' + s;
                                                if (varname + '' == varServiceName + '') {
                                                    ans.value = substrateJSON[l][s] + '';
                                                    if (varname.indexOf("disable_readiness_probe") != -1)
                                                        ans.value = (substrateJSON[l][s] == 'true') ? false : true;
                                                    ans.runtime = this.checkEditable(editables, varname, categoryJSON, serviceJSON.name.toLowerCase() + '_') + '';
                                                    return JSON.stringify(ans);
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                        }
                    }
                }
            }
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getVariablePatchedValue. Error:- " + e);
        }
    },
    //Ptaching of MPI
    //Ptaching of MPI
    mpiPatching: function(projects, blueprint) {

        var logger = new Nutanix_Calm_Logger();
        var utils = new Nutanix_Calm_Utils();
        var reqUtils = new Nutanix_RequestUtil();
        var blueprintTemplate = "";
        var catVariableBody = {};
        var bpVariablesJSON = {};
        var parseResp = {};

        try {
            logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.mpiPatching.");

            var project = projects.split(',');
            project = project[0];

            var bp = new GlideRecord('x_nuta2_nutanix_ca_nutanix_marketplaceitems');
            bp.addQuery('sys_id', blueprint);
            bp.query();

            var mpi_uuid = (bp.next()) ? bp.uuid : "";

            var response = utils.makeCalmApiCall('GET', '/calm_marketplace_items/' + mpi_uuid);

            if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                response = JSON.parse(response.getBody());

                var environment_uuid = ' ';
                var project_uuid = '';

                var projectRecord = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
                projectRecord.addQuery('sys_id', project);
                projectRecord.query();

                if (projectRecord.next()) {
                    project_uuid = projectRecord.uuid + '';
                    environment_uuid = projectRecord.environment_uuid + '';
                }

                var name = bp.name + '';
                var app_bp_name = ((name + GlideSecureRandomUtil.getSecureRandomString(8) + mpi_uuid).replaceAll('-', ' ').trim().replaceAll(' ', '_')).substring(0, 64);
                var tmpbody = {
                    "status": response.status.resources.app_blueprint_template.status,
                    "spec": response.spec.resources.app_blueprint_template.spec
                };

                var body = {
                    "api_version": "3.0", //response.api_version,
                    "metadata": {
                        "kind": "blueprint",
                        "project_reference": {
                            "kind": "project",
                            "uuid": project_uuid + ''
                        },
                        "categories": response.metadata.categories //changes
                    },
                    "spec": {
                        "description": response.spec.resources.app_blueprint_template.spec.description, //response.spec.description,
                        "app_blueprint_name": app_bp_name + '',
                        "source_marketplace_version": response.spec.resources.version, //"1.0.0", //changes
                        "source_marketplace_name": name + '',
                        "resources": response.spec.resources.app_blueprint_template.spec.resources

                        //reqUtils.makeResourceBody(tmpbody, tmpbody.status.resources, current)
                        //response.spec.resources.app_blueprint_template.spec.resources
                    }
                };

                body.spec.environment_uuid = environment_uuid + '';

                //gs.error("MPI payload send: "+JSON.stringify(body));
                //	return "MPI Launch Body "+JSON.stringify(body);

                var response = utils.makeCalmApiCall('POST', '/blueprints/marketplace_launch', JSON.stringify(body));
                // 			return "post marketplace launch  call "+response.getStatusCode();
                if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                    var session = gs.getSession();
                    session.putClientData('non_filtered_cloned_bp_response', response.getBody());

                    parseResp = JSON.parse(response.getBody());
                    blueprintTemplate = (parseResp.status.resources) ? parseResp.status.resources : "";
                    var clonedBpUuid = parseResp.metadata.uuid;

                    //gs.error("Patching : "+response.getBody());

                } else {
                    logger.error("API call to '/blueprints/marketplace_launch' failed with name : " + app_bp_name + ":-" + response.getBody());
                    //gs.error("Errorr :: "+(JSON.parseresponse.getBody()).message_list[0].message);
                    return JSON.stringify({
                        "errMess": JSON.parse(response.getBody()).message_list[0].message,
                        "status": false
                    });
                }

                var bpVariables = new Nutanix_CreateCatalogVariables();
                if (bp.template_type == "Single Vm") {

                    var service_body = [{
                        "uuid": "singleVm-default-service-uuid",
                        "name": "single_vm_configuration"
                    }];

                    catVariableBody = {
                        "substrate_definition_list": (blueprintTemplate.substrate_definition_list) ? blueprintTemplate.substrate_definition_list : "",
                        "app_profile_list": (blueprintTemplate.app_profile_list) ? blueprintTemplate.app_profile_list : "",
                        "service_definition_list": service_body,
                        "package_definition_list": (blueprintTemplate.package_definition_list) ? blueprintTemplate.package_definition_list : ""
                    };
                    bpVariablesJSON = bpVariables._filterJSONDatatoService(catVariableBody);
                } else if (blueprintTemplate.package_definition_list &amp;&amp; blueprintTemplate.substrate_definition_list &amp;&amp; blueprintTemplate.app_profile_list &amp;&amp; blueprintTemplate.service_definition_list) {
                    catVariableBody = {
                        "substrate_definition_list": (blueprintTemplate.substrate_definition_list) ? blueprintTemplate.substrate_definition_list : "",
                        "app_profile_list": (blueprintTemplate.app_profile_list) ? blueprintTemplate.app_profile_list : "",
                        "service_definition_list": (blueprintTemplate.service_definition_list) ? blueprintTemplate.service_definition_list : "",
                        "package_definition_list": (blueprintTemplate.package_definition_list) ? blueprintTemplate.package_definition_list : ""
                    };

                    bpVariablesJSON = bpVariables._filterJSONDatatoService(catVariableBody);
                }

                bpVariablesJSON.uuid = parseResp.metadata.uuid + '';
                bpVariablesJSON.name = parseResp.metadata.name + '';

                var session = gs.getSession();
                session.putClientData('Cloned_bp_response', JSON.stringify(bpVariablesJSON));
                var clientData = session.getClientData('Cloned_bp_response');
                logger.debug("MPI cloned Blueprint response ::" + clientData);
                return JSON.stringify({
                    "errMess": "Successfull",
                    "status": true
                }); //JSON.parse(clientData).uuid+'';
            } else {
                logger.error("API call to '/calm_marketplace_items/uuid' failed: " + response.getBody());
                var result = {
                    "errMess": (response.getBody()).message_list[0].message,
                    "status": false
                };
                return JSON.stringify(result);
            }
        } catch (e) {
            logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.mpiPatching. Error:- " + e);
            return "false";
        }
    },

    fetchBlueprints: function(projectUUID, blueprintType) {

        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.fetchBlueprints.");

            var gr = new GlideRecord(this.appUtil.configuration.table.catalogProjectRelation + '');
            gr.addQuery('projects.uuid', projectUUID);

            if (blueprintType == 'unpublished')
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_unpublishedBP_sysId'));
            else
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_category_sysId'));

            gr.orderBy('catalog_item.name');
            gr.query();

            var ans = {};
            var i = 0;

            while (gr.next()) {
                if ((blueprintType == 'unpublished' &amp;&amp; gr.catalog_item.state + '' == 'ACTIVE') || (blueprintType != 'unpublished' &amp;&amp; gr.catalog_item.state + '' == 'active')) {
                    ans[i] = {
                        'sys_id': gr.catalog_item + '',
                        'name': gr.catalog_item.name + '' + " " + gr.version + ''
                    };
                    i++;
                }
            }

            this.logger.debug("Fetched " + i + " blueprints.");

            return JSON.stringify(ans);

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.fetchBlueprints. Error:- " + e);
        }

    },

    fetchApplicationProfiles: function(blueprintSysId) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.fetchApplicationProfiles.");

            var blueprint = new GlideRecord(this.appUtil.configuration.table.Blueprint + '');
            if (blueprint.get(blueprintSysId)) {
                this.logger.info("Fetching profiles associated with blueprint " + blueprint.name);
            }
            var gr = new GlideRecord(this.appUtil.configuration.table.catalogProfileRelation + '');
            gr.addQuery('catalog_item', blueprintSysId);
            gr.addQuery('state', 'active');
            //gr.addEncodedQuery('providersNOT LIKEaws^providersNOT LIKEazure^providersNOT LIKEgcp');
            gr.orderBy('application_profile.name');
            gr.query();

            var ans = {};
            var i = 0;
            while (gr.next()) {
                ans[i] = {
                    'sys_id': gr.application_profile + '',
                    'name': gr.application_profile.name + ''
                };
                i++;
            }

            this.logger.debug("Fetched " + i + " profiles.");

            return JSON.stringify(ans);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.fetchApplicationProfiles. Error:- " + e);
        }
    },

    fetchProviderIcons: function(catSysId) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.fetchProviderIcons.");

            var grBp = new GlideRecord('x_nuta2_nutanix_ca_nutanix_catalog_items');
            if (grBp.get(catSysId)) {
                var bpSysId = grBp.blueprint_name;
            }
            if (bpSysId != '') {
                var gr = new GlideRecord(this.appUtil.configuration.table.catalogProfileRelation + '');
                gr.addQuery('catalog_item', bpSysId);
                gr.addQuery('state', 'active');
                gr.orderBy('application_profile.name');
                gr.query();

                var entities = [];
                var i = 0;
                while (gr.next()) {
                    entities[i] = {
                        'profile': gr.application_profile.name + '',
                        'providers': gr.providers + ''
                    };
                    i++;
                }

                this.logger.debug("Fetched " + i + " profiles.");

                return JSON.stringify(entities);
            } else {
                var grReq = new GlideRecord('sc_req_item');
                grReq.addQuery('sys_id', catSysId);
                grReq.query();
                if (grReq.next()) {
                    var grBp = new GlideRecord('x_nuta2_nutanix_ca_nutanix_catalog_items');
                    if (grBp.get(grReq.cat_item)) {
                        var bpSysId = grBp.blueprint_name;
                    }
                    if (bpSysId != '') {
                        var gr = new GlideRecord(this.appUtil.configuration.table.catalogProfileRelation + '');
                        gr.addQuery('catalog_item', bpSysId);
                        gr.orderBy('application_profile.name');
                        gr.query();

                        var entities = [];
                        var i = 0;
                        while (gr.next()) {
                            entities[i] = {
                                'profile': gr.application_profile.name + '',
                                'providers': gr.providers + ''
                            };
                            i++;
                        }

                        this.logger.debug("Fetched " + i + " profiles.");

                        return JSON.stringify(entities);
                    }
                }
            }
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.fetchProviderIcons. Error:- " + e);
        }
    },

    getProfileVariableDetails: function(project, blueprint, profile) {

        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getProfileVariableDetails.");

            var variables = new GlideRecord(this.appUtil.configuration.table.applicationProfiles + '');
            if (variables.get(profile)) {
                this.logger.info("Fetching variables associated with profile " + variables.name);
            }

            var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
            gr.addQuery('application_profile', profile);
            gr.addQuery('catalog_item', blueprint);
            gr.addQuery('isprofilevariable', true);
            gr.orderBy('variable.name');
            gr.query();

            var answer = {};
            var i = 0;
            while (gr.next()) {

                /*if (gr.is_hidden == true)
                    continue;*/

                var opt = [];
                if (gr.variable.type + '' == 5) {
                    var optionRec = new GlideRecord("question_choice");
                    optionRec.addQuery('question', gr.variable + '');
                    optionRec.query();
                    while (optionRec.next()) {

                        opt.push(optionRec.value + '');

                    }

                } else if (gr.variable.type + '' == 21) {
                    var varRefRec = gr.variable.getRefRecord().reference_qual + ''
                    varRefRec = varRefRec.substr(9, varRefRec.length);
                    var optionRec = new GlideRecord(this.appUtil.configuration.table.dropDownTable + '');
                    optionRec.addQuery('variable', varRefRec);
                    optionRec.query();
                    while (optionRec.next()) {
                        opt.push(optionRec.value + '');
                    }

                }
                // 				else if(gr.variable.type+'' == 10 || gr.variable.type+'' == 9){
                // 					var dtVal = gr.default_value+'';
                // 					if( gr.variable.type+'' == 9 ){
                // 						var gdt = new GlideDate() ;
                // 						gdt.setValue(dtVal);
                // 						gr.default_value = gdt.getByFormat("yyyy-MM-dd");
                // 					}

                // 					else{
                // 						var gdt = new GlideDateTime() ;
                // 						gdt.setValue(dtVal);
                // 						gr.default_value = gdt.getDate().getByFormat("yyyy-MM-dd")+' '+gdt.getTime().getByFormat("HH:mm:ss");
                // 					}

                // 				}

                answer[gr.sys_id + ''] = {
                    'name': gr.variable.name + '',
                    'question_text': gr.variable.question_text + '',
                    'value': gr.default_value + '',
                    'runtime_config': gr.runtime_config + '',
                    'type': gr.variable.type + '',
                    'isprofilevariable': gr.isprofilevariable + '',
                    'uuid': gr.uuid + '',
                    'isdisabled': gr.isdisabled + '',
                    "val_type": gr.value_type + '',
                    "description": gr.variable.help_text + '',
                    "mandatory": gr.variable.mandatory + '',
                    "regex": gr.field_regex + '',
                    "options": opt,
                    "data_type": gr.data_type + '',
                    "field_json": this.appUtil.getMacroDependencies(gr.field_json + ""),
                    "field": gr.field_json + "",
                    "isHidden": gr.is_hidden + ""
                };
                i++;
            }

            this.logger.debug("Fetched " + i + " variables.");

            return JSON.stringify(answer);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getProfileVariableDetails. Error:- " + e);
        }

    },



    checkEditable: function(editables, varname, categoryJSON, serviceJSON) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.checkEditable.");
            if (categoryJSON == "create_spec") {

                for (var i in editables.resources) {
                    var varServiceName = serviceJSON + i;
                    if (varname == varServiceName) {
                        return editables.resources[i] + '';
                    }
                }

            } else if (categoryJSON == "readiness_probe") {
                for (var i in editables) {
                    var varServiceName = serviceJSON + i;
                    if (varname == varServiceName) {
                        return editables[i] + '';
                    }
                }
            }

        } catch (e) {
            this.logger.error("Inside Nutanix_FetchConfigureSettingDropdown.checkEditable. " + e);
        }

    },

    getCrendentialsDetails: function(project, blueprint, profile) {

        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getCrendentialsDetails.");

            var gr = new GlideRecord(this.appUtil.configuration.table.Credentials + '');
            gr.addQuery('catalog_item', blueprint);
            gr.orderBy('name');
            gr.query();

            var answer = {};
            var i = 0;
            while (gr.next()) {
                answer[gr.name + ''] = {};

                answer[gr.name + ''].credential_name = {
                    "name": 'credential_name',
                    "question_text": 'Credential Name',
                    "value": gr.name + ''
                };

                answer[gr.name + ''].username = {
                    "name": 'username',
                    "question_text": 'Username',
                    "value": gr.username + '',
                    "runtime_config": gr.username_editable + ''
                };

                answer[gr.name + ''].secret_type = {
                    "name": 'secret_type',
                    "question_text": 'Secret Type',
                    "value": gr.type + ''
                };

                if (gr.type + '' == 'KEY') {
                    answer[gr.name + ''].ssh_private_key = {
                        "name": 'ssh_private_key',
                        "question_text": 'SSH Private Key',
                        "value": gr.ssh_private_key + '',
                        "runtime_config": gr.secret_editable + ''
                    };

                    answer[gr.name + ''].passphrase = {
                        "name": 'passphrase',
                        "question_text": 'Passphrase',
                        "value": gr.passphrase + '',
                        "runtime_config": gr.passphrase_editable + ''
                    };
                } else {
                    answer[gr.name + ''].password = {
                        "name": 'password',
                        "question_text": 'Password',
                        "value": gr.password + '',
                        "runtime_config": gr.secret_editable + ''
                    };
                }

                answer[gr.name + ''].uuid = gr.uuid + '';
                answer[gr.name + ''].description = gr.description + '';
                answer[gr.name + ''].is_default = gr.is_default + '';
                answer[gr.name + ''].is_secret_modified = gr.is_secret_modified + '';
                answer[gr.name + ''].name = gr.name + '';
                answer[gr.name + ''].state = gr.state + '';

                answer[gr.name + ''].username_isdisabled = gr.username_isdisabled + '';
                answer[gr.name + ''].secret_isdisabled = gr.secret_isdisabled + '';
                answer[gr.name + ''].ssh_private_key_isdisabled = gr.ssh_private_key_isdisabled + '';
                answer[gr.name + ''].passphrase_isdisabled = gr.passphrase_isdisabled + '';

                answer[gr.name + ''].credential_reference = {
                    "value": gr.credential_reference + '',
                    "label": gr.credential_reference.name + ''
                };

                answer[gr.name + ''].runtime = gr.runtime + '';

                i++;
            }

            this.logger.debug("Fetched " + i + " credentials.");

            return JSON.stringify(answer);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getCrendentialsDetails. Error:- " + e);
        }

    },

    /*fetchEnvironmentCredentials: function( credSysId ){
    											try{
    												this.logger.debug("Inside x_nuta2_nutanix_ca_nutanix_runtime_configuration.fetchEnvironmentCredentials.");

    												var gr = new GlideRecord(this.appUtil.configuration.table.Credentials+'');
    												gr.get(credSysId);

    												var answer = {};
    													var i = 0;

    													if(gr){
    														answer[gr.name+''] = {};

    															answer[gr.name+''].credential_name = {
    																"name": 'credential_name',
    																"question_text": 'Credential Name',
    																"value": gr.name+''
    															};

    															answer[gr.name+''].username = {
    																"name": 'username',
    																"question_text": 'Username',
    																"value": gr.username+'',
    																"runtime_config": gr.username_editable+''
    															};

    															answer[gr.name+''].secret_type = {
    																"name": 'secret_type',
    																"question_text": 'Secret Type',
    																"value": gr.type+''
    															};

    															if(gr.type+'' == 'KEY'){
    																answer[gr.name+''].ssh_private_key = {
    																	"name": 'ssh_private_key',
    																	"question_text": 'SSH Private Key',
    																	"value": gr.ssh_private_key+'',
    																	"runtime_config": gr.ssh_private_key_editable+''
    																};

    																if(gr.passphrase+'')
    																	answer[gr.name+''].passphrase = {
    																	"name": 'passphrase',
    																	"question_text": 'Passphrase',
    																	"value": gr.passphrase+'',
    																	"runtime_config": gr.passphrase_editable+''
    																};
    															}else{
    																answer[gr.name+''].password = {
    																	"name": 'password',
    																	"question_text": 'Password',
    																	"value": gr.password+'',
    																	"runtime_config": gr.secret_editable+''
    																};
    															}

    															answer[gr.name+''].uuid = gr.uuid+'';
    															answer[gr.name+''].description = gr.description+'';
    															answer[gr.name+''].is_default = gr.is_default+'';
    															answer[gr.name+''].is_secret_modified = gr.is_secret_modified+'';
    															answer[gr.name+''].name = gr.name+'';
    															answer[gr.name+''].state = gr.state+'';

    															answer[gr.name+''].environment = gr.environment+'';
    															answer[gr.name+''].project = gr.project+'';

    															answer[gr.name+''].username_isdisabled = gr.username_isdisabled+'';
    															answer[gr.name+''].secret_isdisabled = gr.secret_isdisabled+'';
    															answer[gr.name+''].ssh_private_key_isdisabled = gr.ssh_private_key_isdisabled+'';
    															answer[gr.name+''].passphrase_isdisabled = gr.passphrase_isdisabled+'';

    															i++;
    														}

    														this.logger.debug("Fetched " + i + " credentials.");

    														return JSON.stringify(answer);

    													}catch(e){
    														this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.fetchEnvironmentCredentials. Error:- "+e);
    													}

    												},*/

    mappedCredentials: function(projects) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.mappedCredentials.");
            var project_array = projects.split(',');
            var arr = [];
            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_credential');
            for (var i = 0; i &lt;= project_array.length; i++) {
                if (i == 0)
                    var gs = gr.addQuery('project.sys_id', project_array[i] + '');
                else
                    gs.addOrCondition('project.sys_id', project_array[i] + '');
            }
            gr.query();
            while (gr.next()) {
                arr.push({
                    'label': gr.name + '',
                    'value': gr.sys_id + '',
                    'type': gr.type + '',
                    'username': gr.username + ''
                });
            }

            return JSON.stringify(arr);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.mappedCredentials. Error:- " + e);
        }
    },

    getCatalogInfo: function(sysId) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getCatalogInfo.");

            var catalogItem = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
            catalogItem.addQuery('item_name', sysId);
            //catalogItem.get(sysId);
            //this.logger.info("Fetching Catalog Details for "+blueprint.name);
            catalogItem.query();

            if (catalogItem.next()) {
                var rtn = {
                    "itemName": catalogItem.item_name.name + '',
                    "description": catalogItem.item_name.getRefRecord().description_markdown + '',
                    "usersName": catalogItem.user_criteria.user.getDisplayValue() + '',
                    "groupsName": catalogItem.user_criteria.group.getDisplayValue() + '',
                    "usersSysId": catalogItem.user_criteria.user + '',
                    "groupsSysId": catalogItem.user_criteria.group + ''
                };
                return JSON.stringify(rtn);
            }

            return '';

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getCatalogInfo. Error:- " + e);
        }

    },

    getRealtedCatalogItems: function(sysId) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getRealtedCatalogItems.");

            var catalogItem = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
            catalogItem.addQuery('blueprint', sysId);
            //catalogItem.get(sysId);
            //this.logger.info("Fetching Catalog Details for "+blueprint.name);
            catalogItem.query();
            var answer = {};

            var k = 0;

            while (catalogItem.next()) {
                answer[k] = {
                    'name': catalogItem.item_name.name + '',
                    'sys_id': catalogItem.item_name + ''
                };

                k++;
            }

            return JSON.stringify(answer);

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getRealtedCatalogItems. Error:- " + e);
        }

    },

    getBlueprintInfo: function(sysId) {
        try {

            this.logger.debug("Inside x_nuta2_nutanix_ca_nutanix_runtime_configuration.getBlueprintInfo.");

            var catalogItem = new GlideRecord(this.appUtil.configuration.table.catItem + '');
            if (catalogItem.get(sysId)) {
                catalogItem = new GlideRecord(catalogItem.sys_class_name + '');
                if (catalogItem.get(sysId)) {
                    var rtn = {
                        "itemName": catalogItem.name + '',
                        "description": catalogItem.description_markdown + '',
                    }
                    return JSON.stringify(rtn);
                }
            }

            return '';

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getBlueprintInfo. Error:- " + e);
        }

    },

    fetchRuntimeVariablesValue: function(sysId) {
        try {
            this.logger.debug("Inside x_nuta2_nutanix_ca_nutanix_runtime_configuration.fetchRuntimeVariablesValue.");
            var gr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
            if (gr.get(sysId)) {
                var arr = {};

                if (gr) {
                    arr = {
                        "application_profile": {
                            "sys_ids": gr.multiple_application_profile + ''
                        },
                        "blueprint": {
                            "name": gr.blueprint.name + ' ' + ((gr.blueprint.getRefRecord().version) ? gr.blueprint.getRefRecord().version : ''),
                            "sys_id": gr.blueprint + '',
                            "class": gr.blueprint.sys_class_name + ''
                        },
                        "project": {
                            "sys_ids": gr.multiple_projects + ''
                        },
                        "item_name": gr.item_name + ''
                    };

                    return JSON.stringify(arr);
                }

                return '';
            }
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.fetchRuntimeVariablesValue. Error:- " + e);
        }
    },

    checkDuplicate: function(catName, catSysId) {
        try {
            this.logger.debug("Inside x_nuta2_nutanix_ca_nutanix_runtime_configuration.checkDuplicate.");
            var gr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
            if (catSysId)
                gr.addEncodedQuery('item_name.name=' + catName + '^item_name!=' + catSysId);
            else
                gr.addEncodedQuery('item_name.name=' + catName);
            gr.query();

            if (gr.next())
                return 'yes';

            return 'no';
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.checkDuplicate. Error:- " + e);
        }

    },
    fetchMultipleBlueprints: function(blueprintType) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.fetchMultipleBlueprints.");
            var gr = new GlideRecord(this.appUtil.configuration.table.catalogProjectRelation + '');
            if (blueprintType == 'unpublished')
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_unpublishedBP_sysId'));
            else
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_category_sysId'));
            gr.orderBy('catalog_item.name');
            gr.query();

            var ans = {};
            var i = 0;
            while (gr.next()) {
                if ((blueprintType == 'unpublished' &amp;&amp; gr.catalog_item.state + '' == 'ACTIVE') || (blueprintType != 'unpublished' &amp;&amp; gr.catalog_item.state + '' == 'active')) {
                    ans[i] = {
                        'sys_id': gr.catalog_item + '',
                        'name': gr.catalog_item.name + '' + " " + gr.version + ''
                    };
                    i++;
                }
            }

            this.logger.debug("Fetched " + i + " blueprints.");
            return JSON.stringify(ans);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.fetchMultipleBlueprints. Error:- " + e);
        }
    },
    fetchMultipleProjects: function(blueprint, blueprintType) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.fetchBlueprints. blueprint ");
            var gr = new GlideRecord(this.appUtil.configuration.table.catalogProjectRelation + '');
            gr.addQuery('catalog_item', blueprint);
            if (blueprintType == 'unpublished')
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_unpublishedBP_sysId'));
            else
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_category_sysId'));
            gr.orderBy('catalog_item.name');
            gr.query();
            var ans = {};
            var i = 0;
            while (gr.next()) {
                if ((blueprintType == 'unpublished' &amp;&amp; gr.catalog_item.state + '' == 'ACTIVE') || (blueprintType != 'unpublished' &amp;&amp; gr.catalog_item.state + '' == 'active')) {
                    ans[i] = {
                        'name': gr.catalog_item.name + '' + " " + gr.version + '',
                        'project_sys_id': gr.projects + ''
                    };
                    i++;
                }
            }
            this.logger.debug("Fetched " + i + " project.");
            return JSON.stringify(ans);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.fetchMultipleProjects. Error:- " + e);
        }
    },
    getMultipleProfileVariableDetails: function(projects, blueprint, profiles, cat_item, delta_profiles, type) {
        try {
            this.logger.debug("####Inside Nutanix_FetchConfigureSettingDropdown.getMultipleProfileVariableDetails.");

            var answer = {};
            if (type == "update") {
                answer = this.getProfileVariableData(profiles, cat_item, JSON.stringify(answer));
                if (delta_profiles != '')
                    answer = this.getProfileVariableData(delta_profiles, blueprint, answer);
            } else {
                answer = this.getProfileVariableData(profiles, blueprint, JSON.stringify(answer));
            }

            this.logger.debug("####Inside Nutanix_FetchConfigureSettingDropdown.getMultipleProfileVariableDetails." + answer);
            return answer;
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getMultipleProfileVariableDetails. Error:- " + e);
        }

    },
    getMultipleServiceVariableDetails: function(projects, blueprint, profiles, type, bpType, cat_item, delta_profiles) {
        try {
            this.logger.debug("--Inside Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails.Projects " + projects + " Blueprint " + blueprint + " Profiles " + profiles + " Type " + type + " BpType " + bpType);

            var multipleService = [];
            if (type == 'update') {
                multipleService = this.getServiceVariableData(projects, cat_item, profiles, type, bpType, JSON.stringify(multipleService));
                multipleService = this.getServiceVariableData(projects, blueprint, delta_profiles, type, bpType, multipleService);
            } else {
                multipleService = this.getServiceVariableData(projects, blueprint, profiles, type, bpType, JSON.stringify(multipleService));
            }

            this.logger.debug("Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails final array. return : " + JSON.stringify(multipleService));
            return multipleService;
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.noProfileVariableDetails. Error:- " + e);
        }
    },

    noProfileVariableDetails: function(projects, blueprint, profiles) {
        this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.noProfileVariableDetails.");
        try {
            var project = projects.split(',');
            var profile = profiles.split(',');
            var answer = [];
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.noProfileVariableDetails. project : " + JSON.stringify(project) + " profile " + JSON.stringify(profile) + ' answer ' + JSON.stringify(answer));
            for (var i in profile) {
                var gr = new GlideAggregate(this.appUtil.configuration.table.variablesProperties + '');
                gr.addQuery('catalog_item', blueprint);
                gr.addQuery('isprofilevariable', true);
                gr.addQuery('application_profile', profile[i]);
                gr.query();
                if (gr.getRowCount() == 0 || gr.getRowCount() &lt; 1) {
                    answer.push(profile[i]);
                }
            }
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.noProfileVariableDetails. answer : " + JSON.stringify(answer));
            return JSON.stringify(answer);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.noProfileVariableDetails. Error:- " + e);
        }
    },
    getProjectSubnet: function(catalog, project_uuid) {
        try {
            var clusterJson = {};
            var catalogSysid;
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getProjectSubnet. catalog : " + catalog + " project_uuid : " + project_uuid);
            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
            gr.addQuery('item_name', catalog);
            gr.query();
            if (gr.next()) {
                var grProject = new GlideRecord(this.appUtil.configuration.table.Project + '');
                grProject.addQuery('uuid', project_uuid + '');
                grProject.query();
                if (grProject.next()) {
                    var subnetList = grProject.subnet.split(',');
                    for (var x in subnetList) {
                        var grSubnet = new GlideRecord(this.appUtil.configuration.table.subnet + '');
                        grSubnet.addQuery('sys_id', subnetList[x]);
                        grSubnet.query();
                        if (grSubnet.next()) {
                            if (!clusterJson[grSubnet.cluster_name + '']) {
                                clusterJson[grSubnet.cluster_name + ''] = {};
                                clusterJson[grSubnet.cluster_name + '']['uuid'] = grSubnet.cluster_uuid + '';
                                clusterJson[grSubnet.cluster_name + '']['subnet'] = {};
                            }

                            clusterJson[grSubnet.cluster_name + '']['subnet'][grSubnet.uuid + ''] = grSubnet.name + '';
                        }

                    }


                }

            }
            /*setting session*/
            var grCat = new GlideRecord('x_nuta2_nutanix_ca_nutanix_catalog_items');
            grCat.addQuery('sys_id', catalog);
            grCat.query();
            if (grCat.next()) {
                var gr = new GlideRecord('item_option_new');
                gr.addQuery('cat_item.name', grCat.name + '');
                gr.query();
                var catalog_clusterJSON = {};
                while (gr.next()) {
                    if ((gr.name + '').endsWith('cluster_name') &amp;&amp; gr.question_text == 'Cluster Name') {
                        catalog_clusterJSON[gr.sys_id + ''] = {};
                        catalog_clusterJSON[gr.sys_id + '']['name'] = gr.name + '';
                        catalog_clusterJSON[gr.sys_id + '']['label'] = gr.question_text + '';
                        catalog_clusterJSON[gr.sys_id + '']['value'] = gr.default_value + '';
                    }
                }

                for (var k in catalog_clusterJSON) {
                    var serviceName = (catalog_clusterJSON[k].name + '').slice(0, (catalog_clusterJSON[k].name).length - 12);
                    catalog_clusterJSON[k]['nics'] = {};
                    var gr = new GlideRecord('item_option_new');
                    gr.addQuery('cat_item.name', grCat.name + '');
                    gr.query();
                    while (gr.next()) {
                        if ((gr.name + '').indexOf(serviceName) != -1 &amp;&amp; (gr.name + '').indexOf('_nic_') != -1) {
                            catalog_clusterJSON[k]['nics'][gr.sys_id + ''] = gr.name + '';
                        }
                    }
                }
            }

            /**/


            var catNicJson = {
                "catalog_data": catalog_clusterJSON,
                "cluster_info": clusterJson
            };
            this.logger.debug("**Inside Nutanix_FetchConfigureSettingDropdown.getProjectSubnet. final answer : " + JSON.stringify(catNicJson));
            return (JSON.stringify(catNicJson));

        } catch (e) {
            this.logger.error("Inside Nutanix_FetchConfigureSettingDropdown.getProjectSubnet." + e);
        }
    },

    getProfileVariableData: function(profiles, blueprint, answers) {

        var profile = profiles.split(',');
        var answer = JSON.parse(answers);

        var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
        for (var i in profile) {
            if (i == 0)
                var qc = gr.addQuery('application_profile', profile[i]);
            else
                qc.addOrCondition('application_profile', profile[i]);
        }
        gr.addQuery('catalog_item', blueprint);
        gr.addQuery('isprofilevariable', true);
        gr.orderBy('variable.name');
        gr.query();

        var i = 0;
        while (gr.next()) {

            /*if (gr.is_hidden == true)
            	continue;*/

            var opt = [];
            if (gr.variable.type + '' == 5) {
                var optionRec = new GlideRecord("question_choice");
                optionRec.addQuery('question', gr.variable + '');
                optionRec.query();
                while (optionRec.next()) {

                    opt.push(optionRec.value + '');

                }

            } else if (gr.variable.type + '' == 21) {
                var varRefRec = gr.variable.getRefRecord().reference_qual + '';
                varRefRec = varRefRec.substr(9, varRefRec.length);
                var optionRec = new GlideRecord(this.appUtil.configuration.table.dropDownTable + '');
                optionRec.addQuery('variable', varRefRec);
                optionRec.query();
                while (optionRec.next()) {
                    opt.push(optionRec.value + '');
                }

            }


            answer[gr.sys_id + ''] = {
                'name': gr.variable.name + '',
                'question_text': gr.variable.question_text + '',
                'value': gr.default_value + '',
                'runtime_config': gr.runtime_config + '',
                'type': gr.variable.type + '',
                'isprofilevariable': gr.isprofilevariable + '',
                'uuid': gr.uuid + '',
                'isdisabled': gr.isdisabled + '',
                "val_type": gr.value_type + '',
                "description": gr.variable.help_text + '',
                "mandatory": gr.variable.mandatory + '',
                "regex": gr.field_regex + '',
                "options": opt,
                "data_type": gr.data_type + '',
                "uuid": gr.uuid + '',
                "application_profile": gr.application_profile + '',
                "field_json": this.appUtil.getMacroDependencies(gr.field_json + ""),
                "field": gr.field_json + "",
                "isHidden": gr.is_hidden + ""
            };
            i++;
        }

        return JSON.stringify(answer);
    },
    getServiceVariableData: function(projects, blueprint, profiles, type, bpType, multipleService) {
        var project_array = projects.split(',');
        var profile_array = profiles.split(',');
        var multipleService = JSON.parse(multipleService);
        for (var pro = 0; pro &lt; profile_array.length; pro++) {
            var profile = profile_array[pro];
            var variables = new GlideRecord(this.appUtil.configuration.table.applicationProfiles + '');
            if (variables.get(profile)) {
                this.logger.info("Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails Feach ServiceVariable of " + variables.name + " Profile.");
            }
            var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
            gr.addQuery('application_profile', profile_array[pro]);
            gr.addQuery('catalog_item', blueprint);
            gr.addQuery('isprofilevariable', false);
            gr.orderBy('variable.order');
            gr.query();

            this.logger.info("Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails Feach ServiceVariable of " + variables.name + " Profile. Feached " + gr.getRowCount() + " Count");
            var answer = {};
            var i = 0;
            while (gr.next()) {

                if (!answer[variables.name + '_' + gr.service_name.name + ''])
                    answer[variables.name + '_' + gr.service_name.name + ''] = {};
                var categoryName = gr.category_name.name + '';
                if (gr.category_name.name + '' == gr.variable.name + '') {
                    if (!answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + ''])
                        answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + ''] = {};
                    if (bpType == "published") {
                        var ans = (this.getVariablePatchedValue(type + '', gr.default_value + '', gr.sys_id, gr.variable.name + '', gr.category_name.name + '', gr.category_name.question_text + ''));
                        this.logger.debug("--Inside Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails.Patched Value for " + gr.variable.name + " :: " + ans);
                        answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + '']['new_' + gr.sys_id + ''] = (ans) ? JSON.parse(ans) : [];
                        answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + '']['new_' + gr.sys_id + ''].notCmplx = false;
                    } else {
                        answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + ''][gr.sys_id + ''] = (gr.default_value + '') ? JSON.parse(gr.default_value + '') : {};
                        answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].notCmplx = false;
                    }
                } else {
                    /*if (gr.is_hidden == true)
                    	continue;*/
                    if (!answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + ''])
                        answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + ''] = {};
                    var catname = (gr.category_name.name + '').substring(((gr.service_name.name + '').length) + 1);
                    var varname = (gr.variable.name + '').substring(((gr.service_name.name + '').length) + 1);
                    var default_value = "";
                    var runtime_config = gr.runtime_config + '';
                    var isdisabled = gr.isdisabled + '';
                    var ans, parsedAns;
                    if (catname == "ssh_keys" &amp;&amp; bpType == "published") {
                        var hasKey;
                        var gr_ssh = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                        gr_ssh.addQuery('application_profile', profile);
                        gr_ssh.addQuery('catalog_item', blueprint);
                        gr_ssh.addQuery('isprofilevariable', false);
                        gr_ssh.addQuery('variable.name', 'CONTAINS', 'key_0');
                        gr_ssh.orderBy('variable.order');
                        gr_ssh.query();
                        if (gr_ssh.next()) {
                            hasKey = "true";
                        }
                        if (hasKey != "true") {
                            ans = this.getVariablePatchedValue(type + '', gr.default_value + '', gr.sys_id, gr.variable.name + '', gr.category_name.name + '', gr.category_name.question_text + '', "true");
                            parsedAns = (ans) ? JSON.parse(ans) : {};
                            answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + ''] = parsedAns;
                        }
                    }
                    if ((!gr.default_value) &amp;&amp; bpType == "published") {
                        ans = this.getVariablePatchedValue(type + '', gr.default_value + '', gr.sys_id, gr.variable.name + '', gr.category_name.name + '', gr.category_name.question_text + '');
                        parsedAns = (ans) ? JSON.parse(ans) : "";
                        this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails.Patched Value for " + gr.variable.name + " :: " + ans);
                        if (parsedAns) {
                            default_value = parsedAns.value + '';
                            var isSupported = (default_value + '' == 'Cloud-init' || default_value + '' == 'Sysprep' || (varname + '').startsWith('key_') || (this.disabledFields.includes(varname) &amp;&amp; varname + '' != 'name' &amp;&amp; varname + '' != 'type')) ? false : true;
                            runtime_config = ((default_value + '').indexOf('@@') != -1 || isSupported + '' == 'false') ? false : (parsedAns.runtime + '') ? parsedAns.runtime + '' : gr.runtime_config + '';
                            isdisabled = ((default_value + '').indexOf('@@') != -1 || isSupported + '' == 'false') ? true : (runtime_config + '' == 'true') ? false : true;
                        }
                    }

                    /*Advanced Variable*/
                    var opt = [];
                    if (gr.variable.type + '' == 5 &amp;&amp; gr.isservicevariable == true) {
                        var optionRec = new GlideRecord("question_choice");
                        optionRec.addQuery('question', gr.variable + '');
                        optionRec.query();
                        while (optionRec.next()) {
                            opt.push(optionRec.value + '');
                        }
                    } else if (gr.variable.type + '' == 21 &amp;&amp; gr.isservicevariable == true) {
                        var varRefRec = gr.variable.getRefRecord().reference_qual + '';
                        varRefRec = varRefRec.substr(9, varRefRec.length);
                        var optionRec = new GlideRecord(this.appUtil.configuration.table.dropDownTable + '');
                        optionRec.addQuery('variable', varRefRec);
                        optionRec.query();
                        while (optionRec.next()) {
                            opt.push(optionRec.value + '');
                        }
                    }
                    answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + ''][gr.sys_id + ''] = {
                        'name': gr.variable.name + '',
                        'question_text': gr.variable.question_text + '',
                        'value': (gr.default_value + '') ? gr.default_value + '' : default_value,
                        'runtime_config': (gr.default_value + '') ? gr.runtime_config + '' : runtime_config,
                        'type': gr.variable.type + '',
                        'isprofilevariable': gr.isprofilevariable + '',
                        'uuid': gr.uuid + '',
                        'isdisabled': (gr.default_value + '') ? gr.isdisabled + '' : isdisabled,
                        'isSupported': gr.issupported + '',
                        'isservicevariable': gr.isservicevariable + '',
                        'notCmplx': true,
                        'val_type': gr.value_type + '',
                        'description': gr.variable.help_text + '',
                        'mandatory': gr.variable.mandatory + '',
                        'regex': gr.field_regex + '',
                        'options': opt,
                        'data_type': gr.data_type + '',
                        'serviceField': (gr.isprofilevariable + '' == 'false' &amp;&amp; gr.isservicevariable + '' == 'false') ? true : false,
                        "field_json": (gr.isservicevariable + '' == 'true') ? this.appUtil.getMacroDependencies(gr.field_json + "") : {},
                        "field": (gr.isservicevariable + '' == 'true') ? gr.field_json + "" : "{}",
                        "isHidden": gr.is_hidden + ""
                    };
                }
                i++;
            }

            this.logger.debug("--Inside Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails. all service variable value answer" + variables.name + " :: " + JSON.stringify(answer));
            if (i &gt; 0) {
                var returnJSON = {};
                returnJSON['profile'] = variables.name + '';
                returnJSON['service_configuration'] = answer;
                returnJSON['profile_sys_id'] = variables.sys_id + '';
                if (pro == 0)
                    returnJSON['subnet_list'] = this.getNutanixSubnetList(projects);
                this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails " + JSON.stringify(returnJSON));
                multipleService.push(returnJSON);
            }
        }

        return JSON.stringify(multipleService);
    },
    mpiPatchingBp: function(mpi_uuid, bp_name, project_uuid, environment_uuid) {
        try {
            gs.info("!! mpi_uuid : " + mpi_uuid + " bp_name : " + bp_name + " project_uuid : " + project_uuid + " environment_uuid : " + environment_uuid);
            var logger = new Nutanix_Calm_Logger();
            var utils = new Nutanix_Calm_Utils();
            var reqUtils = new Nutanix_RequestUtil();
            var response = utils.makeCalmApiCall('GET', '/calm_marketplace_items/' + mpi_uuid);
            if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {
                response = JSON.parse(response.getBody());
                var name = bp_name + '';
                var app_bp_name = ((name + GlideSecureRandomUtil.getSecureRandomString(8) + mpi_uuid).replaceAll('-', ' ').trim().replaceAll(' ', '_')).substring(0, 64);
                var tmpbody = {
                    "status": response.status.resources.app_blueprint_template.status,
                    "spec": response.spec.resources.app_blueprint_template.spec
                };
                var body = {
                    "api_version": "3.0", //response.api_version,
                    "metadata": {
                        "kind": "blueprint",
                        "project_reference": {
                            "kind": "project",
                            "uuid": project_uuid + ''
                        },
                        "categories": response.metadata.categories //changes
                    },
                    "spec": {
                        "description": response.spec.resources.app_blueprint_template.spec.description, //response.spec.description,
                        "app_blueprint_name": app_bp_name + '',
                        "source_marketplace_version": response.spec.resources.version, //"1.0.0", //changes
                        "source_marketplace_name": name + '',
                        "resources": response.spec.resources.app_blueprint_template.spec.resources
                    }
                };
                if (environment_uuid + '')
                    body.spec.environment_uuid = environment_uuid + '';

                var response = utils.makeCalmApiCall('POST', '/blueprints/marketplace_launch', JSON.stringify(body));
                if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {
                    parseResp = JSON.parse(response.getBody());
                    var clonedBpUuid = parseResp.metadata.uuid;
                    return clonedBpUuid + '';
                }

            }
        } catch (e) {
            logger.error("Exception caught inside mpiPatching. Error:- " + e);
            return "false";
        }
    },


    copyMpiPatching: function(projects, blueprint, profile1) {

        var logger = new Nutanix_Calm_Logger();
        var utils = new Nutanix_Calm_Utils();
        var reqUtils = new Nutanix_RequestUtil();
        var blueprintTemplate = "";
        var catVariableBody = {};
        var bpVariablesJSON = {};
        var parseResp = {};

        try {
            logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.mpiPatching.");

            var project = projects.split(',');
            project = project[0];

            var bp = new GlideRecord('x_nuta2_nutanix_ca_nutanix_marketplaceitems');
            bp.addQuery('sys_id', blueprint);
            bp.query();

            var mpi_uuid = (bp.next()) ? bp.uuid : "";

            var response = utils.makeCalmApiCall('GET', '/calm_marketplace_items/' + mpi_uuid);

            if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                response = JSON.parse(response.getBody());

                var environment_uuid = ' ';
                var project_uuid = '';

                var projectRecord = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
                projectRecord.addQuery('sys_id', project);
                projectRecord.query();
                var environment_uuid_array;
                if (projectRecord.next()) {
                    project_uuid = projectRecord.uuid + '';
                    environment_uuid = projectRecord.environment_uuid + '';
                    if (parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2")) {
                        environment_uuid_array = environment_uuid.split(',');
                    }
                }

                var name = bp.name + '';
                var app_bp_name = ((name + GlideSecureRandomUtil.getSecureRandomString(8) + mpi_uuid).replaceAll('-', ' ').trim().replaceAll(' ', '_')).substring(0, 64);
                var tmpbody = {
                    "status": response.status.resources.app_blueprint_template.status,
                    "spec": response.spec.resources.app_blueprint_template.spec
                };

                var body = {
                    "api_version": "3.0", //response.api_version,
                    "metadata": {
                        "kind": "blueprint",
                        "project_reference": {
                            "kind": "project",
                            "uuid": project_uuid + ''
                        },
                        "categories": response.metadata.categories //changes
                    },
                    "spec": {
                        "description": response.spec.resources.app_blueprint_template.spec.description, //response.spec.description,
                        "app_blueprint_name": app_bp_name + '',
                        "source_marketplace_version": response.spec.resources.version, //"1.0.0", //changes
                        "source_marketplace_name": name + '',
                        "resources": response.spec.resources.app_blueprint_template.spec.resources

                        //reqUtils.makeResourceBody(tmpbody, tmpbody.status.resources, current)
                        //response.spec.resources.app_blueprint_template.spec.resources
                    }
                };

                var env = "";
                var app_pro = "";
                for (var i = 0; i &lt; environment_uuid_array.length; i++) {

                    env = environment_uuid_array[i];

                    var body1 = new Object();
                    var profile = [];
                    body1["api_version"] = "3.0";
                    var metadata = {};
                    var api_info;

                    metadata.kind = "marketplace_item";
                    api_info = "calm_marketplace_items";

                    metadata["categories"] = {};

                    var project_reference = {};
                    project_reference["kind"] = "project";
                    project_reference["name"] = projectRecord.name + "";
                    project_reference["uuid"] = project_uuid;
                    metadata["project_reference"] = project_reference;

                    body1["metadata"] = metadata;
                    var specs = {};
                    var environment_profile_pairs = [];
                    var environment = {};
                    environment["uuid"] = environment_uuid_array[i];

                    var app_profile = profile1;
                    app_profile = app_profile.split(",");
                    for (var i = 0; i &lt; app_profile.length; i++) {
                        var profile_obj = {};
                        var gr = new GlideRecord("x_nuta2_nutanix_ca_application_profile");
                        if (gr.get(app_profile[i])) {
                            profile_obj.app_profile = {
                                "name": gr.name + ""
                            };
                            profile.push(gr.name + "");
                        }
                        profile_obj.environment = environment;
                        environment_profile_pairs.push(profile_obj);
                    }
                    specs["environment_profile_pairs"] = environment_profile_pairs;
                    var final_profile = [];
                    body1["spec"] = specs;
                    this.appUtil = new Nutanix_Calm_Utils();
                    logger.info("Nutanix_ClientServerScriptBridge.fetchProfilesBasisOnEnvironment Body:" + JSON.stringify(body1));

                    var response = this.appUtil.makeCalmApiCall('POST', '/' + api_info + '/' + mpi_uuid + "/patch_with_environment/validate", JSON.stringify(body1));
                    logger.info("Nutanix_ClientServerScriptBridge.fetchProfilesBasisOnEnvironment " + JSON.stringify(response.getBody()) + response.getStatusCode());

                    if (response.getStatusCode() + '' == "200" || response.getStatusCode() + '' == "201") {
                        response = JSON.parse(response.getBody());
                        var environment_profile_pair = response.status.environment_profile_pairs;
                        for (var i = 0; i &lt; environment_profile_pair.length; i++) {
                            var name = environment_profile_pair[i].app_profile.name + "";
                            var state = environment_profile_pair[i].state;
                            if (profile.indexOf(name) != -1) {
                                if (state == "valid") {
                                    final_profile.push(name);
                                }
                            }
                        }

                        if (final_profile.length &gt; 0) {
                            app_pro = final_profile[0];
                            break;
                        }
                    } else {
                        logger.info("error in Nutanix_ClientServerScriptBridge.fetchProfilesBasisOnEnvironment");
                    }
                }


                var env_template = [{
                    "app_profile": {
                        "name": app_pro + ""
                    },
                    "environment": {
                        "uuid": env + ""
                    }
                }];
                body.spec.environment_profile_pairs = env_template;


                //gs.error("MPI payload send: "+JSON.stringify(body));
                //	return "MPI Launch Body "+JSON.stringify(body);


                var response = utils.makeCalmApiCall('POST', '/blueprints/marketplace_launch', JSON.stringify(body));
                // 			return "post marketplace launch  call "+response.getStatusCode();
                if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                    var session = gs.getSession();
                    session.putClientData('non_filtered_cloned_bp_response', response.getBody());

                    parseResp = JSON.parse(response.getBody());
                    blueprintTemplate = (parseResp.status.resources) ? parseResp.status.resources : "";
                    var clonedBpUuid = parseResp.metadata.uuid;

                    //gs.error("Patching : "+response.getBody());

                } else {
                    logger.error("API call to '/blueprints/marketplace_launch' failed with name : " + app_bp_name + ":-" + response.getBody());
                    //gs.error("Errorr :: "+(JSON.parseresponse.getBody()).message_list[0].message);
                    return JSON.stringify({
                        "errMess": JSON.parse(response.getBody()).message_list[0].message,
                        "status": false
                    });
                }

                var bpVariables = new Nutanix_CreateCatalogVariables();
                if (bp.template_type == "Single Vm") {

                    var service_body = [{
                        "uuid": "singleVm-default-service-uuid",
                        "name": "single_vm_configuration"
                    }];

                    catVariableBody = {
                        "substrate_definition_list": (blueprintTemplate.substrate_definition_list) ? blueprintTemplate.substrate_definition_list : "",
                        "app_profile_list": (blueprintTemplate.app_profile_list) ? blueprintTemplate.app_profile_list : "",
                        "service_definition_list": service_body,
                        "package_definition_list": (blueprintTemplate.package_definition_list) ? blueprintTemplate.package_definition_list : ""
                    };
                    bpVariablesJSON = bpVariables._filterJSONDatatoService(catVariableBody);
                } else if (blueprintTemplate.package_definition_list &amp;&amp; blueprintTemplate.substrate_definition_list &amp;&amp; blueprintTemplate.app_profile_list &amp;&amp; blueprintTemplate.service_definition_list) {
                    catVariableBody = {
                        "substrate_definition_list": (blueprintTemplate.substrate_definition_list) ? blueprintTemplate.substrate_definition_list : "",
                        "app_profile_list": (blueprintTemplate.app_profile_list) ? blueprintTemplate.app_profile_list : "",
                        "service_definition_list": (blueprintTemplate.service_definition_list) ? blueprintTemplate.service_definition_list : "",
                        "package_definition_list": (blueprintTemplate.package_definition_list) ? blueprintTemplate.package_definition_list : ""
                    };

                    bpVariablesJSON = bpVariables._filterJSONDatatoService(catVariableBody);
                }

                bpVariablesJSON.uuid = parseResp.metadata.uuid + '';
                bpVariablesJSON.name = parseResp.metadata.name + '';

                var session = gs.getSession();
                session.putClientData('Cloned_bp_response', JSON.stringify(bpVariablesJSON));
                var clientData = session.getClientData('Cloned_bp_response');
                logger.debug("MPI cloned Blueprint response ::" + clientData);
                return JSON.stringify({
                    "errMess": "Successfull",
                    "status": true
                }); //JSON.parse(clientData).uuid+'';
            } else {
                logger.error("API call to '/calm_marketplace_items/uuid' failed: " + response.getBody());
                var result = {
                    "errMess": (response.getBody()).message_list[0].message,
                    "status": false
                };
                return JSON.stringify(result);
            }
        } catch (e) {
            logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.mpiPatching. Error:- " + e);
            return "false";
        }
    },
    variableArrayParser_client_script: function(type, parent_uuid, var_array) {
        //this.logger.debug("++++variableArrayParser type" + type + " parent_uuid," + parent_uuid + " var_array" + var_array);
        var cat_launch = false;
        if (type == 'catalog') {
            cat_launch = true;
            var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
            gr.addQuery("item_name", parent_uuid);
            gr.query();
            if (gr.next()) {
                parent_uuid = gr.blueprint.uuid + "";
                type = "blueprints";
                if ("" + gr.item_name.category.title == "Un-Published Blueprints") {
                    type = "blueprints";
                }
                if ("" + gr.item_name.category.title == "Published Blueprints") {
                    type = "published";
                }

            }
        }

        var parsed_var_array = JSON.parse(var_array);
        var pre_map = {};
        var extApiFlag = false;
        for (var i = 0; i &lt; parsed_var_array.length; i++) {
            var var_data = parsed_var_array[i];
            var hasMacros = (this.appUtil._createMacroArray(var_data.def_val + "").length != 0);
            var depends_on = this.appUtil.getMacroDependencies(JSON.stringify(var_data));
            pre_map[var_data.name] = {
                "depends_on": depends_on,
                "value": (hasMacros) ? var_data.def_val + "" : var_data.value + "",
                "uuid": var_data.uuid,
                "type": var_data.type,
                "data_type": var_data.data_type,
                "name": var_data.name,
                "sys_id": (var_data.sys_id) ? var_data.sys_id : "",
                "catalog_launch": cat_launch
            };
            if (var_data.type == 'EXEC_LOCAL' || var_data.type == 'HTTP_LOCAL' || var_data.type == 'EXEC_SECRET' || var_data.type == 'HTTP_SECRET') {
                pre_map[var_data.name].requiresApiCall = true;
            } else {
                if (var_data.options &amp;&amp; var_data.options.choices &amp;&amp; var_data.options.choices.length != 0) {
                    pre_map[var_data.name].options = var_data.options.choices;
                    pre_map[var_data.name].data_type = "LIST_SINGLE";
                }
                if (var_data.data_type + "" == 'LIST') {
                    if (cat_launch)
                        pre_map[var_data.name].value = this._sysIdToValue(var_data.value);
                    pre_map[var_data.name].data_type = var_data.data_type;
                }
            }

        }
        //this.logger.debug("====variableArrayParser type" + type + " parent_uuid," + parent_uuid + " var_array" + var_array);
        var result = this.getHttpValues_client_script(type, parent_uuid, JSON.stringify(pre_map));

        return result;
    },
    getHttpValues_client_script: function(type, parent_uuid, pre_map) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getHttpValues. type : " + type + " parent_uuid : " + parent_uuid + " pre_map : " + pre_map);

            var post_value_map = {};
            pre_map = JSON.parse(pre_map);
            var top_pre_map = {};
            for (var i in pre_map) {
                top_pre_map[i] = this.appUtil.createPreMap(pre_map[i].depends_on, pre_map[i].type);
            }

            var top_post_map = this.appUtil.createDependencyMap(top_pre_map);

            var dependency_array = top_post_map.Dep_array;
            var error_array = top_post_map.error_map;
            var mpi_uuid, bp_name, project_uuid, environment_uuid;

            if (type == 'unpublished') {

                var table_name = (type == 'unpublished') ? this.appUtil.configuration.table.Blueprint + '' : 'x_nuta2_nutanix_ca_nutanix_marketplaceitems';
                var grBlueprint = new GlideRecord(table_name);
                if (grBlueprint.get(parent_uuid)) {
                    parent_uuid = grBlueprint.uuid + '';
                    type = 'blueprints';
                }
            }
            if (type + '' == 'published') {

                var table_name = 'x_nuta2_nutanix_ca_nutanix_marketplaceitems';
                var grBlueprint = new GlideRecord(table_name);
                grBlueprint.addEncodedQuery('uuidLIKE' + parent_uuid);
                grBlueprint.query();

                if (grBlueprint.next()) {

                    mpi_uuid = grBlueprint.uuid + '';
                    bp_name = grBlueprint.name;

                    var bp_project = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_projects_blueprints_relationship');
                    bp_project.addEncodedQuery('catalog_item.sys_id=' + grBlueprint.sys_id);
                    bp_project.query();
                    while (bp_project.next()) {
                        project_uuid = bp_project.projects.uuid;
                        environment_uuid = bp_project.projects.environment_uuid;
                    }

                    parent_uuid = this.mpiPatchingBp(mpi_uuid, bp_name, project_uuid, environment_uuid);
                    type = 'blueprints';
                }
            }
            // 			gs.info("!"+JSON.stringify(dependency_array));
            for (var pos = 0; pos &lt; dependency_array.length; pos++) {

                var var_json = pre_map[dependency_array[pos]];

                this.logger.debug("!!!!! var_json \n" + JSON.stringify(var_json));
                if (!var_json) {
                    this.logger.error('Dependent variable "' + dependency_array[pos] + '" not found.');
                    continue;
                }

                if (!var_json.requiresApiCall) {
                    if (var_json.data_type + "" == "LIST_SINGLE" || var_json.data_type + "" == 'LIST') {
                        //gs.info(JSON.stringify(var_json));
                        var_json.options = this._substituteMacro(var_json.options.toString(), pre_map).split(',');
                        var_json.value = this._substituteMacro(var_json.value, pre_map);
                    } else
                        var_json.value = this._substituteMacro(var_json.value, pre_map);
                    post_value_map[dependency_array[pos]] = var_json;
                    continue;
                }

                var var_uuid = var_json.uuid;
                var options = {
                    "state": "",
                    "values": []
                };

                var request_body = JSON.stringify({
                    "requestId": "",
                    "overridden_field": this._createOverrideVarBody(pre_map, var_json)
                });
                //gs.info("Override body: "+request_body);
                //gs.info("Send val body: "+'POST' + '/' + type + '/' + parent_uuid + '/variables/' + var_uuid + '/values' + request_body + "");
                // 				gs.info('Priyanka POST \n endpoint /'+type+'/'+parent_uuid+'/variables/'+var_uuid+'/value'+"\n request body "+JSON.stringify(request_body));
                var sendValuesBody = this.appUtil.makeCalmApiCall('POST', '/' + type + '/' + parent_uuid + '/variables/' + var_uuid + '/values', request_body + "");

                var parsedSendValueBody = JSON.parse(sendValuesBody.getBody());
                // 				gs.info(sendValuesBody.getBody());
                var valPollBody = {
                    "requestId": parsedSendValueBody.request_id,
                    "trlId": parsedSendValueBody.trl_id
                };
                //gs.info("valPollBody "+JSON.stringify(valPollBody));
                var getValuesBody = this.appUtil.makeCalmApiCall('POST', '/' + type + '/' + parent_uuid + '/variables/' + var_uuid + '/values', JSON.stringify(valPollBody));
                var parsedValueBody = JSON.parse(getValuesBody.getBody());
                var execState = parsedValueBody.state + "";
                while (execState == 'RUNNING' || execState == 'running') {
                    getValuesBody = this.appUtil.makeCalmApiCall('POST', '/' + type + '/' + parent_uuid + '/variables/' + var_uuid + '/values', JSON.stringify(valPollBody));
                    parsedValueBody = JSON.parse(getValuesBody.getBody());
                    execState = parsedValueBody.state + "";
                }
                //gs.info("Values:"+getValuesBody.getBody());
                //r parsedValueBody = JSON.parse(getValuesBody.getBody());
                if (parsedValueBody.state == 'SUCCESS') {
                    var_json.state = parsedValueBody.state;
                    var_json.default_value = var_json.value + "";
                    var_json.value = [];
                    for (var i in parsedValueBody.values)
                        var_json.value[i] = parsedValueBody.values[i];
                } else {
                    var_json.state = parsedValueBody.state;
                    var_json.error = [];
                    for (var j in parsedValueBody.message_list)
                        var_json.error[j] = parsedValueBody.message_list[j].message;
                }

                post_value_map[dependency_array[pos]] = var_json;
            }

            //gs.info("!!!Pre map:" + JSON.stringify(pre_map));
            gs.info("post_value_map:" + JSON.stringify(post_value_map));
            return JSON.stringify(post_value_map);

        } catch (e) {
            this.logger.error("Error caught in Nutanix_FetchConfigureSettingDropdown.getHttpValues:" + e);
        }
    },
    type: 'Nutanix_FetchConfigureSettingDropdown'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-28 19:21:56&lt;/sys_created_on&gt;&lt;sys_id&gt;92e8017f37112300fdfc097973990e33&lt;/sys_id&gt;&lt;sys_mod_count&gt;1040&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_FetchConfigureSettingDropdown&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_92e8017f37112300fdfc097973990e33&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-07-16 09:04:15&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>1675493364</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.4.5 Complete Build">346d737d1bb0011081326464604bcb11</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-01-03 07:26:35</sys_created_on>
<sys_id>706d737d1bb0011081326464604bcb13</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17e1ed138bc0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-01-03 07:26:35</sys_updated_on>
<table/>
<target_name>Nutanix_FetchConfigureSettingDropdown</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>10eb277e6611b0102db4385d0f6af765</update_guid>
<update_guid_history>10eb277e6611b0102db4385d0f6af765:1675493364,04cf537ee4dd7010674925d8ded9a7c1:-1199078220,0f5f5f3e93dd70100898fc66bdf08d0b:-1380987901,12b91b36199d70100e79546a7fbea103:-1946415153,1ef65ff29c9d7010b8d144a7a8f96acb:-980841248,2562177a485d701065f0e9568d01617b:1194640238,c86097fadf5d701048981ad0f30a6f06:396222681,a94383328d5d7010645b39621d8d19e3:-1911708472,fe6f7e3e641d7010ef82e56f4bc6ec8c:997084937,4eb254b6335570105c319640f4603e3a:1995015182,ea12dc3629557010f5e2c767134d3352:-45263053,2eb09cfea91570100e0a6552222c811b:-942282625,9820987249557010074ef48c6804230b:2098852659,497f00f264557010ba81d84f28cbda6d:1063776097,f13f40f222557010532cd07bd648459e:633925467,fb1f08fe5d15701004884d6ad514c16a:-662182354,24aac8be7e157010eff686c1afa4467b:1603460464,a679843e42157010b918a812a7d8b3c5:23593315,e236043e3c157010099a9770aaf479ef:1937440259,b5b344ba69157010b6ab9c82380c4a11:1603460464,0571f196541130109834a882edf8c4ff:-511336411,da6039d2c7113010da45815274a9c37f:-43316648,ad480e4af2d530108c1db09c2caf3efb:519547409,657b80f4d9553010019e2965966fd8a1:1483817554,7dde3fa0d01530106b060350605a14bd:-1160137940,6281dfac621130103691860b510d4ead:989132657,fc0910a036d970106bdafd417ce3c686:1023004032,d63c80e4f59970109a595263cfd2b36a:-718598289,97b98024f8997010f8afcaccf507c240:-1035101819,c1874c60c3997010d9d8bb70929c38e1:-2061192699,53474ce072997010ace9b960d6a24ecf:-816318310,914b4a48fdd53010bd2902694309b973:-311660899,bf47f97bb785b01092f706a0336bff57:1313449184,ce75f9f7d385b01019d4e3365a5e36cf:-644527820,6b14f937f385b01086c38678d8f3f210:1127657804,f2a1b9f37985b010fadf58bd2fb8238a:1018747068,30c5f43b4a41b010c91b70acd109039a:1971399477,183ef8673409b4105cfe46a265567670:-1813797782,e9fdf0e7aa85b410cf2a60f2e4be97d1:-1214605052,1675bb533345b410207adeaf8fd08a36:1083601298,db0b44923649b0101bc50b24f27dda60:-676139507,63f648de4b09b010a8a40be462b0793e:-570592153,582d7b0e33c5b010f0ae0da5906583b3:254995622,156c374a11c5b01019bed56673c10ed1:-974123011,86087b4218c5b010575e63898216be98:1350026723,c4f9d342a485b010e5c3a4c201165431:843388546,5d569f4ed445b0102b2cfbceea3fa2f2:1647189228,c502d706d745b01077c362e6df4ed1e2:-173643514,da3a5a02ec81b010b383ff37a71b58d3:-770803244,56c35a0af641b0109e5eded5e4a5f68b:-345274263,0ba6bd4ecb8d7010d42847eef6d934e6:904607225,4d970779e9c57010b36263544418d0a8:1960480476,799b7631a7c57010d8b63aeb2ceabae2:-1374403865,5e473a75a1857010ebeb599d48586421:-537143719,cce687c03c48b010589b8aadc48a3a51:38174229,82fa7cbd8ee56010c06959ba5b54798a:-444326630,b344739ba9fc60103034054d3cef72d1:1058007058,da475079f6482010048ae56cd636e105:2135817944,e58d53d4da2c1410cbd018fd1f0f0f78:523837316,f32d17541c2c1410e483122450d923dc:1501222418,52ac5794fc2c141084970804935080eb:197809562,723cd754202c14108f7d37ffd133069f:39746879,588b1794062c1410c193529af737cf9e:1770578955,dc1a1af1626368103071190e0cd3ebbd:-2133271558,171070bd822f2810b1cca3b323b0a61b:-1080478846,ef5f647d0d2f2810cb81dfc716aaf8db:144450568,722da07d3ce320105e933a8675af2bc9:1070972202,55ddeee9aa2368100d8f7d9fec627730:1705771107,25b52225eb236810fdc06fcbabb0df1d:-1047691869,851996e558ef2810650ab08963992a6b:877118339,33f896e596ef281048a1847efe3b3cf7:-574231244,4ad61ea5f1ef2810d7ecce55aeae5915:1309898342,10ae8ae96caf2810274c541eb66f47f2:-1771617287,86e886a94daf2810f5531635c01174b9:1371637024,6f57ce29e9af2810e819b97f969eb823:984609344,1b0e53d53ae72810a947651a23a3cb2c:757898459,d64d935553e72810b820716e21f80e97:-416542344,8d0b1b1533e7281089c726711e6fc451:-637335441,0e58d3912fe72810aa11d312ac04b033:-1746639800,b82987d1e8a72810b4612bad36d6c177:-1962918436,f8c58391b7a7281018b6848d33dd63bb:-1814763041,08a36071f7ebe090585a465ea3f591fe:2082505813,6761e43101ebe090c4108d71b574a8b2:-2064383943,74f3d2a97e27e090ce6d48e3aa28eeb4:-2064383943,72d5d515c5e7a850bd1deb02d4bcc27e:-1540792305,30968f89f9af6850273f69925d5c067e:-1312079952,03b18b052daf685034369103718b7cd6:-1646452344,54b77249a16f685073a6d0c2cd872575:474146935,3b9732491e6f6850fff4364971f0df95:-1991824160,9ef57e45ec6f6850b51a5532166af05a:-604152711,90ef2a01126f685074219b4143e8a359:474146935,9d5ea6c95e2f68504cd29f62995301d8:-618774476,c73baac9572f6850ac723f7566748191:1377109895,92c922499f2f6850fb737c271a15faef:-1185166433,bee72a45a02f6850859e6798595f0869:1504318555,f5056e41572f6850e03dfeb352588ef7:-1650406398,3fd3aa41042f68508b80f769b8b83b70:-2090521745,c7a50649022b6850a9e609265c80415a:1329562538,3ad40649822b68509bda9038a8b109ad:-194577971,c9d20a09272b68502aa4b827e504250a:-1753107273,4fa2c609192b68505c5200d470e782b1:-413972342,a6f14e853a2b685024e5b34a89fbd688:-671454806,f0210a456f2b68508121259f76fd0b88:-1046886297,e00c3dcd3de7685038f3ee1997025a40:-854534071,6519bd0d04e76850e8180d487ba0cdd6:2119584952,3557bd892ae76850a30e070e708b92f6:-693808524,2f35b9c5f8e76850e31850a5037f8dab:187274079,889669c9e3a768505fcf07d57dde6719:1643862647,6985ad4948a768507fab5efbf5e7aff9:-1364513586,878269c586a768509c44ae9bf737727e:796188115,4701694528a768509e57d211b19077fc:-466294781,7dff154503a7685006d5c5c758abed78:493005244,704fdd0573a7685089c283ec1c341bbd:-794443354,c62f1d0537a7685060c15b14f8aac073:521568758,b54e91c1daa768507c841f693d91437f:1798092133,2f3d15013ea7685084459aa0d877a967:342509594,0c795109be676850be9561fdd6b84c57:-2034756840,6a5695cdfc276850ce32994d34b5f8fa:384135430,edef05c1732768503145d5aeebe9169f:-855634196,2deb4d4d1ee3685031c142aabb211087:1321120786,b65609816ee368503bf1c3846759c453:-272459592,1e31450daca36850f549bc6bee81a16a:350307520,b838b0414aa36850021ee4b72c186462:-303892314,4c08fc01b1a36850dbf5d7da942359d7:487693920,c6d5bc8949636850079a17618f989fb8:607648500,20e2c0f03aefe450988e16f546df78a1:1788259448,7740887852afe45005b7e88906cb9491:-1819625407,26adbfe01bafe45007045f08832c549d:-526519413,37927ba4782fe450dea991c6fb669a47:-1872006103,792fa36cdfebe450e925ed33ff9909c8:-1335070983,543ceba4baebe450550277700a518748:1636726073,713fb624be67e450094ab4ec3d5b9e3a:1318226497,d9c9df9873eba45071acc9bad8eb115a:-1995709934,b7f6db142aeba45094640bc03aceea1d:1841716886,551b7654b22ba4504275cae174a0e6bf:-1094026851,ecca3e90fe2ba45048f3c5ccca3ccb39:8664761,6fba3ed0af2ba4508d51d4d43a6f603c:-123638791,7379fa90ee2ba4509752760fbdb558db:-2015188203,e1487e502c2ba45093dd1beb079ee185:-1179735463,72673250882ba4507330fe6d356ce2dd:719242598,3d0576dc90e7a450366f6462e5a970b0:1615842571,96e3f69ce6e7a4506222fa2b69006a2a:-1611958917,f023b25cf1e7a4508f58830dedef5f4a:993271905,c3e276d870e7a450d3a127583546463e:1316048017,90c032d8c8e7a450f3e332018c69153d:483615243,225c5a18d067a45058d5dc928f071b83:1445164021,41fbd2d44567a450bfecb6cc7fccca65:111297173,eb211a9cf027a4506c43dac33004d5cf:-530280571,75809a1c7627a450c2b0cfd8eee4a2fc:1054190313,bd3a69d01faf6450dee1ffdea1e2f3fc:-1128233911,b1400de3e81fe050cb178d9313f4f949:-1077121947,0676702fb9dbe050c458766fcb2bb298:-739628381,de83386b11dbe0509a01b9ea4320eb23:1718495943,0f43fc6bfbdbe0506945d696e8ca95af:1458041447,4b4c206f3d9be05006bf768e0ac7b78e:1381829081,bef660e7cf9be0502176f28906ac8925:2045679626,1ef16467cb9be050093b6ed36fb33c11:1541559164,aff0a0270f9be050936aec18f6682e67:-3333430,819f58a3319be0509d94987e04c72287:1541559164,d13c50af4e5be05087582539c4d26fd1:1080183836,1a9ad0aff85be05004da326d2b6faa40:-339965124,428a90afac5be0508cff7abf30c37a53:1573414172,cd8694e7835be0500ae107e043080392:-1591943620,99a49ce38d5be0502dbb909bbd97441f:715077884,4d6394e3015be0508f601a3f8a01df80:1928003638,ec3054230d5be050227f0873b588a4cf:318739150,eae10063cb1be050b965c2f35a10e9a0:-831315305,4a3a33db4bd7e050d779955cc4b907ec:-487482185,a01afbdb97d7e050760ba45b5332ecdf:-246057875,9959bb5b36d7e050267a9fa34f4c2c85:-1776986255,7bb593538c57e050f6d142f1665906d4:-684688587,12249f13ee57e050873dd23c0e5c1789:1693100809,b146321fa193e05038bf5de036e03108:327449037,b2e956d70f13e05038e2fe58b3d11057:-782348691,21501183c113a0501e6ec8f632be6ca2:-1412488403,1591d176d057605000d6828fb93a1c30:1210687098,a35b053280576050896da340d5efe582:-1677172880,c4dd16cb98df2010cd81a77b9cc98353:-849773821,3fc85ac763df201059217e7f36bc5ee2:-1178056937,a8e943c5e89f2410296b3418212fed20:-1114171696,dd2d2a05541f2410948ed524d35080c1:-1323154125,5edbdef0395fe010d49e1890ccbb8c4e:273485267,d31a9af0f85fe0108d1098efe3ecd16b:-2066618458,14975abcc21fe0101c6c87bd3bbb1c8b:-218448635,64f39e74a31fe010fb448c5ac07a3067:2142962457,a59bbd70719be01031800dfc57c3da03:-888171669,e4d4702cbdd3a010c1796eace1e1a817:-1965299641,8d19e4601bd3a0106c5274b870020b3c:-1499100708,777a509822d360109f2c224034becec9:-2128986425,ba04981007d36010ac7f67352f785b13:-665822521,79b0733a8f076010b626eee0c96b6473:-1273044324,c78faf76e8076010db2bed1668d1fa67:-764342428,242eef3661076010de76ca9cb305ae34:736271278,c59cebf23d076010f879d32afc11f3e8:-2068303040,ddfa6fb22107601063b1b3cfb896db8f:1074701047,4caaaf720b0760107d1d220bdfb36e52:1813185411,7c892b72710760103ed3285b1a402079:-632712190,833a6cc2c8c76450a0c138bd3a2dc6cf:243196515,237524ce248764502e087314db3a613a:-1383661043,0e34208ee8876450b92c24dd96c45726:-570907926,a6a3244ec687645044ec6303c4ac06b5:947890314,6393644e2387645082a9bb57ae821c53:-1569681127,4583a8ca28876450f7afc3bd75da4ac6:947890314,e0d1a8cacb8764507adc271e74bfc18f:-401819533,61df584a5b87645071b77edb3268de13:-286419260,3ccd148638876450a494e14fba02d842:118876019,b6eb5446ef876450ed6f08e9e78d6e65:-1305007381,3f8850829b876450f6b1908dce0e29c3:1559636872,b3275c021f876450d86f536599615f50:1459773054,94079b35bb83645056016e35a22641e6:1106672843,f1d41bb11d836450150131bc6c6d7b76:1034102677,7d29c7e99bc32450ebb63707da2077d4:-1835255290,d7a883e99ac324503822b09d2fd56677:-943906868,8f480b2993c32450d6f50d7306ed2d14:1280603361,c716c36952c3245083aa314faa8448ca:568661675,1605c3e5cec324504b5a0ef3a718d509:541943245,57424fa19fc32450cba5b05277333102:1688356451,bf118f214dc324509d19d0123cb84b46:-426673106,002f36ede9832450ff99242ac871d15b:1304925722,b01e36ad6b832450f6356e8c8ba176da:-899168906,081b76a9ae832450d0855d888147c9d2:286582995,96893a692d832450e88b8b5b2ed3e311:1380236271,30a8b62910832450534a04d93ac17ec1:1322819835,8e88b629c28324504fab4c5a2ae14ea9:-1755342337,fbb7b6296783245045759daec0ef78f9:-1181610533,1b573229fb8324502c902595aa7f1bf6:1431441236,7eb0b661a6832450f7257499d828510d:-1398230621,f82b6acc7a9b245064585a800c161275:1108910192,a266ab3683476050eadde152b8fcb843:-1024680998,b52063fe2907605096977c2fb7c7ef73:-720966255,bef5d73645076050fc6fb5903570a4c3:658312903,af6c91e234432050a05388c2a4313fb7:-1866591858,cc17f0a255076c10a905569b8ceeae86:-1010277402,f463f4eec8c36c1009f5ac0e81bb1909:-1932518251,0f7065dedcc72c1007cc9964a45f74d4:620200321,6328180642c7e810e34a29ddf92505a8:-467113071,0409b2b1aa03e8100d5924705531265d:618693563,ec44b2bd68cfa810725bd808ec1f4160:-131780457,02f05c7d260ba8106072004479f4eda8:167387778,687f48f58b0ba8101215bee297ca29e6:-1396994478,7b1d88bd5bc7a8109f6f0a84e0a9ae1a:-807111898,dfcbc479a3c7a810996cb0f8442810ff:-1230158244,43d57ee8eb4b64104fb9731b0cf4f49f:1606411202,1e232ae87b0b6410202a3567ae3e9c80:563979212,0ec3760031c32410bda627e65f2acaa9:1529239962,ae22b288368324105fbf890307eaa966:1174814038,b6e49e802c432410658408de3e1c2d2b:1529239962,c6bd0e8847032410ef5d72d8b4dcdc8f:34267700,4aacf1c004cfe0106c4b8082a298c7b5:-258853336,74927c77ab3aa010fbba391b69e841a7:174221074,9eade073383aa010eb845c1b1d3f3e45:-1796859055,db62ca059fb2205063ec0b75cb4b56c0:432302469,ec414ac1efb220501b45288243c60ac3:-941920520,7a80424195b22050ebfac05e7d17ff5e:65364857,5f8a5830ccfaac1058af3101ccb3d0c3:-524365420,462710bc99baac10a891904188ca23e7:64148989,5dc0d47889baac10b8b2693b7961be4d:-1886969169,d44ebe7721eee810fe71fa63dd1d15cc:828290468,92b97aff29aee81002f0018f0fa3289c:-13130623,c1d8b27382eee8109a8c8f35948ad751:-1134347770,7a52830b9e2e68105b234f51ddc40228:1146026474,7c79644227c32c10f8ad6e809d847011:1546582747,c5776002acc32c103256a93d42cb0837:195072113,7d74affce7cfe4104c1651e275aa6c1d:1733807973,37f240f46b07e410e1fc64e864d407c4:338378104,5df7b32cb9c3e4107dec0d79be8e264b:-1784177160,2717b7e8c4c3e41067e49427633cacad:1771550945,363d2b24f0c3e410260fdf6b2d20865b:-1564226613,bb65576c8743e410abe916de77cf90e6:1771550945,9c64132c3543e4109b790dba12c7e935:-1146967650,830217a82843e410d6561b4d97b6f7ef:748750657,8a70df280543e41027f7769bba06402b:1125348003,b68f47e4e643e41070260f6dabb904d0:-87357658,e3ce0fe4bf43e410001929c9f18f5ef0:433758649,7d4e83a4cc43e4102d4dc70382a310bd:191019937,4b9dcba46743e410d9e8ac8f17759fd7:2123176618,ce0b4b24b943e4100e262faf4fba6040:-153885106,1761c3680603e410cf696a1db2f723e3:-1751234174,3832a710be87a41084d3be44c33203fa:1022906318,edcfdb5cba47a4104fbc30b59f527aed:21674054,0cc142904f43a410b55e01c05af4925d:1022906318,db5182505c43a41094a4fd617c7caeec:-771489008,8e1e3d1cad03a4107ff12f1782975335:1105681002,1ea8651c18cf6410e136ad0f261d9338:-1535919305,e2f625585fcf6410c67501b24f36f3de:-642506237,0f702118c20f6410e286068acc4f1c5d:268562370,6cebcd90718b6410409e39218cfddc55:-1184001241,79d84d10938b6410f2b261c6f95a93c6:372349735,4fc23b789ae6609054bde04c88b04027:-1741995643,de72777821e66090c341c08d3992fde2:1366428215,6fa0866088a62810a090a8a5e943f489:1810769973,d82f0c83925eec90dd28dbab8ea40c2a:-1276550635,2a9b1f224d1eac9008c76a33d24dccc0:787098235,34aadb22e61eac90f62ee0344c857e52:1149860440,cda897ae07daac9013c7e738354aa30b:-604740172,e7c71b2ebddaac9079d6d475b4433fea:899349867,a7455f6ab8daac9029c575f8dfe61a29:424619257,0b6e07669cdaac903c51c489e84acee5:-480703404,74d033e8a5da68900406c0fa0478d28a:260404975,a910bba861da68907bc284a56117983b:1205021579,6fb26360bcda6890040389e12fd56b62:532985571,68fd97ac719a68900694edf883a73b26:957525766,3e1d976ca49a6890b477ae108d3db244:25202304,9edb976ca89a689098a78de127d3c63a:-1011200206,afa79f20099a6890436921d043936b26:-127147260,054168e4ecd26890ea6974c91947d38b:-167698895,866cdc24cfd268904cd8683254998df6:-1846101593,3485506078d268907aa4f0a6d4ff7e37:-982795628,3d24d420b5d26890a4debc33b1aaad63:-623142493,ebd467100bde2890dfd0e90cd3eb7962:1857183881,a8db97dc4e9e28900d0819d12b591269:433804183,0c091f5ce39e2890fbf4ba5198f6bc01:-1947824629,d4179b98fe9e289088092efec0f808aa:1901118312,3456dbd86b9e2890f99c6088a49b1b75:-2003992742,d1441798d09e28906633b8ffccd12d61:-756033208,c462df18b89e28908bf7d38e86ce4f0c:-3271705,595f8f94f39e2890b3d5c875019e7527:958201892,8e9c03509c9e289092a25d97e92d4fd7:2024453020,0c4bcb580e5e28908c33716307450d94:-1224079795,77e38714905e28903d90bf1fb1ebfdb9:-496306073,eb918750445e28908dbcc12c43e2a10e:-439056615,633f32dc041e28904b0d092918f5f511:1669752272,0a2ef2109f5e28908fd03ecc8beaf2f8:753475709,ccbcb6dc261e2890c56e0081035be440:-1883950518,5109325c761e2890dad99d044945621d:1838793392,aa98be989f1e28907c345f8ff9d122b6:-1419897874,64832a1c7dda28900de5584a6d383824:109085193,5f7cd21864da28908627c3d5fe2c6ec0:1037302775,b30a5a942bda289019ba2a12b1479d46:-569706163,88f3129096da2890f22809a1d897b0ab:-1314410171,7f325650ffda28909048beaee700cdd0:1816760356,b4d6b6f8e9c62850bb73d9cb584d14d6:684804781,6211feb8f5c628509ebf7a6056927388:-634398506,c7cebdaf40966c50a8bfb1d529c18500:731130697,60933ec0809aa810d658e1a12c74b929:-1841772096,1a540dc3b4b03300135ab7df18041327:-1170071680,27b38143b9b033007c95be60b7874b8f:1422649033,f8d20dc36ab03300e385868b9cb7332d:2030792538,59ea70cf8c7033007665788394975ffc:2050359268,4504344b407033002fdeccd57113d0c7:-1828464775,5f32f08b8f703300b04db7dff8cf0a89:1343351549,23e91443d030330036bedafc059fa9a5:101643997,5da8ec7258b43300a83554f20e1fc1ae:660977160,a6b6acbe08743300abdff979c672ed56:-1084596370,019cc87afcf033006583656b76e0f715:-1983741591,4d19c876cdf0330087e9afe3e97aee17:1890337193,dd9384365ef03300522bb9d5daea3cf5:501456305,452180b2e5f03300e54f54ab31e00a93:-1553790191,7cc95472874d6c5025f2bc731d929629:-1561155187,70bdf6c6becde8502e65c03adce4cdfd:-923926535,c766a3eab2812c10eb4976ff2867514f:1074009370,dcc683ae32012c10bd0597056f1f30ab:-1957425395,5e7683ae56012c101f3e605988d0b3ef:1071587405,95310bea49012c106998d556fd005b57:1929203727,e67745e20589e81067de27dd3e44a108:1285461753,ff1e4b5e46c1e8101b0da7df8d6a09d6:-1161081762,138c4fdaf5c1e810d451fd28ac5ac0db:1356365403,734c8bda79c1e8109caf177342211051:-2139550265,98bb0b1aafc1e8106e97081c1d83690c:-1870314720,a2aa079a3cc1e81056c887b0f31d76c7:-1012368058,f2c9cb5a0ec1e8106af0ac4ad2e23869:-540519425,fa19c35a43c1e810da7e958a75b5fa93:-1207715622,f1b88b1affc1e8101b6d56d65290b559:-114175867,6578071a49c1e81097b65b47b8ce9706:1667215688,6d28c31aa2c1e810ce964f5941a1affe:-968748541,5ea3b345118de450db7d209ed3e71e16:-1863409357,d08968300745a450541d9057a582bf7e:-986019383,0d266cfc1ac52010fb87a82f0dc97933:-1054464875,aa1188524cf0ec103fc03a0aa5ac7192:81458503,c452e382af70ec101bf287a68aea70f5:1211632348,928c9335adb4ac10a77d07c79b12acf4:1436260390,ce42068eb468e010bb0bad915ea3a4d4:-1054464875,b8683c0ea8a4e010f199f4d99f041f89:1040250668,8eb27c15731c20109cd553488e14532f:-1054464875,f33667c99218201031e59e3dbc53dba8:-1054464875,efad328df2542010bce823b1ae544bab:-1054464875,73201c410244a010827fd12a779dc86e:390999165,110af743f5ebd010783a340b4eee099c:1615450128,f4e9774308ebd0101f19e05f88dd1aea:-55193110,c396455af0a35410403c2e9c031460c9:159626126,1fda6c5678635410908f71df9182accf:2077034678,d580145adfef14103fada645d8d5c98b:1478282092,4cade58a272b14101a60f8f48f5bc39b:-1516576566,79cce90a222b141025bb43e613375573:1096647466,9c6c610ae62b14106bf7fbc5b7e61357:-1657422486,bd03910e34a71410d303108e9bfa0362:990805514,220bb4029da7141013fa9d645dda74a9:-341175455,df99b40283a7141015bc08b3ea74e8f8:-1887119476,98e87002a1a71410390e291a8076e0b8:-410785364,e66838cefd671410d4cf9db37fbd609f:-43289332,ced774ce92671410fe5440ab1946630a:-1461163284,f44decc6ae671410bfb6c6de8aa196b7:-1695202548,9ffcecc6e267141014eb279ed19a5814:2017645612,d267acc29c6714107df5a2de765bd0ea:1770329126,f1c6acc2de671410174fd5512fd26029:-285526534,f02418c234271410de7c7af842b337b1:-1402907686,1e7cb339d563141018bbca05e22898a9:-1284750144,9118defdffa7501059a36537fefdaa8f:-424760782,2d090c7575a7d0106bac4e88293c534b:-1141139908,aa77c4b56fa7d01039cace5329e84c8c:1450168327,50a348b17ca7d010d2162e4dee2472d4:-106181883,34310c317fa7d010b941011e4140db56:-1636819003,51a7632d5427d0106713e5e2b3176cdd:1220473605,4c422be54c27d010acb470d6ffc280be:-1429741654,08e8d3ade9e3d010e83434ce05be7bec:1220473605,1ca893ad30e3d010ea80d477ad5e1a1f:664171045,86d6972db8e3d010fc1dccc340cdbdf9:1220473605,caa1dbedd0a3d010c35d9017eedb39e3:664171045,5667f2a9aa63d0101ec5328f8be6b765:1220473605,7ecd429d1ca350101e4041262add452c:-1563515663,7173c2d5d3a350107bf7c06cbe2be138:-1437992680,e2801d999e2b101044028a66b369a64f:-419423868,4e56e618bae758502e7b19c0367c7859:131909381,f063aed0102b585097f315598e51faa0:-182210953,409f79d8e1a758505bbc4920e0fe9397:1907329001,7a5d44b38ad7d450af2aab2a06f1e428:1754205599,503d7879e4571410c56a76b3f2b8aba9:-1285364283,6fe329c530975010ac15b48cb50a6ba7:-156267737,6fe329c530975010ac15b48cb50a6ba7:-156267737,15406945ed975010df709290a1e10504:-1842291954,6a7f1145b8975010345d62f0878c1550:-156267737,8c7e95818d975010910c2cbac0408366:-1578370313,ce461430a3df1c1027f986f41d4fec49:1059591195,682650300bdf1c10ebdac4480b54a2ab:2127680379,7aa373a07b5f1c10ed5d44a9c7775efa:892862757,35963520aa1b1c10754e24446f6d9dc3:1389824356,a26d696819d71c10bfccf53434dc9972:-1818589708,1a8ce52840d71c1019bc23ed04a6b348:-1290059,c08b69e458d71c10ae9003f98d82c0bb:-162070324,293a25e460d71c109df933dbbc20b79f:-176911499,6659a1647ed71c10f201463400cc1c40:-682037236,941521242ad71c1079197dafb4739194:893554391,70e3e5a013d71c103a06693ce93c8fb7:501093402,1cc2e5a0a0d71c104705306cda9a75a6:169462570,edb95c6437d31c105d5174b3732a4f3e:-1987963846,1d69982465d31c10729f72a3bc04d08f:956922091,1597982448d31c10b3a484525709b789:-1228875229,af2a4b10321f101064960875d8c15ae4:1543546404,cb4b1a8c545394d0a9c143a0ec840ac4:-1997108955,08bb45ffbecf14d00eac7d627be23cf8:1542626462,85e64dfbc0cf14d08efe98e2f04d1769:-939698524,0f7501fb8ecf14d0e92ec0616d300a3d:1730554308,927405bb40cf14d03be43f5cf741cd34:1253164152,8f01c5f7aecf14d0a60716296ececa97:-1307537833,74aeb4775bcf14d0ab77d48ac7ef8d87:-814162685,2849e43b128f14d0686f4f63bb882b72:-1304879588,b7d728f7838f14d072ee824934f62f0c:-1919529937,409424776a8f14d04542fe48964ecb7c:2040717836,d082e0f39e8f14d0e1139a6a4b1e2106:1166596144,32c436afd54b14d02a5f584888621b60:-939698524,55ef66abd74b14d0927a8850214cae04:828884106,81cda66b3d4b14d057837063dbac9437:-1193165360,bbcbaee7f34b14d032b4c2a017e80c8f:-797765290,ba176e23a34b14d06937a73e3b287662:1855970005,a8185e6b9a0b14d06d6c6dcca1565cc4:1432230451,8347d26b750b14d0ffe8e2fc852a9601:-1177732035,ae45d6e7fe0b14d032387caab8a9c1e7:506188180,574906af3ac714d00ae3e490e7a72a9b:600189882,72b50e6ba3c714d0a5f3bebb75a35f89:111868821,36714aa74ec714d051211abc485dbd81:-455019881,85fbb9ef1c8714d08da8be5e63210891:1801941744,2cc7fd2fa68714d07c6d8b731cf6de46:-1158183517,b3d5b92f768714d092c698ac77ba5110:548831125,6cc375ab608714d07632216e6d3fcd7e:1213772012,e34231abba8714d05ac947e04e49491e:-1849435034,4aa03d2b748714d07a9727fcee94e6de:-1623852957,c10f69e71c8714d02c67be097b5c18a2:1315172489,635955a7344714d03ea516ae899052dd:1032076,cb67a0239fc314d0da924ac758344553:-534418883,cff4e2ddffbad090f23ba249f90b0406:1032076,92f3a61df9bad090d2b458092b174cdb:1030026200,6c0066d9b3bad09099eb9de3b78f531c:1032076,447b0ed9c77ad090feffb27e5ccce497:-646180332,ced7507407721090ba5354f095e7fdfc:1032076,90471c7045321090aabef76e55002443:890772602,726ff36c7bb69c50c54fe7a5c8cddb6a:791098952,352f7f2463b69c50f31505b3a8e9ddb7:-663059362,7938ef205cfa5c5020ccb2ab2c8504ba:1310420952,f5ed536ce57a5c503784b2ce79dac9f1:-738625132,0b7bdfa8bd7a5c5037a568bee581ba3d:1752835752,b424052cb6f25c50c50be9f71eb4f040:916064478,6272c1a040f25c5004b5dd9fd8caa65e:1752835752,c630328c947ed850051c283f26eb07b3:-663059362,fefe3d4c9ebad8508859c9bb65b3dd2d:1991454014,daa1085be72a18500e221c8d649fa07d:892773124,4d5b6f8b3ce61850c90f4b6db5824615:2112763808,b5075b0b14a61850d1f05761ed54e80b:-51532318,0ebec30b0ba61850524a930d8060be6a:375975200,de7e86cfe4e21850e8cf0dd4d9fb02e2:1433662399,78102d8f28221850b586d642e242b301:161289538,1fb462b2606ad450dc55f2d7b16418c7:995294380,ebe5c27eaae6d4504bab5180ab9b883f:1242783893,596aadba51a6d450d0fa58e9a4826f06:-984038265,b808297acaa6d450628e946954c0de86:-1529208654,08e465f671a6d4503e837cfd4c3ea7fe:616294025,b21445761826d450d2dcac6a125f4ff0:2026175691,444957cb85ae945057e4a5007ecf0043:1028010160,4e078d7dbdaa905028d7884b3598056f:-814407442,a520591d092290501ea490705bfef6bb:766539142,5df7f89962ee5050c15d73e4707a44ff:-1229850328,1b6571a922a2905043164005248ef221:-1253669063</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_properties_759ca3b74f03230039f0aa95d310c741</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties"><sys_properties action="INSERT_OR_UPDATE"><choices/><description>Describes the version of the plugin</description><ignore_cache>true</ignore_cache><is_private>false</is_private><name>x_nuta2_nutanix_ca.plugin_version</name><read_roles>x_nuta2_nutanix_ca.calm_admin</read_roles><suffix>plugin_version</suffix><sys_class_name>sys_properties</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2019-01-24 06:37:30</sys_created_on><sys_id>759ca3b74f03230039f0aa95d310c741</sys_id><sys_mod_count>7</sys_mod_count><sys_name>x_nuta2_nutanix_ca.plugin_version</sys_name><sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_properties_759ca3b74f03230039f0aa95d310c741</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2021-07-16 09:05:42</sys_updated_on><type>string</type><value>(v1.4.5)</value><write_roles>x_nuta2_nutanix_ca.calm_admin</write_roles></sys_properties><sys_translated_text action="delete_multiple" query="documentkey=759ca3b74f03230039f0aa95d310c741"/></record_update>]]></payload>
<payload_hash>-173415120</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.4.5 Complete Build">346d737d1bb0011081326464604bcb11</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-01-03 07:26:35</sys_created_on>
<sys_id>746d737d1bb0011081326464604bcb12</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17e1ed138ca0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-01-03 07:26:35</sys_updated_on>
<table/>
<target_name>x_nuta2_nutanix_ca.plugin_version</target_name>
<type>System Property</type>
<update_domain>global</update_domain>
<update_guid>dd3caf7e6311b0102ec2f7d507e84365</update_guid>
<update_guid_history>dd3caf7e6311b0102ec2f7d507e84365:-173415120,8857012430ee20106190325d7baa5df8:-688935569,a96f6cb28c8d6c502728c4ae920935ae:-1204456018,c149d464e6421010e280973d501c483f:-888257623,9bc615bf8ac7c4109e5a37d3324a9104:-1919298521,649406bb57f63300873c652de645531e:1860148326,bb2875073ad13300871a245858095eca:1344627877,241d63b79e0323009f84301037d2ec15:1860148326</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_ui_script_b7e56ae437a12300fdfc097973990e63</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ui_script"&gt;&lt;sys_ui_script action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;description/&gt;&lt;global&gt;false&lt;/global&gt;&lt;name&gt;x_nuta2_nutanix_ca.Calm_Catalog_Variable&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var $j = jQuery.noConflict();
var trigger_array = [];
function render_variables(answer){
    var profiles = g_form.getValue('multiple_application_profile');
	var noProfileVar = [];
	if(g_form.getValue('no_variables_for_profile')+'' != "[]")
		noProfileVar =  JSON.parse(g_form.getValue('no_variables_for_profile'));
	
	var array_profile = profiles.split(',');
	var profile_html = [];
	var selected_profile = JSON.parse(g_form.getValue('profile_name_sys_id'));
	
	for(var n=0; n &lt;array_profile.length; n++){
		
		if(noProfileVar.include(array_profile[n])){
		var json ={
			"profile" : array_profile[n],
			"html" : "&lt;span style=\"padding: 10px 15px 10px 15px; display: block; background: #e6e8ea; font-weight: bold;\" data-toggle=\"collapse\" data-target=\"#"+array_profile[n]+"\"&gt;&lt;i class=\"fa fa-plus\"&gt;&lt;/i&gt; "+selected_profile[array_profile[n]+''].name+"&lt;/span&gt;&lt;div id="+array_profile[n]+" class=\"collapse\"&gt;&lt;p style=\"padding: 10px 15px 10px 15px;\"&gt;No variables are defined for this profile.&lt;/p&gt;"
			};			
		}
		else{
		var json ={
			"profile" : array_profile[n],
			"html" : "&lt;span style=\"padding: 10px 15px 10px 15px; display: block; background: #e6e8ea; font-weight: bold;\" data-toggle=\"collapse\" data-target=\"#"+array_profile[n]+"\"+&gt;&lt;i class=\"fa fa-plus\"&gt;&lt;/i&gt; "+selected_profile[array_profile[n]+''].name+"&lt;/span&gt;&lt;div id="+array_profile[n]+"  class=\"collapse\"&gt;"
			};
		}
		profile_html.push(json);
	}
	var str = '';
	
	if(answer &amp;&amp; answer!="{}"){
		var variable_data = (answer)?answer:g_form.getValue('variable_data');

		variable_data = JSON.parse(variable_data);

		var k = 0;
		
		for(var i in variable_data){
			var row = variable_data[i];
			
			if(row.isHidden + '' == 'true')
				continue;

			var check ='';

			if(row.runtime_config==true || row.runtime_config=='true')
				check = 'checked="true"';

			var setVal = "onchange=\"setVal('" + i +"', this.value)\"";
			var setRun = "onchange=\"setRuntime('" + i +"', this.checked)\"";

			var fieldType = (row.data_type+'' == 'SECRET')?'password':'text';
			var placeHolder = (row.data_type+'' == 'SECRET') ? 'placeholder="*******"' :'';
			var isDisabled = (row.isdisabled+''=='true')?'disabled':'';
			var mandatoryAttr = (row.mandatory+''=='true')?'required':'';
			var isCheckBoxDisabled = isDisabled;
			var secrate_variable = (g_form.getValue('profile_secret_variables'));

			var dependsStr = 
				(row.field_json.all_dep.length != 0) ?'&lt;div style="padding: 5px 1px; margin-bottom: 10px; background-color: #e8f0fa; color: #007eff; position: relative;"&gt;Depends on '+(row.field_json.all_dep.toString()).replaceAll('_'+row.application_profile,'')+''+(secrate_variable.includes(row.field_json.all_dep.toString())?' value is secret and therefore not displayed &lt;/div&gt;':'&lt;/div&gt;') :"";
			
			if(row.data_type == 'EXEC_LOCAL' || row.data_type == 'HTTP_LOCAL' || row.data_type == 'EXEC_SECRET' || row.data_type == 'HTTP_SECRET') {
				isCheckBoxDisabled = 'disabled';
			}
			var GWT_calm_format = {'DATE_TIME':'yyyy-MM-dd HH:mm:ss','DATE':'yyyy-MM-dd','TIME':'HH:mm:ss'};
			
			var spn = '';
			
			var inputType = '';

			if(row.data_type+'' == 'SECRET')
				spn = '&lt;span class="field-icon toggle-password glyphicon glyphicon-eye-open spanField'+k+'" onclick="tooglePassword(\'field'+k+'\', \'spanField'+k+'\')"&gt;&lt;/span&gt;';

			if(k%2==0)
				str = str + '&lt;div class="containerStart"&gt;';

			if(row.type+'' == '5')
				inputType = '&lt;select ' +placeHolder+ ' ' +isDisabled+ ' class="inputText field'+k+'" ' + setVal +' '+mandatoryAttr+'  id="'+row.uuid+'"&gt;'+_option_handler(row)+'&lt;/select&gt;';
			
			if(row.type+'' == '21'){
				
				inputType = '&lt;div&gt;&lt;div id="span-'+row.uuid+'"&gt;&lt;/div&gt;&lt;select ' +placeHolder+ ' ' +isDisabled+ ' '+mandatoryAttr+' onchange="selectOption(\'addOption\',this.value, \''+i+'\')" class="inputText field'+k+'" id="'+row.uuid+'"&gt;'+_option_handler(row)+'&lt;/select&gt;&lt;/div&gt;';
			
			}
			if(row.type+'' == '9')
				inputType = '&lt;span class="input-group"&gt;&lt;input type="text" id="'+row.uuid+'" class="form-control" ' + setVal +' style="background-color:white;" ReadOnly="true" value="'+_option_handler(row)+'"/&gt;&lt;span class="input-group-btn"&gt;&lt;button class="btn btn-default" ' +isDisabled+ ' onclick="new GwtDateTimePicker(\''+row.uuid+'\', \''+GWT_calm_format[row.val_type]+'\', false)"&gt;&lt;span class="icon-calendar icon"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;/span&gt;';
			
			if(row.type+'' == '10')
				inputType = '&lt;span class="input-group"&gt;&lt;input type="text" id="'+row.uuid+'" class="form-control" ' + setVal +' style="background-color:white;" ReadOnly="true" value="'+_option_handler(row)+'"/&gt;&lt;span class="input-group-btn"&gt;&lt;button class="btn btn-default" ' +isDisabled+ ' onclick="new GwtDateTimePicker(\''+row.uuid+'\', \''+GWT_calm_format[row.val_type]+'\', true)"&gt;&lt;span class="icon-calendar icon"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/span&gt;&lt;/span&gt;';
			
			if(row.type+'' == '2')
				inputType = '&lt;textarea ' +placeHolder+ ' ' +isDisabled+ ' '+mandatoryAttr+' class="inputText field'+k+'" ' + setVal +'  id="'+row.uuid+'"&gt;'+_option_handler(row)+'&lt;/textarea&gt;';
			
			if(row.type+'' == '6')
				inputType = '&lt;input type="'+fieldType+'" ' +placeHolder+ ' ' +isDisabled+ ' ' + setVal +' '+mandatoryAttr+' class="inputText field'+k+'" id="'+row.uuid+'" value="'+_option_handler(row)+'"/&gt;';
			
			if(row.type+'' == '25')
				inputType = '&lt;input type="'+fieldType+'" ' +placeHolder+ ' ' +isDisabled+ ' ' + setVal +' '+mandatoryAttr+' class="inputText field'+k+'" id="'+row.uuid+'"/&gt;';
			
			/*if(row.type+'' == '25') {
				inputType = '&lt;input class="inputText field'+k+'" type="password" value="' + row.value + '"' + setVal +' '+isDisabled+'&gt;';
				spn = '&lt;span class="field-icon toggle-password glyphicon glyphicon-eye-open spanField'+k+'" onclick="tooglePassword(\'field'+k+'\', \'spanField'+k+'\')"&gt;&lt;/span&gt;';
			}
			else if(row.type+'' == '21' || row.type+'' == '5') {
				inputType = '&lt;select id='+row.uuid+' class="inputText field'+k+'" '+ setVal +' '+isDisabled+'&gt;'+_option_handler(row)+'&lt;/select&gt;';
			}
			else {
				inputType = '&lt;input class="inputText field'+k+'" type="text" value="' + row.value + '"' + setVal +' '+isDisabled+'&gt;';
			}
			*/
			var desc = '';
			if(row.description != '')
				desc = '&lt;div style="padding: 5px 1px; margin-bottom: 10px; background-color: #e8f0fa; color: #007eff; position: relative;"&gt;'+row.description+'&lt;/div&gt;';
			
			var htmlStr = '&lt;div style="padding:15px 40px;"&gt;&lt;div style="padding:1px 1px 12px 1px; width: 100%"&gt;&lt;span style="float:left;"&gt;&lt;strong&gt;' + row.question_text + '&lt;/span&gt;&lt;/strong&gt;&lt;span style="float:right;"&gt;&lt;input class="inputCheckbox" style="margin-right:2px" ' + setRun + ' type="checkbox" ' + check + ' '+isCheckBoxDisabled+'&gt;&lt;/input&gt;Runtime &lt;/span&gt;&lt;/div&gt; &lt;div style="padding-top:14px;"&gt;'+desc+' '+dependsStr+' '+inputType+'&lt;/div&gt;' + spn + '&lt;/div&gt;';

			//str = str + htmlStr;
			for(var u=0; u&lt;profile_html.length; u++){
				if(profile_html[u].profile == row.application_profile){
				    profile_html[u].html = profile_html[u].html + htmlStr;	
				}
			}

// 			if(k%2!=0)
// 				str = str + '&lt;/div&gt;';

			k++;

		}	
	}else{
		str = "&lt;p style='padding-bottom:20px'&gt;No variables are defined for this profile.&lt;/p&gt;";
	}
	$j(".bodyData").html('');
	var str = '';
	for(var a=0; a&lt;profile_html.length; a++){
		str = str + profile_html[a].html +'&lt;/div&gt;';
	}
	jslog("Final HTML body : "+str);
	$j(".bodyData").append(str);
	
	jslog(JSON.stringify(variable_data));
	onChangeTrigger(variable_data);
	_createDependencyJSON(variable_data,"onLoad");
	new GlideModal().get('loader').destroy();
		
	var second_var_run = JSON.parse((answer)?answer:g_form.getValue('variable_data'));
	
	for(var j in second_var_run) {
		if(second_var_run[j].type + '' == '5')
			$j("#"+second_var_run[j].uuid).val(second_var_run[j].value);
		if(second_var_run[j].type + '' == '21')	
			selectOption("initrun","", j);
	}
	
// 	jslog(JSON.stringify(variable_data));
// 	onChangeTrigger(variable_data);
// 	_createDependencyJSON(variable_data);
// 	new GlideModal().get('loader').destroy();
	
}

function selectOption(type, multiValOption, key) {
		//alert("selectOption ::: " + type + multiValOption + key);
    multiValOption = unescape(multiValOption);
    var variable_data = JSON.parse(g_form.getValue('variable_data'));
    var row_uuid = variable_data[key].uuid + '';
    var tmp_array = (variable_data[key].value != '') ? variable_data[key].value.split(',') : [];
	var options = variable_data[key].options;
//	console.log("==variable_data "+variable_data+" row_uuid "+row_uuid+" tmp_array "+tmp_array);

    if (type == 'addOption' &amp;&amp; tmp_array.indexOf(multiValOption) == -1 &amp;&amp; multiValOption != '') {
        tmp_array.push(multiValOption);
        $j('#' + row_uuid).find('option[value="' + multiValOption + '"]').remove();
    }

    if (type == 'removeOption' &amp;&amp; tmp_array.indexOf(multiValOption) != -1) {
        var index = tmp_array.indexOf(multiValOption);
        if (index &gt; -1) {
            tmp_array.splice(index, 1);
        }
        var option = '&lt;option value="' + multiValOption + '"&gt;' + multiValOption + '&lt;/option&gt;';
        $j("#" + row_uuid).append(option);
    }
    if (type == 'initrun') {
	//	console.log("inside initrun");
        for (var k = 0; k &lt; tmp_array.length; k++)
            $j('#' + row_uuid).find('option[value="' + tmp_array[k] + '"]').remove();
    }

    variable_data[key].value = tmp_array.toString();

    g_form.setValue('variable_data', JSON.stringify(variable_data));

    var spanOptions = '';
    for (var i = 0; i &lt; tmp_array.length; i++) {
		//alert("tmp_array ::::  " + tmp_array[i]);
		/*if(options.indexOf(tmp_array[i]) == -1)
			continue;*/
        spanOptions += '&lt;div style="display: -webkit-inline-box; margin: 3px;"&gt;&lt;span class="list-options" style="margin: 3px; padding: 5px; border: 1px solid rgba(0, 126, 255, 0.24); line-height: 13px; font-size: 12px; display: inline-block; border-radius: 2px; background-color: rgba(0, 126, 255, 0.08); color: #007eff;"&gt;' + tmp_array[i] + '&lt;a href="#" onclick="selectOption(\'removeOption\',\'' + escape(tmp_array[i]) + '\', \'' + key + '\')"&gt;&lt;i class="icon-cross" style="padding-left: 7px;font-size: 11px;margin-top: -4px;"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;';
    }
	
	//alert("spanOptions   ::::: " + spanOptions);
    $j("#span-" + row_uuid).html(spanOptions);
	var var_name = variable_data[key].name + "";
	//console.log(var_name);
	if(trigger_array.indexOf(var_name) != -1) {
		_createDependencyJSON(variable_data,var_name);
	}
}

function onChangeTrigger(var_data) {
	for(var i in var_data) {
		if(var_data[i].field_json.all_dep.length == 0)
			continue;
		
		var all_dep = var_data[i].field_json.all_dep;
		//console.log("***all_dep : "+all_dep);
		trigger_array = trigger_array.concat(all_dep);
	}
}

function macroReplace(yup, value) {
	
	var macroVar = "";
	if(value.startsWith("@@{") &amp;&amp; value.endsWith("}@@"))
		macroVar = value.replace("@@{","").replace("}@@","");
	
	var form_data = JSON.parse(g_form.getValue("variable_data"));
	for(var i in form_data) {
		if(form_data[i].name + "" == macroVar)
			value = form_data[i].value + "";	
	}
	
	$j("#"+form_data[yup].uuid).val(value);
	
	return value;
}

function setVal(yup, value) {
	value = macroReplace(yup,value);
	var variable_data = JSON.parse(g_form.getValue('variable_data'));
    variable_data[yup].value = value;
    g_form.setValue('variable_data', JSON.stringify(variable_data));
	var var_name = variable_data[yup].name + "";
	if(trigger_array.indexOf(var_name) != -1) {
		_createDependencyJSON(variable_data,var_name);
	}
    //_validateField(yup, value);
}

function setRuntime(yup, value) {
    var variable_data = JSON.parse(g_form.getValue('variable_data'));
    variable_data[yup].runtime_config = value;
    g_form.setValue('variable_data', JSON.stringify(variable_data));
}

function responseParse(response) {
    var answer = response.responseXML.documentElement.getAttribute("answer");
    g_form.setValue('variable_data', answer);
    render_variables(answer);
}

function getProfileVariableData() {

    var loadingDialog = new GlideModal("loader", true);
    loadingDialog.setTitle('Fetching profile Variables...');

    var val = g_form.getValue('variable_data');

    if (val) {
        render_variables(val);
        return;
    }

    loadingDialog.renderWithContent('&lt;div class="loading-container"&gt;&lt;div class="loading-indicator icon-loading icon-lg"&gt;&lt;/div&gt;&lt;/div&gt;');

    var type = g_form.getValue('type');

    var project = g_form.getValue('multiple_project');
    var blueprint = g_form.getValue('blueprint');
    var application_profile = g_form.getValue('multiple_application_profile');
	var cat_item = g_form.getValue('cat_item');
	var delta_profile = g_form.getValue('delta_profiles');
	
    var ga = new GlideAjax('Nutanix_ClientServerScriptBridge');
    //	ga.addParam('sysparm_name', 'getProfileVariableDetails');
    ga.addParam('sysparm_name', 'noProfileVariableDetails');
    ga.addParam('sysparm_project', project);
    ga.addParam('sysparm_blueprint', blueprint);
    ga.addParam('sysparm_application_profile', application_profile);
    ga.getXML(ParseNoProfileVar);
 
	function ParseNoProfileVar(response) {
	  var answer = response.responseXML.documentElement.getAttribute("answer");
	  g_form.setValue('no_variables_for_profile', '');
	  g_form.setValue('no_variables_for_profile', answer);
	}


    var ga = new GlideAjax('Nutanix_ClientServerScriptBridge');
    //	ga.addParam('sysparm_name', 'getProfileVariableDetails');
    ga.addParam('sysparm_name', 'getMultipleProfileVariableDetails');
    ga.addParam('sysparm_project', project);
    ga.addParam('sysparm_blueprint', blueprint);
    ga.addParam('sysparm_application_profile', application_profile);
	ga.addParam('sysparm_cat_item', cat_item);
	ga.addParam('sysparm_delta_profiles', delta_profile);
	ga.addParam('sysparm_type', type);
    ga.getXML(responseParse);
}

function tooglePassword(field, fieldspan) {
    var input = $j('.' + field);

    if (input.attr("type") == "password") {
        input.attr("type", "text");
    } else {
        input.attr("type", "password");
    }
}

function _option_handler(arr_json) {
	
	//console.log("PRINCE &lt;&lt;::::::&gt;&gt; " + arr_json);
    var options = '';
    if (!(arr_json.type + '' == '21' || arr_json.type + '' == '5')) {
        /*if (arr_json.data_type == 'EXEC_LOCAL' || arr_json.data_type == 'HTTP_LOCAL' || arr_json.data_type == 'EXEC_SECRET' || arr_json.data_type == 'HTTP_SECRET') {
            _setRequestValues(arr_json);
        } else*/
            options = arr_json.value + '';
    } else {
        /*if (arr_json.data_type == 'EXEC_LOCAL' || arr_json.data_type == 'HTTP_LOCAL' || arr_json.data_type == 'EXEC_SECRET' || arr_json.data_type == 'HTTP_SECRET') {
            g_form.addInfoMessage('Fetching values for variable "' + arr_json.question_text + '"');
            _setRequestValues(arr_json);
        } else {*/
            options = '&lt;option value=""&gt;&lt;/option&gt;';
            for (var i = 0; i &lt; arr_json.options.length; i++) {
				//console.log("AMIT KOLKAR ::: " + arr_json.options[i]);
                options += '&lt;option value="' + arr_json.options[i] + '"&gt;' + arr_json.options[i] + '&lt;/option&gt;';
            }
        //}
    }

    return options;
}

function _setRequestValues(pre_map,str) {
	console.log("PRE MAP   " + JSON.stringify(pre_map));
	new GlideModal().get('loader').destroy();
	
	var loadingDialog = new GlideModal('variable_loader', true);
	loadingDialog.setTitle('Fetching variable values...'); 
	loadingDialog.renderWithContent('&lt;div class="loading-container"&gt;&lt;div class="loading-indicator icon-loading icon-lg"&gt;&lt;/div&gt;&lt;/div&gt;');
	
	var type = g_form.getValue('type_of_blueprint');
	var blueprintSysId = g_form.getValue('blueprint');
	
	var gajax = new GlideAjax('Nutanix_ClientServerScriptBridge');
	gajax.addParam('sysparm_name', 'getHttpValues');
	gajax.addParam('sysparm_type', type);
	gajax.addParam('sysparm_str', str);
	gajax.addParam('sysparm_parentUuid', blueprintSysId + '');
	gajax.addParam('sysparm_preMap', JSON.stringify(pre_map) + '');
	gajax.getXML(getResponse);
}

function setVariableData(uuid, value) {
	var var_data = JSON.parse(g_form.getValue("variable_data"));
	for(var i in var_data) {
		if(var_data[i].uuid + '' == uuid + '') {
			var_data[i].value = value + '';
		}
	}
	jslog(uuid + " : " +value + ":" +JSON.stringify(var_data));
	g_form.setValue("variable_data", JSON.stringify(var_data));
}

function getResponse(response){//var_data, loadingDialog){//, loadingDialog) {
	
	try{
	var var_data = JSON.parse(g_form.getValue("variable_data"));
	g_form.clearMessages();
	var answer = response.responseXML.documentElement.getAttribute("answer");
	
	
	//console.log("GetResponse :: " + answer);
	
	var parsedAnswer = JSON.parse(answer);
	var options = '';
	for(var i in parsedAnswer) {
		/*if(parsedAnswer[i].depends_on.all_dep.length == 0)
			continue;*/
		var type = parsedAnswer[i].type + "";
		var uuid = parsedAnswer[i].uuid + "";
		var data_type = parsedAnswer[i].data_type + "";
		
		if(type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') {
			if(parsedAnswer[i].state == 'SUCCESS') {
				options = '&lt;option value=""&gt;&lt;/option&gt;';
				var val_arr = [];
				for(var j = 0; j &lt; parsedAnswer[i].value.length; j++) {
					options += '&lt;option value="' +parsedAnswer[i].value[j]+'"&gt;'+parsedAnswer[i].value[j]+'&lt;/option&gt;';
					val_arr[j] = parsedAnswer[i].value[j] + "";
				}
				
				for(var m in var_data) {
					if(var_data[m].uuid == uuid)
						var_data[m].options = val_arr;
				}
				
				$j("#"+uuid).empty();
				$j("#"+uuid).append(options);
				$j("#"+uuid+" option[value='" + parsedAnswer[i].default_value + "']").attr("selected","selected");
			}
			else {
				var msg = '';
				for(var k = 0; k &lt; parsedAnswer[i].error.length; k++)
					msg += parsedAnswer[i].error[k];
				g_form.addErrorMessage("Failed fetching values for variable '"+parsedAnswer[i].name+"': "+msg);
			}
		}
		
		if(type == "LOCAL") {
			$j("#"+uuid).val(parsedAnswer[i].value);
			//setVariableData(uuid, parsedAnswer[i].value + '');
			for(var n in var_data) {
				if(var_data[n].uuid + '' == uuid + '') {
					var_data[n].value = parsedAnswer[i].value + '';
					break;
				}
			}
		}
		
		if(data_type == "LIST_SINGLE" &amp;&amp; (type + "" == "LOCAL" || type + "" == "PREDEFINED")) {
			
			options = '&lt;option value=""&gt;&lt;/option&gt;';
			for(var j = 0; j &lt; parsedAnswer[i].options.length; j++) 
				options += '&lt;option value="' +parsedAnswer[i].options[j]+'"&gt;'+parsedAnswer[i].options[j]+'&lt;/option&gt;';
			
			$j("#"+uuid).empty();
			$j("#"+uuid).append(options);
			$j("#"+uuid).val(parsedAnswer[i].value);
		}
		
		if(data_type == "LIST" &amp;&amp; (type + "" == "LOCAL" || type + "" == "PREDEFINED")) {
			var tmp_array = (parsedAnswer[i].value + "").split(',');
			options = '&lt;option value=""&gt;&lt;/option&gt;';
			for(var j = 0; j &lt; parsedAnswer[i].options.length; j++) 
				options += '&lt;option value="' +parsedAnswer[i].options[j]+'"&gt;'+parsedAnswer[i].options[j]+'&lt;/option&gt;';
			
			$j("#span-" + uuid).html("");
			var spanOptions = '';
			for (var k = 0; k &lt; tmp_array.length; k++) {
				spanOptions += '&lt;div style="display: -webkit-inline-box; margin: 3px;"&gt;&lt;span class="list-options" style="margin: 3px; padding: 5px; border: 1px solid rgba(0, 126, 255, 0.24); line-height: 13px; font-size: 12px; display: inline-block; border-radius: 2px; background-color: rgba(0, 126, 255, 0.08); color: #007eff;"&gt;' + tmp_array[k] + '&lt;a href="#" onclick="selectOption(\'removeOption\',\'' + escape(tmp_array[k]) + '\', \'' + parsedAnswer[i].key + '\')"&gt;&lt;i class="icon-cross" style="padding-left: 7px;font-size: 11px;margin-top: -4px;"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;';
			}
			$j("#span-" + uuid).html(spanOptions);
			
			$j("#"+uuid).empty();//$j("#id")
			$j("#"+uuid).append(options);
			for(var n in var_data) {
				if(var_data[n].uuid + '' == uuid + '') {
					var_data[n].value = parsedAnswer[i].value + '';
					break;
				}
			}
			
			//$j("#"+uuid+" option[value='" + parsedAnswer[i].value + "']").attr("selected","selected");
		}
		
		
	}
	g_form.setValue('variable_data', JSON.stringify(var_data));
	new GlideModal().get('variable_loader').destroy();
	}catch(e){
		g_form.addErrorMessage(e.message);
		new GlideModal().get('variable_loader').destroy();
	}
}

function _createDependencyJSON(var_data,changedField) {
	
	var pre_map = {};
	var extApiFlag;
	var str = [];
	for(var i in var_data) {
		 if (changedField != "onLoad") {
				if (var_data[i].field_json.all_dep.indexOf(changedField) != -1) {
					str.push(var_data[i].name);
                }
            }
		var field = JSON.parse(var_data[i].field);
		
		var value = (var_data[i].field_json.all_dep.length != 0 &amp;&amp; field.value) ? field.value + "" : var_data[i].value + "";
		var type = field.type + "";
		//var field_type = (field.data_type == "BASE" &amp;&amp; field.options.choices.length != 0) ? "LIST_SINGLE" : "LOCAL";
			
		pre_map[var_data[i].name] = {"depends_on":var_data[i].field_json, "value": value , "uuid": var_data[i].uuid, "type": type , "name": var_data[i].name, "key": i + "", "data_type": field.data_type};
		
		if(type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') {
			pre_map[var_data[i].name].requiresApiCall = true;
		}
		else {
			if(field.options &amp;&amp; field.options.choices) {
				pre_map[var_data[i].name].options = field.options.choices;
				pre_map[var_data[i].name].data_type = "LIST_SINGLE";
			}
			if(field.data_type + "" == 'LIST') {
				pre_map[var_data[i].name].data_type = field.data_type;
				//pre_map[var_data[i].name].type = "LOCAL";
			}
		}
	}
	
	_setRequestValues(pre_map,str);
}

/*function _validateField(index, field_val) {
	
	var variable_data = JSON.parse(g_form.getValue('variable_data'));
	var var_name = variable_data[index].question_text + '';
	var reg_exp_str = variable_data[index].regex + '';
	var is_mandatory = variable_data[index].mandatory + '';
	var reg_exp = new RegExp(reg_exp_str);
	
	$j(".error_body").html('');
	if(!reg_exp.test(field_val)) {
		var msg = var_name+"'s value "+field_val+" doesn't match with specified regex '"+reg_exp_str+"'";
		var error_str = '&lt;div class="alert alert-danger" style="padding: 5px 16px; position: relative; margin: 5px 0px;"&gt;'+msg+'&lt;/div&gt;';
		$j(".error_body").append(error_str);
	}
	
	if(is_mandatory &amp;&amp; field_val == '')  {
		var mandatory_msg =  "Variable '"+var_name+"' is marked as mandatory. Assign a value to it";
		var man_error_str = '&lt;div class="alert alert-danger" style="padding: 5px 16px; position: relative; margin: 5px 0px;"&gt;'+mandatory_msg+'&lt;/div&gt;';
		//$j(".error_body").html('');
		$j(".error_body").append(man_error_str);
	}
}*/
]]&gt;&lt;/script&gt;&lt;script_name&gt;Calm_Catalog_Variable_Config_Script&lt;/script_name&gt;&lt;sys_class_name&gt;sys_ui_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-31 09:42:02&lt;/sys_created_on&gt;&lt;sys_id&gt;b7e56ae437a12300fdfc097973990e63&lt;/sys_id&gt;&lt;sys_mod_count&gt;425&lt;/sys_mod_count&gt;&lt;sys_name&gt;x_nuta2_nutanix_ca.Calm_Catalog_Variable&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_script_b7e56ae437a12300fdfc097973990e63&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-07-13 17:54:34&lt;/sys_updated_on&gt;&lt;ui_type&gt;0&lt;/ui_type&gt;&lt;use_scoped_format&gt;false&lt;/use_scoped_format&gt;&lt;/sys_ui_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>1744460549</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.4.5 Complete Build">346d737d1bb0011081326464604bcb11</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-01-03 07:26:35</sys_created_on>
<sys_id>746d737d1bb0011081326464604bcb15</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17e1ed138a10000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-01-03 07:26:35</sys_updated_on>
<table/>
<target_name>x_nuta2_nutanix_ca.Calm_Catalog_Variable</target_name>
<type>UI Script</type>
<update_domain>global</update_domain>
<update_guid>93780a8aecd530102b3bcfe170034953</update_guid>
<update_guid_history>93780a8aecd530102b3bcfe170034953:1744460549,d57bbd02fdd530108f5ad0e434e1f956:14736029,4f3bbdce6f953010c9f1a3f7e3af4826:1744460549,8ff09d4e76153010886529199c32494e:1776589414,f38c7c06ccd130104c540dd96d729609:-559887840,54cb000ed811301088b3e969c61c78bf:-699921480,a89ac08ac81130100624568cfd9098d2:1131280791,8f2a48ca80113010ad42d0df3ccfc28d:-1084649071,8ab70cc67e11301014da1e11f6462fd7:-1974847545,2d14ccc2ec11301026746e04ee0d6daa:-1700863995,d6ab08384c553010db35a29d7fc867b6:-1815527693,bb5c7390e85970108b69423772c03f79:-71408501,fa5b4a48ffd530107c70c4c5feb6d385:2082515434,2c6ef8a75109b41079200b968b5eb9bc:-972937086,229f3e135081b410cca33e27ea5261af:1597301138,c8fe3a9f3d41b410ea3e5908975a2377:-792610787,27bd32dffe41b41059384f49dfdc0c95:-1987469171,8eac761b4341b41072cdace979eccd59:199051945,57bbb65b8a41b410b23ea47bddb8285d:1868417085,d55a329bed41b410a60bf0ca81e90683:874237548,ad25369bd701b4104f50e4d7cffe6362:-244373672,aae560f5dee320108999851ceb4c9f31:1568245047,5485a47569e3201060628338aad02d85:-1963065388,fbe5d5159ce7a85004f3cfb1d0b2e922:1652922889,b68426537553e050f7c37dd92ad53b23:-682116495,69a3e61fed13e0500ea8f575eae35a5f:1260429305,058d161f129fa05049d0941c823f22a6:-849868707,119d26870b136010035d89618641d903:1432250926,b1c96ac3d4136010d39ad09b3a33077f:-127493412,a069a2c3dd1360106874ff188f3e4ea7:-1691509764,41a06acbfbdf201045b2b66a5793d0cf:521271688,fe4bd2c71edf2010e30e092787431480:1621495448,5c651203f1df20101ddaa09d308d678d:-11352616,e1b396c3b6df2010989bdeba7eb047e6:-983787157,4c5fa51f439fa05092f9fd521240ba06:1582078857,012feddb919fa050efb84f4749c1b364:676122984,ea2f1272485b60504df3d3b4a53b67df:-244677298,0abe9e32af5b6050c98af16f9fd81007:-1821279070,0ff29e769f1b605026976ac2869eb437:-1189716373,550f5dfe90576050bb83e73225ff110b:1280763954,e87c5dfa39576050ff2c1d9518e39bb8:-1832239066,c34a99fad4576050460eb424076a3c1a:-1855341756,ed9f45f2e4576050846c259456b049d2:1512597924,4361b2010d5f2410e28b5746c9143312:781679176,b21a052c8517a010ca9a81a8f61c08f1:-685123544,b6f3c9a8d117a010c5a6e99c2e5502e4:-218771200,64e7706c37d3a01022a889d6dc308096:-1072616830,34c4fce858d3a0103426402ef7a8bbf7:-1227258094,5033f4a83bd3a010aa0774c3b29027dd:-1984404715,8b427464edd3a0108db7bff3939509bd:-1420410207,b5e1ac54cd1760100be001ad32a1b2cb:-1229427,218344503d93601064dcbc67f26e666a:2002637827,17b7c3b2b6836010b404c56b651e68d4:347371026,c8b78fb2188360105b3fad4e5f8c03b3:-1306364361,52d587b2bb83601040825f5cf5b92237:-980301320,3ee40732df8360102de4c204e73596bc:198657087,6d93c332cc8360100b343526f00f847c:-980301320,55c2c3328e836010d93aa4141de81475:333730273,70720bfee1436010a9ecafd2c454894d:-1263708607,ca90037e8f4360106df6401816ca715c:656458945,f90ffe3eeb436010e2ff8ef06508325f:693699350,13ee763e6c43601005cfb17c2a191a18:-971945299,472eb27a92436010e4733e53915e6e55:1761819597,935df27ae943601021049dc28337b3b9:1810917135,8e2cf27a0443601002f4a96f4195f754:1141659332,ecebb27a0143601050bb3dbe36475a43:-293207819,0f5a72f6a94360108902d0b6735bfb9c:1732442545,a968b6fe2f036010a8b67024324462dd:-1402361012,f85e57669d872010508ca946663f616d:946093826,cfca9ba2f18720101b440eb76f74400b:960380662,2b1c9aeeed8320100ca470fafe398c9b:676469852,0466526e3b832010fc2cc1db55899354:-280858074,207596ea4083201049a9631bc8380cfe:362941002,d274da2a9d8320102e5068861ca20665:1583464074,9192da2acb8320107450e40c2134ca96:1219744167,de419a2ab583201034c22717735887f0:1639796096,e0b05ea6ee832010cf22efaa0d739967:1017927856,b22d8a26d4832010a3504620a9481bd0:105474019,e66c862647832010f5f929d9377613a5:312835626,03670aeabf43201093ac71b4a5d8d687:-1621171341,e211c6aa4a432010c32e1874a8a37d63:-504910506,03e1f16e65032010c603463e272db974:-1144030212,a8a1bdeaca03201044a24ac28adff92f:-1550032976,6f90fdaa55032010467471f2577041ad:-1306308446,218b0b75d34364500aba2568399730e4:984877583,d9714b6195c32450370051d84f58a6fc:597966019,9e00832175c324505f5d1132d53335e6:1585023461,f9ad722d838324504cbd237d1a28eb73:1098973012,ed4272e1b88324508727bd6361825c9c:-402416165,e55032ed7d4324505b396ee937634f95:-52145957,bce42b1433cfac104fac378f6952b9bb:325952880,c99c971c8f8fac10ba4db8a23c01be2e:-569717136,a365ae48414f6c106ade55b71885ecb5:-126794288,3b536e84544f6c105645198d1a5cdec8:-1298037407,6a1226c4394f6c109392c3365cd3a1aa:-2097426599,cf912208e24f6c10f7db3784c38058ce:-255151375,932062448d0f6c10c27c37f4b2b591f9:-1859702803,93e840bd0cbaa05028e94acedce9fb2b:957145293,4c2182b3e02ee810d0017500bac771a4:622495973,945510750c81a8504bb2b3d9485b429b:-124936373,0e145c35ad81a850e0c6ab0ffe82b3ff:1434077992,3f2c08fd2c41a850dcba4697d1a2ae58:-1929498512,5596bb612141a850b2121a370233d65e:1662618628,a573ffad0701a8501c8ac4f0cef54d96:1425345436,d6a0bbe96301a85014aa3d0d9b0566a5:1216390289,b83bafe52901a8503d6c79e80c7a4d19:1010953739,9dc5aa69004d68502cda0586384ee0e6:241058488,8484a2e5084d6850f382ef3de53f77de:2060129837,b9a162e5fd4d68508b0dda0a9a526260:1744425755,cd87cf1d64852850df4ce769be904ec2:-12646392,7cafda91db4528505aeee3a5964e1fbc:1037434735,d5667af098c9a4506c37c62c832636fb:-1342222153,154738b8ae45a450f62748f12c46824a:364850711,0044f8f0a5092010003a30629eb241e9:-1351397579,52fba4f0010920100bb273c3f437bb76:364850711,112560fc58c52010bdc463375a3298e1:1410632425,163a612ef97cac10b3c0bac2b3e74969:247417313,dc76a9a6d47cac10c85af0c199dd54ce:1166291881,c543f43583a460107548d777908f8334:1678867835,ea6f20f1b3a46010f24163b5bb7207c6:1208581513,352420f5906460101ecc03dbd818989a:1117942685,a45328f5f16460105b21db356246ee21:868507560,7303e8b573646010318eb1e4d936ae6c:1753193272,d3912435a7646010984da8dcb9595417:-2115962806,3c5068b1d76460109b954e01b943cdc0:-1281403302,cbce14711d6460103a229df0381524dc:-2001415989,79cdd4fd4124601077e563af8c7228fc:-1596085137,93c614b1062460103b6cc038fda6aaa6:305477520,f9975dee3b3420500b08905d034b2c7c:1410632425,f1ecc1265934205074a303cacb3f7eae:-336161975,71f84d223d34205044416c06b1f7a2b0:1042052784,c03e7c2630f02050cba78d40b4394797:-336161975,2d42c7caa2fcac1079733c0ae0eaa849:-146771095,f3c25c0edc38ac10e7f3704ba526d76e:-278979842,fe015c8a5338ac107a1225fc207a7527:-369333460,df6f4c4ad138ac1091301cdfe638f97d:-275545172,750e0006b138ac10bf07c22d2715a38b:-744247852,cff40082df38ac1013309c76c952212a:1836741146,3bf348425b38ac10ee2cb001bba15b1d:487924234,37c20cce22f4ac109683c3cc8056c520:-325714103,58d0cc8eb7f4ac10901cff506c45aa18:-1440888544,567f7b791af4ac10dae27b00d8f6a62c:-776428017,7fe73b3939f4ac10a8a5ab91657a9e6b:162142639,d033337522f4ac1067088818588d87da:-776428017,1ddd637112f4ac10e88baab6fc6ee71b:162142639,c59c6bfd7db4ac10da2cfcf8d4bec7f5:-776428017,08fa277dabb4ac10f6194876446bc7ed:140793180,c4e8237db2b4ac10b349d08c46d65b9f:-776428017,5af76ff97fb4ac105d97ff1cf5186372:1123210981,59c32b79f8b4ac10228ec91b273e21b3:-1162335902,9992eb39a8b4ac1057a11e21459c5a7c:-1342222153,3a02abb519b4ac10983c067cedd59520:-1884456057,3e6ed735e2b4ac109758f2bc04153288:1194035201,c4eefeb9cd34ac10b02489c771b6b5c3:766886768,5a8dba79fa34ac10e7238f4b379308ba:1870502654,94f17c92d1a02410f5f5fccd68a7c7f2:-1342222153,1d73fd020168e01092a0e030000974b0:-330003897,0e9ba5ceeb28e0105667d5b78bce8427:2027117386,89e1a1c66a28e010f9f1cd644450b3c0:-224166313,6ea6dd42b428e0102cd052dd3a71dcf3:1039876893,8af0914e2ae4e010b4b4ad8a6cc78c44:-1584458480,99449042b664e01039836817ecd86bea:528220477,72c390421164e010ab33be9a2327b99f:-1102105804,aa900406db24e010068c3a0070073e6b:528220477,28108cc24224e010614284e5538796d7:-1731078883,498380b1bba8a010a8fcd0563c4809da:-1090209548,f9114c319ca8a010ef0e4f182bdfc81e:107320566,812937153f146010448d5a2b8e57bf62:-486574368,1cf9a999409c20102a9adecba4b94123:-472294419,92544d11f25c20104ccc43d46d9facde:1664252067,59a0c89183982010631148e450a6275e:1350931667,edbeffcd2858201004848cdbe6722cbb:-1762509766,86db370102982010400364b49fcab6a8:404504477,517b7b8d44582010fc077e8f357c1323:-687407164,3f12f7c5065820103f590731285059ef:576900291,a8cf6b8596582010c53417700c582d1d:774882051,1469a34d7e182010d1587a10c6a0eb28:905891560,122bd7818b182010b6d5b85498544204:905891560,07a89fcd73d4201029e4d47d7593575a:-941295275,608793010e18201082b59673e7ffc4ae:1840289923,0da45f4d0ad42010269f225b7e05cf92:-1864680603,d59b0bc5cc942010b39882dda894e9d2:-513899452,d9f8004d3504a0101d53f0dbf73fa1f8:364850711,a76c459e14a3541084bacd0ecdfb1d79:-759080581,ea8d104e9527141020f2728b35b5dad5:1570571547,daf973b51d63141011df9d3b8a4c8f63:-659085603,f9e54ba54ba3d010215f3b767992379b:114946691,c34dfeed6163d01080615f7907ab1f6b:1035742795,4afb7a2ded63d010aff9edbd17f565db:-469500900,f328762d8663d010b0e30d0cfadfa473:1347325463,69a41f9cedab5850823fbf2756ae57ed:1588135423,9012df1c1eab5850131039473047865c:-303183310,845e0f98c5ab58509dea78d94b1015d5:1104293498,a13c4b1813ab585003c32309abc91fe4:1038028701,8cea83188aab5850712e85145a96ac61:-819791179,06054714c5ab5850bc6a9b7372540c37:474776351,d854be58c32b5850dd989acbab1733fe:573319532,4442f0ff021bd4501c15a6ccf660a289:1038028701,c412f0ffb01bd450f54d2794a81ac150:-960080067,9bcde0f05e135c109b31fa74f2648bfb:1955665417,6b11447c505f1c103d7f169fb2efe259:-1033193669,4ec0047cf95f1c109136169eeabeb31e:314225039,835f99ec2e971c1017c381fc9b8b35a1:71537527,437cd56cb0971c10a19b59197db9f3fc:-1595720922,14ea992cb0971c100b65f01ff2a86044:-603512383,b37b8daaebcf5410f7903742b1ed64e7:-1756318587,bb68056a1fcf5410ba9ce20856c02450:1300882515,4eea8350661f10109dbb161602a60ef9:-961849528,83739e67e00b14d0dd70e3750add4e1a:-424363036,a752d667cf0b14d0688ac4fe3b113e5f:-1342736470,78319627aa0b14d0d0498e96a7a44c35:131263944,552b86ef9ac714d0a179e3c1c20ba4f5:-1628549292,585a06af8ec714d012ea671967340aa2:292418102,c55206e760c714d0d164bcedfa3ad80d:58955094,98d771af5d8714d048361fa336e29f5b:732574808,4279012f900714d03e22dc7479ff4b6a:772779061,9b783863760714d016a640be8737c4ba:-431679506,58a36863f6ae5850a7e30ee6d6aa5afc:772779061,bf632827f0ae58500e336f291ad301ba:1095117372,c0814687bee21850c11f5e120d8bbcc6:-1671156618,84000a477ce218501be4354b439089ff:-1970503793,6ad73dcf1ca21850c140a305fe04c472:700803310,a67ded0b16a2185084f418ec6591fce5:-1733010158,3fcae1077aa21850f7553906c56cbf4a:700803310,6b6529c319a218505f36efbdf9ee370e:-1733010158,7f24a1cfd5621850e02b554ef3aa55fb:-1995734597,f573694ffe621850d936779bcb490d2e:-450774637,fac269b9362e905085fce9461a321923:963027690,7795787ddd6a9050ea525875a2191f8c:1475466203,2d416fec02a21050dc5aba4e90d86bc4:-2005138552,bf8f53204ae21050c5b4321c9d275865:-349922106,4f5d9b6c58a210501653888b35270cf1:532483338,fb4b93a85ca210501f20c87fd58c17ba:836260555,0bb713a854a2105081093f568ac28808:310978825,b113dba409a21050854229df49245bf2:-128718938,9b315b60f7a210503598f913257b4c25:-443771688,e2d0d32421a210508f93477d3a06d732:-367518593,17114b682f62105042a9699152b4fc07:188628008,ed37322469621050905490232ae71b52:-619368226,eac4fa205a621050407791cb1a3407ee:188628008,5f91b220906210508c98fcebb29bc79f:-856368793,ceeda26c8f221050c5f97205abf3e013:1564946959,e8cca22c4c221050ce7bd4be92f53c51:697721594,aafaea68f0221050a7625942b07cf39a:1387066393,53e76ee4392210502f6e97a84fe34f92:1045967694,02f6e2287f221050014ce52c64814f62:223621847,565662e442221050f6da92b9de282357:1084229711,c7d56ea4bb22105055d44ec7244222d7:-1725369489,e704a6640b22105049667a6d3dfd7adf:1092003810,8f63e26499221050415b613d3b2d1dcb:223621847,ea916ae0bd221050fd774e14982ad5d9:-777867187,cbce12a0f1221050723d0437f010200b:223621847,6b5ad2a8eaeedc10b60975448c5d04de:1546021647,d9b352e8aceedc10dd3c4a5c71d8b8d8:1865708828,7621126853eedc104b596167ac25a016:760192236,b27fc6e4d7eedc10ae66d8ecf9f72b05:-539334212,0acd06a407eedc10d792701ff9c20482:-350007055,9f4c4a64bfeedc10f867d5346e66cde9:-1525128140,d2c90ee0a2eedc106bf296140121d053:-957462160,5d588aa096eedc10da7b14fe105180de:758308440,7e654a20f1eedc10e27e8f7e0f626103:-1394022376,eb33ceacb3aedc10b3c06c2370398c66:-1791426522,a2bd39686eaedc10f9dd8d1fee613268:959797833,483b3928cdaedc1012f0b055a2578ee4:954233802,55dc292cfc6edc10cf04e23420510369:-443771688,5d5be52c3c6edc10cea9443c632fba70:-1984207408,ccc66da8886edc10d5101c3c1eba39f8:-443771688,b0b521a8296edc10f66962b20d93f7f5:540366047,806421687b6edc10819a63cd705388d3:-1827224385,0e899dec4b2edc10e23b35f18cd23278:1140840678,780115a4fd2edc1072334f6b46492f9d:-118200845,dffbc9289b2edc100d3627fff8adc518:-221669944,505b0da4592edc1006bf087ff98e721f:-793671532,85c209da7f161810545127d7aa8937c5:-443771688,43d10d1ea6161810e80c8d5cb606989b:848489912,653bfc5e48d218107d5782961afb59be:-443771688,afc5385e01d21810e0d91b1db5a00cb0:1934870460,b779e41e37d2181098ee0b0b05558eff:-443771688,7c4920da3ed21810bc9cd2ea629a743a:-4762827,e34828da80d21810695a05e09dc5359b:-1703310554,bb96e05a18d218104de326d999a16490:1103369342,0b64a81a9ed21810b8f370b583b9ac4c:-969320260,88a2e0d6fad21810f420666df78662a8:-782838937,408d6506ec1ed410ed910b94a8da3821:32420899,f2466102ca1ed41004a660e9ee476aa0:327305795,5c4169ca4ddad41030ce9c976d4542d3:-1119313158,a32f59ca55dad41049a3585477609a14:369632382,949cd54a6bdad4103e95b5e7392f91b6:-1889402583,adca11c698dad4104428f630d3cb6e8f:-618400863,fcf724863f5ad41078f0809c3e4729b1:556436590,6358d9ddaa96141094e9b4f1ce646f40:-302445085,0125d15de4961410d50ac4dd87bf6c34:319365036,5e5df41d1e561410a1c67ccb4fa23a92:971680876,0d4cc645589ed010245c2fb3207e7a78:-2027441562,264419f0a452d010e0cc89b22244da21:-1477156202,26c01d307352d010f1a4355854e4519f:-1662907954,0cfc09f89912d010d3edbcb963407015:-402594845,d3380db85812d010bac609e573366ccb:1910711537,459481f4f812d0109a2f23efdb48822c:-373849509,214ef0f0d512d01093aa4a578b07d6b0:-94817655,defb78702e12d010cb8e87b9264af944:1135954615,f6da7470dd12d0109e56fed5fb7177a1:-1626033581,269938fceede90105338e1943d5b5e39:-516342780,2668f4bc6bde9010a888f45e7f3b9f1f:-120791025,f226f47c75de90105b1bcb579bcd303a:-1633389534,91162f68831e901042cf919b642b59a0:2079319554,0d44eb28ce1e90102d181d6054a045d1:32741029,b342aba43c1e901003fe106cf2609896:980877329,aa302ba4fd1e901063e1938ca41a55eb:-929593994,5700aba4f61e9010aed0f8387e4f3b43:1444887561,1b5e17e0811e901043c153f09d50a9fa:-234526537,a4369f2032da9010247df3256774f3f0:2124417765,d900d7a0165a901077275d19956e3de3:-1077829402,3d8d4320255a9010f5d1899ecfdefd6f:1058954304,966c87ec291a90105d8ba886babd5d63:366339545,f5b94f204b1a9010902f4c8741fcad03:299700431,03a536e8ddd690102927e032820d5f49:-1504893068,9a7ee390fb12901029d6b7dafdff8d34:-2006744134,7456e39cc0de5010445a4c25e80bcb17:1260132326,c8df575808de50108a23f6ee6d5f2122:1595163672,acde53185ede5010d9152e1eaff60b2c:-93971704,090d97d4cfde501058c279c15a7e074d:-441523557,e5cbd39452de50108b9f94e43c0eb184:-1707661207,cb695bd068de501020f51d72e92e6306:-32661674,eb340b94e39e5010e6127405bf1342c7:1346646433,74830b946b9e5010d9d98ec639c11c17:-1736755557,fa1e9a98221e5010149bc25b3d6b6be2:-1046945845,64da4409384c5c100461fe416f2ac9a6:1457954112,8af98409014c5c10fb12877a75aecd3a:630123296,f3857bb49a0c5c109119a13c5fc1678e:-2023147150,f3291da4293f4010d0314c6ca937ee39:239784530,6842efae6497401090fcc49e119289f8:1426157202,2da1ebae0f97401098ebce257f68be8a:1241742694,7d8da7af46028490a78a186306e2513e:-979984116,9e30adf2b4910010f86e6370fc8d7d74:2119676966,9e30adf2b4910010f86e6370fc8d7d74:2119676966,d993cb8793b90c10a81e37065c1a56ed:1967862980,32f89d2c5f950810d3b20a373a7ec855:2119676966,cc74d9e01d950810d48fbd9799eb06fe:-575043568,1a8359a0ef950810d58216d5b0f2a63f:2119676966,4594c99072d9c4108e32c14ea84d9250:-575043568,77ad66c4efbf73000f9ad5934fa73274:653197949,bedc2a0459bf7300ffadd4ca6c18d02e:527202197,92efb47f4cef33006d6e2b2ee56d0cfe:-797846945,aaaff07fcaef3300edb471ed508cf2d2:1020976701,d5eeb43fd1ef330020bb9fb3946aded4:400827039,16087c7330ef3300b8e9db95ff0dcb2b:-245489976,2041acb76baf33001f1304c7e5a44356:1877858645,ae402037d3af3300300a4c702b2a44ad:-690548779,fa7f987751af3300547f8edabdb8545b:684323477,0bee1837cbaf3300c79a865d42a38d8a:-1646627083,921e14bf936f3300a252379ac442a37b:79264637,efadd8bff76f33004f54a1bba4a45bda:684323477,62599c3f8b6f3300648357e6f6df6d03:-1921714859,7a76d8bb236f3300bb28cfc693c14ec0:1283178837,d21e487fc52f330030709e0b3aabbcbf:-1856439002,02669716fea33700b0a4b5a528c5058a:-999447415,73455f9277a33700460da4d1944c526a:1171777011,b21c5fc6c22bf30052e2645491d0ff3d:-622472980,74da1fc6682bf3007bc956557024ef02:-1806621591,56651bc2462bf3006bb328ffe2c4ceb8:-1308618076,f4619fce0be7f3003882ab02003143d4:-533319088,11f7cbc6a9e7f300e680fd85dcb92cb7:-2012640722,9a87cf461de7f300787c291d3189b0aa:590302490,d0048b8211e7f300f88ce309aa6828dc:-512238208,ab052f308ca7330031c8c0be7a7a5dbb:1473030049,ca81caef419b7300d5cd86e4ddef61ea:222033794,a0010aafc89b7300d0771b152952a1b0:-2126690521,5ae0c2efcb9b73006278315ab7a00f51:-492520079,dafff16f129b7300a34b00f59ddcb8de:1820175659,427fb56fa99b73003bce3c2e5088e666:-899705051,4698bd2bb59b730017310bf21db4de8f:-1203619502,ae18f52b539b7300086b836816409f8e:-1431643442,4cd7f9e7499b7300d71ab2f3bbb00515:-1334393333,fd1771e7cd9b73009d95dffc967f66ce:-1346814695,5776f967299b7300249bed85bf23659f:841536629,4e16f9670e9b7300ae99af550df3d4c6:-222451105,08a5f9638d9b7300c66465ec54350d67:-1961112359,2d664d45f0df3300b7cf82e6dee63ad1:1828153509,fe4c463bbc72330087b4c4b4a0252181:-277034093,8030e89ac8723300350c0b3a3f212f07:-777017347,cccf545a53723300bd4adfd21843e31e:-1848332899,ea5f5c5a2272330045efa17e512f753b:-651668099,67de509ad57233000b9cee96002d8432:104753117,6a8e5c5ad672330089c09837ad27c11e:-651668099,c6dd545a417233006e298fbd8b71bd00:-139539463,931ddc1698723300635f74bbb29de766:1253391673,23acd41a6e72330034da8d1c1b531766:1838217846,97b9d412c27233003429cad1f4980033:-359935294,72f69412ab723300a30b15597c5b428b:1860171336,83461816db723300fb7c9eeaa87c1a7c:1533467491,913654162b723300b4c436f2faf1e301:-1863832799,ade590de463233008a17b88d69b03be7:-1730453810,5180941294723300e0c07ee848ae5781:-203153093,74f403280cb2330068b46324c9d029cb:1207310939,4d940b2c13723300d835d5d5a04bb84c:1420267932,c1a38f2469b233001b78d93f290c0ef7:-938064750,64034f6473b23300e986d461d27dc79c:-852095737,4b714b6438b2330021f368dff6e07c94:610260374,8f11cfe88172330070a1e16405c861a4:1862408242,fce00b2c1372330011b707bf7602a045:-1333728444,9020cfe0dab23300c6887c703482ded1:-1034664747,00ff7620bcb233005532b6962b98bdd2:-7804381,507eb22c3f7233004e114d0228b8bd42:1405927611,5395b22cd3723300557ce22260e0793e:-7804381,2cb07ea8e6723300c2f542d052380e17:-526996572,b70076a4d5723300dbbd45afb7f2a5e8:5567748,c2cea6a40772330057db5c083026a8eb:-526996572,b48da6a452723300289d55cb264bf430:-1822870006,90eba6a48d723300f465118099bc0ee0:216079738,2aa926a4e872330089fdfea41eebdc32:546776629,9499aae8ac323300a2a9ae0e2ac67c80:-250385679,d9aeca541cf23300d1aa26c6e4f6a291:1338924191,e0bcca54f5f2330025d6c13e4d8f3c9b:1034441724,517c06948bf23300cb7f56d8a47ef08b:-1061895673,c0cb82d469b23300e8cfec3ad20bbbaf:1034441724,a3960550793233006022f8cfbe53f34c:-185654525,e35f5bd1feaf33000647ebd783b08dda:1105925921,69417f4573273300ed92da6d7b3c2119:1553211763,d42e65d9dce77300e239179085b39306:-592298416,400ee5d546e773005aa9505d84fc74fe:-1266919709,01bda9d91fe7730037e58d51de0da920:-329949949,7d7c836e4ed33300e92b9e93dd5341d8:-1266919709,801c432e70d33300ffa749736b1db5be:768615631,4a9a4bea49d333005d3c567c6a16e116:-474030192,c1c9c7aa9ed333003a776a4cfddeaa9b:-10547425,ede643a635d33300477accdc527dd71c:-1071432204,d1a50b264ad33300010dc3b537f30c61:-1897360104,6c020bea3493330027c1cacb1a4325e7:-16845817,8e492f1cc5973300c0c7c5e6d5f51d65:1828153509,b1102350d2973300e8644c3cc46d7cc7:-1132441322,7101d390fa5733007c8f0df4a9c0797c:2048916006,21c307d4e9173300560f3835d9818870:1305479120,5ad9e65492d33300c204c524ca537fe7:1620335701,24b46edc0d93330032479de37152666a:-427731780,3474aed4e9933300ebaa5a321fb8b5ba:-493589215,2f5326581b9333009f2698c7db698fc2:1931777581,4ff2ee18c593330092b428bde48af94b:-884861201,53289218559333007ff118b28824a87d:593520875,2b375294e8933300e5699426f716e539:-1855241814,8ed61e10c9933300b480f0214f3b6da3:973569100,dd561e54e0933300929bf2eaee3b0dbc:-43631344,ceb51a1092933300acc7db01b71747a7:-1536249503,d59d82dcb2533300d2c0078d9a28ff95:-900130254,20fc02dc795333005c436323971bf0af:7692858,fa9c8adca85333005892e882d034b4ee:-595027722,5a9b425c95533300802317b5fb4a9fc9:-1630425153,07494a58cf533300302bf209829b515b:-948576381,c7e807d34dc33700430470dbb2d163de:2048916006,02900f43b287f300a0e6825a99fac37f:257704390,7074a6478203f30075cafd2503667d85:331110085,dcf3aa07f203f3009485b883aca24dc7:-408138085,e37f120303cfb30005467d3e8a35083c:-545576721,bafd3d4f700fb30067b44024c08a8d78:-1520027241,dbbc398f450fb300c2df2c602c8ce3c1:500697485,2c54b947870fb30043205ad88cff5103:-1018093464,1723f583140fb300ef08e0c24865e40f:-1400845175,8f82bdc3170fb3008a342ce8ac9ea165:-2028652497,ad12f5c3c00fb3001d4cfe445008a2ec:-1175334942,bb40f943e20fb30076abcc568ad539da:-1502922629,76ce6903bd0fb300b76c2ffce36476b3:1211625514,3eaaa90f2dcbb300e488238765689db2:-1917311144,3c1a614f5bcbb30003f0d7e3052867de:-718281986,ce99690f18cbb300dafa9de060677ee8:-2103453556,cb186d8bf6cbb300c176df0e6ad53c86:1967341051,5e256d0bbbcbb3002f7c0c9c916bdd75:-1824360474,c644edc75bcbb3007df92af6dffbb2bf:-2124767658,89e4e5be1103b300434e57f908aca478:-1476490641,ae74e5fa8203b300f8bcb660c2bdb8ea:-2105409488,cc34693eb003b3006a0bb98fdf9098c4:-1861070414,dcc2a17ef203b30067894911e4899e99:-1697375883,4821a9fa0303b3000b723a35c85181aa:50877948,3110e5b64b03b3009f08882f1be6896b:-1046413642,61dfddb65e03b300b9a0a77456e5f5c5:50402844,d28f9db6de03b30070e25c79daaef0be:1793364251,219b99b61703b300abdfe48419b4492e:-797992500,e54bd5b69e03b300758441b884fd5b60:-246262430,9daadd76d903b300122d3369f1350b1f:-2134473115,e90a99f23303b300df7553480e2275ce:1544965036,1a6919f22903b300d191653744d1dcd0:-858114910,4e37d1f28d03b300f1a1476635fa473a:-1469867222,5dd6d9b21d03b300f7ce8ff5c6da387c:1215432175,345619727a03b300dcf5aeef9eca7333:-943272626,4c55d572c603b300e4e1c47e0f0f27f6:972339820,b5b45d326803b300bf6c0934612a70aa:762969527,a0a45dfe01cf7300bf5aea00dfe2c70b:164346851,0cf31dfe1bcf7300ffb101569859a55c:-143183974,421355fe52cf73009f7f4585ea79f3af:664975112,b49255fe3dcf7300df40c3315d5076aa:1627638089,7c429d7e50cf730042d8c8f937f8a1c0:-886858469,3c41d97e33cf7300c21d315628080e00:-712150493,9580d17edbcf7300f261f02812f8a3a1:-1792676629,df00d17e83cf73001d14e2f8cfff8cb6:-1594400237,b4cd85fa2dcf73003c411a75e4dfb54c:238377375,c63c4d3acacf730046dbdd2c7f3e6022:401714481,aa88c1f6b0cf7300fe69ea12cd20c70e:-397268359,faa749b69fcf7300b02a1e6306f9e0ba:1120703283,91e685b67ecf73004c0ba3b294a653c3:-1151647309,f57641b69dcf7300281bfb3de51a1851:-1196655235,70d20df29bcf7300f64f0788fdb8f90d:887729016,a25249b293cf730040fbb16add0a9591:134603403</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_ui_action_128fe45cdbd22300570c9b81ca961949</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_ui_action"&gt;&lt;sys_ui_action action="INSERT_OR_UPDATE"&gt;&lt;action_name&gt;copy_item&lt;/action_name&gt;&lt;active&gt;true&lt;/active&gt;&lt;client&gt;false&lt;/client&gt;&lt;client_script_v2&gt;&lt;![CDATA[function onClick(g_form) {

}]]&gt;&lt;/client_script_v2&gt;&lt;comments/&gt;&lt;condition&gt;current.sys_class_name=='x_nuta2_nutanix_ca_nutanix_marketplaceitems'&lt;/condition&gt;&lt;form_action&gt;true&lt;/form_action&gt;&lt;form_button&gt;true&lt;/form_button&gt;&lt;form_button_v2&gt;false&lt;/form_button_v2&gt;&lt;form_context_menu&gt;false&lt;/form_context_menu&gt;&lt;form_link&gt;false&lt;/form_link&gt;&lt;form_menu_button_v2&gt;false&lt;/form_menu_button_v2&gt;&lt;form_style/&gt;&lt;hint/&gt;&lt;isolate_script&gt;false&lt;/isolate_script&gt;&lt;list_action&gt;false&lt;/list_action&gt;&lt;list_banner_button&gt;false&lt;/list_banner_button&gt;&lt;list_button&gt;false&lt;/list_button&gt;&lt;list_choice&gt;false&lt;/list_choice&gt;&lt;list_context_menu&gt;false&lt;/list_context_menu&gt;&lt;list_link&gt;false&lt;/list_link&gt;&lt;list_save_with_form_button&gt;false&lt;/list_save_with_form_button&gt;&lt;list_style/&gt;&lt;messages/&gt;&lt;name&gt;Copy&lt;/name&gt;&lt;onclick/&gt;&lt;order&gt;100&lt;/order&gt;&lt;script&gt;&lt;![CDATA[gs.addErrorMessage('This action is not available for Nutanix Calm App.');
action.setRedirectURL(current);]]&gt;&lt;/script&gt;&lt;show_insert&gt;false&lt;/show_insert&gt;&lt;show_multiple_update&gt;false&lt;/show_multiple_update&gt;&lt;show_query&gt;false&lt;/show_query&gt;&lt;show_update&gt;true&lt;/show_update&gt;&lt;sys_class_name&gt;sys_ui_action&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-12-06 13:04:40&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;128fe45cdbd22300570c9b81ca961949&lt;/sys_id&gt;&lt;sys_mod_count&gt;5&lt;/sys_mod_count&gt;&lt;sys_name&gt;Copy&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;protected&lt;/sys_policy&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_action_128fe45cdbd22300570c9b81ca961949&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-08-05 12:41:18&lt;/sys_updated_on&gt;&lt;table&gt;x_nuta2_nutanix_ca_nutanix_marketplaceitems&lt;/table&gt;&lt;ui11_compatible&gt;true&lt;/ui11_compatible&gt;&lt;ui16_compatible&gt;false&lt;/ui16_compatible&gt;&lt;/sys_ui_action&gt;&lt;/record_update&gt;</payload>
<payload_hash>-977671172</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.4.5 Complete Build">346d737d1bb0011081326464604bcb11</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-01-03 07:26:35</sys_created_on>
<sys_id>786d737d1bb0011081326464604bcb14</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17e1ed24d820000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-01-03 07:26:35</sys_updated_on>
<table>x_nuta2_nutanix_ca_nutanix_marketplaceitems</table>
<target_name>Copy</target_name>
<type>UI Action</type>
<update_domain>global</update_domain>
<update_guid>fe5d5b1947313010ec4a9ffc60126768</update_guid>
<update_guid_history>fe5d5b1947313010ec4a9ffc60126768:-977671172,f9b879ba2a66201067d89b2c995f60d8:-377925747,b64639f6a1662010012bd9502e729bc0:1836543706,a3ef2c5c4bd223008c76bf89288ead9d:1690755429,19dfa85c3ad223003b17f00b3fa6299f:-2051052219,02cfa85c6ed22300897c571b87d14d29:1014478388</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_security_acl_01f5e31edb397300b4cbfbef299619d5</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_security_acl"><sys_security_acl action="INSERT_OR_UPDATE"><active>false</active><admin_overrides>true</admin_overrides><advanced>false</advanced><condition/><description/><name>wf_workflow</name><operation display_value="read">read</operation><script/><sys_class_name>sys_security_acl</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2019-06-05 07:10:11</sys_created_on><sys_id>01f5e31edb397300b4cbfbef299619d5</sys_id><sys_mod_count>3</sys_mod_count><sys_name>wf_workflow</sys_name><sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_security_acl_01f5e31edb397300b4cbfbef299619d5</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2021-07-28 10:25:09</sys_updated_on><type display_value="record">record</type></sys_security_acl></record_update>]]></payload>
<payload_hash>-1259653228</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.4.5 Complete Build">346d737d1bb0011081326464604bcb11</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-01-03 07:26:35</sys_created_on>
<sys_id>7c6d737d1bb0011081326464604bcb13</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17e1ed1e41f0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-01-03 07:26:35</sys_updated_on>
<table>wf_workflow</table>
<target_name>wf_workflow</target_name>
<type>Access Control</type>
<update_domain>global</update_domain>
<update_guid>067139b2ac21b0103fc9b84636c1d981</update_guid>
<update_guid_history>067139b2ac21b0103fc9b84636c1d981:-1259653228,7780b5fea8ed7010bad3c178f241e983:-923681363,cbdfb7d6eba130108430266f548c2d34:-1259653228,96666f1e99397300d9d69b2816b8b669:-923681363,96666f1e99397300d9d69b2816b8b669:-923681363</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_properties_336af7192fc1301038fb55272799b606</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties"><sys_properties action="INSERT_OR_UPDATE"><choices/><description>defines the 1.4.5 migration required?</description><ignore_cache>true</ignore_cache><is_private>false</is_private><name>x_nuta2_nutanix_ca.1_4_5</name><read_roles/><suffix>x_nuta2_nutanix_ca.1_4_5</suffix><sys_class_name>sys_properties</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2021-06-29 08:01:57</sys_created_on><sys_id>336af7192fc1301038fb55272799b606</sys_id><sys_mod_count>28</sys_mod_count><sys_name>x_nuta2_nutanix_ca.1_4_5</sys_name><sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_properties_336af7192fc1301038fb55272799b606</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2021-07-13 17:52:06</sys_updated_on><type>string</type><value>0</value><write_roles/></sys_properties><sys_translated_text action="delete_multiple" query="documentkey=336af7192fc1301038fb55272799b606"/></record_update>]]></payload>
<payload_hash>-1615526767</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.4.5 Complete Build">346d737d1bb0011081326464604bcb11</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-01-03 07:26:35</sys_created_on>
<sys_id>b06d737d1bb0011081326464604bcb12</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17e1ed138770000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-01-03 07:26:35</sys_updated_on>
<table/>
<target_name>x_nuta2_nutanix_ca.1_4_5</target_name>
<type>System Property</type>
<update_domain>global</update_domain>
<update_guid>dbe78e4aaad530104c656391134bf3e8</update_guid>
<update_guid_history>dbe78e4aaad530104c656391134bf3e8:-1615526767,74c74e4a3ad530109d6ad4807d4de9d4:-1595189392,33b7424223d53010296f110caa6577ee:-1615526767,aa90525c489170109acc6a9461e30080:-1595189392,feab028891d530107180d62ead37cec8:-1615526767,22e6f088f35130106073a0ed6503e5e4:-1595189392,0e9670480b513010c5a528b8541cef07:-1615526767,241244378b0d701015f35e5e80419eb0:-1595189392,6891487767c970105cdfa8288e689e6d:-1615526767,599f7bafb3c97010b49348f6c0d4804b:-1595189392,d15ff32f92c97010928d9e4531eeff6f:-1615526767,4fa2b3efc4497010f7231a86944824e0:-1595189392,aea6cd6fbc09b4101a8453c5ab81396c:-1615526767,d016896f9b09b410986b4dab711b6123:-1595189392,fad5892ff509b410211778eb7e19d08a:-1615526767,77c345eb6709b410cca1491d72db6706:-1595189392,b9c305abd509b41092db82da4f6e42be:-1615526767,ee9245ab7b09b410b4df833ec42542d8:-1595189392,b78205ab0e09b41019fc4422ce8105e1:-1615526767,1e01416b7709b4100e1139a987275c7d:-1595189392,c501cda7e309b410b0ce1c7e54520376:-1615526767,fc40c52b7809b410d4cbda5bb5f7cf24:-1595189392,21eff8e7eb09b410eb55766c399c4da8:-1615526767,dc82ad7d6601701096a4208430b309bf:-1595189392,09b370adfc893010c8000c1cf8fcc865:-1615526767,bba3fc6534c93010cab830ffd0963829:-1595189392,05837ced44893010b824be61357ec930:-1615526767,f40f982d2c4930100199dd574fba8756:-1595189392,719af719e6c130107f2cfb6473e76213:-1615526767</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_ui_action_af1a13a0db6223009f42bd5139961983</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_ui_action"&gt;&lt;sys_ui_action action="INSERT_OR_UPDATE"&gt;&lt;action_name&gt;toggle_view_dummy&lt;/action_name&gt;&lt;active&gt;true&lt;/active&gt;&lt;client&gt;true&lt;/client&gt;&lt;client_script_v2&gt;&lt;![CDATA[function onClick(g_form) {

}]]&gt;&lt;/client_script_v2&gt;&lt;comments/&gt;&lt;condition&gt;(gs.hasRole('asset') || gs.hasRole('itil')) &amp;amp;&amp;amp; ( ( gs.getSession().getProperty('user_agent_browser') == 'ie' &amp;amp;&amp;amp; gs.getSession().getProperty('user_agent_version') &amp;gt;= 9 ) || ( gs.getSession().getProperty('user_agent_browser') != 'ie' ) )&lt;/condition&gt;&lt;form_action&gt;false&lt;/form_action&gt;&lt;form_button&gt;false&lt;/form_button&gt;&lt;form_button_v2&gt;false&lt;/form_button_v2&gt;&lt;form_context_menu&gt;false&lt;/form_context_menu&gt;&lt;form_link&gt;false&lt;/form_link&gt;&lt;form_menu_button_v2&gt;false&lt;/form_menu_button_v2&gt;&lt;form_style/&gt;&lt;hint/&gt;&lt;isolate_script&gt;false&lt;/isolate_script&gt;&lt;list_action&gt;false&lt;/list_action&gt;&lt;list_banner_button&gt;false&lt;/list_banner_button&gt;&lt;list_button&gt;false&lt;/list_button&gt;&lt;list_choice&gt;false&lt;/list_choice&gt;&lt;list_context_menu&gt;false&lt;/list_context_menu&gt;&lt;list_link&gt;false&lt;/list_link&gt;&lt;list_save_with_form_button&gt;false&lt;/list_save_with_form_button&gt;&lt;list_style/&gt;&lt;messages/&gt;&lt;name&gt;Disable dashboard_form&lt;/name&gt;&lt;onclick/&gt;&lt;order&gt;-1000&lt;/order&gt;&lt;script&gt;&lt;![CDATA[	(function setupDashboardNavigation() {
			// Abort if no global NOW object
			if(window.NOW) {
				// Check for or set up CMDB state tracking
				if(!window.NOW.cmdb)
					window.NOW.cmdb = {};

				// Check if CMDB form toggle was already set up or not, if so, just remove any other matching elemnt
				if(!window.NOW.cmdb.formToggleSetup) {
					// Flag as set up
					window.NOW.cmdb.formToggleSetup = true;

					// Get the button we are going to hot swap
					var button = document.getElementById('toggle_view_dummy');

					// Get the button's parent element
					var parent = button.parentNode;

					// Create some navigation UI to swap with the button
					var temp = document.createElement('div');
					var html = '' +
						'&lt;ul id="toggle_view" class="nav nav-segmented sn-tabs-basic" style="margin: 0 4px;"&gt;' +
						'    &lt;li' +
						'      onclick="goToDashboard()"' +
						'      title="' + getMessage('Switch to the dashboard view') + '"' +
						'      tabindex="0"' +
						'      aria-label="' + getMessage('Switch to the dashboard view') + '"' +
						'    &gt;' +
						'        &lt;a style="text-transform: capitalize;"&gt;'+ getMessage('Dashboard') + '&lt;/a&gt;' +
						'    &lt;/li&gt;' +
						'    &lt;li' +
						'      class="active"' +
						'      onclick="goToNOOP(event)"' +
						'      title="' + getMessage('You are currently on the form view') + '"' +
						'      tabindex="0"' +
						'      aria-label="' + getMessage('You are currently on the form view') + '"' +
						'    &gt;' +
						'        &lt;a style="text-transform: capitalize;"&gt;' + getMessage('Form') + '&lt;/a&gt;' +
						'    &lt;/li&gt;' +
						'&lt;/ul&gt;';
					temp.innerHTML = html;

					// Swap the UI content
					parent.replaceChild(temp.childNodes[0], button);
				} else {
					var button = document.getElementById('toggle_view_dummy');
					if(button)
						button.parentNode.removeChild(button);
				}
			} else {
				// Since we could not swap, attempt to remove the element
				var button = document.getElementById('toggle_view_dummy');
				if(button)
					button.parentNode.removeChild(button);
			}
		
		
		})();
		
		// Function to go to dashboard view
		function goToDashboard() {
			// Dim view
			jQuery('body').addClass('submitted');
			
			// Get sys_id and table
			var sys_id = g_form.getUniqueValue();
		    var table = g_form.getTableName();
			
			// Get the current URL parameters
			var params = document.location.search;
			params = params.substring(1, params.length);
			
			// Build a redirect URL
			var url = '/cmdb_dashboard.do?sysparm_record=' + sys_id + '&amp;sysparm_table=' + table +  '&amp;sysparm_view=ci_dashboard&amp;sysparm_stack=no&amp;sysparm_doctype=true&amp;sysparm_editable=true';
			url += '&amp;sysparm_form_params=' + encodeURIComponent(params);
			
			// Redirect to CI dashboard
			window.location.replace(url);
		}
		
		// Function to perform a noop click
		function goToNOOP(event) {
			event.preventDefault();
			event.stopPropagation();
		}]]&gt;&lt;/script&gt;&lt;show_insert&gt;false&lt;/show_insert&gt;&lt;show_multiple_update&gt;false&lt;/show_multiple_update&gt;&lt;show_query&gt;false&lt;/show_query&gt;&lt;show_update&gt;true&lt;/show_update&gt;&lt;sys_class_name&gt;sys_ui_action&lt;/sys_class_name&gt;&lt;sys_created_by&gt;bharat.vajj&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-12-20 06:23:54&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;af1a13a0db6223009f42bd5139961983&lt;/sys_id&gt;&lt;sys_mod_count&gt;5&lt;/sys_mod_count&gt;&lt;sys_name&gt;Disable dashboard_form&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_action_af1a13a0db6223009f42bd5139961983&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-08-05 12:40:16&lt;/sys_updated_on&gt;&lt;table&gt;x_nuta2_nutanix_ca_nutanix_calm_application&lt;/table&gt;&lt;ui11_compatible&gt;true&lt;/ui11_compatible&gt;&lt;ui16_compatible&gt;false&lt;/ui16_compatible&gt;&lt;/sys_ui_action&gt;&lt;/record_update&gt;</payload>
<payload_hash>891686712</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.4.5 Complete Build">346d737d1bb0011081326464604bcb11</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-01-03 07:26:35</sys_created_on>
<sys_id>b06d737d1bb0011081326464604bcb15</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17e1ed24d7b0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-01-03 07:26:35</sys_updated_on>
<table>x_nuta2_nutanix_ca_nutanix_calm_application</table>
<target_name>Disable dashboard_form</target_name>
<type>UI Action</type>
<update_domain>global</update_domain>
<update_guid>671d931929313010842e2cc5adaadeaa</update_guid>
<update_guid_history>671d931929313010842e2cc5adaadeaa:891686712,8ef05d0b5fbbc410d0c913181798710f:-1350491900,00dad7a08c622300d8d62cb76aaf0068:-501061337,42aa17a09a622300970fc12aeb60195c:249162138,ab8ad7a081622300b0a249730e009101:-1817489281,3f4a13a0d86223002364af02460e8589:-317235672</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_ui_script_db9441c237212300fdfc097973990e67</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ui_script"&gt;&lt;sys_ui_script action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;description/&gt;&lt;global&gt;false&lt;/global&gt;&lt;name&gt;x_nuta2_nutanix_ca.Calm_Catalog_Service_&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var $j = jQuery.noConflict();
var loader_count = 0;
var trigger_json = {};


function triggerChange(id, value) {
	var service_field = g_form.getValue('service_data') + '';
	var service_json_full= (service_field != '') ? JSON.parse(service_field) : [];
	for(var prof = 0; prof &lt; service_json_full.length; prof++) {
		var service_data = service_json_full[prof].service_configuration;
	for(var i in service_data) {
		for(var j in service_data[i]) {
			for(var k in service_data[i][j]) {
				if(k == id) {
					service_data[i][j][k].value = value + '';
				//	console.log(i + j + id + value);
				}
			}
		}
	}
	}
	g_form.setValue('service_data', JSON.stringify(service_json_full));
}
//---------diskApp module----------------
// Created an angular application with the name 'diskApp' to be used in HTML rendering


var app = angular.module('configApp', []);

app.filter('capitalize', function(){
	return function(category, title) {
		if(title)
			category = category.replace(title,'');
		category = category.toLowerCase().split('_');
		for (var i = 0; i &lt; category.length; i++) {
			category[i] = category[i].charAt(0).toUpperCase() + category[i].slice(1);
		}
		return category.join(' ').replace(/(os|vm|ssh|api|gcp|aws)/igm, function(match) {
				return match.toUpperCase();
			}).replace(/Vdisks/igm, 'vDisks').replace(/Management Optional/igm, 'Management (Optional)');
		//"$1".toUpperCase());
	};
});

// renderConfiguration = function(JSONString) {
// // 	$scope.JSONdata = JSON.parse(JSONString);

// };

app.controller('configController', function($scope) {

	$scope.togglePassword =  function(sysid) {
		var input = $j('#' + sysid);

		if (input.attr("type") == "password") {
			input.attr("type", "text");
		} else {
			input.attr("type", "password");
		}
	};

	$scope.selectCategory = function(category) {
		$scope.selectedCategory = category;
	};

	$scope.checkUiPage = function(category, type, title) {

		if(type &amp;&amp; type+''=='2')
			return false;
		
		var keys = Object.keys(category);

		if(category[keys[0]].name)	
			return true;	
		
		return false;

		//return (category.includes("storage") != true) &amp;&amp; (category.includes('port') != true);
	};
	
	
	
	
	
	
	
	$scope.checkGuestType = function(category, title, questionText){
		
		if((category+'').includes('guest_customization') &amp;&amp; questionText+''=='Install Type'){
			
			var guest = $scope.JSONdata[title][category];
			
			for(var i in guest)
				if(guest[i].question_text+'' == 'Type' &amp;&amp; guest[i].value+'' == 'Cloud-init')
					return false;			
		}
		
		return true;
	};
	
	$scope.disableRuntimeConfig = function(innerJSON) {
					if(innerJSON.data_type == 'EXEC_LOCAL' || innerJSON.data_type == 'HTTP_LOCAL' || innerJSON.data_type == 'EXEC_SECRET' || innerJSON.data_type == 'HTTP_SECRET') {
						return true;
					}
					else {
						return (innerJSON.isdisabled+'' == 'true');
					}
	};
	
	
	$scope.drsCheck = function(name, service) {
		
// 		var tmpJson = JSON.parse(g_form.getValue('service_data'))[service][service+'_vm_configuration'];
		
// 		var val = true;
		
// 		for(var i in tmpJson)
// 			if(tmpJson[i].name+'' == service+'_drs_mode'){
// 				val = (tmpJson[i].value)?tmpJson[i].value:false;
// 				break;
// 			}
				
		
// 		if((name+'' == service+'_host' || name+'' == service+'_datastore') &amp;&amp; val+'' == 'true'){
// 			return false;
// 		}else if((name+'' == service+'_cluster' || name+'' == service+'_storage_pod') &amp;&amp; val+'' == 'false'){
// 			return false;
// 		}
				
		return true;	
	};
	
	$scope.createTriggerArray = function() {
		var service_json_full = $scope.JSONdata;
		
		var var_json = {};
        for(var prof = 0; prof &lt; service_json_full.length; prof++) {
			var service_json = service_json_full[prof].service_configuration;
			var profile = service_json_full[prof].profile + "";
			
			for (var i in service_json) {
				if(service_json[i][i+"_variables"]) {
					var variables_json = service_json[i][i+"_variables"];
					var dep_array = [];
					for(var j in variables_json)
						dep_array = dep_array.concat(variables_json[j].field_json.all_dep);
					var_json[i] = dep_array;
				}
			}
		}
		trigger_json = var_json;
	};
	
	
	$scope.triggerEscript = function(profile, titleKey, name) {
		
		//console.log(JSON.stringify(trigger_json));
		var var_name = name.replace(titleKey.replace(profile+"_","")+"_","");
		
		if(trigger_json[titleKey].indexOf(var_name) != -1)
			$scope.fetchEscriptHttp(titleKey);
	};
	
	$scope.fetchEscriptHttp = function(titleKey) {
		var service_json_full = $scope.JSONdata;
		var continue_flag = false;
		
		if(service_json_full.length == 0)
			return;
		
        for(var prof = 0; prof &lt; service_json_full.length; prof++) {
			
			if(continue_flag)
				continue;
			
			var var_json = {};
			var service_json = service_json_full[prof].service_configuration;
			var profile = service_json_full[prof].profile + "";
			
			for (var i in service_json) {
				if(titleKey != "" &amp;&amp; i == titleKey) {
					if(service_json[i][i+"_variables"])
						var_json[i] = service_json[i][i+"_variables"];
					continue_flag = true;
					break;
				}
				else if(titleKey == "")
					if(service_json[i][i+"_variables"])
						var_json[i] = service_json[i][i+"_variables"];
			}
		
        for (var j in var_json) {
			var str = [];
			if(j != titleKey &amp;&amp; var_json != "onLoad")
				continue;
			var service_name = j.replace(profile+"_", "");
            var pre_map = _createDependencyJSON(var_json[j], service_name);

			/*if (!pre_map)
                return;*/

            var options = "";
            var type = g_form.getValue('type_of_blueprint');
            var blueprintSysId = g_form.getValue('blueprint');

            //		var loadingDialog = new GlideModal('loader', true);

			
            var loadingDialog1 = new GlideModal('variables_loader', true);
            loadingDialog1.setTitle('Fetching variable values....');
            loadingDialog1.renderWithContent('&lt;div class="loading-container"&gt;&lt;div class="loading-indicator icon-loading icon-lg"&gt;&lt;/div&gt;&lt;/div&gt;');
			loader_count++;
            
            var gajax = new GlideAjax('Nutanix_ClientServerScriptBridge');
            gajax.addParam('sysparm_name', 'getHttpValues');
            gajax.addParam('sysparm_type', type);
		    gajax.addParam('sysparm_str', str);
            gajax.addParam('sysparm_parentUuid', blueprintSysId + '');
            gajax.addParam('sysparm_preMap', JSON.stringify(pre_map) + '');
            gajax.getXML(setOptions);
        }
		}


        function _createDependencyJSON(var_data, j) {

            var pre_map = {};
            var extApiFlag;
            for (var i in var_data) {
				
			
				//console.log("Var data:"+JSON.stringify(var_data[i]));
				var var_name = (var_data[i].name + "").replace(j+'_','');
				var field = JSON.parse(var_data[i].field);
				var type = field.type + "";
				var value = (var_data[i].field_json.all_dep.length != 0) ? field.value + "" : var_data[i].value + "";
				
                pre_map[var_name + ""] = {
                    "depends_on": var_data[i].field_json,
                    "value": value, //var_data[i].value + "",
                    "uuid": var_data[i].uuid,
                    "type": field.type,
					"name": var_name + "",
					"data_type": field.data_type
                };
				
				if(type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') {
					pre_map[var_name + ""].requiresApiCall = true;
				} else {
					if(field.options &amp;&amp; field.options.choices) {
						pre_map[var_name + ""].options = field.options.choices;
						pre_map[var_name + ""].data_type = "LIST_SINGLE";
					}
					if(field.data_type + "" == 'LIST') {
						pre_map[var_name + ""].data_type = field.data_type;
					}
				}
            }
            //console.log(pre_map);
            //if (extApiFlag)
                return pre_map;
            //return false;
        }

        function setOptions(response) {
			
            var answer = response.responseXML.documentElement.getAttribute("answer");
			
			jslog(answer);
			
            var parsedAnswer = JSON.parse(answer);
            var service_field = g_form.getValue('service_data') + '';
			var service_data_full = (service_field != '') ? JSON.parse(service_field) : '';
			
			for(var p = 0; p &lt; service_data_full.length; p++) {
			var service_data = service_data_full[p].service_configuration;
			for (var i in service_data) {
				for (var j in service_data[i]) {
					for (var k in service_data[i][j]) {
						var uuid = service_data[i][j][k].uuid + "";
						for(var m in parsedAnswer) {
							if(uuid == parsedAnswer[m].uuid) {
								var type = parsedAnswer[m].type + "";
								var data_type = parsedAnswer[m].data_type + "";
								
								if(type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') {
									if (parsedAnswer[m].state == 'SUCCESS') {
										//for (var a = 0; a &lt; parsedAnswer.values.length; a++)
										service_data[i][j][k].options = parsedAnswer[m].value;
										//service_data[i][j][k].value = parsedAnswer[m].default_value + '';
									}
									if (parsedAnswer[m].state == 'ERROR'){
										g_form.addErrorMessage("Failed fetching values for variable '" + service_data[i][j][k].question_text + "': " + parsedAnswer[m].error[0]);
									}
								}
								
								if(type == "LOCAL"  &amp;&amp; data_type == "BASE")
									service_data[i][j][k].value = parsedAnswer[m].value + '';
								
								if((data_type == "LIST_SINGLE" || data_type == "LIST") &amp;&amp; (type + "" == "LOCAL" || type + "" == "PREDEFINED")) {
									service_data[i][j][k].options = parsedAnswer[m].options;
									service_data[i][j][k].value = parsedAnswer[m].value;
								}
								
							}
						}
					}
				}
			}
			}
			
            $scope.JSONdata = service_data_full;
            /*g_form.setValue('service_data', JSON.stringify($scope.JSONdata));*/
			//g_form.setValue('service_data', JSON.stringify($scope.JSONdata));
			g_form.setValue('service_data', JSON.stringify(service_data_full));
			loader_count--;
			jslog(loader_count);
			if(loader_count == 0) {
				$scope.$apply();
				new GlideModal().get('variables_loader').destroy();
			}
        }
	};
	
	$scope.updateData = function() {
		g_form.setValue('service_data', JSON.stringify($scope.JSONdata));
	};
	
	$scope.GwtDTPicker = function(input_id, format, showTime) {
		new GwtDateTimePicker(input_id, format, showTime);
	};

	/*$scope.updateDisableStatus = function() {
		for (var title in $scope.JSONdata) {
			for (var cat in $scope.JSONdata[title]) {
				for (var sys in $scope.JSONdata[title][cat]) {
					if ($scope.JSONdata[title][cat][sys].value &amp;&amp; $scope.JSONdata[title][cat][sys].value.includes('@@')) {
						$scope.JSONdata[title][cat][sys].isdisabled = true;
						$scope.JSONdata[title][cat][sys].runtime_config = false;
					}
				}
			}
		}
	};*/

	$scope.hideFields = function (variables) {
		/*var variableArray = variables.split(",");
		for (var title in $scope.JSONdata) {
			for (var cat in $scope.JSONdata[title]) {
				for (var sys in $scope.JSONdata[title][cat]) {
					var question_text = $scope.JSONdata[title][cat][sys].question_text+'';
					var converted = question_text.toLowerCase().replace(/ /g,"");
					var newcat = cat.replace(title,'');
					newcat = newcat.toUpperCase().split('_');
					for (var i = 0; i &lt; newcat.length; i++) {
						newcat[i] = newcat[i].charAt(0).toUpperCase() + newcat[i].slice(1);
					}
					newcat = newcat.join(' ').replace(/ /g,"");
					console.log(newcat+'ere'+variableArray.includes(newcat));

					if (variableArray.includes(converted)||variableArray.includes(newcat)) {
						$scope.JSONdata[title][cat][sys].ishide = true;
					} else {
						$scope.JSONdata[title][cat][sys].ishide = false;
					}
				}
			}
		}*/
	};

	function renderConfiguration (JSONString) {
		/*var variableArray = '';
		var gax = new GlideAjax('Nutanix_ClientServerScriptBridge');
		gax.addParam('sysparm_name','getVariablesProperty');
		gax.getXMLWait();
		variableArray = gax.getAnswer();*/

		//console.log("parsed string :: "+JSONString);
		new GlideModal().get('loader').destroy();

	
		
		var parsedJson = JSON.parse(JSONString);
				
 		$scope.JSONdata = parsedJson;
	//	$scope.responseJSON = parsedJson.profile;
		$scope.nicOptions = parsedJson[0].subnet_list;
 		$scope.showMessage = (Object.keys(parsedJson[0].service_configuration).length==0);
		
		g_form.setValue('service_data', JSON.stringify(parsedJson));
		
		$scope.createTriggerArray();
		$scope.fetchEscriptHttp("");
		//$scope.updateDisableStatus();
		//$scope.hideFields(variableArray);
	}

	var responseParse = function(response) {

		var answer = response;
	//	jslog("responseParse "+answer);
		renderConfiguration(answer+'');
		
	};	

	$scope.$on('updateEvent', function(event, data){
		$scope.JSONdata = data;
	});


	$scope.getProfileVariableData = function(){

		var val = g_form.getValue('service_data');

		var type = g_form.getValue('type');
		var bpType =g_form.getValue('type_of_blueprint') ;
		var project = g_form.getValue('multiple_project');
		var blueprint = g_form.getValue('blueprint');
		var application_profile = g_form.getValue('multiple_application_profile');
		var cat_item = g_form.getValue('cat_item');
		var delta_profiles = g_form.getValue('delta_profiles');

		var loadingDialog = new GlideModal('loader', true);
		loadingDialog.setTitle('Fetching service data...'); 
		loadingDialog.renderWithContent('&lt;div class="loading-container"&gt;&lt;div class="loading-indicator icon-loading icon-lg"&gt;&lt;/div&gt;&lt;/div&gt;');
		
		var ga = new GlideAjax('Nutanix_ClientServerScriptBridge');
		ga.addParam('sysparm_name', 'getServiceVariableDetails');
		ga.addParam('sysparm_project', project);
		ga.addParam('sysparm_blueprint', blueprint);
		ga.addParam('sysparm_application_profile', application_profile);
		ga.addParam('sysparm_type', type);
		ga.addParam('sysparm_bpType', bpType);
		ga.addParam('sysparm_cat_item', cat_item);
		ga.addParam('sysparm_delta_profiles', delta_profiles);

		ga.getXMLWait();
		
		var answr = ga.getAnswer();
		
		if(val){
			answr = JSON.parse(answr);
		//	answr.service_configuration = JSON.parse(val);
			answr = val;
		}
	
		responseParse(answr);
	};

	_toTitleCase= function (str) {
		/*str = str.toLowerCase().split(' ');
		for (var i = 0; i &lt; str.length; i++) {
			str[i] = str[i].charAt(0).toUpperCase() + str[i].slice(1);
		}
		return str.join(' ');*/ return str;
	};
});


//---------runtimeSvg directive----------
//Created an angular custom directive containing the runtime SVG from Nutanix
// To be used as &lt;runtime-svg&gt;
app.directive('diskUiPage', function() {
	return {
		restrict: 'A',
		scope: {
			passedTitle: '@',
			passedCategory: '@',
			passedSysId: '@',
			passedJson: '@'
		},
		controller: "diskController",
		template: '&lt;div ng-init="parsingJSON(passedJson);"&gt;&lt;div class="disk_main-container"&gt;&lt;table class="table"&gt;&lt;thead&gt;&lt;tr class="padded-row"&gt;&lt;th class="padded-fields"&gt;Actions&lt;/th&gt;&lt;th class="padded-fields"&gt;Name&lt;/th&gt;&lt;th class="padded-fields"&gt;Device&lt;/th&gt;&lt;th class="padded-fields"&gt;&lt;span class="disk_right-indent"&gt;Size (GB)&lt;/span&gt;&lt;/th&gt;&lt;th class="padded-fields" ng-show="global_configuration"&gt;Runtime&lt;/th&gt;&lt;th class="padded-fields"&gt;Volume Type&lt;/th&gt;&lt;th class="padded-fields"&gt;Delete on termination&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr ng-if="JSONdata.root_disk"&gt;&lt;td class="padded-fields"&gt;&lt;a href="#" data-toggle="modal" data-target="#_editModal" ng-click="disk_initializeEditModal($index, JSONdata.root_disk, true);"&gt;&lt;i id="rootDataIcon" class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="padded-fields"&gt;ROOT&lt;/td&gt;&lt;td class="padded-fields"&gt;{{JSONdata.root_disk.device_name}}&lt;/td&gt;&lt;td class="padded-fields"&gt;&lt;span class="disk_right-indent"&gt;{{JSONdata.root_disk.size_gb}}&lt;/span&gt;&lt;/td&gt;&lt;td class="padded-fields" ng-show="global_configuration"&gt;{{JSONdata.root_disk.runtime}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{diskMapping[JSONdata.root_disk.volume_type]}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{JSONdata.root_disk.delete_on_termination}}&lt;/td&gt;&lt;/tr&gt;&lt;tr ng-if="JSONdata.data_disk_list" ng-repeat="data in JSONdata.data_disk_list"&gt;&lt;td class="padded-fields"&gt;&lt;a href="#" data-toggle="modal" data-target="#_editModal" ng-click="disk_initializeEditModal($index, data, false);"&gt;&lt;i id="ebsDataIcon" class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="padded-fields"&gt;EBS&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.device_name}}&lt;/td&gt;&lt;td class="padded-fields"&gt;&lt;span class="disk_right-indent"&gt;{{data.size_gb}}&lt;/span&gt;&lt;/td&gt;&lt;td class="padded-fields" ng-show="global_configuration"&gt;{{data.runtime}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{diskMapping[data.volume_type]}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.delete_on_termination}}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="{{modalid}}_editModal" class="modal fade" role="dialog" ng-if="false"&gt;&lt;div class="modal-dialog"&gt;&lt;div class="modal-content"&gt;&lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt;&lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt;&lt;/div&gt;&lt;div class="modal-body"&gt;&lt;form name="editForm"&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Device&lt;/label&gt; &lt;select ng-model="edit.device_name" class="form-control" ng-disabled="!global_configuration || edit.root_flag" required=""&gt;&lt;option ng-class="{\'disk_disabled-option\': value.disabled}" ng-repeat="(device, value) in device_list" ng-disabled="value.disabled"&gt;{{device}}&lt;/option&gt; &lt;/select&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt; &lt;label for="volume_type"&gt;Volume Type&lt;/label&gt; &lt;select ng-model="edit.volume_type" class="form-control" ng-disabled="true"&gt;&lt;option value="GP2"&gt;General Purpose SSD&lt;/option&gt;&lt;option value="IO1"&gt;Provisioned IOPS SSD&lt;/option&gt;&lt;option value="ST1"&gt;Throughput Optimized HDD&lt;/option&gt;&lt;option value="SC1"&gt;Cold HDD&lt;/option&gt;&lt;option value="STANDARD"&gt;EBS Magnetic HDD&lt;/option&gt; &lt;/select&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="size"&gt;Size (GB)&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt;&lt;input ng-model="edit.runtime" type="checkbox" ng-true-value="\'true\'" ng-false-value="\'false\'" ng-disabled="edit.disabled"/&gt;Runtime&lt;/div&gt; &lt;input ng-if="edit.runtime" ng-model="edit.size_gb" class="form-control" type="number" ng-disabled="edit.disabled"/&gt;&lt;input ng-if="!edit.runtime" ng-model="edit.size_gb" class="form-control" type="number" ng-disabled="edit.disabled"/&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt;&lt;div class="form-group"&gt;&lt;input ng-model="edit.delete_on_termination" type="checkbox" ng-disabled="!global_configuration"/&gt;Delete On Termination&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/form&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt;&lt;button type="button" class="btn btn-default disk_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt;&lt;button type="button" class="btn btn-primary disk_btn-modal" data-dismiss="modal" ng-click="disk_editEntry(edit);"&gt;Save&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="{{modalid}}_editModal" class="modal fade" role="dialog"&gt;&lt;div class="modal-dialog"&gt;&lt;div class="modal-content"&gt;&lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt;&lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt;&lt;/div&gt;&lt;div class="modal-body"&gt;&lt;p style="text-align: center;font-size: medium;"&gt;You can set or edit this field in Calm GUI.&lt;/p&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt;&lt;button type="button" class="btn btn-default disk_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;'
	};
});


//--------diskController controller--------------
//Created a controller for controlling the flow to data of diskApp application
app.controller('diskController', function($scope) {

	$scope.JSONdata = {};

	$scope.parsingJSON = function(passedJSON) {
		$scope.JSONdata = JSON.parse(passedJSON);
		//$scope.
		$scope.disk_checkDeviceList();

		$scope.diskMapping = {
			'GP2': 'General Purpose SSD',
			'IO1': 'Provisioned IOPS SSD',
			'ST1': 'Throughput Optimized HDD',
			'SC1': 'Cold HDD',
			'STANDARD': 'EBS Magnetic HDD',
		};

	};

	$scope.disk_getVariableData = function(passedJSON) {
		$scope.JSONdata = passedJSON;
		$scope.disk_checkDeviceList();
	};


	//$scope.device_list --&gt; contains the hardcoded dropdown list for device name in the form
	//key --&gt; provides the name of the device
	//key.disabled --&gt; provides the status of specific device whether it is added or not
	//    disabled = true  --&gt; added
	//    disabled = false --&gt; not added
	$scope.device_list = {
		"/dev/sda1": { "disabled" : true},
		"/dev/sdb": {"disabled" : false},
		"/dev/sdc": {"disabled" : false},
		"/dev/sdd": {"disabled" : false},
		"/dev/sde": {"disabled" : false},
		"/dev/sdf": {"disabled" : false},
		"/dev/sdg": {"disabled" : false},
		"/dev/sdh": {"disabled" : false},
		"/dev/sdj": {"disabled" : false},
		"/dev/sdk": {"disabled" : false},
		"/dev/sdl": {"disabled" : false}
	};

	//$scope.checkDeviceList --&gt; set the value of $scope.device_list array key.disabled to true or false on basis of JSONdata
	$scope.disk_checkDeviceList = function() {
		$scope.global_configuration = true;
		for (var i = 0;i &lt; $scope.JSONdata.data_disk_list.length; i++) {
			$scope.device_list[$scope.JSONdata.data_disk_list[i].device_name].disabled = true;
		}
	};



	//$scope.initializedEditModal --&gt; initialize all the variables with values from editJSON to render it into editModal
	//PARAMS : index    --&gt; provide the index value to selected entry from the table
	//         editJSON --&gt; contains the JSON of selected entry
	//         rootFlag --&gt; states whether entry is root entry or ebs entry
	$scope.disk_initializeEditModal = function (index, editJSON, rootFlag) {
		
		//alert('You can set or edit this field in Calm GUI.');
		return;
		
		$scope.edit ={};
		$scope.edit.root_flag = rootFlag;
		$scope.edit.index = index;
		$scope.edit.device_name = editJSON.device_name;
		$scope.edit.size_gb = editJSON.size_gb;
		$scope.edit.volume_type = editJSON.volume_type;

		$scope.edit.runtime = editJSON.runtime;
		$scope.edit.disabled = (editJSON.disabled+''=='true')?false:true;

		$scope.edit.delete_on_termination = editJSON.delete_on_termination;
		$scope.edit.previous_device_name = editJSON.device_name;
	};



	//$scope.editEntry --&gt; edit the specific entry from the main JSON
	$scope.disk_editEntry = function (editJSON) {
		$scope.device_list[editJSON.previous_device_name].disabled = false;
		$scope.device_list[editJSON.device_name].disabled = true;
		var createdJSON = {
			"device_name": editJSON.device_name,
			"size_gb": editJSON.size_gb,
			"volume_type": editJSON.volume_type,
			"delete_on_termination": editJSON.delete_on_termination,
			"runtime": editJSON.runtime,
			"snapshot_id": "",
			"iops": "",
			"type" : ""
		};

		if (editJSON.root_flag) {
			createdJSON.snapshot_id = $scope.JSONdata.root_disk.snapshot_id;
			createdJSON.type = $scope.JSONdata.root_disk.type;
			createdJSON.iops = $scope.JSONdata.root_disk.iops;
			$scope.JSONdata.root_disk = createdJSON;
		} else {
			createdJSON.snapshot_id = $scope.JSONdata.data_disk_list[editJSON.index].snapshot_id;
			createdJSON.type = $scope.JSONdata.data_disk_list[editJSON.index].type;
			createdJSON.iops = $scope.JSONdata.data_disk_list[editJSON.index].iops;
			$scope.JSONdata.data_disk_list[editJSON.index] = createdJSON;
		}

		var service_data = JSON.parse(g_form.getValue('service_data'));
		service_data[$scope.passedTitle][$scope.passedCategory][$scope.passedSysId] = $scope.JSONdata;
		$scope.$emit('updateEvent', service_data);
		g_form.setValue('service_data', JSON.stringify(service_data));
	};
});




app.directive('portlistUiPage', function() {
	return {
		restrict: 'A',
		scope: {
			passedTitle: '@',
			passedCategory: '@',
			passedSysId: '@',
			passedJson: '@'
		},
		controller: "portlistController",
		template : '&lt;div ng-init="parsingJSON(passedJson);"&gt;&lt;div class="portlist_main-container"&gt;&lt;table class="table"&gt;&lt;thead&gt;&lt;tr&gt;&lt;th class="padded-fields" ng-show="global_configuration"&gt;Actions&lt;/th&gt;&lt;th class="padded-fields"&gt;Name&lt;/th&gt;&lt;th class="padded-fields"&gt;Protocol&lt;/th&gt;&lt;th class="padded-fields"&gt;Port&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr ng-repeat="data in JSONdata"&gt;&lt;td class="padded-fields" ng-show="global_configuration"&gt;&lt;a href="#" data-toggle="" data-target="#_editModal" ng-click="portlist_initializeEditModal($index, data);"&gt;&lt;i id="ebsDataIcon" class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.endpoint_name}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.protocol}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.target_port}}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog"&gt;&lt;div class="modal-dialog"&gt;&lt;div class="modal-content"&gt;&lt;div class="modal-header"&gt;&lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt;&lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt;&lt;/div&gt;&lt;div class="modal-body"&gt;&lt;form name="editForm"&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt;&lt;label for="device"&gt;Name&lt;/label&gt;&lt;input class="form-control" type="text" ng-model="edit.endpoint_name" /&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt;&lt;label for="volume_type"&gt;Protocol&lt;/label&gt;&lt;input class="form-control" type="text" ng-model="edit.protocol" /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt;&lt;label for="size"&gt;Port&lt;/label&gt;&lt;input class="form-control" type="text" ng-model="edit.target_port" /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/form&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt;&lt;button type="button" class="btn btn-default portlist_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt;&lt;button type="button" class="btn btn-primary portlist_btn-modal" data-dismiss="modal" ng-click="portlist_editEntry(edit);"&gt;Save&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;'
	};

});

//--------portlistController controller--------------
//Created a controller for controlling the flow to data of diskApp application
app.controller('portlistController', function($scope) {

	$scope.JSONdata = {};

	$scope.parsingJSON = function(passedjson) {
		$scope.JSONdata = JSON.parse(passedjson);

		$scope.global_configuration = true;
	};

	//$scope.initializedEditModal --&gt; initialize all the variables with values from editJSON to render it into editModal
	//PARAMS : index    --&gt; provide the index value to selected entry from the table
	//         editJSON --&gt; contains the JSON of selected entry
	//         rootFlag --&gt; states whether entry is root entry or ebs entry
	$scope.portlist_initializeEditModal = function (index, editJSON) {
		
		alert('You can set or edit this field in Calm GUI.');
		return;
		
		$scope.edit ={};
		$scope.edit.index = index;
		$scope.edit.endpoint_name = editJSON.endpoint_name;
		$scope.edit.target_port = editJSON.target_port;
		$scope.edit.protocol = editJSON.protocol;
	};

	//$scope.editEntry --&gt; edit the specific entry from the main JSON
	$scope.portlist_editEntry = function (editJSON) {
		var createdJSON = {
			"protocol": editJSON.protocol,
			"target_port": editJSON.target_port,
			"endpoint_name": editJSON.endpoint_name,
			"type": $scope.JSONdata[editJSON.index].type
		};
		$scope.JSONdata[editJSON.index] = createdJSON;

		var service_data = JSON.parse(g_form.getValue('service_data'));
		service_data[$scope.passedTitle][$scope.passedCategory][$scope.passedSysId] = $scope.JSONdata;
		$scope.$emit('updateEvent', service_data);
		g_form.setValue('service_data', JSON.stringify(service_data));
	};
});




app.directive('vdisklistUiPage', function() {
	return {
		restrict: 'A',
		scope: {
			passedTitle: '@',
			passedCategory: '@',
			passedSysId: '@',
			passedJson: '@'
		},
		controller: "vdisklistController",
		template: '&lt;div ng-init="parsingJSON(passedJson);"&gt;&lt;div class="portlist_main-container"&gt;&lt;table class="table" ng-if="provider==\'nutanix\'"&gt;&lt;thead&gt;&lt;tr class="padded-row"&gt;&lt;th class="padded-fields"&gt;Actions&lt;/th&gt;&lt;th class="padded-fields"&gt;Device Type&lt;/th&gt;&lt;th class="padded-fields"&gt;Device Bus&lt;/th&gt;&lt;th class="padded-fields"&gt;&lt;span class="disk_right-indent"&gt;Size (MB)&lt;/span&gt;&lt;/th&gt;&lt;th class="padded-fields" ng-show="global_configuration"&gt;Runtime&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr ng-if="data.data_source_reference==null" ng-repeat="data in JSONdata"&gt;&lt;td class="padded-fields"&gt;&lt;a href="#" data-toggle="modal" data-target="#_editModal" ng-click="initializeEditModal($index, data, false);"&gt;&lt;i id="ebsDataIcon" class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.device_properties.device_type}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.device_properties.disk_address.adapter_type}}&lt;/td&gt;&lt;td class="padded-fields"&gt;&lt;span class="disk_right-indent"&gt;{{data.disk_size_mib}}&lt;/span&gt;&lt;/td&gt;&lt;td class="padded-fields" ng-show="global_configuration"&gt;{{(data.runtime.disk_size_mib)?data.runtime.disk_size_mib:false}}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table class="table" ng-if="provider==\'vmware\'"&gt;&lt;thead&gt;&lt;tr class="padded-row"&gt;&lt;th class="padded-fields"&gt;Actions&lt;/th&gt;&lt;th class="padded-fields"&gt;Adapter Type&lt;/th&gt;&lt;th class="padded-fields"&gt;Device Type&lt;/th&gt;&lt;th class="padded-fields"&gt;&lt;span class="disk_right-indent"&gt;Size (MB)&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr ng-repeat="data in JSONdata"&gt;&lt;td class="padded-fields"&gt;&lt;a href="#" data-toggle="modal" data-target="#_editModal" ng-click="initializeEditModal($index, data, false);"&gt;&lt;i id="ebsDataIcon" class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.adapter_type}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.disk_type}}&lt;/td&gt;&lt;td class="padded-fields"&gt;&lt;span class="disk_right-indent"&gt;{{data.disk_size_mb}}&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog" ng-if="false"&gt;&lt;div class="modal-dialog"&gt;&lt;div class="modal-content"&gt;&lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt;&lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt;&lt;/div&gt;&lt;div class="modal-body"&gt;&lt;form name="editForm" ng-if="provider==\'nutanix\'"&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt;&lt;label for="device"&gt;Device Type&lt;/label&gt;&lt;input class="form-control" type="text" ng-model="edit.device_type"/&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt;&lt;label for="volume_type"&gt;Device Bus&lt;/label&gt;&lt;input class="form-control" type="text" ng-model="edit.device_bus"/&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="size"&gt;Size&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt;&lt;input ng-model="edit.runtime" type="checkbox" ng-disabled="edit.disabled"/&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.size" ng-disabled="edit.disabled"/&gt;&lt;/div&gt;&lt;/div&gt;&lt;/form&gt;&lt;form name="editForm" ng-if="provider==\'vmware\'"&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Adapter Type&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt;&lt;input ng-model="edit.runtime.adapter_type" type="checkbox" ng-disabled="edit.disabled.adapter_type"/&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.adapter_type" ng-disabled="edit.disabled.adapter_type"/&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt; &lt;label for="volume_type"&gt;Device Type&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt;&lt;input ng-model="edit.runtime.disk_type" type="checkbox" ng-disabled="edit.disabled.disk_type"/&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.disk_type" ng-disabled="edit.disabled.disk_type"/&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="size"&gt;Size&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt;&lt;input ng-model="edit.runtime.size" type="checkbox" ng-disabled="edit.disabled.size"/&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.size" ng-disabled="edit.disabled.size"/&gt;&lt;/div&gt;&lt;/div&gt;&lt;/form&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt;&lt;button type="button" class="btn btn-default portlist_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt;&lt;button type="button" class="btn btn-primary portlist_btn-modal" data-dismiss="modal" ng-click="editEntry(edit);"&gt;Save&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog"&gt; &lt;div class="modal-dialog"&gt; &lt;div class="modal-content"&gt; &lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt; &lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt; &lt;/div&gt;&lt;div class="modal-body"&gt; &lt;p style="text-align: center;font-size: medium;"&gt;You can set or edit this field in Calm GUI.&lt;/p&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt;&lt;button type="button" class="btn btn-default disk_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;'
	};
});

app.controller('vdisklistController', function($scope) {

	$scope.JSONdata = {};

	$scope.parsingJSON = function(passedjson) {
		var parsed =JSON.parse(passedjson);
		$scope.JSONdata = parsed;

		var provider='';

		for(var i in parsed)
			if(parsed[i].adapter_type){
				provider = 'vmware';
				break;
			}else{
				provider = 'nutanix';
				break;
			}

		$scope.provider = provider;

		$scope.global_configuration = true;
	};

	//$scope.initializedEditModal --&gt; initialize all the variables with values from editJSON to render it into editModal
	//PARAMS : index    --&gt; provide the index value to selected entry from the table
	//         editJSON --&gt; contains the JSON of selected entry
	//         rootFlag --&gt; states whether entry is root entry or ebs entry
	$scope.initializeEditModal = function (index, editJSON) {
		
		//alert('You can set or edit this field in Calm GUI.');
		return;
		
		$scope.edit ={};
		$scope.edit.index = index;

		if($scope.provider == 'nutanix'){

			$scope.edit.device_type = editJSON.device_properties.device_type;
			$scope.edit.device_bus = editJSON.device_properties.disk_address.adapter_type;
			$scope.edit.size = editJSON.disk_size_mib;
			$scope.edit.runtime = (editJSON.runtime.disk_size_mib==true)?editJSON.runtime.disk_size_mib:false;	
			$scope.edit.disabled = (editJSON.disabled.disk_size_mib+''=='true')?false:true;	

		}else if($scope.provider == 'vmware'){

			$scope.edit.adapter_type = editJSON.adapter_type;
			$scope.edit.disk_type = editJSON.disk_type;
			$scope.edit.size = editJSON.disk_size_mb;

			$scope.edit.runtime = {};
			$scope.edit.runtime.adapter_type = (editJSON.runtime.adapter_type==true)?editJSON.runtime.adapter_type:false;
			$scope.edit.runtime.disk_type = (editJSON.runtime.disk_type==true)?editJSON.runtime.disk_type:false;
			$scope.edit.runtime.size = (editJSON.runtime.disk_size_mb==true)?editJSON.runtime.disk_size_mb:false;

			$scope.edit.disabled = {};
			$scope.edit.disabled.adapter_type = (editJSON.disabled.adapter_type+''=='true')?false:true;
			$scope.edit.disabled.disk_type = (editJSON.disabled.disk_type+''=='true')?false:true;
			$scope.edit.disabled.size = (editJSON.disabled.disk_size_mb+''=='true')?false:true;
		}

	};

	//$scope.editEntry --&gt; edit the specific entry from the main JSON
	$scope.editEntry = function (editJSON) {

		if($scope.provider == 'nutanix'){

			$scope.JSONdata[editJSON.index].device_properties.device_type = editJSON.device_type;
			$scope.JSONdata[editJSON.index].device_properties.disk_address.adapter_type = editJSON.device_bus;
			$scope.JSONdata[editJSON.index].disk_size_mib = editJSON.size;
			$scope.JSONdata[editJSON.index].runtime.disk_size_mib = editJSON.runtime;	

		}else{

			$scope.JSONdata[editJSON.index].adapter_type = editJSON.adapter_type;
			$scope.JSONdata[editJSON.index].disk_type = editJSON.disk_type;
			$scope.JSONdata[editJSON.index].disk_size_mb = editJSON.size;

			$scope.JSONdata[editJSON.index].runtime.adapter_type = editJSON.runtime.adapter_type;
			$scope.JSONdata[editJSON.index].runtime.disk_type = editJSON.runtime.disk_type;
			$scope.JSONdata[editJSON.index].runtime.disk_size_mb = editJSON.runtime.size;

		}

		var service_data = JSON.parse(g_form.getValue('service_data'));
		service_data[$scope.passedTitle][$scope.passedCategory][$scope.passedSysId] = $scope.JSONdata;
		$scope.$emit('updateEvent', service_data);
		g_form.setValue('service_data', JSON.stringify(service_data));
	};
});



app.directive('imagesUiPage', function() {
	return {
		restrict: 'A',
		scope: {
			passedTitle: '@',
			passedCategory: '@',
			passedSysId: '@',
			passedJson: '@'
		},
		controller: "imagesController",
		template: '&lt;div ng-init="parsingJSON(passedJson);"&gt;&lt;div class="portlist_main-container"&gt;&lt;table class="table"&gt;&lt;thead&gt;&lt;tr class="padded-row"&gt;&lt;th class="padded-fields"&gt;Actions&lt;/th&gt;&lt;th class="padded-fields"&gt;Image&lt;/th&gt;&lt;th class="padded-fields"&gt;Device Type&lt;/th&gt;&lt;th class="padded-fields"&gt;Device Bus&lt;/th&gt;&lt;th class="padded-fields"&gt;Bootable&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr ng-if="data.data_source_reference" ng-repeat="data in JSONdata"&gt;&lt;td class="padded-fields"&gt;&lt;a href="#" data-toggle="modal" data-target="#_editModal" ng-click="initializeEditModal($index, data, false);"&gt;&lt;i id="ebsDataIcon" class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.data_source_reference.name}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.device_properties.device_type}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.device_properties.disk_address.adapter_type}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{(data.bootable)?data.bootable:false}}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog" ng-if="false"&gt;&lt;div class="modal-dialog"&gt;&lt;div class="modal-content"&gt;&lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt;&lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt;&lt;/div&gt;&lt;div class="modal-body"&gt;&lt;form name="editForm"&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Image&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input type="checkbox" disabled/&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" style="font-style: italic;" value="Use Calm to set/edit this field" disabled/&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt; &lt;label for="volume_type"&gt;Device Type&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.device_type" type="checkbox" ng-disabled="edit.disabled.device_type" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.device_type" ng-disabled="edit.disabled.device_type" /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="size"&gt;Device Bus&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.adapter_type" type="checkbox" ng-disabled="edit.disabled.adapter_type" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.adapter_type" ng-disabled="edit.disabled.adapter_type" /&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt;&lt;div class="form-group"&gt; &lt;input ng-model="edit.bootable" type="checkbox" /&gt;Bootable&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/form&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt; &lt;button type="button" class="btn btn-default portlist_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt; &lt;button type="button" class="btn btn-primary portlist_btn-modal" data-dismiss="modal" ng-click="editEntry(edit);"&gt;Save&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog"&gt; &lt;div class="modal-dialog"&gt; &lt;div class="modal-content"&gt; &lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt; &lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt; &lt;/div&gt;&lt;div class="modal-body"&gt; &lt;p style="text-align: center;font-size: medium;"&gt;You can set or edit this field in Calm GUI.&lt;/p&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt;&lt;button type="button" class="btn btn-default disk_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;'
	};
});

app.controller('imagesController', function($scope) {

	$scope.JSONdata = {};

	$scope.parsingJSON = function(passedjson) {
		$scope.JSONdata = JSON.parse(passedjson);
		$scope.global_configuration = true;
	};

	//$scope.initializedEditModal --&gt; initialize all the variables with values from editJSON to render it into editModal
	//PARAMS : index    --&gt; provide the index value to selected entry from the table
	//         editJSON --&gt; contains the JSON of selected entry
	//         rootFlag --&gt; states whether entry is root entry or ebs entry
	$scope.initializeEditModal = function (index, editJSON) {
		
		//alert('You can set or edit this field in Calm GUI.');
		return;
		
		$scope.edit ={};
		$scope.edit.index = index;
		$scope.edit.image = editJSON.data_source_reference.name;
		$scope.edit.device_type = editJSON.device_properties.device_type;
		$scope.edit.adapter_type = editJSON.device_properties.disk_address.adapter_type;
		$scope.edit.bootable = (editJSON.bootable==true)?editJSON.bootable:false;

		$scope.edit.runtime = {};
		$scope.edit.runtime.image = false;//(editJSON.runtime.data_source_reference==true)?editJSON.runtime.data_source_reference:false;
		$scope.edit.runtime.device_type = (editJSON.runtime.device_properties &amp;&amp; editJSON.runtime.device_properties.device_type==true)?editJSON.runtime.device_properties.device_type:false;
		$scope.edit.runtime.adapter_type = (editJSON.runtime.device_properties &amp;&amp; editJSON.runtime.device_properties.adapter_type==true)?editJSON.runtime.device_properties.adapter_type:false;

		$scope.edit.disabled = {};
		$scope.edit.disabled.image = true;//(editJSON.runtime.data_source_reference==true)?editJSON.runtime.data_source_reference:false;
		$scope.edit.disabled.device_type = (editJSON.disabled.device_properties &amp;&amp; editJSON.disabled.device_properties.device_type+''=='true')?false:true;
		$scope.edit.disabled.adapter_type = (editJSON.disabled.device_properties &amp;&amp; editJSON.disabled.device_properties.adapter_type+''=='true')?false:true;
	};

	//$scope.editEntry --&gt; edit the specific entry from the main JSON
	$scope.editEntry = function (editJSON) {

		$scope.JSONdata[editJSON.index].data_source_reference.name = editJSON.image;
		$scope.JSONdata[editJSON.index].device_properties.device_type = editJSON.device_type;
		$scope.JSONdata[editJSON.index].device_properties.disk_address.adapter_type = editJSON.adapter_type;
		$scope.JSONdata[editJSON.index].bootable = editJSON.bootable;

		$scope.JSONdata[editJSON.index].runtime.data_source_reference = editJSON.runtime.image;
		$scope.JSONdata[editJSON.index].runtime.device_properties.device_type = editJSON.runtime.device_type;
		$scope.JSONdata[editJSON.index].runtime.device_properties.adapter_type = editJSON.runtime.adapter_type;


		var service_data = JSON.parse(g_form.getValue('service_data'));
		service_data[$scope.passedTitle][$scope.passedCategory][$scope.passedSysId] = $scope.JSONdata;
		$scope.$emit('updateEvent', service_data);
		g_form.setValue('service_data', JSON.stringify(service_data));
	};
});


app.directive('networkAdapterUiPage', function() {
	return {
		restrict: 'A',
		scope: {
			passedTitle: '@',
			passedCategory: '@',
			passedSysId: '@',
			passedJson: '@',
			passedOptions: '@'
		},
		controller: "networkAdapterController",
		template: '&lt;div ng-init="parsingJSON(passedJson, passedOptions);"&gt;&lt;div class="cluster" &gt;Cluster Name : {{clusterName}}&lt;/div&gt;&lt;div class="portlist_main-container"&gt;&lt;table class="table" ng-if="provider==\'nutanix\'"&gt;&lt;thead&gt;&lt;tr class="padded-row"&gt;&lt;th class="padded-fields"&gt;Actions&lt;/th&gt;&lt;th class="padded-fields"&gt;Name&lt;/th&gt;&lt;th class="padded-fields"&gt;Value&lt;/th&gt;&lt;th class="padded-fields"&gt;Runtime&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr ng-repeat="data in JSONdata"&gt;&lt;td class="padded-fields"&gt;&lt;a href="#" data-toggle="modal" data-target="#_editModal" ng-click="initializeEditModal($index, data, false);"&gt;&lt;i id="ebsDataIcon" class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="padded-fields"&gt;NIC-{{$index+1}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{options[data.subnet_reference.uuid].name}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{(data.runtime.subnet_reference.name)?data.runtime.subnet_reference.name:(data.runtime.subnet_reference)?data.runtime.subnet_reference:false}}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table class="table" ng-if="provider==\'vmware\'"&gt;&lt;thead&gt;&lt;tr class="padded-row"&gt;&lt;th class="padded-fields"&gt;Actions&lt;/th&gt;&lt;th class="padded-fields"&gt;Adapter Type&lt;/th&gt;&lt;th class="padded-fields"&gt;Network Type&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr ng-repeat="data in JSONdata"&gt;&lt;td class="padded-fields"&gt;&lt;a href="#" data-toggle="modal" data-target="#_editModal" ng-click="initializeEditModal($index, data, false);"&gt;&lt;i id="ebsDataIcon" class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.nic_type}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.net_name}}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog" ng-if="provider==\'nutanix\'"&gt;&lt;div class="modal-dialog"&gt;&lt;div class="modal-content"&gt;&lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt;&lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt;&lt;/div&gt;&lt;div class="modal-body"&gt;&lt;form name="editForm" ng-if="provider==\'nutanix\'"&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;{{edit.name}}&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt;&lt;input ng-model="edit.runtime" type="checkbox" ng-disabled="edit.disabled"/&gt;Runtime&lt;/div&gt; &lt;select class="form-control" ng-model="edit.value" ng-disabled="edit.disabled"&gt;&lt;option ng-repeat="(key, value)  in options" value="{{key}}"&gt; {{value.name}} | {{value.cluster_name}}&lt;/option&gt; &lt;/select&gt;&lt;/div&gt;&lt;/div&gt;&lt;/form&gt;&lt;form name="editForm" ng-if="provider==\'vmware\'"&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Adapter Type&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt;&lt;input ng-model="edit.runtime.nic_type" type="checkbox" ng-disabled="edit.disabled.nic_type"/&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.nic_type" ng-disabled="edit.disabled.nic_type"/&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Network Type&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt;&lt;input ng-model="edit.runtime.net_name" type="checkbox" ng-disabled="edit.disabled.net_name"/&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.net_name" ng-disabled="edit.disabled.net_name"/&gt;&lt;/div&gt;&lt;/div&gt;&lt;/form&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt;&lt;button type="button" class="btn btn-default portlist_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt;&lt;button type="button" class="btn btn-primary portlist_btn-modal" data-dismiss="modal" ng-click="editEntry(edit);"&gt;Save&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog" ng-if="provider==\'vmware\'"&gt; &gt;&lt;div class="modal-dialog"&gt;&lt;div class="modal-content"&gt;&lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt;&lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt;&lt;/div&gt;&lt;div class="modal-body"&gt;&lt;p style="text-align: center;font-size: medium;"&gt;You can set or edit this field in Calm GUI.&lt;/p&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt;&lt;button type="button" class="btn btn-default disk_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;'
	};
});

app.controller('networkAdapterController', function($scope) {

	$scope.JSONdata = {};
	
	
	$scope.parsingJSON = function(passedjson, passedOptions) {

		var options = JSON.parse(passedOptions);
		var parsed = JSON.parse(passedjson);
		var clusterName='';var clusterUUID='';
		
		$scope.options = options;
		$scope.JSONdata = parsed;
		
		for (var i in parsed){
			var parsedElement = parsed[i];
			if(parsedElement.subnet_reference &amp;&amp; parsedElement.subnet_reference.uuid){
				for(var j in options ){
					if( j == parsedElement.subnet_reference.uuid){
						clusterName = options[j].cluster_name;
						clusterUUID = options[j].cluster_uuid;
					}
				}
			}
		}
		
		$scope.clusterName = clusterName;
		$scope.clusterUUID = clusterUUID;
		
		
		
		
		
		
		$scope.global_configuration = true;

		var provider='';

		for(var i in parsed)
			if(parsed[i].net_name){
				provider = 'vmware';
				break;
			}else{
				provider = 'nutanix';
				break;
			}

		$scope.provider = provider;

	};

	//$scope.initializedEditModal --&gt; initialize all the variables with values from editJSON to render it into editModal
	//PARAMS : index    --&gt; provide the index value to selected entry from the table
	//         editJSON --&gt; contains the JSON of selected entry
	//         rootFlag --&gt; states whether entry is root entry or ebs entry
	$scope.initializeEditModal = function (index, editJSON) {
		$scope.edit ={};
		$scope.edit.index = index;

		if($scope.provider == 'nutanix'){
			$scope.edit.name = 'NIC-'+(index+1);
			$scope.edit.value = (editJSON &amp;&amp; editJSON.subnet_reference)?editJSON.subnet_reference.uuid:'';

			$scope.edit.runtime = (editJSON &amp;&amp; editJSON.runtime &amp;&amp; editJSON.runtime.subnet_reference &amp;&amp; editJSON.runtime.subnet_reference.name)?editJSON.runtime.subnet_reference.name:(editJSON &amp;&amp; editJSON.runtime &amp;&amp; editJSON.runtime.subnet_reference)?editJSON.runtime.subnet_reference:false;	

			$scope.edit.disabled = (editJSON &amp;&amp; editJSON.disabled &amp;&amp; editJSON.disabled.subnet_reference &amp;&amp; editJSON.disabled.subnet_reference.name &amp;&amp; editJSON.disabled.subnet_reference.name+''=='true')?false:(editJSON &amp;&amp; editJSON.disabled &amp;&amp; editJSON.disabled.subnet_reference &amp;&amp; editJSON.disabled.subnet_reference+''=='true')?false:true;	
			
		}else{
			
			//alert('You can set or edit this field in Calm GUI.');
			return;
			
			$scope.edit.nic_type = editJSON.nic_type;
			$scope.edit.net_name = editJSON.net_name;

			$scope.edit.runtime = {};
			$scope.edit.runtime.nic_type = (editJSON.runtime.nic_type)?editJSON.runtime.nic_type:false;
			$scope.edit.runtime.net_name = (editJSON.runtime.net_name)?editJSON.runtime.net_name:false;

			$scope.edit.disabled = {};
			$scope.edit.disabled.nic_type = (editJSON.disabled.nic_type+''=='true')?false:true;
			$scope.edit.disabled.net_name = (editJSON.disabled.net_name+''=='true')?false:true;
		}
	};

	//$scope.editEntry --&gt; edit the specific entry from the main JSON
	$scope.editEntry = function (editJSON) {

		if($scope.provider == 'nutanix'){

			
			if(!$scope.JSONdata[editJSON.index])
				$scope.JSONdata[editJSON.index] = {};
				
			if(!$scope.JSONdata[editJSON.index].subnet_reference){
				$scope.JSONdata[editJSON.index].subnet_reference = {
					"kind": "subnet",
					"type": "",
					"name": "",
					"uuid": ""
				};
			}
			$scope.JSONdata[editJSON.index].subnet_reference.uuid = editJSON.value;
			
			if(!$scope.JSONdata[editJSON.index].runtime)
				$scope.JSONdata[editJSON.index].runtime = {};
			
			$scope.JSONdata[editJSON.index].runtime.subnet_reference = editJSON.runtime;	
			
			if(editJSON.value){
				$scope.clusterName = $scope.options[editJSON.value].cluster_name;
				$scope.clusterUUID = $scope.options[editJSON.value].cluster_uuid;	
			}
			
		}else{

			$scope.JSONdata[editJSON.index].nic_type = editJSON.nic_type;
			$scope.JSONdata[editJSON.index].net_name = editJSON.net_name;

			$scope.JSONdata[editJSON.index].runtime = {};

			$scope.JSONdata[editJSON.index].runtime.nic_type = editJSON.runtime.nic_type;
			$scope.JSONdata[editJSON.index].runtime.net_name = editJSON.runtime.net_name;

		}


		var service_data = JSON.parse(g_form.getValue('service_data'));
		for (var i in service_data) {
		    for (var j in service_data[i]) {
		        if ((j).localeCompare("service_configuration") == 0) {
		              for (var k in service_data[i][j]) {
		                var categary = $scope.passedTitle;
		                if (((k.trim()).localeCompare(categary.trim())) == 0){
							service_data[i][j][k][$scope.passedCategory][$scope.passedSysId] = $scope.JSONdata;
						}		                    
		            }
		        }
		    }
		}
//		$scope.$emit('updateEvent', service_data);
		g_form.setValue('service_data', JSON.stringify(service_data));
	};
});


app.directive('networkProfilesUiPage', function() {
	return {
		restrict: 'A',
		scope: {
			passedTitle: '@',
			passedCategory: '@',
			passedSysId: '@',
			passedJson: '@'
		},
		controller: "networkProfilesController",
		template: '&lt;div ng-init="parsingJSON(passedJson);"&gt;&lt;div class="portlist_main-container"&gt;&lt;table class="table"&gt;&lt;thead&gt;&lt;tr class="padded-row"&gt;&lt;th class="padded-fields"&gt;Actions&lt;/th&gt;&lt;th class="padded-fields"&gt;Nic Name&lt;/th&gt;&lt;th class="padded-fields"&gt;Security Group&lt;/th&gt;&lt;th class="padded-fields"&gt;Virtual Network&lt;/th&gt;&lt;th class="padded-fields"&gt;Subnet&lt;/th&gt;&lt;th class="padded-fields"&gt;Public IP Config Name&lt;/th&gt;&lt;th class="padded-fields"&gt;Public IP Config Allocation Method&lt;/th&gt;&lt;th class="padded-fields"&gt;Public IP Config DNS Label&lt;/th&gt;&lt;th class="padded-fields"&gt;Private IP Config Allocation Method&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr ng-if="data.data_source_reference==null" ng-repeat="data in JSONdata"&gt;&lt;td class="padded-fields"&gt;&lt;a href="#" data-toggle="modal" data-target="#_editModal" ng-click="initializeEditModal($index, data, false);"&gt;&lt;i id="ebsDataIcon" class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.nic_name}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.nsg_name}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.vnet_name}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.subnet_name}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.public_ip_info.ip_name}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.public_ip_info.ip_allocation_method}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.public_ip_info.dns_label}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.private_ip_info.ip_allocation_method}}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog" ng-if="false"&gt;&lt;div class="modal-dialog"&gt;&lt;div class="modal-content"&gt;&lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt;&lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt;&lt;/div&gt;&lt;div class="modal-body"&gt;&lt;form name="editForm"&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Nic Name&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.nic_name" type="checkbox" ng-disabled="edit.disabled.nic_name" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.nic_name" ng-disabled="edit.disabled.nic_name" /&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt; &lt;label for="volume_type"&gt;Security Group&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input type="checkbox" disabled/&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" style="font-style: italic;" value="Use Calm to set/edit this field" disabled/&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Virtual Network&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input type="checkbox" disabled/&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" style="font-style: italic;" value="Use Calm to set/edit this field" disabled/&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt; &lt;label for="volume_type"&gt;Subnet&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input type="checkbox" disabled/&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" style="font-style: italic;" value="Use Calm to set/edit this field" disabled/&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Public IP Config Name&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.ip_name" type="checkbox" ng-disabled="edit.disabled.ip_name" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.ip_name" ng-disabled="edit.disabled.ip_name" /&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt; &lt;label for="volume_type"&gt;Public IP Config Allocation Method&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.public_ip_allocation_method" type="checkbox" ng-disabled="edit.disabled.public_ip_allocation_method" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.public_ip_allocation_method" ng-disabled="edit.disabled.public_ip_allocation_method" /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Public IP Config DNS Label&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.dns_label" type="checkbox" ng-disabled="edit.disabled.dns_label" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.dns_label" ng-disabled="edit.disabled.dns_label" /&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt; &lt;label for="volume_type"&gt;Private IP Config Allocation Method&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.private_ip_allocation_method" type="checkbox" ng-disabled="edit.disabled.private_ip_allocation_method" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.private_ip_allocation_method" ng-disabled="edit.disabled.private_ip_allocation_method" /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/form&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt; &lt;button type="button" class="btn btn-default portlist_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt; &lt;button type="button" class="btn btn-primary portlist_btn-modal" data-dismiss="modal" ng-click="editEntry(edit);"&gt;Save&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog"&gt; &lt;div class="modal-dialog"&gt; &lt;div class="modal-content"&gt; &lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt; &lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt; &lt;/div&gt;&lt;div class="modal-body"&gt; &lt;p style="text-align: center;font-size: medium;"&gt;You can set or edit this field in Calm GUI.&lt;/p&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt;&lt;button type="button" class="btn btn-default disk_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;'
	};
});

app.controller('networkProfilesController', function($scope) {

	$scope.JSONdata = {};

	$scope.parsingJSON = function(passedjson) {
		$scope.JSONdata = JSON.parse(passedjson);
		$scope.global_configuration = true;
	};

	//$scope.initializedEditModal --&gt; initialize all the variables with values from editJSON to render it into editModal
	//PARAMS : index    --&gt; provide the index value to selected entry from the table
	//         editJSON --&gt; contains the JSON of selected entry
	//         rootFlag --&gt; states whether entry is root entry or ebs entry
	$scope.initializeEditModal = function (index, editJSON) {
		
		//alert('You can set or edit this field in Calm GUI.');
		return;
		
		$scope.edit ={};
		$scope.edit.index = index;
		$scope.edit.nic_name = editJSON.nic_name;
		$scope.edit.nsg_name = editJSON.nsg_name;
		$scope.edit.vnet_name = editJSON.vnet_name;
		$scope.edit.subnet_name = editJSON.subnet_name;
		$scope.edit.ip_name = editJSON.public_ip_info.ip_name;
		$scope.edit.public_ip_allocation_method = editJSON.public_ip_info.ip_allocation_method;
		$scope.edit.dns_label = editJSON.public_ip_info.dns_label;
		$scope.edit.private_ip_allocation_method = editJSON.private_ip_info.ip_allocation_method;

		$scope.edit.runtime = {};
		$scope.edit.runtime.nic_name = (editJSON.runtime.nic_name)?editJSON.runtime.nic_name:false;
		$scope.edit.runtime.nsg_name = false;//(editJSON.runtime.nsg_name)?editJSON.runtime.nsg_name:false;
		$scope.edit.runtime.vnet_name = false;//(editJSON.runtime.vnet_name)?editJSON.runtime.vnet_name:false;
		$scope.edit.runtime.subnet_name = false;//(editJSON.runtime.subnet_name)?editJSON.runtime.subnet_name:false;
		$scope.edit.runtime.ip_name = (editJSON.runtime.public_ip_info &amp;&amp; editJSON.runtime.public_ip_info.ip_name)?editJSON.runtime.public_ip_info.ip_name:false;
		$scope.edit.runtime.public_ip_allocation_method = (editJSON.runtime.public_ip_info &amp;&amp; editJSON.runtime.public_ip_info.ip_allocation_method)?editJSON.runtime.public_ip_info.ip_allocation_method:false;
		$scope.edit.runtime.dns_label = (editJSON.runtime.public_ip_info &amp;&amp; editJSON.runtime.public_ip_info.dns_label)?editJSON.runtime.public_ip_info.dns_label:false;
		$scope.edit.runtime.private_ip_allocation_method = (editJSON.runtime.private_ip_info &amp;&amp; editJSON.runtime.private_ip_info.ip_allocation_method)?editJSON.runtime.private_ip_info.ip_allocation_method:false;

		$scope.edit.disabled = {};
		$scope.edit.disabled.nic_name = (editJSON.disabled.nic_name+''=='true')?false:true;
		$scope.edit.disabled.nsg_name = true;//(editJSON.disabled.nsg_name+''=='true')?false:true;
		$scope.edit.disabled.vnet_name = true;//(editJSON.disabled.vnet_name+''=='true')?false:true;
		$scope.edit.disabled.subnet_name = true;//(editJSON.disabled.subnet_name+''=='true')?false:true;
		$scope.edit.disabled.ip_name = (editJSON.disabled.public_ip_info &amp;&amp; editJSON.disabled.public_ip_info.ip_name+''=='true')?false:true;
		$scope.edit.disabled.public_ip_allocation_method = (editJSON.disabled.public_ip_info &amp;&amp; editJSON.disabled.public_ip_info.ip_allocation_method+''=='true')?false:true;
		$scope.edit.disabled.dns_label = (editJSON.disabled.public_ip_info &amp;&amp; editJSON.disabled.public_ip_info.dns_label+''=='true')?false:true;
		$scope.edit.disabled.private_ip_allocation_method = (editJSON.disabled.private_ip_info &amp;&amp; editJSON.disabled.private_ip_info.ip_allocation_method+''=='true')?false:true;

	};

	//$scope.editEntry --&gt; edit the specific entry from the main JSON
	$scope.editEntry = function (editJSON) {

		$scope.JSONdata[editJSON.index].nic_name = editJSON.nic_name;
		$scope.JSONdata[editJSON.index].nsg_name = editJSON.nsg_name;
		$scope.JSONdata[editJSON.index].vnet_name = editJSON.vnet_name;
		$scope.JSONdata[editJSON.index].subnet_name = editJSON.subnet_name;
		$scope.JSONdata[editJSON.index].public_ip_info.ip_name = editJSON.ip_name;
		$scope.JSONdata[editJSON.index].public_ip_info.ip_allocation_method = editJSON.public_ip_allocation_method;
		$scope.JSONdata[editJSON.index].public_ip_info.dns_label = editJSON.dns_label;
		$scope.JSONdata[editJSON.index].private_ip_info.ip_allocation_method = editJSON.private_ip_allocation_method;


		$scope.JSONdata[editJSON.index].runtime.nic_name = editJSON.runtime.nic_name;
		$scope.JSONdata[editJSON.index].runtime.nsg_name = editJSON.runtime.nsg_name;
		$scope.JSONdata[editJSON.index].runtime.vnet_name = editJSON.runtime.vnet_name;
		$scope.JSONdata[editJSON.index].runtime.subnet_name = editJSON.runtime.subnet_name;

		$scope.JSONdata[editJSON.index].runtime.public_ip_info = {};
		$scope.JSONdata[editJSON.index].runtime.private_ip_info  = {};

		$scope.JSONdata[editJSON.index].runtime.public_ip_info.ip_name = editJSON.runtime.ip_name;
		$scope.JSONdata[editJSON.index].runtime.public_ip_info.ip_allocation_method = editJSON.runtime.public_ip_allocation_method;
		$scope.JSONdata[editJSON.index].runtime.public_ip_info.dns_label = editJSON.runtime.dns_label;
		$scope.JSONdata[editJSON.index].runtime.private_ip_info.ip_allocation_method = editJSON.runtime.private_ip_allocation_method;

		var service_data = JSON.parse(g_form.getValue('service_data'));
		service_data[$scope.passedTitle][$scope.passedCategory][$scope.passedSysId] = $scope.JSONdata;
		$scope.$emit('updateEvent', service_data);
		g_form.setValue('service_data', JSON.stringify(service_data));
	};
});



app.directive('simpleDiskUiPage', function() {
	return {
		restrict: 'A',
		scope: {
			passedTitle: '@',
			passedCategory: '@',
			passedSysId: '@',
			passedJson: '@'
		},
		controller: "simpleDiskController",
		template: '&lt;div ng-init="parsingJSON(passedJson);"&gt;&lt;div class="portlist_main-container"&gt;&lt;table class="table"&gt;&lt;thead&gt;&lt;tr class="padded-row"&gt;&lt;th class="padded-fields"&gt;Actions&lt;/th&gt;&lt;th class="padded-fields"&gt;Name&lt;/th&gt;&lt;th class="padded-fields"&gt;Use existing disk&lt;/th&gt;&lt;th class="padded-fields"&gt;Disk&lt;/th&gt;&lt;th class="padded-fields"&gt;Storage Type&lt;/th&gt;&lt;th class="padded-fields"&gt;Source Image&lt;/th&gt;&lt;th class="padded-fields"&gt;Size in GB&lt;/th&gt;&lt;th class="padded-fields"&gt;Delete when instance is deleted&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr ng-if="data.data_source_reference==null" ng-repeat="data in JSONdata"&gt;&lt;td class="padded-fields"&gt;&lt;a href="#" data-toggle="modal" data-target="#_editModal" ng-click="initializeEditModal($index, data, false);"&gt;&lt;i id="ebsDataIcon" class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="padded-fields"&gt;{{(data.boot)?\'BOOT DISK\':\'ADDITIONAL DISK\'}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{(data.source)?true:false}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.source}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.initializeParams.diskType}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.initializeParams.sourceImage}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.initializeParams.diskSizeGb}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.autoDelete}}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog" ng-if="false"&gt;&lt;div class="modal-dialog"&gt;&lt;div class="modal-content"&gt;&lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt;&lt;h4 class="modal-title"&gt;{{(edit.boot)?\'BOOT DISK\':\'ADDITIONAL DISK\'}}&lt;/h4&gt;&lt;/div&gt;&lt;div class="modal-body"&gt;&lt;form name="editForm"&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt;&lt;div class="form-group"&gt; &lt;input ng-model="edit.useExisting" type="checkbox" /&gt;Use existing disk&lt;/div&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt; &lt;label for="volume_type"&gt;Disk&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.source" type="checkbox" ng-disabled="edit.disabled.source" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.source" ng-disabled="edit.disabled.source" /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Storage Type&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.diskType" type="checkbox" ng-disabled="edit.disabled.diskType" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.diskType" ng-disabled="edit.disabled.diskType" /&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt; &lt;label for="volume_type"&gt;Source Image&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.sourceImage" type="checkbox" ng-disabled="edit.disabled.sourceImage" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.sourceImage" ng-disabled="edit.disabled.sourceImage" /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Size in GB&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.diskSizeGb" type="checkbox" ng-disabled="edit.disabled.diskSizeGb" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.diskSizeGb" ng-disabled="edit.disabled.diskSizeGb" /&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt;&lt;div class="form-group"&gt; &lt;input ng-model="edit.autoDelete" type="checkbox" ng-disabled="edit.disabled.autoDelete" /&gt;Delete when instance is deleted&lt;/div&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.autoDelete" type="checkbox" ng-disabled="edit.disabled.autoDelete" /&gt;Runtime&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/form&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt; &lt;button type="button" class="btn btn-default portlist_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt; &lt;button type="button" class="btn btn-primary portlist_btn-modal" data-dismiss="modal" ng-click="editEntry(edit);"&gt;Save&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog"&gt; &lt;div class="modal-dialog"&gt; &lt;div class="modal-content"&gt; &lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt; &lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt; &lt;/div&gt;&lt;div class="modal-body"&gt; &lt;p style="text-align: center;font-size: medium;"&gt;You can set or edit this field in Calm GUI.&lt;/p&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt;&lt;button type="button" class="btn btn-default disk_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;'
	};
});

app.controller('simpleDiskController', function($scope) {

	$scope.JSONdata = {};

	$scope.parsingJSON = function(passedjson) {
		$scope.JSONdata = JSON.parse(passedjson);
		$scope.global_configuration = true;
	};

	//$scope.initializedEditModal --&gt; initialize all the variables with values from editJSON to render it into editModal
	//PARAMS : index    --&gt; provide the index value to selected entry from the table
	//         editJSON --&gt; contains the JSON of selected entry
	//         rootFlag --&gt; states whether entry is root entry or ebs entry
	$scope.initializeEditModal = function (index, editJSON) {
		
		//alert('You can set or edit this field in Calm GUI.');
		return;
		
		$scope.edit ={};
		$scope.edit.index = index;
		$scope.edit.boot = editJSON.boot;
		$scope.edit.diskType = editJSON.initializeParams.diskType;
		$scope.edit.sourceImage = editJSON.initializeParams.sourceImage;
		$scope.edit.diskSizeGb = editJSON.initializeParams.diskSizeGb;
		$scope.edit.autoDelete = editJSON.autoDelete;

		$scope.edit.useExisting = (editJSON.source)?true:false;
		$scope.edit.source = editJSON.source;

		$scope.edit.runtime = {};
		$scope.edit.runtime.diskType = (editJSON.runtime.initializeParams &amp;&amp; editJSON.runtime.initializeParams.diskType)?editJSON.runtime.initializeParams.diskType:false;
		$scope.edit.runtime.sourceImage = (editJSON.runtime.initializeParams &amp;&amp; editJSON.runtime.initializeParams.sourceImage)?editJSON.runtime.initializeParams.sourceImage:false;
		$scope.edit.runtime.diskSizeGb = (editJSON.runtime.initializeParams &amp;&amp; editJSON.runtime.initializeParams.diskSizeGb)?editJSON.runtime.initializeParams.diskSizeGb:false;
		$scope.edit.runtime.autoDelete = (editJSON.runtime.autoDelete)?editJSON.runtime.autoDelete:false;		
		$scope.edit.runtime.source = (editJSON.runtime.source)?editJSON.runtime.source:false;		


		$scope.edit.disabled = {};
		$scope.edit.disabled.diskType = (editJSON.disabled.initializeParams &amp;&amp; editJSON.disabled.initializeParams.diskType+''=='true')?false:true;
		$scope.edit.disabled.sourceImage = (editJSON.disabled.initializeParams &amp;&amp; editJSON.disabled.initializeParams.sourceImage+''=='true')?false:true;
		$scope.edit.disabled.diskSizeGb = (editJSON.disabled.initializeParams &amp;&amp; editJSON.disabled.initializeParams.diskSizeGb+''=='true')?false:true;
		$scope.edit.disabled.autoDelete = (editJSON.disabled.autoDelete+''=='true')?false:true;
		$scope.edit.disabled.source = (editJSON.disabled.source+''=='true')?false:true;	
	};

	//$scope.editEntry --&gt; edit the specific entry from the main JSON
	$scope.editEntry = function (editJSON) {

		$scope.JSONdata[editJSON.index].initializeParams.diskType = editJSON.diskType;
		$scope.JSONdata[editJSON.index].initializeParams.sourceImage = editJSON.sourceImage;
		$scope.JSONdata[editJSON.index].initializeParams.diskSizeGb = editJSON.diskSizeGb;
		$scope.JSONdata[editJSON.index].autoDelete = editJSON.autoDelete;

		$scope.JSONdata[editJSON.index].source = editJSON.source;

		$scope.JSONdata[editJSON.index].runtime.initializeParams = {};

		$scope.JSONdata[editJSON.index].runtime.initializeParams.diskType = editJSON.runtime.diskType;
		$scope.JSONdata[editJSON.index].runtime.initializeParams.sourceImage = editJSON.runtime.sourceImage;
		$scope.JSONdata[editJSON.index].runtime.initializeParams.diskSizeGb = editJSON.runtime.diskSizeGb;
		$scope.JSONdata[editJSON.index].runtime.autoDelete = editJSON.runtime.autoDelete;
		$scope.JSONdata[editJSON.index].runtime.source = editJSON.runtime.source;


		var service_data = JSON.parse(g_form.getValue('service_data'));
		service_data[$scope.passedTitle][$scope.passedCategory][$scope.passedSysId] = $scope.JSONdata;
		$scope.$emit('updateEvent', service_data);
		g_form.setValue('service_data', JSON.stringify(service_data));
	};
});




app.directive('blankDisksUiPage', function() {
	return {
		restrict: 'A',
		scope: {
			passedTitle: '@',
			passedCategory: '@',
			passedSysId: '@',
			passedJson: '@'
		},
		controller: "blankDisksController",
		template: '&lt;div ng-init="parsingJSON(passedJson);"&gt;&lt;div class="portlist_main-container"&gt;&lt;table class="table"&gt;&lt;thead&gt;&lt;tr class="padded-row"&gt;&lt;th class="padded-fields"&gt;Actions&lt;/th&gt;&lt;th class="padded-fields"&gt;Disk Type&lt;/th&gt;&lt;th class="padded-fields"&gt;Disk Name&lt;/th&gt;&lt;th class="padded-fields"&gt;Size in GB&lt;/th&gt;&lt;th class="padded-fields"&gt;Delete when instance is deleted&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr ng-repeat="data in JSONdata"&gt;&lt;td class="padded-fields"&gt;&lt;a href="#" data-toggle="modal" data-target="#_editModal" ng-click="initializeEditModal($index, data, false);"&gt;&lt;i id="ebsDataIcon" class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.disk_type}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.name}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.sizeGb}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.autoDelete}}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog" ng-if="false"&gt;&lt;div class="modal-dialog"&gt;&lt;div class="modal-content"&gt;&lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt;&lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt;&lt;/div&gt;&lt;div class="modal-body"&gt;&lt;form name="editForm"&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Disk Type&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.disk_type" type="checkbox" ng-disabled="edit.disabled.disk_type" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.disk_type" ng-disabled="edit.disabled.disk_type" /&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt; &lt;label for="volume_type"&gt;Disk Name&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.name" type="checkbox" ng-disabled="edit.disabled.name" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.name" ng-disabled="edit.disabled.name" /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Size in GB&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.sizeGb" type="checkbox" ng-disabled="edit.disabled.sizeGb" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.sizeGb" ng-disabled="edit.disabled.sizeGb" /&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt;&lt;div class="form-group"&gt; &lt;input ng-model="edit.autoDelete" type="checkbox" ng-disabled="!global_configuration" ng-disabled="edit.disabled.autoDelete" /&gt;Delete when instance is deleted&lt;/div&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.autoDelete" type="checkbox" ng-disabled="edit.disabled.autoDelete" /&gt;Runtime&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/form&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt; &lt;button type="button" class="btn btn-default portlist_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt; &lt;button type="button" class="btn btn-primary portlist_btn-modal" data-dismiss="modal" ng-click="editEntry(edit);"&gt;Save&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog"&gt; &lt;div class="modal-dialog"&gt; &lt;div class="modal-content"&gt; &lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt; &lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt; &lt;/div&gt;&lt;div class="modal-body"&gt; &lt;p style="text-align: center;font-size: medium;"&gt;You can set or edit this field in Calm GUI.&lt;/p&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt;&lt;button type="button" class="btn btn-default disk_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;'
	};
});

app.controller('blankDisksController', function($scope) {

	$scope.JSONdata = {};

	$scope.parsingJSON = function(passedjson) {
		$scope.JSONdata = JSON.parse(passedjson);
		$scope.global_configuration = true;
	};

	//$scope.initializedEditModal --&gt; initialize all the variables with values from editJSON to render it into editModal
	//PARAMS : index    --&gt; provide the index value to selected entry from the table
	//         editJSON --&gt; contains the JSON of selected entry
	//         rootFlag --&gt; states whether entry is root entry or ebs entry
	$scope.initializeEditModal = function (index, editJSON) {
		
		//alert('You can set or edit this field in Calm GUI.');
		return;
		
		$scope.edit ={};
		$scope.edit.index = index;
		$scope.edit.disk_type = editJSON.disk_type;
		$scope.edit.name = editJSON.name;
		$scope.edit.sizeGb = editJSON.sizeGb;
		$scope.edit.autoDelete = editJSON.autoDelete;

		$scope.edit.runtime = {};
		$scope.edit.runtime.disk_type = (editJSON.runtime.disk_type)?editJSON.runtime.disk_type:false;
		$scope.edit.runtime.name = (editJSON.runtime.name)?editJSON.runtime.name:false;
		$scope.edit.runtime.sizeGb = (editJSON.runtime.sizeGb)?editJSON.runtime.sizeGb:false;
		$scope.edit.runtime.autoDelete = (editJSON.runtime.autoDelete)?editJSON.runtime.autoDelete:false;		

		$scope.edit.disabled = {};
		$scope.edit.disabled.disk_type = (editJSON.disabled.disk_type+''=='true')?false:true;	
		$scope.edit.disabled.name = (editJSON.disabled.name+''=='true')?false:true;	
		$scope.edit.disabled.sizeGb = (editJSON.disabled.sizeGb+''=='true')?false:true;	
		$scope.edit.disabled.autoDelete = (editJSON.disabled.autoDelete+''=='true')?false:true;	
	};

	//$scope.editEntry --&gt; edit the specific entry from the main JSON
	$scope.editEntry = function (editJSON) {

		$scope.JSONdata[editJSON.index].disk_type = editJSON.disk_type;
		$scope.JSONdata[editJSON.index].name = editJSON.name;
		$scope.JSONdata[editJSON.index].sizeGb = editJSON.sizeGb;
		$scope.JSONdata[editJSON.index].autoDelete = editJSON.autoDelete;

		$scope.JSONdata[editJSON.index].runtime = {};

		$scope.JSONdata[editJSON.index].runtime.disk_type = editJSON.runtime.disk_type;
		$scope.JSONdata[editJSON.index].runtime.name = editJSON.runtime.name;
		$scope.JSONdata[editJSON.index].runtime.sizeGb = editJSON.runtime.sizeGb;
		$scope.JSONdata[editJSON.index].runtime.autoDelete = editJSON.runtime.autoDelete;

		var service_data = JSON.parse(g_form.getValue('service_data'));
		service_data[$scope.passedTitle][$scope.passedCategory][$scope.passedSysId] = $scope.JSONdata;
		$scope.$emit('updateEvent', service_data);
		g_form.setValue('service_data', JSON.stringify(service_data));
	};
});


app.directive('networkingUiPage', function() {
	return {
		restrict: 'A',
		scope: {
			passedTitle: '@',
			passedCategory: '@',
			passedSysId: '@',
			passedJson: '@'
		},
		controller: "networkingController",
		template: '&lt;div ng-init="parsingJSON(passedJson);"&gt;&lt;div class="portlist_main-container"&gt;&lt;table class="table"&gt;&lt;thead&gt;&lt;tr class="padded-row"&gt;&lt;th class="padded-fields"&gt;Actions&lt;/th&gt;&lt;th class="padded-fields"&gt;Network&lt;/th&gt;&lt;th class="padded-fields"&gt;Subnetwork&lt;/th&gt;&lt;th class="padded-fields"&gt;Access Configuration Name&lt;/th&gt;&lt;th class="padded-fields"&gt;Access Configuration Type&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr ng-repeat="data in JSONdata"&gt;&lt;td class="padded-fields"&gt;&lt;a href="#" data-toggle="modal" data-target="#_editModal" ng-click="initializeEditModal($index, data, false);"&gt;&lt;i id="ebsDataIcon" class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.network}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.subnetwork}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.accessConfigs[0].name}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.accessConfigs[0].config_type}}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog" ng-if="false"&gt;&lt;div class="modal-dialog"&gt;&lt;div class="modal-content"&gt;&lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt;&lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt;&lt;/div&gt;&lt;div class="modal-body"&gt;&lt;form name="editForm"&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Network&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.network" type="checkbox" ng-disabled="edit.disabled.network" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.network" ng-disabled="edit.disabled.network" /&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt; &lt;label for="volume_type"&gt;Subnetwork&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.subnetwork" type="checkbox" ng-disabled="edit.disabled.subnetwork" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.subnetwork" ng-disabled="edit.disabled.subnetwork" /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Access Configuration Name&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.name" type="checkbox" ng-disabled="edit.disabled.name" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.name" ng-disabled="edit.disabled.name" /&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Access Configuration Type&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.config_type" type="checkbox" ng-disabled="edit.disabled.config_type" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.config_type" ng-disabled="edit.disabled.config_type" /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/form&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt; &lt;button type="button" class="btn btn-default portlist_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt; &lt;button type="button" class="btn btn-primary portlist_btn-modal" data-dismiss="modal" ng-click="editEntry(edit);"&gt;Save&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog"&gt; &lt;div class="modal-dialog"&gt; &lt;div class="modal-content"&gt; &lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt; &lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt; &lt;/div&gt;&lt;div class="modal-body"&gt; &lt;p style="text-align: center;font-size: medium;"&gt;You can set or edit this field in Calm GUI.&lt;/p&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt;&lt;button type="button" class="btn btn-default disk_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;'
	};
});

app.controller('networkingController', function($scope) {

	$scope.JSONdata = {};

	$scope.parsingJSON = function(passedjson) {
		$scope.JSONdata = JSON.parse(passedjson);
		$scope.global_configuration = true;
	};

	//$scope.initializedEditModal --&gt; initialize all the variables with values from editJSON to render it into editModal
	//PARAMS : index    --&gt; provide the index value to selected entry from the table
	//         editJSON --&gt; contains the JSON of selected entry
	//         rootFlag --&gt; states whether entry is root entry or ebs entry
	$scope.initializeEditModal = function (index, editJSON) {
		
		//alert('You can set or edit this field in Calm GUI.');
		return;
		
		$scope.edit ={};
		$scope.edit.index = index;
		$scope.edit.network = editJSON.network;
		$scope.edit.subnetwork = editJSON.subnetwork;
		$scope.edit.name = editJSON.accessConfigs[0].name;
		$scope.edit.config_type = editJSON.accessConfigs[0].config_type;

		$scope.edit.runtime = {};
		$scope.edit.runtime.network = (editJSON.runtime.network)?editJSON.runtime.network:false;
		$scope.edit.runtime.subnetwork = (editJSON.runtime.subnetwork)?editJSON.runtime.subnetwork:false;
		$scope.edit.runtime.name = (editJSON.runtime.accessConfigs[0].name)?editJSON.runtime.accessConfigs[0].name:false;
		$scope.edit.runtime.config_type = (editJSON.runtime.accessConfigs[0].config_type)?editJSON.runtime.accessConfigs[0].config_type:false;		

		$scope.edit.disabled = {};
		$scope.edit.disabled.network = (editJSON.disabled.network+''=='true')?false:true;	
		$scope.edit.disabled.subnetwork = (editJSON.disabled.subnetwork+''=='true')?false:true;	
		$scope.edit.disabled.name = (editJSON.disabled.accessConfigs[0].name+''=='true')?false:true;	
		$scope.edit.disabled.config_type = (editJSON.disabled.accessConfigs[0].config_type+''=='true')?false:true;	

	};

	//$scope.editEntry --&gt; edit the specific entry from the main JSON
	$scope.editEntry = function (editJSON) {

		$scope.JSONdata[editJSON.index].network = editJSON.network;
		$scope.JSONdata[editJSON.index].subnetwork = editJSON.subnetwork;
		$scope.JSONdata[editJSON.index].accessConfigs[0].name = editJSON.name;
		$scope.JSONdata[editJSON.index].accessConfigs[0].config_type = editJSON.config_type;

		$scope.JSONdata[editJSON.index].runtime = {};

		$scope.JSONdata[editJSON.index].runtime.network = editJSON.runtime.network;
		$scope.JSONdata[editJSON.index].runtime.subnetwork = editJSON.runtime.subnetwork;

		$scope.JSONdata[editJSON.index].runtime.accessConfigs = [];
		$scope.JSONdata[editJSON.index].runtime.accessConfigs[0] = {};

		$scope.JSONdata[editJSON.index].runtime.accessConfigs[0].name = editJSON.runtime.name;
		$scope.JSONdata[editJSON.index].runtime.accessConfigs[0].config_type = editJSON.runtime.config_type;

		var service_data = JSON.parse(g_form.getValue('service_data'));
		service_data[$scope.passedTitle][$scope.passedCategory][$scope.passedSysId] = $scope.JSONdata;
		$scope.$emit('updateEvent', service_data);
		g_form.setValue('service_data', JSON.stringify(service_data));
	};
});




app.directive('storageProfileDataDisksUiPage', function() {
	return {
		restrict: 'A',
		scope: {
			passedTitle: '@',
			passedCategory: '@',
			passedSysId: '@',
			passedJson: '@'
		},
		controller: "storageProfileDataDisksController",
		template: '&lt;div ng-init="parsingJSON(passedJson);"&gt;&lt;div class="portlist_main-container"&gt;&lt;table class="table"&gt;&lt;thead&gt;&lt;tr class="padded-row"&gt;&lt;th class="padded-fields"&gt;Actions&lt;/th&gt;&lt;th class="padded-fields"&gt;Disk Name&lt;/th&gt;&lt;th class="padded-fields"&gt;Storage Type&lt;/th&gt;&lt;th class="padded-fields"&gt;Disk Caching Type&lt;/th&gt;&lt;th class="padded-fields"&gt;Size (GB)&lt;/th&gt;&lt;th class="padded-fields"&gt;Disk LUN&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr ng-repeat="data in JSONdata"&gt;&lt;td class="padded-fields"&gt;&lt;a href="#" data-toggle="modal" data-target="#_editModal" ng-click="initializeEditModal($index, data, false);"&gt;&lt;i id="ebsDataIcon" class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.name}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.storage_type}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.caching_type}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.size_in_gb}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.lun}}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog" ng-if="false"&gt;&lt;div class="modal-dialog"&gt;&lt;div class="modal-content"&gt;&lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt;&lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt;&lt;/div&gt;&lt;div class="modal-body"&gt;&lt;form name="editForm"&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Disk Name&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.name" type="checkbox" ng-disabled="edit.disabled.name" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.name" ng-disabled="edit.disabled.name" /&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt; &lt;label for="volume_type"&gt;Storage Type&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.storage_type" type="checkbox" ng-disabled="edit.disabled.storage_type" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.storage_type" ng-disabled="edit.disabled.storage_type" /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Disk Caching Type&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.caching_type" type="checkbox" ng-disabled="edit.disabled.caching_type" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.caching_type" ng-disabled="edit.disabled.caching_type" /&gt;&lt;/div&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Size (GB)&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.size_in_gb" type="checkbox" ng-disabled="edit.disabled.size_in_gb" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.size_in_gb" ng-disabled="edit.disabled.size_in_gb" /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Disk LUN&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.lun" type="checkbox" ng-disabled="edit.disabled.lun" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.lun" ng-disabled="edit.disabled.lun" /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/form&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt; &lt;button type="button" class="btn btn-default portlist_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt; &lt;button type="button" class="btn btn-primary portlist_btn-modal" data-dismiss="modal" ng-click="editEntry(edit);"&gt;Save&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog"&gt; &lt;div class="modal-dialog"&gt; &lt;div class="modal-content"&gt; &lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt; &lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt; &lt;/div&gt;&lt;div class="modal-body"&gt; &lt;p style="text-align: center;font-size: medium;"&gt;You can set or edit this field in Calm GUI.&lt;/p&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt;&lt;button type="button" class="btn btn-default disk_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;'
	};
});

app.controller('storageProfileDataDisksController', function($scope) {

	$scope.JSONdata = {};

	$scope.parsingJSON = function(passedjson) {
		$scope.JSONdata = JSON.parse(passedjson);
		$scope.global_configuration = true;
	};

	//$scope.initializedEditModal --&gt; initialize all the variables with values from editJSON to render it into editModal
	//PARAMS : index    --&gt; provide the index value to selected entry from the table
	//         editJSON --&gt; contains the JSON of selected entry
	//         rootFlag --&gt; states whether entry is root entry or ebs entry
	$scope.initializeEditModal = function (index, editJSON) {
		
		//alert('You can set or edit this field in Calm GUI.');
		return;
		
		$scope.edit ={};
		$scope.edit.index = index;
		$scope.edit.name = editJSON.name;
		$scope.edit.storage_type = editJSON.storage_type;
		$scope.edit.caching_type = editJSON.caching_type;
		$scope.edit.size_in_gb = editJSON.size_in_gb;
		$scope.edit.lun = editJSON.lun;

		$scope.edit.runtime = {};
		$scope.edit.runtime.name = (editJSON.runtime.name)?editJSON.runtime.name:false;
		$scope.edit.runtime.storage_type = (editJSON.runtime.storage_type)?editJSON.runtime.storage_type:false;
		$scope.edit.runtime.caching_type = (editJSON.runtime.caching_type)?editJSON.runtime.caching_type:false;
		$scope.edit.runtime.size_in_gb = (editJSON.runtime.size_in_gb)?editJSON.runtime.size_in_gb:false;
		$scope.edit.runtime.lun = (editJSON.runtime.lun)?editJSON.runtime.lun:false;

		$scope.edit.disabled = {};
		$scope.edit.disabled.name = (editJSON.disabled.name+''=='true')?false:true;	
		$scope.edit.disabled.storage_type = (editJSON.disabled.storage_type+''=='true')?false:true;	
		$scope.edit.disabled.caching_type = (editJSON.disabled.caching_type+''=='true')?false:true;	
		$scope.edit.disabled.size_in_gb = (editJSON.disabled.size_in_gb+''=='true')?false:true;	
		$scope.edit.disabled.lun = (editJSON.disabled.lun+''=='true')?false:true;	

	};

	//$scope.editEntry --&gt; edit the specific entry from the main JSON
	$scope.editEntry = function (editJSON) {

		$scope.JSONdata[editJSON.index].name = editJSON.name;
		$scope.JSONdata[editJSON.index].storage_type = editJSON.storage_type;
		$scope.JSONdata[editJSON.index].caching_type = editJSON.caching_type;
		$scope.JSONdata[editJSON.index].size_in_gb = editJSON.size_in_gb;
		$scope.JSONdata[editJSON.index].lun = editJSON.lun;


		$scope.JSONdata[editJSON.index].runtime = {};

		$scope.JSONdata[editJSON.index].runtime.name = editJSON.runtime.name;
		$scope.JSONdata[editJSON.index].runtime.storage_type = editJSON.runtime.storage_type;
		$scope.JSONdata[editJSON.index].runtime.caching_type = editJSON.runtime.caching_type;
		$scope.JSONdata[editJSON.index].runtime.size_in_gb = editJSON.runtime.size_in_gb;
		$scope.JSONdata[editJSON.index].runtime.lun = editJSON.runtime.lun;

		var service_data = JSON.parse(g_form.getValue('service_data'));
		service_data[$scope.passedTitle][$scope.passedCategory][$scope.passedSysId] = $scope.JSONdata;
		$scope.$emit('updateEvent', service_data);
		g_form.setValue('service_data', JSON.stringify(service_data));
	};
});





app.directive('osProfileUiPage', function() {
	return {
		restrict: 'A',
		scope: {
			passedTitle: '@',
			passedCategory: '@',
			passedSysId: '@',
			passedJson: '@'
		},
		controller: "osProfileController",
		template: '&lt;div ng-init="parsingJSON(passedJson);"&gt;&lt;div class="portlist_main-container"&gt;&lt;table class="table"&gt;&lt;thead&gt;&lt;tr class="padded-row"&gt;&lt;th class="padded-fields"&gt;Actions&lt;/th&gt;&lt;th class="padded-fields"&gt;Secrets&lt;/th&gt;&lt;th class="padded-fields"&gt;Vault ID&lt;/th&gt;&lt;th class="padded-fields"&gt;Certificate Count&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr ng-if="JSONdata.length!=0" ng-repeat="data in JSONdata"&gt;&lt;td class="padded-fields"&gt;&lt;a href="#" data-toggle="modal" data-target="#_editModal" ng-click="initializeEditModal($index, data, false);"&gt;&lt;i id="ebsDataIcon" class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="padded-fields"&gt;{{$index+1}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.source_vault_id}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.vault_certificates.length}}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog" ng-if="false"&gt;&lt;div class="modal-dialog"&gt;&lt;div class="modal-content"&gt;&lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt;&lt;h4 class="modal-title"&gt;Secrets&lt;/h4&gt;&lt;/div&gt;&lt;div class="modal-body"&gt;&lt;form name="editForm"&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt; &lt;label for="device"&gt;Vault ID&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.source_vault_id" type="checkbox" ng-disabled="edit.disabled.source_vault_id" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="edit.source_vault_id" ng-disabled="edit.disabled.source_vault_id" /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="row" ng-repeat="(i, data) in edit.vault_certificates"&gt;&lt;div class="col-md-12"&gt; &lt;label for="device"&gt;Certificate Config URL&lt;/label&gt;&lt;div ng-show="global_configuration" class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime.vault_certificates[i].certificate_url" type="checkbox" ng-disabled="edit.disabled.vault_certificates[i].certificate_url" /&gt;Runtime&lt;/div&gt; &lt;input class="form-control" type="text" ng-model="data.certificate_url" ng-disabled="edit.disabled.vault_certificates[i].certificate_url" /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/form&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt; &lt;button type="button" class="btn btn-default portlist_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt; &lt;button type="button" class="btn btn-primary portlist_btn-modal" data-dismiss="modal" ng-click="editEntry(edit);"&gt;Save&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog"&gt; &lt;div class="modal-dialog"&gt; &lt;div class="modal-content"&gt; &lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt; &lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt; &lt;/div&gt;&lt;div class="modal-body"&gt; &lt;p style="text-align: center;font-size: medium;"&gt;You can set or edit this field in Calm GUI.&lt;/p&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt;&lt;button type="button" class="btn btn-default disk_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;'
	};
});

app.controller('osProfileController', function($scope) {

	$scope.JSONdata = {};

	$scope.parsingJSON = function(passedjson) {
		$scope.JSONdata = JSON.parse(passedjson);
		$scope.global_configuration = true;
	};

	//$scope.initializedEditModal --&gt; initialize all the variables with values from editJSON to render it into editModal
	//PARAMS : index    --&gt; provide the index value to selected entry from the table
	//         editJSON --&gt; contains the JSON of selected entry
	//         rootFlag --&gt; states whether entry is root entry or ebs entry
	$scope.initializeEditModal = function (index, editJSON) {
		
		//alert('You can set or edit this field in Calm GUI.');
		return;
		
		$scope.edit ={};
		$scope.edit.index = index;
		$scope.edit.source_vault_id = editJSON.source_vault_id;
		$scope.edit.vault_certificates = editJSON.vault_certificates;

		$scope.edit.runtime = {};
		$scope.edit.runtime.source_vault_id = (editJSON.runtime.source_vault_id)?editJSON.runtime.source_vault_id:false;

		$scope.edit.disabled = {};
		$scope.edit.disabled.source_vault_id = (editJSON.disabled.source_vault_id+''=='true')?false:true;	

		for(var i in editJSON.vault_certificates){

			if(!$scope.edit.runtime.vault_certificates)
				$scope.edit.runtime.vault_certificates = {};

			if(!$scope.edit.runtime.vault_certificates[i])
				$scope.edit.runtime.vault_certificates[i]={};


			$scope.edit.runtime.vault_certificates[i].certificate_url = (editJSON.runtime.vault_certificates &amp;&amp; editJSON.runtime.vault_certificates[i] &amp;&amp; editJSON.runtime.vault_certificates[i].certificate_url)?editJSON.runtime.vault_certificates[i].certificate_url:false;	

			if(!$scope.edit.disabled.vault_certificates)
				$scope.edit.disabled.vault_certificates = {};

			if(!$scope.edit.disabled.vault_certificates[i])
				$scope.edit.disabled.vault_certificates[i]={};


			$scope.edit.disabled.vault_certificates[i].certificate_url = (editJSON.disabled.vault_certificates &amp;&amp; editJSON.disabled.vault_certificates[i] &amp;&amp; editJSON.disabled.vault_certificates[i].certificate_url+''=='true')?false:true;	
		}

	};

	//$scope.editEntry --&gt; edit the specific entry from the main JSON
	$scope.editEntry = function (editJSON) {

		$scope.JSONdata[editJSON.index].source_vault_id = editJSON.source_vault_id;
		$scope.JSONdata[editJSON.index].vault_certificates = editJSON.vault_certificates;

		$scope.JSONdata[editJSON.index].runtime = editJSON.runtime;

		var service_data = JSON.parse(g_form.getValue('service_data'));
		service_data[$scope.passedTitle][$scope.passedCategory][$scope.passedSysId] = $scope.JSONdata;
		$scope.$emit('updateEvent', service_data);
		g_form.setValue('service_data', JSON.stringify(service_data));
	};
});






app.directive('guestCustomizationDhcpUiPage', function() {
	return {
		restrict: 'A',
		scope: {
			passedTitle: '@',
			passedCategory: '@',
			passedSysId: '@',
			passedJson: '@'
		},
		controller: "guestCustomizationDhcpController",
		template: '&lt;div ng-init="parsingJSON(passedJson);"&gt;&lt;div class="portlist_main-container"&gt; &lt;table class="table"&gt; &lt;thead&gt; &lt;tr class="padded-row"&gt; &lt;th class="padded-fields"&gt;Actions&lt;/th&gt; &lt;th class="padded-fields"&gt;SNo.&lt;/th&gt; &lt;th class="padded-fields"&gt;Use DHCP&lt;/th&gt; &lt;th class="padded-fields"&gt;Runtime&lt;/th&gt; &lt;/tr&gt;&lt;/thead&gt; &lt;tbody&gt; &lt;tr ng-if="JSONdata.length!=0" ng-repeat="data in JSONdata"&gt; &lt;td class="padded-fields"&gt;&lt;a href="#" data-toggle="modal" data-target="#_editModal" ng-click="initializeEditModal($index, data, false);"&gt;&lt;i id="ebsDataIcon" class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="padded-fields"&gt;{{$index+1}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{data.is_dhcp}}&lt;/td&gt;&lt;td class="padded-fields"&gt;{{(data.runtime.is_dhcp)?data.runtime.is_dhcp:false}}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog" ng-if="false"&gt; &lt;div class="modal-dialog"&gt; &lt;div class="modal-content"&gt; &lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt; &lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt; &lt;/div&gt;&lt;div class="modal-body"&gt; &lt;form name="editForm"&gt; &lt;div class="row"&gt; &lt;div class="col-md-6"&gt; &lt;div class="form-group"&gt; &lt;input ng-model="edit.is_dhcp" type="checkbox" ng-disabled="edit.disabled"/&gt;Use DHCP&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;div class="disk_runtime-checkbox"&gt; &lt;input ng-model="edit.runtime" type="checkbox" ng-disabled="edit.disabled"/&gt;Runtime&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/form&gt; &lt;/div&gt;&lt;div class="modal-footer"&gt; &lt;button type="button" class="btn btn-default portlist_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt; &lt;button type="button" class="btn btn-primary portlist_btn-modal" data-dismiss="modal" ng-click="editEntry(edit);"&gt;Save&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="_editModal" class="modal fade" role="dialog"&gt; &lt;div class="modal-dialog"&gt; &lt;div class="modal-content"&gt; &lt;div class="modal-header"&gt; &lt;a data-dismiss="modal" class="close" href="#"&gt;&lt;i class="icon-cross"&gt;&lt;/i&gt;&lt;/a&gt; &lt;h4 class="modal-title"&gt;Edit Row&lt;/h4&gt; &lt;/div&gt;&lt;div class="modal-body"&gt; &lt;p style="text-align: center;font-size: medium;"&gt;You can set or edit this field in Calm GUI.&lt;/p&gt;&lt;/div&gt;&lt;div class="modal-footer"&gt;&lt;button type="button" class="btn btn-default disk_btn-modal" data-dismiss="modal"&gt;Close&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;'
	};
});

app.controller('guestCustomizationDhcpController', function($scope) {

	$scope.JSONdata = {};

	$scope.parsingJSON = function(passedjson) {
		$scope.JSONdata = JSON.parse(passedjson);
		$scope.global_configuration = true;
	};

	//$scope.initializedEditModal --&gt; initialize all the variables with values from editJSON to render it into editModal
	//PARAMS : index    --&gt; provide the index value to selected entry from the table
	//         editJSON --&gt; contains the JSON of selected entry
	//         rootFlag --&gt; states whether entry is root entry or ebs entry
	$scope.initializeEditModal = function (index, editJSON) {
		
		//alert('You can set or edit this field in Calm GUI.');
		return;
		
		$scope.edit ={};
		$scope.edit.index = index;
		$scope.edit.is_dhcp = editJSON.is_dhcp;

		$scope.edit.runtime = (editJSON.runtime.is_dhcp)?editJSON.runtime.is_dhcp:false;
		$scope.edit.disabled = (editJSON.disabled.is_dhcp+''=='true')?false:true;	

	};

	//$scope.editEntry --&gt; edit the specific entry from the main JSON
	$scope.editEntry = function (editJSON) {

		$scope.JSONdata[editJSON.index].is_dhcp = editJSON.is_dhcp;

		$scope.JSONdata[editJSON.index].runtime.is_dhcp = editJSON.runtime;

		var service_data = JSON.parse(g_form.getValue('service_data'));
		service_data[$scope.passedTitle][$scope.passedCategory][$scope.passedSysId] = $scope.JSONdata;
		$scope.$emit('updateEvent', service_data);
		g_form.setValue('service_data', JSON.stringify(service_data));
	};
});










app.directive('multiSelectUiPage', function() {
	return {
		restrict: 'A',
		scope: {
			passedTitle: '@',
			passedCategory: '@',
			passedSysId: '@',
			passedJson: '@',
			passedProfile: '@'
		},
		controller: "multiSelectController",
		template: '&lt;div ng-init="parsingJSON(passedJson);"&gt;&lt;div style="display: -webkit-inline-box; margin: 3px;" &gt;&lt;div ng-repeat="(option, selection) in options" ng-if="selection==true"&gt;&lt;span style="margin: 3px; padding: 5px; border: 1px solid rgba(0, 126, 255, 0.24); line-height: 13px; font-size: 12px; display: inline-block; border-radius: 2px; background-color: rgba(0, 126, 255, 0.08); color: #007eff;"&gt;{{option}}&lt;a href="#" ng-click="unselectOption(option)"&gt;&lt;i class="icon-cross" style="padding-left: 7px;font-size: 11px;margin-top: -4px;"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;select class="form-control" ng-disabled="JSONData.isdisabled+\'\'==\'true\'" ng-change="selectOption()" ng-model="valueAt"&gt;&lt;option ng-repeat="(option, selection) in options" ng-if="selection==false" value="{{option}}" &gt;{{option}}&lt;/option&gt; &lt;/select&gt;&lt;/div&gt;'
	};
});

app.controller('multiSelectController', function($scope) {
	
	$scope.finalArr = [];
	
	$scope.parsingJSON = function(passedJson){
		var parsedJson = JSON.parse(passedJson);
		
		var options = parsedJson.options;
		var value = (parsedJson.value+'').split(',');
		var tmp = {};
		
		for(var i=0; i&lt;options.length; i++){
			
			if(!options[i])
				continue;
			
			tmp[options[i]] = false;
		}
		
		for(var i=0; i&lt;value.length; i++){
			
			if(!value[i])
				continue;
			
			$scope.finalArr.push(value[i]);
			tmp[value[i]] = true;	
		}
	
	//	console.log(JSON.stringify(tmp));
		
		$scope.options = tmp;
	};
	
	$scope.selectOption = function(prof){
		
		if(!$scope.valueAt)
			return;
		
		$scope.options[$scope.valueAt] = true;
		$scope.finalArr.push($scope.valueAt);
		var service_data = JSON.parse(g_form.getValue('service_data'));
		for(var i = 0; i &lt; service_data.length; i++) {
			if(service_data[i].profile + "" == $scope.passedProfile + "") {
				service_data[i]["service_configuration"][$scope.passedTitle][$scope.passedCategory][$scope.passedSysId].value = $scope.finalArr.toString();
				break;
			}
		}
		$scope.$emit('updateEvent', service_data);
		g_form.setValue('service_data', JSON.stringify(service_data));
	};
	
	$scope.unselectOption = function(val){
		
		$scope.options[val] = false;
		
		var arr = $scope.finalArr;
		var index = arr.indexOf(val);
		if (index &gt; -1) {
			arr.splice(index, 1);
		}
		$scope.finalArr = arr;
		
		var service_data = JSON.parse(g_form.getValue('service_data'));
		for(var i = 0; i &lt; service_data.length; i++) {
			if(service_data[i].profile + "" == $scope.passedProfile + "") {
				service_data[i]["service_configuration"][$scope.passedTitle][$scope.passedCategory][$scope.passedSysId].value = $scope.finalArr.toString();
				break;
			}
		}
		$scope.$emit('updateEvent', service_data);
		g_form.setValue('service_data', JSON.stringify(service_data));
	};	
	
});
]]&gt;&lt;/script&gt;&lt;script_name&gt;Calm_Catalog_Service_Config_Script&lt;/script_name&gt;&lt;sys_class_name&gt;sys_ui_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-11-04 20:08:14&lt;/sys_created_on&gt;&lt;sys_id&gt;db9441c237212300fdfc097973990e67&lt;/sys_id&gt;&lt;sys_mod_count&gt;767&lt;/sys_mod_count&gt;&lt;sys_name&gt;x_nuta2_nutanix_ca.Calm_Catalog_Service_&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_script_db9441c237212300fdfc097973990e67&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-07-07 12:59:24&lt;/sys_updated_on&gt;&lt;ui_type&gt;0&lt;/ui_type&gt;&lt;use_scoped_format&gt;false&lt;/use_scoped_format&gt;&lt;/sys_ui_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>542656977</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.4.5 Complete Build">346d737d1bb0011081326464604bcb11</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-01-03 07:26:35</sys_created_on>
<sys_id>b06dbb7d1bb0011081326464604bcbb4</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17e1ed138610000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-01-03 07:26:35</sys_updated_on>
<table/>
<target_name>x_nuta2_nutanix_ca.Calm_Catalog_Service_</target_name>
<type>UI Script</type>
<update_domain>global</update_domain>
<update_guid>8d6b4a4846d530107c6828749f0c3cc0</update_guid>
<update_guid_history>8d6b4a4846d530107c6828749f0c3cc0:542656977,58942fe78fcdb410c339b14a3c68dcf6:-1909333385,92236327c9cdb4106e8f22b64025149e:542656977,6e3067a3a6cdb410924f755dee83c992:307137934,3b9e9beb108db4106bf3b9193173f512:188902735,c14e1b6bac8db410837340bff93203fc:482371759,8cd467136905b410fb1048bb66f94751:-1276783679,9701a71fc9c1b410a0dbd4e35b68a8f5:103044125,cc30e71b7ec1b410b6a72678df6e701e:-445511144,df8f17d756c1b410a288ff7952dec6c0:838107981,1b0c9b9fa581b410bffa78378e24f8b1:-1448809835,d83b935b7fc1b4107eddedc7c2971fb8:293732596,0f929fdf1e81b41041add780b4422521:897399134,5f6cc397b181b410b2fe8519b9277f23:959326907,66e51915eae7a850d8b6abc02c3a5f52:-835124005,9f176a93a553e050729950acf234da56:232693249,f5f469323997605091e3131350e4e829:-286937192,b21d597e63576050e8648e55fe17de2c:-543839925,52a3cd703c17e010e61fe4239ce5176e:994703595,3f6381bc8613e010ef79632a8051b836:270554027,607a612490d7a0102b12b5329720fbfb:1806947322,94e9a1649ad7a01091ab37f668ef6046:533134160,983929e0e1d7a01011baf82abc41a50b:1454109492,0808eda01fd7a0108bb3b7a6cb1b5a28:-304264966,fd876560f3d7a010ea349b9b946f47e8:1806947322,1c26e12021d7a0101d3c80b4482fb6f9:1478319491,e81525e85b97a01061abd9349c22f8ca:2028741381,7c142daced97a0109196ed55983a497a:-874218811,95726d688597a010c9edae68573c3d53:-1451464577,236061682597a010aed899addb5d9020:-596473119,4dae19283397a01008ef346e949a64ca:703727431,a50b45ec3b17a010c7f9c1c2208a4d6c:1690448569,d21a05ac9b17a010feb51c71cf5aef39:45926763,59f705ac1617a010d161c2d7a5cdbb32:-2013706751,78b5052cfc17a01024d563bda2c69b9d:453832083,4e140924e017a010b78252ebb861d36c:-1508475450,ef6db0a06f17a0109b2c9fd08d39b3a7:1364406432,88dbb460aa17a0100a36269d0f7fe811:-1666651089,18b8880d4204a01088c41287d5e350e6:246116453,4001b9930c231410417f8ab2ea23caf8:1767434771,453e6553d2231410ca1da03cdf865eaf:825901171,066d65df13efd0100ea59083700da2e8:1643924948,2ebaa9d759afd0107d813b3bdb8bc56c:-1494678267,b5418d5388afd0101cee4e2756962885:1732416772,8666709b5f6fd0109312b4df880ae430:-1346398271,72e7e7c3c2abd01059e36bc09eb7bb0e:-1684032790,bc13ab0fac6bd0109bcf4e1f6a281e2e:-1187775007,14b79b50d7eb5850e4ac7dd48b5ccaff:-297630690,372ed5cf7f5754505d9184643349ac8c:1751867310,1ad9b5f9db97141035cd34b70b9239a0:-1178534172,746042a47b1b1c104c12902e975bfee6:1294871344,11cebd64861b1c10ebd19b5899365602:-861225798,fc6bb920b61b1c10f508c7d694b19086:-470153584,b62b55e89b971c10701cc3653d2efe80:833119490,ed869f00fe97d8109f77b435469b3b8b:2078304810,3ab9870c3657d8104a4416741440a7c8:169806781,59248f488157d8103f48082defb8a426:1082902511,1a5dc2847ed3d8105c40267a86820d3e:1070983823,5a3bc648aa93d8102f7c645d98d3abb0:-599813286,f3dacb10a71f1010fde64bc8710b279f:1483677380,47372623e64b14d00603be1b22a9a005:1207972165,613919a73f4714d0bb8bff393c818936:-178128522,6e4a3ca3e40714d0188ac98ace57148c:-270649826,78f201def5329490eb49a63970e7bd42:-178128522,1f019a9d757ad0904524e544ab15a7b6:1734213370,e2d4db09a7b2d090064c965edb991c93:-1461006110,ce84134960b2d090b9d21e2d33068296:1734213370,bbf29bc500b2d090a9f82fe995c0b778:1191389125,0b02938576b2d090049d32f049591f76:-1744599707,986f0b05c2b2d090500afadd7ff0ce8d:-1867850108,66ae07c1a0b2d090a17854870b4e53c6:94811044,67adc3c1ceb2d090fe9f3c8190986fcd:1734213370,dcd6a689df32d0909e42f07e5fd66c8a:-1397289451,9bb52249dd32d090cd8aca447ae47c9f:-593556491,e6f4ea09ef32d0901fbf03f40f07e8a2:-754183921,be746a094232d0902583874248013b22:-809043005,c05a5ecdf6fe9090d25357d673b52a30:543359535,709b354d79be9090f0d6420fffe383c1:695471405,dedaf9c9d9be90905b230e309ddf888c:-1956543231,d1197d89e2be9090d06de2bdf919572d:-107136696,2d57358910be9090f77855c4af58804f:890227838,18d3f14595be9090a4a7ff9b9a47fbe1:336611294,1d61f505c7be90903e5f9a370368bdd4:-1943831536,e380b905adbe90900bd34cebfbf8d55e:-391155984,e6ef6d41aebe90902396aa2be4f11661:531034376,c4a91cb84b7610901cab15ec0bc1d795:1734213370,12cd1fe8d67a5c50c6d30100543939a4:-192600108,2b988e84f9fad8506fa837e8ebe527ce:1734213370,7305868483fad850bed8690fc6cff16c:1567337331,1f9098d3bd6a18502f3293e0e4ef7a5b:1652222679,0e260e227d6e9450d7f197b621ffa53a:-819200622,38854eeedd2e9450c5ee3695ddce0557:-436979822,9c2486eee72e9450073ad98a60718d04:1102520626,93520a2e152e9450a3396a231f8a12bb:-1141342446,ef61c26ee92e9450a32c786110faff54:-618451054,bc3979a66d2e94505e6436a12486fdd2:-266094126,d7c2925d8f3e9010c2d93f23c99580bf:-82494624,5d041265bda2d050aabe263db4978f6f:905186290,a01f17f4c36e1050514acd9aba441f18:-819200622,a3be97b45a6e10503f8af615ed62edc3:-1151893866,a41b4ff4f12e1050e79bbf51c6954a89:-1980941514,db6f6634cbea1050b9fba9b40233b49e:-1151893866,69b7a7391a96d4106f5d4b8b213b7efd:1249780560,978a5b7d4756d410f8d649eb0d1bf005:1970777982,9319dff9e256d410ef4522c82b3927f9:462237429,620f433d1e16d4103123a740125c6482:1709956878,a5e3a8b5765a941016c96ac792a6d865:-196782839,d78160758d5a9410cf4dc2cf9a0fc287:1535480701,c5006035955a9410b90f4d4d25b9600e:-1711644659,d358d8fd501a941003ffde342f4d2005:-82960582,96f5187dd61a94109fcbe9f093ee598c:-2142979804,9b90d0391e1a94107f4376ba11b675b2:366082948,235fbf69fcda5410c11f6519b50d3673:938363492,4b3fff692ada54105efb0c788deda951:1088897028,47c6532962965410d5920189d464a54c:1400352789,450e43a1fb96541077dbb975a909b151:-1101333874,3e4c0721a4965410c211a1d888741609:-886552607,da6ef6a512565410bc4d1d45bac31ecd:-804748579,7adcb2a58a56541058c718cde447f082:1181455100,66abf6a1ce565410951e9a75765c5f4e:-1361067728,b815f661b2565410a7b826fbea1dde14:1657652454,0c02f2ed5f1654103fdb743ba9e26f4f:-1793419166,7a60be2d7616541048c06934004ffb38:1866460047,834e262d91165410c6e462a9e2ea94e5:855860207,71ecee6960165410d81357c68e56297a:1842475669,fc1962296116541039f142280c7a7042:2102346355,c437a6e59816541047a490eb8da92a1e:29699666,6ad42a6576165410f093c6f10c7e9ebe:1756225823,97442e2548165410561610499aae7a91:-1540032851,9ab22ea9ded254100ee89f711be67921:-2135041522,d3b2122922d254108b3048e7ef3460fd:194453756,c5cc4225fbd25410ab1bbd24b0aab3ea:-1367987025,5ea90e6143d25410c5c08b858e3b253b:339309881,81f50a2141d25410f5c9afd848de35ed:950879051,87b4c62de09254105f9ca9e8ffffa7bc:574571,a59eb1e9ab92541046de84e54ad58d3e:-1732626329,d237271d661e14108e2749814ac336a2:1877196325,324dd3952d1e141027dfa8909ce51b1b:-1643776281,28e044cd8bd6d010c4c5716054341028:-492819395,1ef4fb38c3d6d0108e735653a39bded0:-1346583153,80997ab0b93010107ab53500786fc273:-824638093,91bbbaece3bc50105580ff9af1b38af6:-824638093,a6cabeac1dbc5010e1b6948364bdc039:-2039579104,02d79c05708c5c1066b40112bf4bad0e:1737653246,88771cc16a8c5c10c99da9d7b554e7e2:679039966,2d9554c1908c5c10c2099f2662d1f3a4:-873098818,a3159881ba8c5c108202f02197a15187:734937726,82a49481af8c5c1070a80fac5a35fe0f:-1567352386,f232dccd114c5c10f424f29e82614a14:-1717880384,b8001c0d184c5c10a2a5e35c85e00130:286045440,e6dec8c9ee4c5c107f61c7fe7d2fa346:-232711584,a6a04481124c5c1098cf2b4f1da56f20:-2067744671,c245f7b4aa0c5c1099060992c712d591:1908451675,6f19d9a4b53f4010f25b7050719f8930:-861419333,e6939f6fd3ce449012e5e38c9529be07:1908451675,97d412f8cfcc33009548fd247eedade2:-1431915761,529392b8e3cc3300a093d45dd188c3ef:-589527608,3bb21ef478cc33005cd5b75850d6efd1:-801963142,3e2256380dcc3300de8ef1c592fadd36:1092752787,43705674dfcc3300e06ad476c824a7a1:855820526,76dcbd24c50433001592da757a610cc8:545347597,2b3cfd24c90433007a77c7fe844b6eeb:2009474843,674afda07004330050d36577cbb51c91:545347597,8a58f9a0500433005ca6cccd6fbf74e4:-992094261,f60731a0b70433005795dc0405c55cc5:1579140894,9a4631a05b04330003b7d7d6bb954790:647942130,22753120ea043300cf5855f383d0d947:-1612744334,3744b520620433006f881b848808514a:1585317422,15d37120c0043300b1ef0f02f69e5934:748363634,2473fdac44c0330075f9c352b67029d9:-108338589,2e02f9ace5c0330062d2642474ec892b:-1982890284,aa81b1ac6ec03300055372f7a292febb:1488394879,8266e524e0c033000d724484364547dd:1099059551,2e34ede04bc033005d2b29640e635f13:-297108577,d9e32d60cdc0330037a4e66af691a776:-2109123476,4ec36de01bc033008f1a0fd6e1b7866e:2144499577,aa3ac1ac7b4033002353b1c80f7f389b:2085147135,e20e78a0f94033001472ad9062bc1fb3:-117929350,a5dd78a089403300a5f64c7406366caf:-1748347026,34c860a4df003300342a13995ee80018:-1799966414,4118a064ed0033007923b2f0a261bdf1:-912143918,5c8439a752bf2300fab27a2847ea789c:-1799966414,2b4cc56f603f23001c33284e62b3d964:-1142318777,473acdebb13f2300f8a1b6ade47987d6:322336713,a6b1398879b7230091b9e4ab252156d7:-162248238,821b3a90b4222300868c95f746aa868b:-1964749064,683c2100ad622300cb91d871879af888:-1683450280,cc93812ec8d2630049f59667d087606f:1630276649,c07dd6c753826300a893970eff47bae4:423890997,e85d1ac73082630055d9db66b024bd12:1760520153,0246399a338ea300d73c1432b9526be4:423890997,6206f5129ecea30030b7dc2a76cb3993:261511307,929531de398ea30076cdaf2f5782f202:-314292382,44c6d635f00a63009968565d2e9d9761:-501876213,ecad94bdd8c26300e85526adb1bb6c25:1820963679,60ac5831c1066300c47dc71b3d393e05:68997323,cf7bd8bd62c263008f5e9ee019759d3f:-294119870,114bd8bd7bc263002f7ba2ee06d0d3ce:-152280491,be49903d39c26300efff847e505d5b13:289862433,fba8943d7bc26300cd058846f5e572d0:529087331,2d481879e8c26300e9e59f5576bb8255:651187334,0667503d8ec263006c3c3ae1714091e5:-444004130,978498f9cdc2630095b990cfa90337c8:1643805839,a4e35879c5c2630086efa7b2ce5fb102:482306599,cfb2d8395ac26300a5ebe48e1ca4971d:-1426255984,badfc8394fc2630016d383c37e61f542:1297902004,81fec8399bc263005a515c143c5d4c18:-308594361,236e88f50ac26300a2b8f80b3c2f5eed:-502869701,f3bc88b55bc2630034c4f76202b22fe9:1152770812,c59c88f51bc26300870fd4e03733d685:1233708474,7efb00358fc26300cfa54a574497f371:1758977364,6b8b00f56bc26300470a0ec093b012e5:600965492,6bda007547c26300dd29766dab8eeab6:-1992371162,d1e7887179c26300cfd48d2b6665595d:1931670243,1d07083514c26300051caea5b9fd1093:-40972797,9bc44871afc2630092ddca5c6e1c3d31:-275644943,4314c8b109c263008a5349e25cfbb245:804908593,ed30732952826300da30765308d4af21:-359776069,a5103be559826300237df6a1384f90b1:812276184,0abea7a54f82630094bf865325776ae3:-359776069,d06e6b65b4826300ca0c11ec8c3da15c:-1014399151,619d2b65ba826300f3c32c924a793b3f:-132391791,138b2365ca826300f1d1b4fc189566bf:-150317108,842b6b25cc8263007f10f913a57a7cdb:-1103409994,f2cae725c68263007756e7181fff7b91:1274341228,1088a721b3826300569bc9c73f7909e5:5560923,3767a7a1b882630049c3909351f465b9:-697249986,f0b2a7ed93426300bf5b713cd6f0eab8:-494204128,d104d0a48e8200500b235b24238be690:1156528091,32425b901ccecc10f7762343045571e2:1891700713,fac8125201ff7300d4ad46115de91ec8:-864059845,855b44dd4c3b3300decec60d89c36ec1:872815447,f26e4ec41fff330061ef88b7d6a96e4f:905768446,2cdaba1cfbf373004a87279fa629e684:-369800677,1bf63ad43cf373005514f4d8e2b7597d:-1706832671,f1bce658ecb3730096544bd92c4c8048:1795324476,b36e6e0816bf730035c5bc0cedcbb5b5:1980911416,4b3ea6c434bf7300a58123d3f070fcef:1880773507,ff844e00807f73007110e6c004768b62:-363887976,1e14ceccf13f73001909af9c97751c2b:-1479339910,8163c68c533f7300c8a4da7d56dd2c8d:46151046,87238e4c163f73009fa0e4fc35b1bc7a:1099001884,f1e0420cce3f73009f7e694b85f1aa26:-434349723,719f31c8673f7300ab84e837b54a97ff:1099001884,2a5fb1c8983f730026d15e1ab580eaae:46151046,1b9bbd44053f7300c1cd1e32fe35696a:-1761445183,ceaa39c0823f73005c605b7c6c408862:1109367705,9ab97144043f73006b065a8c41155aad:-857792399,144ba5c8c1fb73008055774fd5a451f4:1691362612,7dc96984affb7300ecdefdbf95133145:272346575,2ca6e1c41cfb730090c50a9041b8ffed:1691362612,1c156d8072fb7300e787ff10fcc848bf:2059170102,7d92e940b7fb730031360a49a1762df6:1691362612,0d71e98090fb730005a3befb0ae6f46e:1630886574,954974d2a4a7f30048b6d3243875f5e6:1442339271,6fa8f4d66aa7f30083eaa6bf5a12ea40:2031417170,1be1b892a4a7f300aecdddbca46fcc47:-1462736450,05a174d219a7f300bae2f9ce0cc1fb79:-1537896416,50417c9216a7f30042acea787a924367:1443802611,d501349203a7f300476bc4cc9984e906:470040613,8f9034924ea7f3009004492387ee7301:1551364701,46307892fda7f3002ccc8707ba412664:1527497040,6befe092d4a7f300dcab750017746ed0:1843777612,fa0ca09e4f67f3002580b07216978fab:-1712254407,82dae8da8567f30075c6712aa0ba455c:545395961,2b5a60dace67f3003ca42da7a709d92a:1868482493,b548281e5067f300ad127f2e3f706274:-1191390793,9987ecda9e67f30053a8ab9802183118:-412632523,da86a81a7467f30077ba92995ae58251:-1310269035,8e26e8daf367f30057af018684caa057:-1792929615,74e5a49ace67f300ee2346aa6dc9281a:1802101333,5f65a89ac067f3005e379091473a9af0:1212616961,3d2524d67267f300347c8bb2de896473:-1862005645,36ce5c96ea67f30015f6bc685a8bf797:1212616961,effd9096ea67f300cdcbcb1f4fcd0fe2:-3963708,c17f6bca0ce3f30062e4a85e399e3654:1645169393,9cae6f8a17e3f300b90de082d3a8a92a:-95450270,7722a6c29523f300ceadbd6a05ecaf74:1010710111,2521ae42ab23f3001e454610692b25e0:-729817642,ac9f5ac28123f3008746bc86702bf32d:-1232322930,5e5e9e42ac23f300bba4d241ccffb0f0:2034890521,55612f1e4aa337006a957b85134da86b:-1782959649,5cd99f86482bf3008189cb66d88002ca:2081398751,aef81706512bf300f24cff719254021c:-353008248,16459b82882bf3002681bae67175d337:-871809540,092453027b2bf300f4e29f2ac3fe4340:1132041635,26d113ced1e7f3005bc1ae5faa459129:-1568975281,d48f8b4e57e7f300503315901d956fee:1576580410,c45f8b4e0be7f300513a10ffb48cceac:563879992,8aed8f4a5fe7f300c1db82b5bdc8cbc8:-583761212,c05a8f8a85e7f30061aa44a2bba3ae41:-1724656148,5ff8c34a82e7f3009c34e5dea5899534:-888772668,1a66cf4679e7f300355003379754e45d:1676776655,d335830690e7f3007312701981509af0:-1574140542,8cfe57156caf33002e0e81bc63552052:1882374621,adb3b7c5cd273300091366748842fd2b:30331230,54d077051027330097d2a6ccf904b342:1608500991,e8cf19117ee77300efba0c81c0181723:-58426942,b28f91112de77300f5c15fa264dd315d:683298488,45fe9d9d73a773003c00706774605130:-1597509034,07ae9d5dd6a7730036534d6e130b1dd4:1153075132,f56b9d5d51a773009d06be377a6cb73c:1008386012,0b2b2f4d65a3730092eaca9b47564ef0:-1590341781,527e5b85f2a37300c3ea5429a6a5aaac:1008386012,d93e9b45f7a37300dd208a4931a2c033:-196245695,0e995701baa3730033efc11e1f76fc08:16416134,9908f1a31c9f33008657fb492f4c3370:-1859093595,0b16b1a3349f33000ccfcc513ff46a33:2119377325,70c5712fc85f3300baed43bfc5d458e3:-326713781,5270392f385f3300501ebccb614be27a:-1796477561,bf5c616fba1f3300e9434da83298161b:-1317971764,07ebedeb895f3300c2ba292f233a704c:-485684187,f241e84d165f7300d82106165a869c65:1760905029,a509eb1cf497330094bf784d91da52cd:-269343621,9517af5887973300367c358be0cee578:-928620908,13756318ec973300bb67d6aaae0ec908:612110085,31b2a314f2973300aff6854e285dd232:-819001053,556397542e5733004fd7e48cde997a5d:-928620908,5f700354fe173300d0f28d9c7a9c5362:-387955778,7f300b54d91733004985f8f2fcf9bdf0:-653988709,217f3a54b9173300407fd57bd415b0ed:2107630462,d45f3654041733008937a73f54c2fd53:-1058306351,3f3b361051173300a2c9ccca1de4a011:-1299263595,feda3e506a17330035c91276314b1aa1:-2107978398,10ee8a03228fb300bcca4bf17c3c45be:-928620908,ff3e8acf094fb300ae6cffb791920b22:-579721247,216af14fd10fb300c21daff6e5868f4d:896658375,2d293dcb9a0fb300e96d7ef54a879a25:-121295058,502d6d8f64cbb3008b2290d9334df5ae:180900655,0db7658b2ccbb30017864b5505439f9f:1672486095,7537254b56cbb300e56f53317d9767d2:2107526492,1496218b7fcbb3008a4d85bba20f31fe:-767841612,d256a14bcfcbb3002bc6d160c50c4a7b:746825524,3a45614b4fcbb300af9e13c59038e6b0:-1011514623,fd152dc798cbb300a0a1eb791c494379:-137343033,202265c328cbb300c9f1ed9c59ffd573:1235331319,d6e06983cdcbb3000cf8caf9026dfb76:-780521520,622ec1faaccf7300ef3c4dc10986cbb4:24669704,1a615c3a010f7300b71b504c17b62468:-1835561705,48713062ff07730038588387c8cf8be2:-423750907,437ea86e7fc3730049b6304231bcc1d7:2033044287,ebfda8ae35c37300a342f4c873e5b223:1166979482,baad20aeddc37300bd63435395a5df54:-1103156076,c00da02e6dc37300116b3e15128365be:934503892,0bdce46e28c37300468e2c302fca791f:932901480,799ba4aac0c373003e678c629e565e69:-1103156076,525b2cea27c3730056c1190557e27f5b:1166979482,dfcaec6abec37300db2b6ad2577daf9c:-448223913,4399286a08c373004a3ebf2c50dab1c4:608100588,15692caa1cc37300ed2264e41d1db0d9:-1836053966,1d19a86ac1c37300ad6e9cdd87e271e8:-872548470,13f8a86a1ec37300f7e5ec29e2e494e4:1328228725,9cd8e466cfc373006fea4aa40400bf45:-718452280,4b98ec6a71c373004f20298f49624f97:1264431464,ca58e86a44c37300bb6110bcf762fa9a:1167263052,ec38a866c8c37300568cff2167ab4b97:-1369276498,5e1864e6cec37300bea97039c218e13d:445221350,c684282699c373003a4151b6813c4002:47605535,7eb1ac2669c37300286a95cd2f89f29c:58027673,b391242689c37300b17529d27c90cd93:-1247369647,a0f028267cc37300d7491d70e20fe97c:2089981402,4b80e42e6b8373007ab23914a9cc4a82:-479074413,be40686e618373007cc6f54cfb76b168:-1555193091,e7a4d8ea358373004fee931863bd8e3a:-633942217,3094186e1e83730049a163cfe70f7c0f:1749755455,9123d42e9c837300115b1944b57c637c:1473928033,ec031cea12837300e7678e5389451b9f:-1389893161,42721cea87837300263503601972a720:-1166912437,b722d86a5d837300469d08b9adc97487:1534134295,cbf1d86aa98373000f3c5d8811e4fd66:85876481,5291546aaf837300abcc6cc98147815b:-851472386,5571906691837300031bf9d6bb4cb723:1519404939,ad2f8ce6c1837300257786cf37362f1e:2132670442,4bfec8e6d5837300fc276b6512243942:-1308402462,61ed886615837300197aaeeb26048298:-1593514022,28bd0ca6ff8373008248d980de760054:462380449,34ccc06617837300a0d859207f796210:737718300,9dbc00a60e837300a977c80d55f5d00e:-1447818679,b38c40660b837300d7fc2712a52930e4:1336705564,ea4cc06612837300d455dead3911baea:-1345876004,8e0c4c26a6837300727a686fd68671a5:1303215595,1acb8cee354373005cdac4a8561066e9:-1519292002,809bc426df8373001dd0668d85efdf40:-295615377,dd2bc4aec9437300975ae363a6a7f168:1151235799,491bc426178373000a7fa99aa931913a:2137284623,4d8a88ae33437300dd4704363778128f:1206782183,c7738cee8d437300b2e7cf3cfc729fe1:421134460,220304ae784373001833f166d1af71d4:590254410,1f91c42e904373002aeb3eff304d5561:1186765824,f171c4ae3d437300f3ba8e27f78c6e51:-421974536,6c51482e53437300b1fb449ab3aafe17:1853875756,bb400c2e1f437300122550a599deae86:-179192158,0310806ea1437300026de1e695cf7f29:-766654429,55df771ec5437300937c7595fc938e16:2013222217,697f3f1e32437300dce0b9f1f4394f81:-1220531655,eefe371e60437300bad202d53721a6f2:-68489711,6f9d77dac74373009b8c76ee59765a91:221271851,cd5a7b1ab04373001d4e2583cd9fb4c6:-134319881,20de63124743730064b2b34105f9c72c:1495335156,ff4e2312f6437300596b0b61fc968241:-983920227,f48caf1e9403730083dbe929c2f7b60d:-270928724,463cab5ecb0373009b32f90094576838:-577903714,302c6f5ea10373007811bc9893946b6e:1223379988,f4ea6f1e47037300a38f6bc7b050a5c8:-984478399,09385712d6cf3300722af8db65c53898:1092032258,ed779f1231cf33005e9abef920d0915e:1872385450,26e6d35ece8f3300dee031a878b6a9dc:-1413547193,0a8347cab6073300dffd9dedad0aa985:-581693348,d332c34a8b073300f095a0d8eed44057:1897772797,f65eb2c600073300ab64ad2dfa383733:-2069395803,21fdba86e7073300c7ce0dbe6926514a:-1155415216,f0ac3ac2c7073300adc7a66b48d2d243:1115535893,de7cf206a80733005c1b6d62e38d313c:-833162795,3a1bfa4269073300cb8b3765239ffcd9:619527577,2de93ececac33300e933db5c495dc3ac:-1220294951,04983a0e30c333000c81670aeff6017f:1869264271,e1e0a7cd908373001d55692a57543e55:813141420,2170a7cdba83730090c811f2f1331c4c:2121407220,ebdf978db8837300404b955609ac3b58:-619851447,4e6a9389ce837300429793d99a723ea5:813141420,9c58530982837300e3bea0a3d6183ad3:238566526,625b2efca7473300c67a1b1a60eaf186:-947913691,a32aeabcf94733003098c6596ecd0e48:586058503,2059ea3c9f473300e6b166581cd32ce6:883400698,6aaebb5b60eab3002eee2ded554f6af4:30713791,d7cab357a7eab3001c1fe5a793b17085:108327538,f5b9bf13b2eab3009a3559f09492c06d:-1876501173,4897b313deeab3001bee522a57da462a:703894886,82f4775f7daab30025ace0d7daaede2d:1715009537,f2e3f3dbebaab300eb97204d0656be8e:-487913799,002f2357e9aab300171fa574c37ed918:-1185236153,835e23d3d4aab300113d127a96ae777b:-31956723,914c6d13bc66b3006efc64577e8af2d7:1667265865,39fbaddf1626b3006de84cc047a30009:-594548496,9630a80b5a2a73007f040799c3c685ef:1667265865,b4bf50c7152a7300bd6fc04228cc5ff3:-284046753,241f54c7952a7300943582efece17369:1334268614,eb7b1847922a73006e03068499031f3a:-1581618661,67eb0bd2bee233009413b0c9777c249c:-1259399487,11db0bd2bae23300620a85b7f0cae497:-1577590819,de3b879288e233004f2161ef3bea6120:-16841823,c05a87923de23300532598e9b8631387:-807659663,24b9879273e2330014fd26d436052d32:-1626679599,4f788712e9e23300741f3a425ac26396:-732440036,1571b94637ee330086ad4665fe58b5b5:-1577590819,362465424cae330020294404dcaf3043:1334268614,4203a546066e3300f2922e053a5cdb35:-1956450477,51364d8e442e33004fdaa2eb188c2ef0:-1524129608,a2d5898e4e2e3300338fd91d7c4b4756:115330682,0f95810e5d2e33000b4be981c474086d:1966009679,73f4410e6e2e33002029e53d7d7d544f:-789084165,4e93810ec62e330020cee7d3febc51f1:-1284547600,d791c94a132e330071854ddf4db7ae55:-1323686185,1990098a202e33006ce1cbf0ffb8b4b0:-187025370,b5761eb91ea633005e073aaec58095a8:-1738949289,9ed416b591a63300c15be87723e57792:1038559758,cc24def5caa633002bc1b30ad4a0d362:1310681001,e9b35279d2a6330054d48c7515580d28:713636128,97b19eb5e4a63300244b6225d4d2481e:1038559758,d7e096f510a6330038d204fdd68e39eb:1628625586,a8ff0e356da63300c539ade421228a02:-406393117,d84f027508a633003fcba70a7e8eff91:594452033,64ae0af135a63300158f44bb3473fd2c:837392857,ac0251f909e2330088077001deab89e8:-1930473061,2fba4139c6e23300b74f5ee47cde769f:-1748243032,909a4979e7e23300a90bb71a14a8a23a:-1930473061,ed8909b99ce233009731b4d71b594b44:-1202888609,9ce70979d9e23300d5b396a35312416d:-801478021,ce86493909e23300f30e4780c2344616:1300291744,53664db5bbe23300a2ad4d3d32526840:-1365407091,d62605fd4ea23300db82aa8b52463d91:1713725401,ab7505bd98a23300c5fd8d99d422b768:-1074608722,f94345bd23a23300e6330e840e265d61:-1923522917,ecada47960a2330069b8a3e1439967f4:-460495822,9d6d647907a23300930c76cac3776090:999586634,61fb2c39e0a2330006b5143aa70a93fd:1551738318,746b2c3919a23300b6ece3794b638819:-209978696,5e2becf55ba23300f1c2e6307565780a:695893000,a3d96cf5e2a23300aa7c39087a50a717:1084473641,ffd1ba950b823300ff037fea3352ea95:1551738318,f59b8830834e7300e23d03d18bab3d93:-231096615,4232c478050e7300175306417cc00aa3:263263649,97f4a0a08d067300b65a10182b61fef7:-1201750972,48b7e244bb25730035abb760fd351281:-683399795,cd95e204f9257300d0656511d32463d5:-1211562104,df55e6c019257300d7b22395fd34b87a:1506054987,1dc42e8039257300640b74afabf989f2:394381569,704466c0302573006164a0329eb3b18c:-966002214,3aa36e403be1730079877e12635f1b83:1396278778,2d236280c0257300cf6060ea8bfbf26a:-670387066,2816ce404fe173006ab521d0478da2c4:1604855507,30b5ca0054e17300303319d79cf79fd3:912891168,8465c6409ce1730047d845209e5ddb29:816315178,1a054e0020e17300bd283784868751ac:-251188576,e8df5d049c617300d9197da9613dcc13:611533619,ac6e9104a9617300e27fc779bbda618f:373241168,a502154c285d3300c1e529c4d2b95bf4:-883987387,f648208c66d93300600d778d4b3a84a8:8326053,74a76c0cdad933002e8aabf0e2d68643:1769878270,13372c4caad933009dba081b394c7867:8326053,6ab6200cedd933009655d3e2fc60c8c6:138296093</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_ui_action_00b62c90dbd22300570c9b81ca9619d2</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_ui_action"&gt;&lt;sys_ui_action action="INSERT_OR_UPDATE"&gt;&lt;action_name&gt;copy_item&lt;/action_name&gt;&lt;active&gt;true&lt;/active&gt;&lt;client&gt;false&lt;/client&gt;&lt;client_script_v2&gt;&lt;![CDATA[function onClick(g_form) {

}]]&gt;&lt;/client_script_v2&gt;&lt;comments/&gt;&lt;condition&gt;current.sys_class_name=='x_nuta2_nutanix_ca_nutanix_blueprint'&lt;/condition&gt;&lt;form_action&gt;true&lt;/form_action&gt;&lt;form_button&gt;true&lt;/form_button&gt;&lt;form_button_v2&gt;false&lt;/form_button_v2&gt;&lt;form_context_menu&gt;false&lt;/form_context_menu&gt;&lt;form_link&gt;false&lt;/form_link&gt;&lt;form_menu_button_v2&gt;false&lt;/form_menu_button_v2&gt;&lt;form_style/&gt;&lt;hint/&gt;&lt;isolate_script&gt;false&lt;/isolate_script&gt;&lt;list_action&gt;false&lt;/list_action&gt;&lt;list_banner_button&gt;false&lt;/list_banner_button&gt;&lt;list_button&gt;false&lt;/list_button&gt;&lt;list_choice&gt;false&lt;/list_choice&gt;&lt;list_context_menu&gt;false&lt;/list_context_menu&gt;&lt;list_link&gt;false&lt;/list_link&gt;&lt;list_save_with_form_button&gt;false&lt;/list_save_with_form_button&gt;&lt;list_style/&gt;&lt;messages/&gt;&lt;name&gt;Copy&lt;/name&gt;&lt;onclick/&gt;&lt;order&gt;100&lt;/order&gt;&lt;script&gt;&lt;![CDATA[gs.addErrorMessage('This action is not available for Nutanix Calm App.');
action.setRedirectURL(current);]]&gt;&lt;/script&gt;&lt;show_insert&gt;false&lt;/show_insert&gt;&lt;show_multiple_update&gt;false&lt;/show_multiple_update&gt;&lt;show_query&gt;false&lt;/show_query&gt;&lt;show_update&gt;true&lt;/show_update&gt;&lt;sys_class_name&gt;sys_ui_action&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-12-06 12:26:42&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;00b62c90dbd22300570c9b81ca9619d2&lt;/sys_id&gt;&lt;sys_mod_count&gt;18&lt;/sys_mod_count&gt;&lt;sys_name&gt;Copy&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;protected&lt;/sys_policy&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_action_00b62c90dbd22300570c9b81ca9619d2&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-08-05 12:35:55&lt;/sys_updated_on&gt;&lt;table&gt;x_nuta2_nutanix_ca_nutanix_blueprint&lt;/table&gt;&lt;ui11_compatible&gt;true&lt;/ui11_compatible&gt;&lt;ui16_compatible&gt;false&lt;/ui16_compatible&gt;&lt;/sys_ui_action&gt;&lt;/record_update&gt;</payload>
<payload_hash>-2001073566</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.4.5 Complete Build">346d737d1bb0011081326464604bcb11</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-01-03 07:26:35</sys_created_on>
<sys_id>b46d737d1bb0011081326464604bcb14</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17e1ed24d6f0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-01-03 07:26:35</sys_updated_on>
<table>x_nuta2_nutanix_ca_nutanix_blueprint</table>
<target_name>Copy</target_name>
<type>UI Action</type>
<update_domain>global</update_domain>
<update_guid>b71c97d5223130106d5142c70d7f5546</update_guid>
<update_guid_history>b71c97d5223130106d5142c70d7f5546:-2001073566,7f19fdba9666201090aea19209236d83:989147889,d958f53a926620101fe87b0b1c1840fa:-2001073566,8927353a66662010b17f92226bb3d68f:989147889,ded6bdf6b066201035603da68d88b69e:284978430,b7a6f1b665662010458701ff619ded24:-1149572188,f786313a09662010206c240ab46b6763:693605093,22353db6e86620102a504666178fd5e0:-1352915882,b794f1b63b662010389ba8c561398135:-1366499587,fb54f976716620103fc5fb46ddd95f42:1959253383,0eefe05cc0d2230000f7628f7c7f6c9f:1802073749,8edb2cd4aad2230051ec3fdd1d245c20:-879389862,0dab649492d22300865bc01a1a3bfb3f:1142805417,5f492414c1d223008f56fa38d45c75a7:1324206209,bc29e054b1d22300fd8e7f85bd14f752:-1738652131,619724d07fd22300a5d633f9ab9f2c25:1324206209,305724d06ad2230022ee4172d918a420:2108437268,c13728d0dfd223000842401b7ba61b1c:264866284,0217ac90cdd2230025592680dcfec643:282755167</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_d018c57f37112300fdfc097973990e26</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;public&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;true&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Nutanix_ClientServerScriptBridge&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Nutanix_ClientServerScriptBridge = Class.create();
Nutanix_ClientServerScriptBridge.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
	fetchDataFromRequestedItem: function() {
        var gr = new GlideRecord("sc_req_item");
        if (gr.get(this.getParameter("sysparm_sysID"))) {
            return gr;
        }
    },
	fieldValidation: function() {

        var utils = new Nutanix_Calm_Utils();
        var logger = new Nutanix_Calm_Logger();

        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fieldValidation.");

            var catSysId = this.getParameter('sysparm_catSysId');
            var fieldValueMap = this.getParameter('sysparm_fieldValueMap');
            var configureScript = new Nutanix_FetchConfigureSettingDropdown();

            return configureScript.fieldValidation(catSysId, fieldValueMap);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fieldValidation. Error:- " + e);
        }

    },

    fetchLaunchVars: function() {
        var utils = new Nutanix_Calm_Utils();
        var logger = new Nutanix_Calm_Logger();

        try {
			
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchLaunchVars.");
            var catSysID = this.getParameter('sysparm_catsysid') + "";
            var profile = this.getParameter('sysparm_profile') + "";
            var configScript = new Nutanix_FetchConfigureSettingDropdown();

            return configScript.fetchLaunchVars(catSysID, profile);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchLaunchVars. Error:- " + e);
        }
    },

    variableArrayParser: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.variableArrayParser");

            var type = this.getParameter('sysparm_type');
            var parent_uuid = this.getParameter('sysparm_parentUuid');
            var var_array = this.getParameter('sysparm_varJson');
			var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.variableArrayParser(type, parent_uuid, var_array,this.getParameter("sysparm_field"));
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.variableArrayParser. Error:- " + e);
        }
    },

    hideAccessLocalGroupOption: function() {
        var utils = new Nutanix_Calm_Utils();
        var logger = new Nutanix_Calm_Logger();

        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.hideAccessLocalGroupOption.");
            var localGroupOption = new Nutanix_FetchConfigureSettingDropdown();
            return localGroupOption.hideAccessLocalGroupOption(); //returns the value that is present on the form
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.hideAccessLocalGroupOption. Error:- " + e);
        }
    },

    supportStatusMPI: function() {
        var utils = new Nutanix_Calm_Utils();
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.supportStatusMPI.");
            var bpSysID = this.getParameter('sysparm_blueprint') + "";
            var supportStatus = new Nutanix_FetchConfigureSettingDropdown();
            return supportStatus.supportStatusMPI(bpSysID); //returns the value.
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.supportStatusMPI. Error:- " + e);
        }
    },

    advanceVariableDynamicOptions: function() {

        var utils = new Nutanix_Calm_Utils();
        var logger = new Nutanix_Calm_Logger();

        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getHttpValues.");

            var catSysId = this.getParameter('sysparm_catSysID');
            // 			var fieldValueMap = this.getParameter('sysparm_fieldValueMap');
            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.advanceVariableDynamicOptions(catSysId);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getHttpValues. Error:- " + e);
        }

    },
	
    getHttpValues: function() {

        var utils = new Nutanix_Calm_Utils();
        var logger = new Nutanix_Calm_Logger();

        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getHttpValues.");

            var type = this.getParameter('sysparm_type');
            var parent_uuid = this.getParameter('sysparm_parentUuid');
            var pre_map = this.getParameter('sysparm_preMap');
			var str = this.getParameter("sysparm_str");
			
			if(str &amp;&amp; str.length != 0)
				str = str.split(",");
            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
			
            return configureScript.getHttpValues(type, parent_uuid, pre_map,str);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getHttpValues. Error:- " + e);
        }
    },


    mpiPatching: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.mpiPatching.");
            var project = this.getParameter('sysparm_project');
            var blueprint = this.getParameter('sysparm_blueprint');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.mpiPatching(project, blueprint);

        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.mpiPatching. Error:- " + e);
        }
    },

    getSubnet: function() {

        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("***Inside Nutanix_ClientServerScriptBridge.getSubnet. catalog sys_id" + this.getParameter('sysparm_catSysID') + " projectUuid " + projectUuid);
            var catalog = this.getParameter('sysparm_catSysID');
            var projectUuid = this.getParameter('sysparm_ProjectUuid');
            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.getProjectSubnet(catalog, projectUuid);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getSubnet. Error:- " + e);
        }

    },

    checkQueue: function() {
        var logger = new Nutanix_Calm_Logger();
        var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_process_queue');
        //gr.addEncodedQuery('state!=complete^topic!=startInventoryDelete^topic!=processImportedApp^topic!=importApplications');
        gr.addEncodedQuery('state!=complete^state!=error^topic!=startInventoryDelete^topic!=processImportedApp^topic!=importRecoveryPoints^topic!=processRecoveryPoints');
        gr.query();
        if (gr.next()) {
            //gs.addErrorMessage('Inventory is currently being synced. Please wait for this operation to finish.');
            //logger.error("Inside Nutanix_ClientServerScriptBridge.checkQueue: Inventory is being synced.");
            return false;
        } else if (gs.getProperty('x_nuta2_nutanix_ca.Delete_Flag') == '1') {
            //gs.addErrorMessage('Inventory is currently being deleted. Please wait for this operation to finish.');
            //logger.error("Inside Nutanix_ClientServerScriptBridge.checkQueue: Inventory is being deleted.");
            return false;
        } else
            return true;
    },

    deleteFlagState: function() {
        if (gs.getProperty('x_nuta2_nutanix_ca.Delete_Flag') == 1) {
            return 'deleting';
        } else {
            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_process_queue');
            gr.addEncodedQuery('state!=complete^state!=error^topic!=startInventoryDelete^topic!=processImportedApp^topic!=importRecoveryPoints^topic!=processRecoveryPoints');
            gr.query();
            if (gr.next()) {
                return 'syncing';
            }
        }
    },

    appFlag: function() {
        var utils = new Nutanix_Calm_Utils();
        var grAction = new GlideRecord(utils.configuration.table.NutanixCalmAction);
        if (grAction.get(this.getParameter('sysparm_actId'))) {
            var appUUID = grAction.parent_uuid;
            var gr = new GlideRecord(utils.configuration.table.NutanixCalmApplication);
            gr.addQuery('uuid', appUUID);
            gr.query();
            gr.next();

            if (gr.action_flag == '1') {
                return '1';
            } else
                return '0';
        }
    },

    getVariablesProperty: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            var varProp = gs.getProperty('x_nuta2_nutanix_ca.aws_display_vars');
            return varProp;
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getVariablesProperty. Error:- " + e);
        }
    },

    cleanInstance: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_process_queue');
            gr.addEncodedQuery('state!=complete^topic!=startInventoryDelete');
            gr.query();
            logger.debug("Inside Nutanix_ClientServerScriptBridge.cleanInstance.");
            if (gr.next() || gs.getProperty('x_nuta2_nutanix_ca.Delete_Flag') == '1') {
                logger.error('A sync or a delete process is currently in progress. Please wait for them to finish');
            } else {
                gs.setProperty('x_nuta2_nutanix_ca.Delete_Flag', '1');
                var grDel = new Nutanix_Calm_Utils();
                grDel.insertIntoQueue('startInventoryDelete', '', '', '', 'Starts Inventory deletion', 'This process deletes the calm snow data.');
                logger.info('Inventory cleanup has started.');
            }
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.cleanInstance. Error:- " + e);
        }
    },

    fetchBlueprints: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchBlueprints.");
            var project = this.getParameter('sysparm_project');
            var blueprintType = this.getParameter('sysparm_blueprintType');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.fetchBlueprints(project, blueprintType);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchBlueprints. Error:- " + e);
        }
    },

    fetchApplicationProfiles: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            var blueprint = this.getParameter('sysparm_blueprint');
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchApplicationProfiles. Blueprint :" + blueprint);

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.fetchApplicationProfiles(blueprint);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchApplicationProfiles. Error:- " + e);
        }
    },

    fetchProviderIcons: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchProviderIcons.");
            var catSysId = this.getParameter('sysparm_catId');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.fetchProviderIcons(catSysId);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchProviderIcons. Error:- " + e);
        }
    },

    fetchActionVariables: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchActionVariables.");
            var JSONstr = '';
            var actSysId = this.getParameter('sysparm_actSysId');
            var grAction = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_action');
            if (grAction.get(actSysId)) {
                var actName = grAction.action_name + '';
                var trueName = grAction.name + '';
                var actionType = grAction.type + '';
                var varStr = grAction.action_variables + '';
            }
            if (varStr != '') {
                JSONstr = {
                    "name": actName,
                    "true_name": trueName,
                    "type": actionType,
                    "vars": varStr
                };
            } else
                JSONstr = {
                    "name": actName,
                    "true_name": trueName,
                    "type": actionType
                };
            return JSON.stringify(JSONstr);

        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchActionVariables. Error:- " + e);
        }
    },

    getProfileVariableDetails: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getProfileVariableDetails.");
            var project = this.getParameter('sysparm_project');
            var blueprint = this.getParameter('sysparm_blueprint');
            var application_profile = this.getParameter('sysparm_application_profile');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            var response = configureScript.getProfileVariableDetails(project, blueprint, application_profile);

            return response;
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getProfileVariableDetails. Error:- " + e);
        }
    },
    getMultipleProfileVariableDetails: function() { //multi-profile- project function
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getMultipleProfileVariableDetails.");
            var project = this.getParameter('sysparm_project');
            var blueprint = this.getParameter('sysparm_blueprint');
            var application_profile = this.getParameter('sysparm_application_profile');
            var cat_item = this.getParameter('sysparm_cat_item');
            var delta_profile = this.getParameter('sysparm_delta_profiles');
            var type = this.getParameter('sysparm_type');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            var response = configureScript.getMultipleProfileVariableDetails(project, blueprint, application_profile, cat_item, delta_profile, type);

            return response;
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getMultipleProfileVariableDetails. Error:- " + e);
        }
    },

    getServiceVariableDetails: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getServiceVariableDetails.");
            var project = this.getParameter('sysparm_project');
            var blueprint = this.getParameter('sysparm_blueprint');
            var application_profile = this.getParameter('sysparm_application_profile');
            var type = this.getParameter('sysparm_type');
            var bpType = this.getParameter('sysparm_bpType');
            var cat_item = this.getParameter('sysparm_cat_item');
            var delta_profiles = this.getParameter('sysparm_delta_profiles');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.getMultipleServiceVariableDetails(project, blueprint, application_profile, type, bpType, cat_item, delta_profiles);

        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getProfileVariableDetails. Error:- " + e);
        }
    },

    getCrendentialsDetails: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getCrendentialsDetails.");
            var project = this.getParameter('sysparm_project');
            var blueprint = this.getParameter('sysparm_blueprint');
            var application_profile = this.getParameter('sysparm_application_profile');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            var response = configureScript.getCrendentialsDetails(project, blueprint, application_profile);

            return response;
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getCrendentialsDetails. Error:- " + e);
        }
    },

    mappedCredentials: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.mappedCredentials.");
            var projects = this.getParameter('sysparm_project');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.mappedCredentials(projects);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.mappedCredentials. Error:- " + e);
        }
    },

    fetchEnvironmentCredentials: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchEnvironmentCredentials.");
            var credSysId = this.getParameter('sysparm_credentialSydID');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.fetchEnvironmentCredentials(credSysId);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchEnvironmentCredentials. Error:- " + e);
        }
    },

    getCatalogInfo: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getCatalogInfo.");
            var catalogItemSysID = this.getParameter('sysparm_catalogItemSysID');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.getCatalogInfo(catalogItemSysID);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getCatalogInfo. Error:- " + e);
        }
    },

    getRealtedCatalogItems: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getRealtedCatalogItems.");
            var blueprint = this.getParameter('sysparm_blueprint');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.getRealtedCatalogItems(blueprint);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getRealtedCatalogItems. Error:- " + e);
        }
    },

    getBlueprintInfo: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getBlueprintInfo.");
            var blueprint = this.getParameter('sysparm_blueprint');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.getBlueprintInfo(blueprint);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getBlueprintInfo. Error:- " + e);
        }
    },

    fetchRuntimeVariablesValue: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchRuntimeVariablesValue.");
            var sysId = this.getParameter('sysparm_sysId');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.fetchRuntimeVariablesValue(sysId);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchRuntimeVariablesValue. Error:- " + e);
        }
    },

    fetchProjectAndProfileList: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchProjectAndProfileList.");
            var catSysID = this.getParameter('sysparm_catSysID');

            var configureScript = new Nutanix_CatalogFormScripts();
            return configureScript.fetchMultipleProjectAndProfileList(catSysID);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchProjectAndProfileList. Error:- " + e);
        }
    },

    fetchOrderFormData: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchOrderFormData.");
            var profile = this.getParameter('sysparm_profile');
            var catSysID = this.getParameter('sysparm_catSysID');

            var configureScript = new Nutanix_CatalogFormScripts();
            return configureScript.fetchOrderFormData(profile, catSysID);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchOrderFormData. Error:- " + e);
        }
    },

    fetchCredentialsList: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchCredentialsList.");
            var catSysID = this.getParameter('sysparm_catSysID');

            var configureScript = new Nutanix_ImportCredentials();
            return configureScript.fetchCredentialsList(catSysID);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchCredentialsList. Error:- " + e);
        }
    },

    fetchMappedCredentialsDetails: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchMappedCredentialsDetails.");
            var catSysID = this.getParameter('sysparm_catSysID');

            var configureScript = new Nutanix_ImportCredentials();
            return configureScript.fetchMappedCredentialsDetails(catSysID);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchMappedCredentialsDetails. Error:- " + e);
        }
    },

    checkDuplicate: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.checkDuplicate.");
            var catName = this.getParameter('sysparm_catName');
            var catSysId = this.getParameter('sysparm_catSysId');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.checkDuplicate(catName, catSysId);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.checkDuplicate. Error:- " + e);
        }
    },

    checkCatalogValidity: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.checkCatalogValidity.");
            var blueprintType = this.getParameter('blueprintType');
            var blueprintUUID = this.getParameter('blueprintUUID');

            var profileSysIds = this.getParameter('profileSysId').split(',');
            var projectSysId = this.getParameter('projectUUID');
            var profileName = this.getParameter('profileName');
            var profileSysId = '';

            for (var i = 0; i &lt; profileSysIds.length; i++) {
                var profile = new GlideRecord('x_nuta2_nutanix_ca_application_profile');
                profile.get(profileSysIds[i]);
                logger.debug("***True/false: profile_name : " + profile.name + ' profileName : ' + profileName + '');
                if (profile.name + '' == profileName + '') {
                    profileSysId = profileSysIds[i] + '';
                    break;
                } else {
                    continue;
                }
            }

            var configureScript = new Nutanix_CheckCatalogItemValidity();
            return configureScript.checkCatalogValidity(blueprintType, blueprintUUID, profileSysId, projectSysId);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.checkCatalogValidity. Error:- " + e);
        }
    },

    getUserEmail: function() {
        var gr = new GlideRecord('sys_user');

        if (gr.get(gs.getUserID())) {
            return gr.email + '';
        }
    },
    fetchMultipleBlueprints: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            var blueprintType = this.getParameter('sysparm_blueprintType');
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchMultipleBlueprints. blueprintType " + blueprintType);

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.fetchMultipleBlueprints(blueprintType);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchMultipleBlueprints. Error:- " + e);
        }
    },
    fetchMultipleProjects: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            var blueprint = this.getParameter('sysparm_blueprint');
            var blueprintType = this.getParameter('sysparm_blueprintType');
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchMultipleProjects. Blueprint " + blueprint + " BlueprintType " + blueprintType);

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.fetchMultipleProjects(blueprint, blueprintType);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchMultipleProjects. Error:- " + e);
        }
    },
    getMultipleServiceVariableDetails: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getMultipleServiceVariableDetails.");
            var project = this.getParameter('sysparm_project');
            var blueprint = this.getParameter('sysparm_blueprint');
            var application_profile = this.getParameter('sysparm_application_profile');;
            var type = this.getParameter('sysparm_type');
            var bpType = this.getParameter('sysparm_bpType');
            var project1 = project.split(',');
            var profile1 = application_profile.split(',');
            var answer = [];
            for (var i in profile1) {
                var configureScript = new Nutanix_FetchConfigureSettingDropdown();
                var response = JSON.parse(configureScript.getServiceVariableDetails(project1[0], blueprint, profile1[i], type, bpType));
                var res = {
                    "profile": profile1[i],
                    "response": response.service_configuration
                };
                answer.push(res);
            }
            logger.debug("End Nutanix_ClientServerScriptBridge.getMultipleServiceVariableDetails." + JSON.stringify(answer));
            return JSON.stringify(answer);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.toyota1_getServiceVariableDetails. Error:- " + e);
        }
    },

    getProject: function(blueprint, blueprintType) {
        var logger = new Nutanix_Calm_Logger();
        logger.debug("Inside Nutanix_ClientServerScriptBridge.getProject.");
        try {
            logger.debug("Inside global Business Rule.getProject.blueprint : " + blueprint + 'blueprintType : ' + blueprintType);

            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_projects_blueprints_relationship');
            gr.addQuery('catalog_item', blueprint);
            if (blueprintType == 'unpublished')
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_unpublishedBP_sysId'));
            else
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_category_sysId'));
            gr.orderBy('catalog_item.name');
            gr.query();
            var query = 'state=COMPLETE^sys_idIN';
            var pro = [];
            while (gr.next()) {
                if ((blueprintType == 'unpublished' &amp;&amp; gr.catalog_item.state + '' == 'ACTIVE') || (blueprintType != 'unpublished' &amp;&amp; gr.catalog_item.state + '' == 'active')) {
                    query += gr.projects + ',';
                }
            }
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getProject. Query return " + query);
            return query;
        } catch (e) {
            logger.debug("Exception Nutanix_ClientServerScriptBridge.getProject. Error:- " + e);
        }
    },
    getProfile: function(blueprintSysId) {
        var logger = new Nutanix_Calm_Logger();
        logger.debug("Inside Nutanix_ClientServerScriptBridge.getProfile.");
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getProfile.blueprint : " + blueprint);

            var blueprint = new GlideRecord('x_nuta2_nutanix_ca_nutanix_blueprint');
            blueprint.get(blueprintSysId);
            var gr = new GlideRecord('x_nuta2_nutanix_ca_catalog_item_and_application_profile_relation');
            gr.addQuery('catalog_item', blueprintSysId);
            gr.addQuery('state', 'active');
            //gr.addEncodedQuery('providersNOT LIKEaws^providersNOT LIKEazure^providersNOT LIKEgcp');
            gr.orderBy('application_profile.name');
            gr.query();

            var query = 'sys_idIN';

            while (gr.next()) {
                query += gr.application_profile + ',';
            }
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getProfile. Query return " + query);
            return query;
        } catch (e) {
            logger.debug("Exception Nutanix_ClientServerScriptBridge.getProfile. Error:- " + e);
        }
    },
    noProfileVariableDetails: function() { //multi-profile- project function
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.noProfileVariableDetails.");
            var project = this.getParameter('sysparm_project');
            var blueprint = this.getParameter('sysparm_blueprint');
            var application_profile = this.getParameter('sysparm_application_profile');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            var response = configureScript.noProfileVariableDetails(project, blueprint, application_profile);

            return response;
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.noProfileVariableDetails. Error:- " + e);
        }
    },


    getSubnetDetails: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getServiceVariableDetails.");
            var project = this.getParameter('sysparm_project');
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getSubnetDetails. Project : " + project);

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.getNutanixSubnetList(project);

        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getProfileVariableDetails. Error:- " + e);
        }
    },

    getDeltaProject: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getDeltaProject.");
            var project_sysId = this.getParameter('sysparm_project').split(',');
            var catalog_sysId = this.getParameter('sysparm_catItem');
            var deltaProject = [];

            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
            gr.addEncodedQuery('item_name.sys_id=' + catalog_sysId);
            gr.query();

            while (gr.next()) {
                var projects = gr.getValue('multiple_projects') + '';
                for (var i in project_sysId) {
                    if (projects.includes(project_sysId[i]))
                        continue;
                    else
                        deltaProject.push(project_sysId[i]);
                }
            }

            return JSON.stringify(deltaProject);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getDeltaProject. Error:- " + e);
        }
    },

    getDeltaProfile: function() {
        var logger = new Nutanix_Calm_Logger();
        var utils = new Nutanix_Calm_Utils();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getDeltaProject.");
            var profile_sysId = this.getParameter('sysparm_profile').split(',');
            var catalog_sysId = this.getParameter('sysparm_catItem');
            var deltaProfile = [];


            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
            gr.addEncodedQuery('item_name.sys_id=' + catalog_sysId);
            gr.query();

            while (gr.next()) {
                var profile = gr.getValue('multiple_application_profile') + '';
                for (var i in profile_sysId) {
                    if (profile.includes(profile_sysId[i])) {
                        continue;
                    } else {
                        var gr1 = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
                        gr1.addQuery('application_profile', profile_sysId[i]);
                        gr1.addQuery('catalog_item', catalog_sysId);
                        //			gr1.addQuery('isprofilevariable', false);
                        gr1.query();
                        if (gr1.next()) {
                            continue;
                        } else {
                            deltaProfile.push(profile_sysId[i]);
                        }
                    }
                }
            }

            return JSON.stringify(deltaProfile);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getDeltaProject. Error:- " + e);
        }
    },
    fetchBlueprintName: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchBlueprintName.");
            var BlueprintsysId = this.getParameter('sysparm_BlueprintsysId');

            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_projects_blueprints_relationship');
            gr.addQuery('catalog_item', BlueprintsysId);
            gr.query();
            if (gr.next())
                return gr.catalog_item.name + '' + " " + gr.version + '';
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchBlueprintName. Error:- " + e);
        }
    },
    getProjectCount: function() {
        var blueprint = this.getParameter('sysparm_blueprint');
        var gr = new GlideAggregate('x_nuta2_nutanix_ca_nutanix_calm_projects_blueprints_relationship');
        gr.addQuery('catalog_item', blueprint);
        gr.addAggregate('COUNT');
        gr.query();
        var count = 0;
        if (gr.next()) {
            count = gr.getAggregate('COUNT');
        }
        return count;
    },
    getProfileCount: function() {
        var blueprint = this.getParameter('sysparm_blueprint');
        var profile = new GlideAggregate('x_nuta2_nutanix_ca_catalog_item_and_application_profile_relation');
        profile.addQuery('catalog_item', blueprint);
        profile.addQuery('state', 'active');
        profile.addAggregate('COUNT');
        profile.query();
        var count = 0;
        if (profile.next()) {
            count = profile.getAggregate('COUNT');
        }
        return count;
    },
    getProfilesysIdNameJSON: function() {
        var profile = this.getParameter('sysparm_profile');
        var array_profile = profile.split(',');
        var profile_JSON = {};
        for (var n = 0; n &lt; array_profile.length; n++) {
            var profile_gr = new GlideRecord('x_nuta2_nutanix_ca_application_profile');
            profile_gr.get(array_profile[n]);
            profile_JSON[profile_gr.sys_id] = {
                "name": profile_gr.name + ''
            };
        }
        return JSON.stringify(profile_JSON);
    },
    getSecretVaraiable: function() {
        var profile = this.getParameter('sysparm_profile');
        var array_profile = profile.split(',');
        var blueprint = this.getParameter('sysparm_blueprint');
        var answer = [];
        for (var n = 0; n &lt; array_profile.length; n++) {
            var gr_variable = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
            gr_variable.addEncodedQuery('isprofilevariable=true^data_type=SECRET^catalog_item=' + blueprint + '^application_profile=' + array_profile[n]);
            gr_variable.query();
            while (gr_variable.next()) {
                answer.push(gr_variable.variable.name);
            }
        }
        return answer.toString();
    },
    /*	migration_1_4 : function(){
    		var answer = '';
    		if(gs.getProperty('x_nuta2_nutanix_ca.Version1_4_3_migration_needed') == '0')
    		{
    		    var utils = new Nutanix_Calm_Utils();
    			
    			var blueprint = new GlideRecord('x_nuta2_nutanix_ca_nutanix_blueprint');
    			blueprint.addQuery('state', 'ACTIVE');
    			blueprint.query();
    			while(blueprint.next()){
    				var final_var_list = [];
    				var response = utils.makeCalmApiCall("get", '/blueprints/'+blueprint.uuid, "");
    				if(response.getStatusCode() == '200' || response.getStatusCode() == '201'){
    				   var app_profile_list = JSON.parse(response.getBody()).spec.resources.app_profile_list;
    					if(app_profile_list.length &lt;1)
    						   continue;

    				   for(var i  in app_profile_list){

    					   var variable_list =  app_profile_list[i].variable_list;
    						 if(variable_list.length &lt;1)
    								 continue;
    						  for(var j in variable_list){						  
    	// 						var var_index = final_var_list.indexOf(variable_list[j].name);
    	// 				        var_index === -1 ? final_var_list.push(variable_list[j].name) :( answer.inludes(blueprint.name)? '' : answer += " "+blueprint.name);
    							var variable_prop = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
    							variable_prop.addQuery('uuid', variable_list[j].uuid);
    							variable_prop.query();
    							if(variable_prop.next()){
    								continue;
    							}
    							else{ 
    							  answer += " "+blueprint.name;	
    							}
    					   }
    				   }
    				}
    			}
    		}
    		if(blueprint.getRowCount() == 0 || answer == ''){
    			gs.setProperty('x_nuta2_nutanix_ca.Version1_4_3_migration_needed', '1');
    		}
    			
    		return answer+"";
    	},*/
    credentialList: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchOrderFormData.");
            var catSysID = this.getParameter('sysparm_catSysID');

            var configureScript = new Nutanix_CatalogFormScripts();
            return configureScript.credentialList(catSysID);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchOrderFormData. Error:- " + e);
        }
    },


    fetchProfilesBasisOnEnvironment: function() {
        var logger = new Nutanix_Calm_Logger();
        try {

            var body = new Object();
            var profile = [];
            body["api_version"] = "3.0";
            var metadata = {};
            var api_info;
            if (this.getParameter('sysparm_type') + "" == "x_nuta2_nutanix_ca_nutanix_marketplaceitems") {
                metadata.kind = "marketplace_item";
                api_info = "calm_marketplace_items";
            } else {
                metadata.kind = "blueprint";
                api_info = "blueprints";
            }
            metadata["categories"] = {};
            //sysparm_blueprint
            var project_reference = {};
            project_reference["kind"] = "project";
            project_reference["name"] = this.getParameter("sysparm_pro") + "";
            project_reference["uuid"] = this.getParameter("sysparm_proValue") + "";
            metadata["project_reference"] = project_reference;

            body["metadata"] = metadata;
            var specs = {};
            var environment_profile_pairs = [];
            var environment = {};
            environment["uuid"] = this.getParameter("sysparm_env") + "";
            var app_profile = this.getParameter("sysparm_profile");
            app_profile = app_profile.split(",");
            for (var i = 0; i &lt; app_profile.length; i++) {
                var profile_obj = {};
                var gr = new GlideRecord("x_nuta2_nutanix_ca_application_profile");
                if (gr.get(app_profile[i])) {
                    profile_obj.app_profile = {
                        "name": gr.name + ""
                    };
                    profile.push(gr.name + "");
                }
                profile_obj.environment = environment;
                environment_profile_pairs.push(profile_obj);
            }
            specs["environment_profile_pairs"] = environment_profile_pairs;
            var final_profile = [];
            body["spec"] = specs;
            this.appUtil = new Nutanix_Calm_Utils();
            logger.info("Nutanix_ClientServerScriptBridge.fetchProfilesBasisOnEnvironment Body:" + JSON.stringify(body));
            var response = this.appUtil.makeCalmApiCall('POST', '/' + api_info + '/' + this.getParameter("sysparm_blueprint") + "/patch_with_environment/validate", JSON.stringify(body));
            logger.info("Nutanix_ClientServerScriptBridge.fetchProfilesBasisOnEnvironment " + JSON.stringify(response.getBody()) + response.getStatusCode());

            if (response.getStatusCode() + '' == "200" || response.getStatusCode() + '' == "201") {
                response = JSON.parse(response.getBody());
                var environment_profile_pair = response.status.environment_profile_pairs;
                for (var i = 0; i &lt; environment_profile_pair.length; i++) {
                    var name = environment_profile_pair[i].app_profile.name + "";
                    var state = environment_profile_pair[i].state;
                    if (profile.indexOf(name) != -1) {
                        if (state == "valid") {
                            final_profile.push(name);
                        }
                    }
                }
            } else {
                logger.info("error in Nutanix_ClientServerScriptBridge.fetchProfilesBasisOnEnvironment");
            }
            return JSON.stringify(final_profile);


        } catch (e) {
            logger.error("error in Nutanix_ClientServerScriptBridge.fetchProfilesBasisOnEnvironment" + e);
        }

    },
    fetchEnvironments: function() {
        var project = this.getParameter("sysparm_project");
        var gr_pro = new GlideRecord("x_nuta2_nutanix_ca_nutanix_project");
        gr_pro.addQuery("uuid", project);
        gr_pro.query();
        var arr = [];
        if (gr_pro.next()) {
            var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_environment");
            gr.addQuery("project", gr_pro.sys_id);
            gr.query();
            while (gr.next()) {
                var obj = {};
                obj["Name"] = (gr.name + "");
                obj["UUID"] = (gr.uuid + "");
                arr.push(obj);
            }
        }
        return (JSON.stringify(arr));
    },
    copyMpiPatching: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
			var project = this.getParameter('sysparm_project');
			var blueprint = this.getParameter('sysparm_blueprint');
			if((parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2"))){
				logger.debug("Inside Nutanix_ClientServerScriptBridge.mpiPatching.");


				var profile = (this.getParameter('sysparm_profile'));
				// 			var profile_name ='';
				// 			var profileGr = new GlideRecord('x_nuta2_nutanix_ca_application_profile');
				// 			if(profileGr.get(profile[0])){
				// 				 profile_name = profileGr.name+'';
				// 			}
				var configureScript = new Nutanix_FetchConfigureSettingDropdown();
				return configureScript.copyMpiPatching(project, blueprint, profile);
			}
			else{
				var configureScript = new Nutanix_FetchConfigureSettingDropdown();
				return configureScript.mpiPatching(project, blueprint);
			}


        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.mpiPatching. Error:- " + e);
        }
    },
    variableArrayParser_client_script: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.variableArrayParser");

            var type = this.getParameter('sysparm_type');
            var parent_uuid = this.getParameter('sysparm_parentUuid');
            var var_array = this.getParameter('sysparm_varJson');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.variableArrayParser_client_script(type, parent_uuid, var_array);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.variableArrayParser. Error:- " + e);
        }
    },
    type: 'Nutanix_ClientServerScriptBridge'
});]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-28 19:13:04&lt;/sys_created_on&gt;&lt;sys_id&gt;d018c57f37112300fdfc097973990e26&lt;/sys_id&gt;&lt;sys_mod_count&gt;300&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_ClientServerScriptBridge&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_d018c57f37112300fdfc097973990e26&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-07-14 16:31:07&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>-464631680</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.4.5 Complete Build">346d737d1bb0011081326464604bcb11</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-01-03 07:26:35</sys_created_on>
<sys_id>b86d737d1bb0011081326464604bcb13</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17e1ed138b30000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-01-03 07:26:35</sys_updated_on>
<table/>
<target_name>Nutanix_ClientServerScriptBridge</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>a6fe72525d15301094c70dc3494bd55c</update_guid>
<update_guid_history>a6fe72525d15301094c70dc3494bd55c:-464631680,dbdcbe5e87d130106000776b7b230013:-1226051487,ae5cf69ebfd13010b8b1d1be23880752:-1992266383,2a79beda97d13010c7ff92236c222007:-873113727,8948be1a4ed1301041eafa1536ac041d:-103414810,2fa9391eff11301033caf61da0da799e:-894058496,95a839dae51130108764f203389908b6:2054890175,737335967f1130108971cafcb57e2b44:-894058496,56c23d56ce113010d502ac04adfe74e1:1633662140,5c72b5160c113010084336b761ce4756:643345150,d068c28aa8d530101db948af7ba8239a:-23925033,4b6ac60887d53010d667ab54e1e40a96:1496936310,692e38a7cd09b410a4c27ea2d40c3de0:758876471,6316b3934345b4105b52e021b3d1ef2d:1145551830,e1acf69f4b41b4103bc2faadeb69c5aa:-1218594379,cb44f10ee08d70101e6b9bc11086b740:1937060360,5bb179862c8d7010de1f28345a1ad954:886223797,0b653af957857010e1340cd33a0c7f07:139813638,0894c9f67cc4bc100c567c80812c550b:2001098178,c36830ba1984bc10a2e89675cdd685cd:625685149,bdcc207e3944bc1055b912004ca727c2:1515882983,dea9e8faf944bc102fcd3b1e682ee004:1956979772,9d19e0ba5044bc10f0eb46660fe47b93:44367547,3c10e8b24744bc104400af6037f3bfdc:-1683341727,db7dd432b844bc10c256b67aa91cf523:159223957,ba7c1cfedb04bc109b18fd915ea367b9:-1404471217,064c5cbd16487810fea4a5d0d1041a08:-2114543901,dc303e217ec8f410afe416bc96f7b8d6:-1236778302,ffa0b46d0180f410ec2379171006ae71:-975717981,8662f65d9844b4108fded3b991fdefdf:-1597550291,9e90bed57a44b4109e6823219f6f726b:1764619231,2ec06d118200b410452175fb89dc741c:777528748,09d92bd01cc4f010c858d6fa0dfb8538:-1597550291,76692bd01ac4f010f29568d608ae035e:1123052255,da19e7d0d5c4f0108b1e2af6a63dbda8:1748350576,dc38679096c4f010de5d33002885e038:-2067220712,b23053907e84f010ba3e475cfe3916c6:1742030629,e12336d074c0f010e28317d64725e4db:404209682,9fc28b008c48b010b5f44da85302373f:2093836496,809abdc4aec0b0109314c438c9445c72:1828814501,b426890f16ed24104eb06bd3707f620d:978129698,1f2012869529a010c9ac335fc0212fa2:1863126050,a195fd71462d601042a70b3ed7505b0c:-1094513268,02d145bd1ee56010187d897cc069d50c:-2049120407,aa95abf573716010a7e6596e0aa51eb8:-1119275197,7133335b1bfc60108b68bcd029c486cd:-1248349667,ad066d6a8b40e01070b9868faf802310:414613121,ce9d7546fe0c60103bb117bb05cd58e8:-900399123,583bcc31cb482010cb51f10585932351:-253188850,d8bbfa5857a81410885fe2702decad69:-222451069,6d3836586fa81410b64135110f07845a:1426417438,7f4ea61008a814105bb0623112681f34:-1697781262,5504e7fc67cfe410908e53ec7671373b:1052121482,faf3a7fc0fcfe410fb68e9375f530646:-1572742019,424d66fcbf0fe410461804059ea9b613:1275560152,93d990b4a087e410333a6301e0fce64b:-1053060227,8e89d8740487e410e75a976860acdd1a:1352115786,53c79834a087e4104562b63e9d3b54d1:75220655,c4c61cb0a187e4100e282756ec930771:-532925700,28773f2862c3e410db7742d5f68b0d27:-38544222,a6ecc7641d43e4100c4cfea8b606a5b0:-704917293,522b4720d543e4107bf2ad9dbf5f18e3:1761178894,7df44ad05543a410d97f9cf28b7ce1c4:-671711741,8d8f7910ed43a410371c600297fdd3ef:640932867,542e319c7003a4106e1ecd7d2e2ce8b6:413881848,9c21b114bf03a410066f73f0e0348cb1:-1975784582,f18da98cc4cbe010a2aeaba055114e2e:-1182076052,c3d79dcc8d4be010f518a27f02b38c22:286628835,c65ef52b6f7e6010569c1d2595e62017:1574671229,671284c95395649021e9bf86ae95c6a2:-1798525142,96f7c04f2dc1ec50fc3a3363b63e67ed:-924820790,ee5b0e9271492c500f2ff7042b3798eb:-1072175383,43f7cad242492c507a50cf363869e76b:158209914,544e3b869c812c5049e311e5e78771c5:880644709,ea3b3b06c1812c50c17446a439ecee80:543152726,16b3fb8a0b412c50c6b9c8333d70289c:799518062,23c768c2df41e850105d13d6636dad71:1273575756,6644e80e3201e850241dda3c6626b030:1893419777,a872a40ed901e8505bccf5e575fdc2fe:124208414,fec95846ae01e8506bbc7be81e34d8f4:-1259745400,0ba8900adbcda850a5421575ae395dca:-1411773714,479550863ccda850b4ba436bacf50854:495795212,3bd048c69a8da850bd3c51cf2e80fae9:2127393807,51cb3f71348da850d38e606e29c29d8e:960917161,553ab771618da85013a673b586cf1aaf:1691952765,5c79f731fa8da850c751e360ac5a457a:546903797,7b8877fd144da850dfd5b76b8bba1be5:-1475075701,40567b3dba4da8508faa9532d8f93fea:-2070185505,ffc3bbf9ec4da850bab7e2a06d0d2655:-1186210127,5a723779524da850115e530226b84a21:-1534487010,1a61ff79744da8506413aee9b8c413fe:-776330007,76e866b98189a85052c60df4e09d3703:225862160,0528a2f9fc89a850a011d6d6d973b642:-1653642524,48a923a5a901a8507278819238f09d0a:1107152166,f0e8afa5dc01a85004861d9d2c8ded25:170806457,2b08ef65b501a850815b8a8b099bcdb4:-2007732508,a396e365b301a85076fb5bb21cc1eac4:604286959,321caeed7c4d68502fbe7bc62e60278a:-986715070,ef2baaad944d68500dec54f3cf04dfdd:300070527,bf6a2aad274d6850db439ad45fb558c2:-1303157774,5b79ee2d694d6850acf2b515f99ed9dc:1717411726,a9d8ee2d4b4d685061c0c372939474d4:2042682380,6a57eae9dd4d68500d029c5e05a5aca3:-420916568,b9a66ea9784d6850cae34be1efaa806b:469150966,1c5266e5614d6850aefcdf0a369685d2:-420916568,0f9f1665194d685079511da596dcbadc:-780693086,b4be1a250e4d6850d3e2d17bbfd77e7d:1684617682,324a9a21fe4d6850677892f422253bb1:1004709379,b83cfdfb77bce05069bbbedd0b84aeb6:1202956061,949b3d7f4dbce0501b373fd86ca609bc:-80064605,5d89bdfb65bce0508d30bce0fb6569d2:1329650593,8248f5fb6ebce050555ffefb335dafec:-1404821254,5067f1bbe3bce0506f71c34994c98f2d:-136706052,33467d7bb6bce05014169e39e8b2f93e:1244217713,d83075f3a47ce0500c2cbd975db5e8f2:-136706052,8cbf2dffc63ce05026ac1f6e8803adaf:1949032831,7cb99fb947d4a01025ded59556122db0:1956392330,71786959f29c20100afbad5cf0519894:1749880423,600fdbf54c1ca41014a39381a5569db5:1825285262,0dae74919650641046abe9cc1d934b0a:818346226,e5b9fc9996106410750f9824d39c42cf:-1802695986,01e1f8991c106410f4661de937907bcf:818346226,6b44581520dc241099f5845d41bc253d:-1802695986,04f05c11ffdc2410155ecb261246f57c:818346226,4e390c99999c241036cc8fd5181b9b00:1197657154,4c4740593e9c241005c36088d9c5140e:-652669506,45658c95fb9c24108da15da51d93fcec:1456791420,ce13f455471c20109b52d77a08b63023:1931544952,ce3b738d53582010f38417e9c37e8b45:-343746566,0ed377491958201096074dee92bfd72c:-1889014731,289ea745d45820105735f8d878931067:-752772320,f2bda345b6582010afc35260f6bd0a9b:1931544952,815f5b8589182010f85c7f11e67d4633:896029596,a2959b8d9ed42010547d1078923946e3:1974254498,c3d117c194d42010316e7d239621d3f8:1718431264,1a9b4bc5dc9420108160c0ba16ce1d42:1154873632,158efa4d22542010d706447b6d25f06e:1931544952,1ceac6b0d9dce0106130705a3526bb47:818346226,261e0c011e44a010329ea89750c70bb6:-297495146,f88e8c3ee6279010defe4cb88347daff:-2114596452,d40a40fa0f279010937fd846e9ae02aa:-1072684777,67f7c47ad5279010c1f6061079839670:-1508815645,3a1688f6f12790104a87999160c3551e:-506495686,44917eae4e239010ace87b3881e4b52e:-453292565,9c74216a3c6f50100017cbecab6756ec:1704120742,79b1c59619a3541081ce707d6a8078b9:-757777704,3ef6f7c652af1410037984966db2582b:-1353144863,cc45b3861eaf14105b1407d8790a934e:1691174747,93d0b3c2fcaf14107b0747ec2d9b7728:1994049734,0ccb2b8ecf6f141090370f558d2d9e32:1319516589,80ccf4548fef901004909406734c9e9b:-1419446835,c544a8c89ee3901010c73694e96bd814:-1611725051,2f1b0423b15f945026adc75892cffbcd:-973350525,540bc0ef9d1f9450698d530f74f020d0:1768524489,052dea1e0fdf5410dd3eb285b864e31a:2082993841,80cc7b4aeed754100ae7fba1da99c958:133374141,118cf43988571410f0d775410cbad636:-311151564,647183957f97d010de0799a0c9c09353:-1464483874,59fd7e914197d010b9c80246b5381591:505985574,9ef53e1d3457d010745e68050a3a361b:-1835021188,7e9234787c135c10a29ac76dd12c0c1b:-886866650,443a54a449d31c1026a8889019665367:-972003283,a8f72cf408db5010ce85dd14aed34300:-265393012,94942434e5db501098287674fd1b11ea:390189069,305a0f101b1f10103e76b55d36432238:-803966239,cd37e2273a4b14d00e00c8ea4fc368c8:2083481506,0e49426f4ec714d0599183b88f710c67:-1853716016,0e5206e731c714d0033d11b6f766506f:-1191682670,43b77d2f078714d0c38db37eef69b93b:-1458451042,176e992f934714d07919ef26a5f6c826:-1835565315,ca4959a7b04714d0c7ea4d866703c363:-21776464,373da82b0fc314d056ec0fb088fdef10:-1189115584,2701ee95bc0b9c90334b8a3e82595306:-21776464,a9406e954a0b9c90ee9d9fa6b60c8f99:-487855012,c03f52950e0b9c90cbc28f1913741e43:-2002468985,8bfd9255e80b9c90c66269795ae07b98:-1781373952,51fc1e91a40b9c90cc46074347625f9d:940757277,65ba1e91410b9c9001c6b95a8858465f:430781602,bbff0299b1c79c90c52f4ca2949e3496:1930685275,c7cd136c287a5c5004fbbb5347b2893e:-978672403,1b68ca087bfad85095d4b515071460f9:1412890268,d8020cd7f32a18501542e492c89227b4:-1784815411,5c4ef3c70e2a18505023d691b958d135:1084107214,ad3b7347f92a18509aa3e286a0786cf2:-111277951,509eca4fede21850189cfd7f365949c3:664959234,ee95067ea3e6d450ebddf0996486c44a:1899846916,705ce53eb6a6d450467e419c8b937ace:-752552378,5e5ba9fa7da6d45061474e110d462b9d:-213033077,dff7e57ab8a6d45002fc5c5e962988c4:1416951758,49f68e62fe6e9450993595f852f20a4d:1318241134,db9f851db0229050d0538ad782511dd2:706123116,d888f899a0ee50508293a6650ba4fef6:327350398,93283c9965ee50507449f5431874b406:-1821556684,54c51cd9456e505023eea5b728f8dece:-1966536315,fdf1e964776edc1089104a23e244ead9:1459432044,276fb820f42edc10227a58f6a959e1db:-1629811561,96df1868f4aadc1086ce8de40a40874d:-975929926,c8acd8a43daadc102b0bd772c46503ff:1937685308,6ae654a0aaaadc1029e9c7faea41cdbf:-1094669477,d6bba1d053e2dc10e1ecb17018d740a6:2008385925,397b29d005e2dc10168eac126eaab390:-2100419,2f63615cfca2dc102eb25a7daaaf2a0a:1669130703,a2d22d1cefa2dc1096c21bfeaeb5171e:-840613039,15c1e1d897a2dc107c779fe741c246e8:1386909292,08ceb32dc61e54109ed8c3c85726f0c0:808682612,0332022d149254105dde4f93ab966bf8:1653264036,7e551fdd56da141085e9207e2a9b87ae:1324719197,ea73df1da0da1410b7ebe4e1a9c401bc:544689539,4d6ecfd928da1410d51c2dcc4756c67b:-522283268,67dd4b19bbda14100118806d4251dc56:-668770748,ef0887dd8c9a1410654461fc906f4215:-1490220843,82e8ba154e5a1410f589a1f824fc6aef:423898695,f2ce4ed1da5a1410190b0c8e8e660b4b:-1383971186,1f914e994f1a14104bae255f59bbc4ca:-1770010683,6327b055a956141053d2d8565f66a72c:1653264036,34558405751ad01003b3dfdee4d0df15:-1589461900,788f6f3401d6d0100852af66f704f761:918778182,181eda98761e5010b2c337b2ae57cb3b:1857624514,f0d92e003fde1010c6abde10f5f07e43:1996722411,82a5e984dd1e10107d82d965b18f1eae:-1143426329,223431d89db19010a4222adb0e2b9e67:-786280282,cdde615474b1901046e194a50f5c2c58:-1381902805,665fcd103cbd501055880a66e20c36e5:-20109215,64810b42ef5814109ea4d7cc4b94bfb8:634624677,2414b7413fd340100ab96503ad3b9043:1243306487,f90b4665057e0010f82f440f315e14d6:895557797,7e9a8a25ac7e0010108dbe64c495c61c:-240350596,091b78b66e2a08101d6d7b394bcc3c23:962085174,7ace8a2566f944108f2fbe7b6b4a8f47:-619924775,488d02e110f944100e0c10f37707451d:1436885151,25e698323c26c4102bee78fcb4ad32ef:-489282716,b6d69832c626c410e399918034141070:1489889436,e8fa48f6fde2c4100fdcd326b7c50319:-188913381,f4a7cb39f2da4c90535f3e4b459355d7:1489889436,8027cb3dadda4c90f05ddab210c7dbff:1400837256,d55c4ff0c6de8890dd45017934b5a404:98391846,845817a6df86c0904d3fc8f65e7e68b2:-1490974487,dd3e0bd12ececc506edc475b09c5a304:234685501,0d6d0391a7cecc505d9ec6630f0b9bbf:-187821833,e99b275b75d10010d9ac45e21dde275f:-773442937,737e74ee38dd4c100a3e164153202439:-773442937,4d8cc49d4d3b3300642ae47270967437:-196710761,66d1b049bf673300a2a00b6ac7858c8f:-606098479,f8ff1ef87ea33300a621c627b365b32a:-23074358,29cf8630f5a333004ebcedf484ef7da7:160107851,226745c109df3300058004ef4329662a:1287672369,4f1bceb73f723300fa88fd5f6fb3009b:1350944049,394b9eb2b5323300623f55faa66c4c4b:164513330,71995e32ea323300f11b8f37500d71f6:2003884812,a285315819b23300cc8d214fbbea6a85:1057742611,04a9a1506bb23300d1b4f99cd9f9aebc:-341199199,cf7e3d219ed2330016dbf489fd36512a:364011551,26daf3d0115b3300d7df0a1b6b499550:2100539652,c4b62a8e45833300c16c80827a0bddb5:-2106673940,51f5354e210333007d826a13b7233bae:-1660207223,188d8124770733002b1ce730932fd34c:-585697185,921b85a09807330016a904b0d3082cc6:-1717599105,27c341ac42c33300c1878076156cba9c:-1848319183,afd8ec28ac8333005317535b27652df6:-1862363404,a050073389f23300bc9bc30da69d915d:116100837,44b33a3734b23300bf5c3983878d35bb:-1901038290,4152f6dc851b33006c373ac56a3c2e79:-105921103,13f989f3a8763300c399af02bc036190:922083935,e3a38dbff8363300e9f74f2bcec3ef75:1049050207,8dbeb50cf4f237006308a5ee1e3576d7:837693920,a3a9414732aa7300517a6cfbe4d0f443:-1694841871,736841476daa7300df223627e81a422d:-455925086,7a28a8cf332a73007a7b0909479ac499:-1642389155,0fd6a08b872a7300f9e52681d837360d:1608356289,45bc1b5293263300aae802582ec50c42:1288712297,8cbd17d81402b30094b6c16e215cfb6f:671347422,95ad93d85c02b3009d7da25f84f6fd80:2079983789,ea7d57984f02b300eaf8cf0faafe94a7:-1913613458,0d2d9f589902b300ec0e2937e4a3e889:-613689569,f8e5be387db133009d0b755c13ad734c:1431244435,5fa5b27888b13300720322b21882f59f:1997697946,e515beb4bdb13300829f33cbc4048368:1431244435,d5053e38b8b13300bab751260a671e8f:-657735429,ecf4beb473b133002bcf5c564434c862:-79630822,179476b4fdb133000d731b614db85fbf:-1192774096,6ad1f6b4b2b13300d7c8c0ee6ea63cbe:485210149,ba0a6e27928933000a4e2fe32d914015:-2137698367,68e9e227a889330092302a8490680237:146338070,0889a227788933000c5cabc625e76f08:-956749601,8b39e2273f89330032cd047a57299611:-930249815,8aa8eae3a58933003eae4bb76ee97178:-368883869,50882ee361893300181f09206ae7b196:224801338,9138a6a33c89330056496dc125c69000:-930249815,42c4a623d489330063dbdf788883b81a:224801338,51c3e223d48933008dc6c5ffabc95687:-1249303010,d5a32a2320893300fe5a564075394510:-563858118,5fe75fd5e7f8f3006e0f24eb7a5c330b:1940707134,0b741b55abf8f30050d7f7f0108e4431:-916866881,b9245315c4f8f3000c0b0636bc813459:1940707134,286260248f347300b0cb116f22d5d9c0:-340599730,cbd5660089b033009ca9fbdb3f981550:242071225,38c4220025b03300549412e860594238:1248019066,b2f78345d938330022e8163616318bfb:-916866881,574e22c114f43300474f50d862c2e80f:740336665,430beca61560330049573282a2151f4a:1045069710,33c018ea0e20330036d2c9aa0c6c6eb1:-449477038,2a7516f516ac330007929f7f4e7b4cbf:-1728002532,4d9695a59da03300454632bd250dbe0e:-686833060,17afcd21cba0330007eeeb0c05a3bdf9:-5734586,3f9e3ce124603300ed9e2fe5bfafda18:580628307,9d9dc1a45c203300148ae094fbecbf95:1105464653,4becc9645e2033003fc6e2e7d784bc5b:205510779,016f2910b8a43300c7633a084025c163:-1192592317,92de2910aca433002241b8e17431705a:-1128989472,b48bad5c8c64330007532841b78f996b:-1192592317,9b0ba15c2b6433005396de3858f07949:-1332793684,266a651cdf6433008fcc5aaa42aecf53:819724920,ec6aed1c306433002a64cb90de5d0c79:-2108043731,48c9a11c1f6433009bcbdfbc7befb3be:501798792,be39e9980b64330061b4671af21df457:37355671,6668e958966433001b2955f4d92e87d8:1816329663,01286d9849643300d45ba91d14f9ec1f:530496545,e1f7e9989b643300eb75f50a9da1fe1f:1506922453,bd926d94bf6433001e428831acfeada9:905650760,dd3161944f643300df783a3b32cddd6e:-176307336,5eb06d542d64330002dc7de780563918:-1819690224,774e4d583d2433001ab14e226bcc5760:1134764883,b29d4558d224330091dc245a49e9c235:1987469742,2b3d0158b9243300dcb54951de8eb273:1209416231,04ec09942d2433006e1758b54ee95671:296884906,85bc055491243300245c470ec2d484aa:-1943028381,46f8cd5c63e03300b2b542d12334bf73:-814625405,30858d5c1ee0330072fe714488812287:1939235230,a035895c5ce03300a04351d79333fa80:-1314008035,60f18918b1e033000f1a0f66f6d4a976:-1054687432,4f8181d843e0330056ed54df419dfa38:-1368795912,ca6009187ae03300a89b739be8322c39:-558566977,478f745807e03300a441bcfb4b108eb4:422450520,b23e30185ae033000cdb8a1d0ef630c1:994389272,583db8d00ce0330014a3c2dc79f8ab7e:-558566977,79dc3cd02ae0330055df960a27057f66:-842402365,229bb8d0d2e03300f2af5174a5bae371:-1344945547,cd5ab890dee033000fc7b1ed6cc1ea65:1186390139,f899b890f1e03300185b436e2c12ee59:-1468292131,08a8f09cfda03300a12136cbf4b1308b:989091510,fed730dc59a03300af4428beef2095eb:-565203453,0807fc9c43a03300a28fa27f362188e5:-1351940065,5866749c05a03300ef37d63550908875:355025531,d1337c949da033006d8db87b34bf7b85:-1625264730,9a32b498fca03300691f1a0f89237a70:2135051506,9b9de4d450a033009747598e351eb6bd:1484497801,6d796814ada033005d2197f4e087edc7:-807304465,37269c941c603300f10b3475fb0db9f8:1643047043,f0445814ad603300eed47414119359d0:613711983,1002d4d80e203300c9c597f999d395a4:625752115,25514094102033005e43476a828e8b68:-1462088996,1830441471203300067bf95a3612f4f2:-448985038,db6f330413203300b19add01431e09e1:2118546340,3fce7bc080203300a06d7a1e2dc4fede:-996687411,dd706404146433008bbe9de4ca2e50f1:2083510104,6b10ac049d643300862c022785d8a554:21081769,5cef1804c864330099ab3d085a8828b2:2077550605,35bf58c0986433000e8d9e35fd8f74a7:-261333179,aede90c01e64330095c3b7646ab73313:833584705,c24ed4c0c2643300fb79c0ef90a49feb:256837824,5877548caf243300bfe10e06956be6f8:833828024,1c85940c232433006b8fee6c22ccb07c:-1617299660,2d04500c652433008dc474e8dc2089fc:-930269075,c9625c88b5243300b18cb3addc089fc9:-108223603,21ad0884d324330047d90a3168c56fb4:865994012,8b0d77fb5fd0330062d89d96ce9ce23a:-1453164596,9dfc73fb61d03300a34499d2f97ebd56:990251154,f61cf3fb65d0330079b8febeb7bcbeef:-426502655,2a7b33bbd6d0330004b081e761ce189b:1722936059,b3f6b3770bd03300ac654701993ab75c:2084357535,35463377d4d03300fe12d189f3ff1b4e:1814720369,a5f43b3780d03300c2adc765c330cd27:1683285281,91e43b371dd033004494a6e2badf2665:-1452414482,f084b737f6d03300802f386ba50c66c2:1994777878,7264373396d033008d8afe1b9bac8b54:1949531399,8234b733d5d0330096766d96870eef8f:1867943043,8d027b3339d033003bf2b3e75d39fb7a:-1529618159,9ef07b333cd033001c8a812646c39450:-1338511374,5d0cdb7337903300513e657281ba4ac7:-869957497,1d9418a20a607300779ad5d660d2f5cf:242071225,22a2d4a2a560730029d51557b7e8625c:468121486,ba87ff5685ac3300470aeca2417979c4:457185806,5d33379a942c330051b08077d53166ca:-324171223,5e0a901e982433003a5be9d03317e7d9:-695220937,480a9c1e21243300972a5fa9b6fc36f1:-1425888095,68492f426da0330018742cd0a1a520f3:1177801854,ceeeb5a4c66c7300271221bbf82981fd:-517859935,dd7e35642e6c730064092b4d1a0b083f:-56157088,f96ef9244d6c730027bf39f8bf8e701e:304172562,0ced7de0396c7300875590d7e7b964a8:-224793420,b74cbd204f6c730060feada1a46beebd:771833043,142a31ec452c73004f6c6b3d4b773d6f:-1946916351,65090bbbfa503300a1c25cc777e1a0d0:-226920833,ba540b732950330054da201eb2a10728:-1224007526,c11f36fb3510330063249c46357e7274:553711594,d2323aefe4d033006781c0dcb579190a:305266318,84513a6b2ed03300363049f5d599a935:-207817255,02e875ab6f10330044626629c49f808f:-157976821,1f67bd1bd514330044036c93c9942ce1:-1456705847,7201b91730143300d7b0aef5c03a3ab5:-1947629520,06d3ed9b34d033003151a5e006cc1259:1204133930,15536d1b7ad03300e6d3d9fe12887a24:-1947629520,a8db8d9bd8903300a38e7e1b9d1779ee:-29372202,eeb945977d903300373a1463f406aa12:1607548734,91d860df3c103300437c2418dc8b11aa:923734581,cbc7ac5fd31033004df989a90828e458:-486607586,b95258717b5433005bfe4c0aa2198d52:-636006611,998198312f543300065dab2115a1affc:-1100820701,43c4b3e556d033001cf71703b1c1d87f:-1331341088,130433e51ed03300ac877619a2a7b633:-381905904,35fba3adcd9033007356e526a0921a47:-915416134,62aaa3ad48903300652e5a8b66faac01:554674915,325a5be1aa9033007bef586a30bcde38:-622606522,2fc73ee93f10330047a8574d0e07545c:-615827199,20bf3758679c7300d66cc61e1da10e9a:99014874,d946f43f46803300b0ae4cd6d1d97957:-300316472,2464bf91614c33006090d33e6b1a26b5:2025526483,1ca8f9a0e2043300e6ffd90d262e78eb:-306487907,57827daca5c033000a46c97edb2644ce:-1632906844,8c2d9d6cac80330059ccacbce573e07b:2045530966,4feab4e468003300fb639fe9411d673d:-421049205,cd3c012fd13f2300c987e59ded575bd4:-1155114592,a7dd9eaabdff2300232f12511c66cc20:-1450768630,8abd1e2e08ff2300b0cc1333814b2ba0:-151118726,8d42900570b32300625fd75ade273e62:-991646019,0db19c4d867323003222b8dabdf8421a:13923263,1bb094c166b32300e4a8ed73ca2a4c98:155818461,e288444d0b732300c57f408658f19512:1859269087,d6d70c0d7e7323001ab168acc7c4f448:-2019175556,a897044dcb732300ac1330623d2f15f2:-1430529820,b0d6c00dfb732300eb0f27a6bd27aba2:-878062264,da164809c97323002a55c6be5e53192d:1947595948,0854844902732300a9b82b3b23c9fc64:-6698668,2dd0eb20b9336300d308a45b4821b241:599934240,ba2b4b20d4ff23006f43234222ba0e17:241717613,601f3ee466bf2300083546a7519fa9ff:599934240,0cde3e2872bf2300e78fc6ddbbd69f9b:-784709088,7b2d322814bf2300e23ae2342d7cef38:-2060232275,a20ad6d884f32300d7795f1a2ed187dc:-784709088,4c0a525817f323006dbca50591a874b5:562560447,2983a444c8332300477cf7ddfdd9eba3:2110445243,5819b4c7262f2300903905b4f740f265:1794159858,18da1861551a230059a4da88cf93e53e:-119375368,fc0106c75b426300737d1ea362be3c65:766145999,be647b72a10e2300ba61f59a16accb6b:-881141664,97e7a5d67b8ea300017b5a854573f08c:654402228,3da7a5d6118ea300d73757d4271e3694:1679016760,6ed66996af8ea3007cb315d5fe76522f:-362004021,0d28b456430ea3008a1dc4b075cb5775:1679016760,26d2ec6de406230073e77e1063b5c11f:-1877681683,9fffadb4a40e2b00baa1b5d2083ec947:-539943379,265ead74890e2b00cb29c8238bd4d2c3:945306347,fcf7c95bbd31e30026eceb01d93a973f:-948813167,2655f81faffda300bcac36971c2d3da1:-1897223609,14bd4d0f6c75a300fc22f003f3d24121:-890451674,da6dcd0fa475a3008d2d3f9a5843991a:-823618084,5ea2c9077275a3000c33a10f8c4702e0:-1507601882,83c16176547d6300e392f12f605bc079:1070470887,fb76e8a1dff5a30079aca374f90904e6:459750355,1914b79d0835a300dfdc41e6ef6141ec:-660112213,6212955daabd63000bf2b8264889aefe:-1176744584,a1bfc5dd65bd63001eca863d7b45bf9e:2033454981,8c3403f4fafd23005dd30f89451b8fed:1116140324,2451363c2dbd2300360de60bdb83aaf4:229073458,6231fef859bd2300237e41b1519a4b95:683530586,a2df22f812bd2300d155ec0e69a7065d:-681667144,fb3a709ddf6d2300cc5fc2a09ac99aca:1461204843,37da9bb095212300ab2488cb274b5788:-2142886880,169918b8a9e5230049b34608d4c84d0d:-171081800,bf79aa6c17a12300e8beee32ee6951a0:1145764236,28856ea42ea12300fb5dd7ec6dd873ae:770636087,4f42ee20e4a1230065cb815a5893f72d:-1333210511,84326e604aa12300e7dcf34ddd869739:657952991,6188951cf1e5630036e3aaa71aace676:-1860823237,10159d18a2e563005a96007e408f0c64:688998715,a064911875e56300c9c0f6c4cb20b8bf:231740739,cb231d9490e5630026b0ca34e99b3458:1274530003,6af7ed33a391230086d4e63524af7e22:187149776,1e1e4dffdc1123000c2b58f6673277bc:-755183496</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_75c3833837fd2300fdfc097973990e2f</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Nutanix_ConfigureSettingScripts&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Nutanix_ConfigureSettingScripts&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Nutanix_ConfigureSettingScripts = Class.create();
Nutanix_ConfigureSettingScripts.prototype = {
    initialize: function() {
		this.appUtil = new Nutanix_Calm_Utils();
        this.logger = new Nutanix_Calm_Logger();
        this.appScriptInstance = new Nutanix_ImportApplicationProfiles();
    },
	_updateOptions: function(fieldSysid, opt, type) {
		
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._updateOptions");
            if (type == 5) {
                var grQust = new GlideRecord('question_choice');
                grQust.addQuery('question', fieldSysid);
                grQust.query();
                while (grQust.next()) {
                    grQust.setValue('question', '');
                    grQust.update();
                }
                grQust.deleteMultiple();

                for (var i in opt) {
                    grQust = new GlideRecord('question_choice');
                    grQust.initialize();
                    grQust.sys_class_name = "question_choice";
                    grQust.question = fieldSysid + '';
                    grQust.text = opt[i] + '';
                    grQust.value = opt[i] + '';
                    grQust.insert();
                }
            } else if (type == 21) {
                var grQust = new GlideRecord(this.appUtil.configuration.table.dropDownTable);
                grQust.addQuery('variable', fieldSysid);
                grQust.deleteMultiple();

                for (var i in opt) {
                    grQust = new GlideRecord(this.appUtil.configuration.table.dropDownTable);
                    grQust.initialize();
                    grQust.variable = fieldSysid;
                    grQust.name = opt[i];
                    grQust.value = opt[i];
                    grQust.insert();
                }
                var fGR = new GlideRecord('item_option_new');
                fGR.addQuery('sys_id', fieldSysid);
                fGR.query();
                if (fGR.next()) {
                    fGR.reference_qual = "variable=" + fieldSysid;
                    fGR.update();
                }

            }
        } catch (e) {
            this.logger.error("Inside Nutanix_ConfigureSettingScripts._updateOptions " + e);
        }

    },

    setServiceVariables: function(current) {
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts.setServiceVariables.");

            var performAction = current.variables.type + '';
            var catName = '';

            if (performAction == 'new') {
//priyanka More 
                var profile = current.variables.multiple_application_profile + "";
				
				var profile_arr = profile.split(",");
				
                var blueprint = current.variables.blueprint;
                var catSysId = current.description;
                var service_data = JSON.parse(current.variables.service_data);

                this.logger.debug("Got Profile:- " + profile + " Blueprint:- " + blueprint + " Catalog Item:- " + catSysId + " and Service Variables Data:- " + current.variables.service_data + " for setting service variables");

                var fieldGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                fieldGR.addEncodedQuery('cat_item=' + catSysId);
                fieldGR.query();

                var fieldInfo = {};

                while (fieldGR.next()) {
                    fieldInfo[fieldGR.name] = fieldGR.sys_id + '';
                }


                this.logger.debug("Fethed the mapping of fields to sysIds. JSON string:- " + JSON.stringify(fieldInfo));

                var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');

                for (var i in service_data) {
                    var serviceName = i;
                    var categoryList = service_data[i];

                    for (var j in categoryList) {
                        var categoryName = j;
                        var category = categoryList[j];

                        var keys = Object.keys(category);

                        if (!category[keys[0]].notCmplx || category[keys[0]].notCmplx + '' == 'false') {

                            this.logger.debug("Mapping PortList variables " + JSON.stringify(category[keys[0]]) + " in Varaibles properties table");

                            gr.initialize();
                            gr.variable = fieldInfo[categoryName + ''] + '';
                            gr.application_profile = profile + '';
                            gr.catalog_item = catSysId + '';
                            gr.default_value = JSON.stringify(category[keys[0]]);
                            gr.isprofilevariable = 'false';
                            gr.runtime_config = 'false';
                            gr.uuid = '';
                            gr.service_name = fieldInfo[serviceName + ''] + '';
                            gr.category_name = fieldInfo[categoryName + ''] + '';
                            gr.insert();

                        } else {
                            for (var k in category) {
                                var varia = category[k];

                                this.logger.debug("Mapping service variable " + varia.name + " with value " + varia.value + " and runtime config as " + varia.runtime_config + " againsts service " + serviceName + " and category " + categoryName + " in Varaibles properties table");

                                if (varia.data_type + '' == 'LOCAL' &amp;&amp; (varia.val_type + '' == 'DATE_TIME' || varia.val_type + '' == 'DATE'))
                                    varia.value = this.appScriptInstance._formttedDateTime(varia.value + '', varia.val_type + '', true);


                                gr.initialize();
                                gr.variable = fieldInfo[varia.name + ''] + '';
                                gr.application_profile = profile + '';
                                gr.catalog_item = catSysId + '';
                                gr.default_value = varia.value + '';
                                gr.isprofilevariable = varia.isprofilevariable + '';
                                gr.runtime_config = varia.runtime_config + '';
                                gr.uuid = varia.uuid + '';
                                gr.service_name = fieldInfo[serviceName + ''] + '';
                                gr.category_name = fieldInfo[categoryName + ''] + '';

                                gr.isdisabled = varia.isdisabled + '';
                                gr.issupported = varia.isSupported + '';
                                gr.isservicevariable = varia.isservicevariable + '';


                                gr.type = varia.type;
                                gr.value_type = varia.val_type + '';
                                gr.field_regex = varia.regex + '';
                                gr.data_type = varia.data_type + '';
                                gr.uuid = varia.uuid + '';

                                gr.field_json = varia.field + "";
                                gr.is_hidden = (varia.isHidden + "" == 'true') ? true : false;

                                gr.insert();

                                catName = gr.catalog_item.name + '';


//                                 if (varia.isservicevariable + '' == 'true')
//                                     this._createOnChangeScript(fieldInfo[varia.name + ''] + '', catSysId + "");
                            }
                        }

                    }
                }
//priyanka More 
//                 this.logger.info("Set service variables values for " + catName + ".");
// 				this.logger.debug("Prince Logs outside for :::   " + profile_arr + " ::: " + profile_arr.length);
// 				for(var i = 0 ; i &lt; profile_arr.length ; i++){
// 					this.logger.debug("Prince Logs calling ... _createOnChangeScriptForDependee ");
// 					this._createOnChangeScriptForDependee(catSysId , profile_arr[i], true, "serviceVar" );
// 				}

            } 
			else {

                var profile = current.variables.application_profile + '';
                var catSysId = current.variables.cat_item + '';

                var service_data = JSON.parse(current.variables.service_data + '');

                this.logger.debug("Got Profile:- " + profile + " Catalog Item:- " + catSysId + " and Service Variables Data:- " + current.variables.service_data + " to update service variables.");

                var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                gr.addQuery('catalog_item', catSysId);
                gr.addQuery('application_profile', profile);
                gr.addQuery('isprofilevariable', false);
                gr.query();

                while (gr.next()) {
                    /*if((gr.category_name.name+'').indexOf('storage') != -1){
                    	gr.default_value = JSON.stringify(service_data[gr.service_name.name+''][gr.category_name.name+''][gr.sys_id+'']);
                    	gr.update();	
                    	this.logger.debug("Updated service storage variable "+ gr.default_value);
                    }else if((gr.category_name.name+'').indexOf('port') != -1){
                    	gr.default_value = JSON.stringify(service_data[gr.service_name.name+''][gr.category_name.name+''][gr.sys_id+'']);
                    	gr.update();	
                    	this.logger.debug("Updated service port list "+ gr.default_value);
                    }*/


                    var jsonData = service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''];

                    if (!jsonData.notCmplx || jsonData.notCmplx + '' == 'false') {
                        gr.default_value = JSON.stringify(service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + '']);
                        gr.update();
                        this.logger.debug("Updated service port list " + gr.default_value);
                    } else {
                        if (service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].data_type + '' == 'LOCAL' &amp;&amp; (service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].val_type + '' == 'DATE_TIME' || service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].val_type + '' == 'DATE'))
                            service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].value = this.appScriptInstance._formttedDateTime(service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].value + '', service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].val_type + '', true);

                        gr.default_value = service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].value + '';
                        gr.runtime_config = service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].runtime_config + '';
                        gr.update();

                        this.logger.debug("Updated service variable " + gr.variable.name + " with value " + gr.default_value + " and runtime config as " + gr.runtime_config + " againsts service " + gr.service_name.name + " and category " + gr.category_name.name + " in Variables properties table");
                        catName = gr.catalog_item.name + '';

                    }
                }

                this.logger.info("Updated service variables values for " + catName + ".");
            }

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts.setServiceVariables. Error:- " + e);
        }
    },

    setProfileVariables: function(current) {
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts.setProfileVariables.");
            this.logger.info("Setting profile variables properties." + JSON.stringify(current));

            var performAction = current.variables.type + '';
            var catName = '';

            if (performAction == 'new') {
//priyanka More			
                var profile = current.variables.multiple_application_profile + "";
				
				var profile_arr = profile.split(",");
				
                var blueprint = current.variables.blueprint;
                var catSysId = current.description;
                var variable_data = JSON.parse(current.variables.variable_data);

                this.logger.debug("Got Profile:- " + profile + " Blueprint:- " + blueprint + " Catalog Item:- " + catSysId + " and Service Variables Data:- " + current.variables.variable_data + " for setting profile variables");

                var fieldGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                fieldGR.addEncodedQuery('cat_item=' + catSysId + '^type!=19^type!=20');
                fieldGR.query();

                var fieldInfo = {};

                while (fieldGR.next()) {
                    fieldInfo[fieldGR.name] = fieldGR.sys_id + '';
                }

                this.logger.debug("Fethed the mapping of fields to sysIds. JSON string:- " + JSON.stringify(fieldInfo));

                var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
				
                for (var i in variable_data) {
                    var varia = variable_data[i];

                    if (varia.data_type + '' == 'LOCAL' &amp;&amp; (varia.val_type + '' == 'DATE_TIME' || varia.val_type + '' == 'DATE'))
                        varia.value = this.appScriptInstance._formttedDateTime(varia.value + '', varia.val_type + '', true);

                    gr.initialize();
                    gr.application_profile = varia.application_profile + '';
                    gr.catalog_item = catSysId + '';
                    gr.default_value = varia.value + '';
                    gr.isprofilevariable = varia.isprofilevariable + '';
                    gr.runtime_config = varia.runtime_config + '';
                    gr.uuid = varia.uuid + '';
                    gr.variable = fieldInfo[varia.name + ''] + '';
							
                    gr.isdisabled = varia.isdisabled + '';
                    gr.type = varia.type;
                    gr.value_type = varia.val_type + '';
                    gr.field_regex = varia.regex + '';
                    gr.data_type = varia.data_type + '';
                    gr.uuid = varia.uuid + '';
                    gr.field_json = varia.field + "";
                    gr.is_hidden = (varia.isHidden + "" == 'true') ? true : false;
                    gr.insert();
                    catName = gr.catalog_item.name + '';
                    this.logger.debug("Mapping profile variable " + varia.name + " with value " + varia.value + " and runtime config as " + varia.runtime_config + " againsts profile " + gr.application_profile.name + " in Variables properties table");


                    //if(varia.isprofilevariable+'' == "true")
                    //	this._createOnChangeScript(fieldInfo[varia.name+'']+'' , catSysId + "");
					
					
                }
				
//priyanka More				
			
				for(var i = 0 ; i &lt; profile_arr.length ; i++){
					
					this._createOnChangeScriptForDependee(catSysId , profile_arr[i], "profileVar" );
				}
				
                this.logger.info("Set profile variables values for " + catName + ".");
            }
			else {

               var profile = current.variables.multiple_application_profile + "";
				
				var profile_arr = profile.split(",");
                var catSysId = current.variables.cat_item + '';
                var delta_profile = (current.variables.delta_profiles + '').split(',');
                var variable_data = JSON.parse(current.variables.variable_data + '');

                var variable_data = JSON.parse(current.variables.variable_data + '');
                for (var c in variable_data) {
                    var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                    gr.addQuery('catalog_item', catSysId);
                    gr.addQuery('application_profile', variable_data[c].application_profile);
                    gr.addQuery('isprofilevariable', true);
                    gr.query();

                    while (gr.next()) {
                        if (variable_data[gr.sys_id + ''].data_type + '' == 'LOCAL' &amp;&amp; (variable_data[gr.sys_id + ''].val_type + '' == 'DATE_TIME' || variable_data[gr.sys_id + ''].val_type + '' == 'DATE'))
                            variable_data[gr.sys_id + ''].value = this.appScriptInstance._formttedDateTime(variable_data[gr.sys_id + ''].value + '', variable_data[gr.sys_id + ''].val_type + '', true);

                        gr.default_value = variable_data[gr.sys_id + ''].value + '';
                        gr.runtime_config = variable_data[gr.sys_id + ''].runtime_config + '';
                        gr.update();
                        catName = gr.catalog_item.name + '';
                        this.logger.debug("Updated profile variable " + gr.variable.name + " with value " + gr.default_value + " and runtime config as " + gr.runtime_config + " againsts profile " + gr.application_profile.name + " in Variables properties table");
                    }
                }
                this.logger.info("Updated profile variables values for " + catName + ".");

                var fieldGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                fieldGR.addEncodedQuery('cat_item=' + catSysId + '^type!=19^type!=20');
                fieldGR.query();

                var fieldInfo = {};

                while (fieldGR.next()) {
                    fieldInfo[fieldGR.name] = fieldGR.sys_id + '';
                }

                for (var c in variable_data) {
                    for (var k in delta_profile) {
                        if (variable_data[c].application_profile == delta_profile[k]) {
                            var varia = variable_data[c];

                            if (varia.data_type + '' == 'LOCAL' &amp;&amp; (varia.val_type + '' == 'DATE_TIME' || varia.val_type + '' == 'DATE'))
                                varia.value = this.appScriptInstance._formttedDateTime(varia.value + '', varia.val_type + '', true);

                            gr.initialize();
                            gr.application_profile = varia.application_profile + '';
                            gr.catalog_item = catSysId + '';
                            gr.default_value = varia.value + '';
                            gr.isprofilevariable = varia.isprofilevariable + '';
                            gr.runtime_config = varia.runtime_config + '';
                            gr.uuid = varia.uuid + '';
                            gr.variable = fieldInfo[varia.name + ''] + '';
                            gr.isdisabled = varia.isdisabled + '';
                            gr.type = varia.type;
                            gr.value_type = varia.val_type + '';
                            gr.field_regex = varia.regex + '';
                            gr.data_type = varia.data_type + '';
                            gr.uuid = varia.uuid + '';
                            gr.field_json = varia.field + "";
                            gr.is_hidden = (varia.isHidden + "" == 'true') ? true : false;
                            gr.insert();
                            catName = gr.catalog_item.name + '';
                            this.logger.debug("Mapping profile variable " + varia.name + " with value " + varia.value + " and runtime config as " + varia.runtime_config + " againsts profile " + gr.application_profile.name + " in Variables properties table");


//                             if (varia.isprofilevariable + '' == "true")
//                                 this._createOnChangeScript(fieldInfo[varia.name + ''] + '', catSysId + "");

                        }
                    }
                }
				
				for(var i = 0 ; i &lt; profile_arr.length ; i++){
					
					this._createOnChangeScriptForDependee(catSysId , profile_arr[i], "profileVar" );
				}
            }

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts.setProfileVariables. Error:- " + e);
        }
    },

    _createOnChangeScriptForDependee: function(catSysId, profileSysID , type) {
		try{
		
        var clientScriptVar = [];
        var variableProperty = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
        variableProperty.addQuery('catalog_item', catSysId);
		variableProperty.addNotNullQuery('field_json');
  //      variableProperty.addQuery('application_profile', profileSysID);
			
			if(type+'' == 'profileVar')
				variableProperty.addQuery('isprofilevariable', true);
			if(type+'' == 'serviceVar')
				variableProperty.addQuery('isservicevariable', true);
			
		variableProperty.query();
        while (variableProperty.next()) {
            var depend_on = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
            depend_on.addQuery('catalog_item', catSysId);
			depend_on.addNotNullQuery('field_json');
//            depend_on.addQuery('application_profile', profileSysID);
			
				if(type+'' == 'profileVar')
					depend_on.addQuery('isprofilevariable', true);
				if(type+'' == 'serviceVar')
					depend_on.addQuery('isservicevariable', true);
			
            depend_on.query();
            while (depend_on.next()) {
				var dependent_var = '';
				if(type+'' == 'serviceVar'){
					
					dependent_var = '@@{' + variableProperty.variable.question_text + '}@@';
					
				}
				if(type+'' == 'profileVar'){	
					
					dependent_var = '@@{' + variableProperty.variable.name + '}@@';
					
				}
				var field_json = depend_on.field_json+'';
				
				if(field_json != '{}'){
					if (field_json.indexOf(dependent_var) != -1) {
						if (clientScriptVar.indexOf(variableProperty.variable.sys_id) === -1) {
							
							clientScriptVar.push(variableProperty.variable.sys_id);
						}
						break;
					}
				}
            }
        }
		
        for (var j in clientScriptVar) {
			if(this._clientScriptExist(clientScriptVar[j] + '', catSysId + ""))
				continue;
			else
				this._createOnChangeScript(clientScriptVar[j] + '', catSysId + "");
        }
		}catch(e){
			this.logger.error("Inside _createOnChangeScriptForDependee caught exception :::: " + e)
		}
    },
    _clientScriptExist: function(clientScriptVar, catSysId){
		var gr = new GlideRecord('catalog_script_client');
		gr.addQuery('name', 'Fetch values OnChange');
		gr.addQuery('cat_item', catSysId);
		gr.addQuery('cat_variable', clientScriptVar);
		gr.query();
		if(gr.next())
			return true;
		else
			return false;
	},
    setCredentialsData: function(current) {

        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts.setCredentialsData.");





            var catSysId = current.description;
            var catName = '';
            var performAction = current.variables.type + '';

            if (performAction == 'new') {
                var blueprint = current.variables.blueprint;
                var variable_data = JSON.parse(current.variables.credentials_data);

                this.logger.debug("Got Blueprint:- " + blueprint + " Catalog Item:- " + catSysId + " and Credentials Data:- " + current.variables.credentials_data + " for setting credetnails.");

                var gr = new GlideRecord(this.appUtil.configuration.table.Credentials + '');

                for (var i in variable_data) {
                    var varia = variable_data[i];

                    gr.initialize();

                    gr.catalog_item = catSysId + '';
                    gr.actual_name = i + '';
                    gr.description = varia.description + '';
                    gr.is_default = varia.is_default + '';
                    gr.is_secret_modified = varia.is_secret_modified + '';
                    gr.name = varia.credential_name.value + '';
                    gr.passphrase = (varia.passphrase) ? varia.passphrase.value + '' : '';
                    gr.passphrase_editable = (varia.passphrase) ? varia.passphrase.runtime_config + '' : '';
                    gr.password = (varia.password) ? varia.password.value + '' : '';
                    gr.secret_editable = (varia.password) ? varia.password.runtime_config + '' : '';
                    gr.ssh_private_key = (varia.ssh_private_key) ? varia.ssh_private_key.value + '' : '';
                    gr.ssh_private_key_editable = (varia.ssh_private_key) ? varia.ssh_private_key.runtime_config + '' : '';
                    gr.state = varia.state + '';
                    gr.type = varia.secret_type.value + '';
                    gr.username = varia.username.value + '';
                    gr.username_editable = varia.username.runtime_config + '';
                    gr.uuid = varia.uuid + '';

                    gr.username_isdisabled = varia.username_isdisabled + '';
                    gr.secret_isdisabled = varia.secret_isdisabled + '';
                    gr.ssh_private_key_isdisabled = varia.ssh_private_key_isdisabled + '';
                    gr.passphrase_isdisabled = varia.passphrase_isdisabled + '';

                    gr.credential_reference = varia.credential_reference.value + '';
                    gr.runtime = varia.runtime + '';

                    gr.insert();

                    catName = gr.catalog_item.name + '';
                    this.logger.debug("Mapped credentials data against catalog item " + gr.catalog_item);
                }

                // 				var gr = new GlideRecord(this.appUtil.configuration.table.variableSetTable+'');
                // 				gr.addQuery('variable_set', gs.getProperty('x_nuta2_nutanix_ca.credentials.variable.set')+'');
                // 				gr.addQuery('sc_cat_item', catSysId+'');
                // 				gr.query();

                // 				if(!gr.hasNext()){
                // 					gr.initialize();
                // 					gr.variable_set = gs.getProperty('x_nuta2_nutanix_ca.credentials.variable.set')+'';
                // 					gr.sc_cat_item = catSysId+''; 
                // 					gr.order = '51001';
                // 					gr.insert();	
                // 				}

                var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                gr.addQuery('variable', gs.getProperty('x_nuta2_nutanix_ca.credentials.mapping.variable.sys.id') + '');
                gr.addQuery('catalog_item', catSysId + '');
                gr.query();

                if (gr.next()) {
                    gr.default_value = current.variables.environment_mapping;
                    gr.update();
                } else {
                    gr.initialize();
                    gr.variable = gs.getProperty('x_nuta2_nutanix_ca.credentials.mapping.variable.sys.id') + '';
                    gr.application_profile = '';
                    gr.catalog_item = catSysId + '';
                    gr.default_value = current.variables.environment_mapping;
                    gr.isprofilevariable = false;
                    gr.runtime_config = false;
                    gr.uuid = '';
                    gr.service_name = '';
                    gr.category_name = '';
                    gr.insert();
                }

                // 				if(current.variables.environment_mapping+'' == 'true'){
                // 					var mapping_data = JSON.parse(current.variables.credentials_mapping);

                // 					for(var i in mapping_data){

                // 						var varia = mapping_data[i];

                // 						var gr = new GlideRecord(this.appUtil.configuration.table.Credentials+'');
                // 						gr.addQuery('catalog_item', catSysId+'');
                // 						gr.addQuery('environment', varia.environment+'');
                // 						gr.addQuery('project', varia.project+'');
                // 						gr.query();

                // 						if(!gr.hasNext()){
                // 							gr.initialize();

                // 							gr.catalog_item = catSysId+'';
                // 							gr.actual_name = i+'';
                // 							gr.description = varia.description+'';
                // 							gr.is_default = varia.is_default+'';
                // 							gr.is_secret_modified = varia.is_secret_modified+'';
                // 							gr.name = varia.credential_name.value+'';
                // 							gr.passphrase = (varia.passphrase)?varia.passphrase.value+'':'';
                // 							gr.passphrase_editable = (varia.passphrase)?varia.passphrase.runtime_config+'':'';
                // 							gr.password = (varia.password)?varia.password.value+'':'';
                // 							gr.secret_editable = (varia.password)?varia.password.runtime_config+'':'';
                // 							gr.ssh_private_key = (varia.ssh_private_key)?varia.ssh_private_key.value+'':'';
                // 							gr.ssh_private_key_editable = (varia.ssh_private_key)?varia.ssh_private_key.runtime_config+'':'';
                // 							gr.state = varia.state+'';
                // 							gr.type = varia.secret_type.value+'';
                // 							gr.username = varia.username.value+'';
                // 							gr.username_editable = varia.username.runtime_config+'';
                // 							gr.uuid = varia.uuid+'';
                // 							gr.environment = varia.environment+'';
                // 							gr.project = varia.project+'';

                // 							gr.username_isdisabled = varia.username_isdisabled+'';
                // 							gr.secret_isdisabled = varia.secret_isdisabled+'';
                // 							gr.ssh_private_key_isdisabled = varia.ssh_private_key_isdisabled+'';
                // 							gr.passphrase_isdisabled = varia.passphrase_isdisabled+'';				 

                // 							gr.insert();	
                // 						}
                // 					}
                // 				}

                this.logger.info("Set profile variables values for " + catName + ".");
            } else {
                var catSysId = current.variables.cat_item + '';
                var variable_data = JSON.parse(current.variables.credentials_data);

                for (var i in variable_data) {
                    var varia = variable_data[i];

                    var gr = new GlideRecord(this.appUtil.configuration.table.Credentials + '');
                    gr.addQuery('catalog_item=' + catSysId + '^uuid=' + varia.uuid);
                    gr.query();

                    if (gr.next()) {
                        gr.catalog_item = catSysId + '';
                        gr.description = varia.description + '';
                        gr.is_default = varia.is_default + '';
                        gr.is_secret_modified = varia.is_secret_modified + '';
                        gr.name = varia.credential_name.value + '';
                        gr.passphrase = (varia.passphrase) ? varia.passphrase.value + '' : '';
                        gr.passphrase_editable = (varia.passphrase) ? varia.passphrase.runtime_config + '' : '';
                        gr.password = (varia.password) ? varia.password.value + '' : '';
                        gr.secret_editable = (varia.password) ? varia.password.runtime_config + '' : '';
                        gr.ssh_private_key = (varia.ssh_private_key) ? varia.ssh_private_key.value + '' : '';
                        gr.ssh_private_key_editable = (varia.ssh_private_key) ? varia.ssh_private_key.runtime_config + '' : '';
                        gr.state = varia.state + '';
                        gr.type = varia.secret_type.value + '';
                        gr.username = varia.username.value + '';
                        gr.username_editable = varia.username.runtime_config + '';
                        gr.uuid = varia.uuid + '';

                        gr.username_isdisabled = varia.username_isdisabled + '';
                        gr.secret_isdisabled = varia.secret_isdisabled + '';
                        gr.ssh_private_key_isdisabled = varia.ssh_private_key_isdisabled + '';
                        gr.passphrase_isdisabled = varia.passphrase_isdisabled + '';

                        gr.credential_reference = varia.credential_reference.value + '';
                        gr.runtime = varia.runtime + '';

                        gr.update();
                        catName = gr.catalog_item.name + '';
                        this.logger.debug("Updated credentials data against catalog item " + gr.catalog_item);
                    }
                }

                // 				var gr = new GlideRecord(this.appUtil.configuration.table.variableSetTable+'');
                // 				gr.addQuery('variable_set', gs.getProperty('x_nuta2_nutanix_ca.credentials.variable.set')+'');
                // 				gr.addQuery('sc_cat_item', catSysId+'');
                // 				gr.query();

                // 				if(!gr.hasNext()){
                // 					gr.initialize();
                // 					gr.variable_set = gs.getProperty('x_nuta2_nutanix_ca.credentials.variable.set')+'';
                // 					gr.sc_cat_item = catSysId+''; 
                // 					gr.order = '51001';
                // 					gr.insert();	
                // 				}

                var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                gr.addQuery('variable', gs.getProperty('x_nuta2_nutanix_ca.credentials.mapping.variable.sys.id') + '');
                gr.addQuery('catalog_item', catSysId + '');
                gr.query();

                if (gr.next()) {
                    gr.default_value = current.variables.environment_mapping;
                    gr.update();
                } else {
                    gr.initialize();
                    gr.variable = gs.getProperty('x_nuta2_nutanix_ca.credentials.mapping.variable.sys.id') + '';
                    gr.application_profile = '';
                    gr.catalog_item = catSysId + '';
                    gr.default_value = current.variables.environment_mapping;
                    gr.isprofilevariable = false;
                    gr.runtime_config = false;
                    gr.uuid = '';
                    gr.service_name = '';
                    gr.category_name = '';
                    gr.insert();
                }

                // 				if(current.variables.environment_mapping+'' == 'true'){
                // 					var mapping_data = JSON.parse(current.variables.credentials_mapping);

                // 					for(var i in mapping_data){

                // 						var varia = mapping_data[i];

                // 						var gr = new GlideRecord(this.appUtil.configuration.table.Credentials+'');
                // 						gr.addQuery('catalog_item', catSysId+'');
                // 						gr.addQuery('environment', varia.environment+'');
                // 						gr.addQuery('project', varia.project+'');
                // 						gr.query();

                // 						if(!gr.hasNext()){
                // 							gr.initialize();

                // 							gr.catalog_item = catSysId+'';
                // 							gr.actual_name = i+'';
                // 							gr.description = varia.description+'';
                // 							gr.is_default = varia.is_default+'';
                // 							gr.is_secret_modified = varia.is_secret_modified+'';
                // 							gr.name = varia.credential_name.value+'';
                // 							gr.passphrase = (varia.passphrase)?varia.passphrase.value+'':'';
                // 							gr.passphrase_editable = (varia.passphrase)?varia.passphrase.runtime_config+'':'';
                // 							gr.password = (varia.password)?varia.password.value+'':'';
                // 							gr.secret_editable = (varia.password)?varia.password.runtime_config+'':'';
                // 							gr.ssh_private_key = (varia.ssh_private_key)?varia.ssh_private_key.value+'':'';
                // 							gr.ssh_private_key_editable = (varia.ssh_private_key)?varia.ssh_private_key.runtime_config+'':'';
                // 							gr.state = varia.state+'';
                // 							gr.type = varia.secret_type.value+'';
                // 							gr.username = varia.username.value+'';
                // 							gr.username_editable = varia.username.runtime_config+'';
                // 							gr.uuid = varia.uuid+'';
                // 							gr.environment = varia.environment+'';
                // 							gr.project = varia.project+'';

                // 							gr.username_isdisabled = varia.username_isdisabled+'';
                // 							gr.secret_isdisabled = varia.secret_isdisabled+'';
                // 							gr.ssh_private_key_isdisabled = varia.ssh_private_key_isdisabled+'';
                // 							gr.passphrase_isdisabled = varia.passphrase_isdisabled+'';				 

                // 							gr.insert();	
                // 						}
                // 					}
                // 				}

                this.logger.info("Updated credentials values for " + catName + ".");
            }
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts.setCredentialsData. Error:- " + e);
        }
    },

    _groupsToUsers: function(current) {

        var groups = (current.variables.assign_groups) ? (current.variables.assign_groups + "") : "";
        var users = (current.variables.assign_users) ? (current.variables.assign_users + "").split(",") : [];

        var grMembers = new GlideRecord("sys_user_grmember");
        grMembers.addEncodedQuery("group.sys_idIN" + groups);
        grMembers.query();
        while (grMembers.next()) {
            if (users.indexOf(grMembers.user.sys_id + "") == -1)
                users.push(grMembers.user.sys_id + "");
        }

        current.variables.assign_users = users.toString();

        return current;
    },

    configBPGeneralSettings: function(current, clientData, nonFilteredClientData) {

        try {

            this.logger.debug("Inside Nutanix_ConfigureSettingScripts.configBPGeneralSettings.");
            var lg = new x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge();
            var status = lg.hideAccessLocalGroupOption(); //to check if the given option is for local groups.

            if (status + "" == "false")
                current = this._groupsToUsers(current);

            var performAction = current.variables.type + '';

            if (performAction == 'new') {
                var blueprint = current.variables.blueprint + '';
                var blueprintType = current.variables.type_of_blueprint + '';
                var createCatalog = current.variables.create_catalog + '';

                this.logger.debug("Got Blueprint:- " + blueprint + " Blueprint Type:- " + blueprintType + " and Create Catalog:- " + createCatalog + " for configuring new catalog item.");

                var targetCatTable = 'x_nuta2_nutanix_ca_nutanix_catalog_items';
                var sourceCatTable = '';
                if (blueprintType == 'unpublished')
                    sourceCatTable = 'x_nuta2_nutanix_ca_nutanix_blueprint';
                else
                    sourceCatTable = 'x_nuta2_nutanix_ca_nutanix_marketplaceitems';

                var ans;
                if (createCatalog == 'yes')
                    ans = this._copyCatalogItem(sourceCatTable, targetCatTable, blueprint, current, blueprintType, clientData, nonFilteredClientData);
                else
                    ans = this._updateCatalogItem(sourceCatTable, targetCatTable, blueprint, current);

                this._insertIntoRuntimeConfigTable(ans, current);
                this._updateUserOverCalm(current);
                if (status + "" == "false") //updated version check the flag for referense.
                {
                    this._updateGroupOverCalm(current);
                } else {
                    this._updateGroupSnowRole(current);
                }

                return ans[0] + '';
            } else {

                var cat_item = current.variables.cat_item + '';

                this.logger.debug("Got Catalog Item:- " + cat_item + " for updating existing catalog item.");

                var gr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
                gr.addQuery('item_name', cat_item);
                gr.query();

                if (gr.next()) {
                    var cat = gr.item_name.getRefRecord();
                    cat.sys_name = current.variables.item_name + '';
                    cat.name = current.variables.item_name + '';
                    cat.short_description = current.variables.item_name + '';
                    cat.description_markdown = current.variables.description + '';
                    cat.description = this.appUtil.markdown_renderer(current.variables.description + '');
                    cat.update();

                    // 					var user_criteria = gr.user_criteria.getRefRecord();
                    // 					user_criteria.user = current.variables.assign_users;
                    var group = '';
                    if (status + "" == "false") {
                        group = current.variables.assign_groups;
                    } else {
                        group = current.variables.assign_local_groups;
                    }
                    var user_criteria = new sn_uc.UserCriteria(gr.user_criteria.sys_id);
                    user_criteria.update({
                        "user": "" + current.variables.assign_users,
                        "group": "" + group
                    }, "Update user criteria user Group");
                    //	user_criteria.update();

                    this._updateUserOverCalm(current);

                    if (status + "" == "false") {
                        this._updateGroupOverCalm(current);
                    } else {
                        this._updateGroupSnowRole(current);
                    }
                    gr.multiple_application_profile = current.variables.multiple_application_profile;
                    gr.multiple_projects = current.variables.multiple_project;
                    gr.update();
                    return gr.item_name + '';
                }

            }

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts.configBPGeneralSettings. Error:- " + e);
        }
    },

    _checkUsersUUID: function(current) {
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._checkUsersUUID.");

            var userGr = new GlideRecord('sys_user');
            userGr.addEncodedQuery('sys_idIN' + current.variables.assign_users + '^x_nuta2_nutanix_ca_nutanix_uuidISEMPTY');
            userGr.query();

            var taskUUIDList = [];

            while (userGr.next()) {

                var ldapGR = new GlideRecord('ldap_server_config');
                if (ldapGR.get(userGr.ldap_server + '')) {
                    var LDAPName = '';
                    var LDAPUuid = '';
                    // 				var ldap_rdn = ldapGR.rdn+'';
                    // 				ldap_rdn = ldap_rdn.replace(/DC=/g,"").replace(/,/g,".");
                    var dir_body = {
                        "kind": "directory_service",
                        "filter": 'url==' + ldapGR.server_url //+";domain_name=="+ldap_rdn
                    }

                    this.logger.debug("Body for directory services:: :: " + JSON.stringify(dir_body));

                    var response = this.appUtil.makeCalmApiCall("POST", this.appUtil.configuration.api.directoryServices + "", JSON.stringify(dir_body));
                    this.logger.debug("Response Body for directory :: " + response.getBody());

                    if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                        var parsed = JSON.parse(response.getBody());
                        parsed = parsed.entities;
                        for (var p in parsed) {
                            var par_entity = parsed[p];
                            var domain_name = par_entity.status.resources.domain_name + "";
                            //						if(domain_name == ldap_rdn){
                            if (par_entity.status.resources.url + '' == ldapGR.server_url + '' || par_entity.status.resources.url + '' == ldapGR.server_url + '/' || par_entity.status.resources.url + '/' == ldapGR.server_url + '') {
                                LDAPName = par_entity.status.name + '';
                                LDAPUuid = par_entity.metadata.uuid + '';
                                break;
                            }
                        }

                        //LDAPName = parsed.entities[0].status.name+'';
                        //LDAPUuid = parsed.entities[0].metadata.uuid+'';

                    } else {
                        this.logger.error("Nutanix_ConfigureSettingScripts._checkUsersUUID :- Error while updating directory:- " + response.haveError() + " Status code :- " + response.getStatusCode() + " Error :: " + response.getBody());
                    }

                    var body = {
                        "spec": {
                            "resources": {
                                "directory_service_user": {
                                    "user_principal_name": userGr.email + '',
                                    "directory_service_reference": {
                                        "kind": "directory_service",
                                        "name": LDAPName,
                                        "uuid": LDAPUuid

                                    }
                                }
                            }
                        },
                        "metadata": {
                            "kind": "user",
                            "name": userGr.name + ''
                        }
                    };
                    this.logger.debug("Body send for user :: " + JSON.stringify(body));
                    var response = this.appUtil.makeCalmApiCall("POST", "/users", JSON.stringify(body));
                    var res = JSON.parse(response.getBody());
                    if (response.getStatusCode() == '200' || response.getStatusCode() == '201' || response.getStatusCode() == '202') {

                        userGr.x_nuta2_nutanix_ca_nutanix_uuid = JSON.parse(response.getBody()).metadata.uuid + '';
                        userGr.update();

                        taskUUIDList.push(JSON.parse(response.getBody()).status.execution_context.task_uuid + '');

                    } else if (response.getStatusCode() == '400' &amp;&amp; res.message_list[0].reason == "DUPLICATE_ENTITY") {

                        var payload = {
                            "kind": "user",
                            "filter": "username==" + userGr.email + ''
                        };


                        var response = this.appUtil.makeCalmApiCall("POST", this.appUtil.configuration.api.getUsersList + "", this.appUtil.stringify(payload));

                        if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                            var parsedJSON = this.appUtil.parse(response.getBody());
                            var entities = parsedJSON.entities;
                            var entity = entities[0];
                            var uuid = entity.metadata.uuid + '';
                            userGr.x_nuta2_nutanix_ca_nutanix_uuid = uuid;
                            userGr.update();

                        } else {

                            this.logger.debug("Nutanix_ImportUsers.importUsers:- Connection users/list not established :- " + response.haveError() + " Status code :- " + response.getStatusCode());
                        }
                        ///

                    } else {
                        this.logger.error("Nutanix_ConfigureSettingScripts._checkUsersUUID :- Error while creating user entity in calm:- " + response.haveError() + " Status code :- " + response.getStatusCode() + " Error :: " + response.getBody());
                    }
                }
            }

            var taskComplete = true;
            var i = 0;
            do {
                if (i &gt;= taskUUIDList.length) {
                    i = 0;
                    taskComplete = true;
                }

                var response = this.appUtil.makeCalmApiCall("GET", "/tasks/" + taskUUIDList[i], '');
                var parsedTask = JSON.parse(response.getBody());
                if (parsedTask.status + '' == 'QUEUED' || parsedTask.status + '' == 'RUNNING') {
                    taskComplete = false;
                    i++;
                } else {
                    taskUUIDList.splice(i, 1);
                }

                if (taskUUIDList.length &lt; 1)
                    break;

            } while (taskComplete == false);

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._checkUsersUUID. Error:- " + e);
        }
    },

    _updateSnowRole: function(current) {

        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._updateSnowRole.");
            var users = (current.variables.assign_users + '').split(',');
            for (var i in users) {
                var gr = new GlideRecord("sys_user");
                gr.addQuery('sys_id', users[i] + '');
                gr.query();
                if (gr.next()) {
                    r = ['3376fd254f452b001200e5201310c717', 'e098ecf6c0a80165002aaec84d906014'];

                    /*var grProp = new GlideRecord('x_nuta2_nutanix_ca_calm_plugin_configuration');
		            if (grProp.get(gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id')))
					{	
		            if(grProp.use_external_credential_system)
		                  r.push('e76b74ba0ab3015700a3263b26e5e9d5');
					}*/
                    for (var i = 0; i &lt; r.length; i++) {
                        var grd = new GlideRecord('sys_user_has_role');
                        grd.addQuery('user', gr.sys_id);
                        grd.addQuery('role', r[i]);
                        grd.query();

                        if (!grd.hasNext()) {
                            grd.user = gr.sys_id;
                            grd.role = r[i];
                            grd.insert();
                        }
                    }
                }
            }
            var catSysId = current.variables.cat_item + '';
            var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
            gr.addQuery('catalog_item', catSysId);
            gr.query();
            var catName = "";
            if (gr.next())
                catName = gr.catalog_item.name + '';

            this.logger.info("Required plugin roles given to all the assigned users for catalog item::" + catName);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._updateSnowRole. Error:- " + e);
        }

    },

    _updateUserOverCalm: function(current) {
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._updateUserOverCalm.");

            if (!current.variables.assign_users)
                return;

            this._checkUsersUUID(current); //this create ldap user in calm and updates ldap user uuid in SNOW if user uuid is not present in calm.

            var projects = current.variables.multiple_project.toString();
            var project_array = projects.split(',');
            for (var k = 0; k &lt; project_array.length; k++) {
                this.logger.debug('Inside Nutanix_ConfigureSettingScripts._updateUserOverCalm. projects sys_id' + project_array[k]);
                var projectGR = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
                if (projectGR.get(project_array[k])) {
                    var projectUUID = projectGR.uuid;
                    this.logger.debug('Inside Nutanix_ConfigureSettingScripts._updateUserOverCalm. projects UUID ' + projectUUID);
                    var response = this.appUtil.makeCalmApiCall("GET", this.appUtil.configuration.api.projectInternal + "/" + projectUUID, '');
                }
                if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                    var parsed = this.appUtil.parse(response.getBody());
                    var acpRoles = parsed.spec.access_control_policy_list;

                    var acpConsumerRoleIndex = '';

                    for (var i in acpRoles) {
                        if (acpRoles[i].acp.resources.role_reference.uuid + '' == gs.getProperty('x_nuta2_nutanix_ca.cosumer.role.uuid') + '') {
                            acpConsumerRoleIndex = i;
                        }
                        parsed.spec.access_control_policy_list[i].operation = "UPDATE";
                    }

                    var userGr = new GlideRecord('sys_user');
                    userGr.addEncodedQuery('sys_idIN' + current.variables.assign_users);
                    userGr.query();

                    var userArr = {};

                    while (userGr.next()) {
                        userArr[userGr.sys_id + ''] = {
                            "uuid": (userGr) ? userGr.x_nuta2_nutanix_ca_nutanix_uuid + '' : '',
                            "email": (userGr) ? userGr.email + '' : ''
                        };
                    }

                    if (acpConsumerRoleIndex) { //if consumer role is there in project

                        var users = (current.variables.assign_users + '').split(',');
                        for (var i in users) {
                            parsed.spec.access_control_policy_list[acpConsumerRoleIndex].acp.resources.user_reference_list.push({
                                "name": (userArr[users[i] + '']) ? userArr[users[i] + ''].email + '' : '',
                                "kind": "user",
                                "uuid": (userArr[users[i] + '']) ? userArr[users[i] + ''].uuid + '' : ''
                            });

                            parsed.spec.project_detail.resources.user_reference_list.push({
                                "name": (userArr[users[i] + '']) ? userArr[users[i] + ''].email + '' : '',
                                "kind": "user",
                                "uuid": (userArr[users[i] + '']) ? userArr[users[i] + ''].uuid + '' : ''
                            });
                        }

                    } else { //pushes consumer role in project

                        var projectSubnet;
                        var project = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
                        project.addQuery('uuid', projectUUID + '');
                        project.setLimit(1);
                        project.query();
                        if (project.next()) {
                            projectSubnet = project.subnet + '';
                        }

                        var arr = [];

                        var gr = new GlideRecord('x_nuta2_nutanix_ca_subnet');
                        gr.addEncodedQuery('sys_idIN' + projectSubnet);
                        gr.query();
                        while (gr.next()) {
                            arr.push(gr.cluster_uuid + '');
                        }

                        var clusterEntitle = {
                            "left_hand_side": {
                                "entity_type": "cluster"
                            },
                            "operator": "IN",
                            "right_hand_side": {
                                "uuid_list": arr
                            }
                        };


                        var tmp = {
                            "acp": {
                                "name": "nuSnowAcp-" + projectUUID,
                                "resources": {
                                    "role_reference": {
                                        "name": "Consumer",
                                        "uuid": "49e8f061-0948-4705-953b-88915397bd60",
                                        "kind": "role"
                                    },
                                    "user_group_reference_list": [],
                                    "user_reference_list": [],
                                    "filter_list": {
                                        "context_list": [{
                                            "scope_filter_expression_list": [{
                                                "operator": "IN",
                                                "left_hand_side": "PROJECT",
                                                "right_hand_side": {
                                                    "uuid_list": [projectUUID + '']
                                                }
                                            }],
                                            "entity_filter_expression_list": [{
                                                "operator": "IN",
                                                "left_hand_side": {
                                                    "entity_type": "ALL"
                                                },
                                                "right_hand_side": {
                                                    "collection": "ALL"
                                                }
                                            }]
                                        }, {
                                            "entity_filter_expression_list": []
                                        }]
                                    }
                                },
                                "description": ""
                            },
                            "metadata": {
                                "kind": "access_control_policy"
                            },
                            "operation": "ADD"
                        };

                        var consumerFilter = JSON.parse(gs.getProperty('x_nuta2_nutanix_ca.consumer.entitlement.filter'));
                        tmp.acp.resources.filter_list.context_list[1].entity_filter_expression_list = consumerFilter["2.9"]; //gs.getProperty('x_nuta2_nutanix_ca.calm_version')];

                        tmp.acp.resources.filter_list.context_list[1].entity_filter_expression_list.push(clusterEntitle);

                        tmp.acp.resources.role_reference = {
                            "name": "Consumer",
                            "uuid": gs.getProperty('x_nuta2_nutanix_ca.cosumer.role.uuid') + '',
                            "kind": "role"
                        };

                        tmp.acp.resources.user_reference_list = [];

                        var users = (current.variables.assign_users + '').split(',');
                        for (var i in users) {

                            tmp.acp.resources.user_reference_list.push({
                                "name": (userArr[users[i] + '']) ? userArr[users[i] + ''].email + '' : '',
                                "kind": "user",
                                "uuid": (userArr[users[i] + '']) ? userArr[users[i] + ''].uuid + '' : ''
                            });

                            parsed.spec.project_detail.resources.user_reference_list.push({
                                "name": (userArr[users[i] + '']) ? userArr[users[i] + ''].email + '' : '',
                                "kind": "user",
                                "uuid": (userArr[users[i] + '']) ? userArr[users[i] + ''].uuid + '' : ''
                            });
                        }
                        parsed.spec.access_control_policy_list.push(tmp);

                    }

                    var requestBody = {
                        "spec": parsed.spec,
                        "api_version": parsed.api_version,
                        "metadata": parsed.metadata
                    }

                    var response = this.appUtil.makeCalmApiCall("PUT", this.appUtil.configuration.api.projectInternal + "/" + projectUUID, JSON.stringify(requestBody));

                    if (response.getStatusCode() == '200' || response.getStatusCode() == '201' || response.getStatusCode() == '202') {

                        this.logger.info("Nutanix_ConfigureSettingScripts._updateUserOverCalm:- Users successfuly updated in calm.");
                        this._updateSnowRole(current);
                    } else {
                        this.logger.error("Nutanix_ConfigureSettingScripts._updateUserOverCalm :- Error while updating users onto calm :- " + response.haveError() + " Status code :- " + response.getStatusCode() + " Error :: " + response.getBody());
                    }
                } else {
                    this.logger.error("Nutanix_ConfigureSettingScripts._updateUserOverCalm :- Connection to /projects_internal not established :- " + response.haveError() + " Status code :- " + response.getStatusCode());
                }
            }


        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._updateUserOverCalm. Error:- " + e);
        }
    },

    ///changes
    _checkGroupUUID: function(current) {
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._checkGroupsUUID.");
            var groupGr = new GlideRecord('sys_user_group');
            groupGr.addEncodedQuery('sys_idIN' + current.variables.assign_groups + '^x_nuta2_nutanix_ca_nutanix_group_uuidISEMPTY');
            groupGr.query();

            var taskUUIDList = [];

            while (groupGr.next()) {
                var groups = (current.variables.assign_groups.getDisplayValue() + '').split(',');

                var distinguishedName = groupGr.source.replace(/ldap:/g, ""); //"CN="+groups[i]+",CN=Users,DC=calsoftcalm,DC=com";

                var body = {
                    "api_version": "3.0",
                    "metadata": {
                        "kind": "user_group"
                    },
                    "spec": {
                        "resources": {
                            "directory_service_user_group": {
                                "distinguished_name": distinguishedName
                            }
                        }
                    }
                };
                this.logger.debug("Body send for group :: " + JSON.stringify(body));
                var response = this.appUtil.makeCalmApiCall("POST", "/user_groups", JSON.stringify(body));
                var res = JSON.parse(response.getBody());
                if (response.getStatusCode() == '200' || response.getStatusCode() == '201' || response.getStatusCode() == '202') {

                    groupGr.x_nuta2_nutanix_ca_nutanix_group_uuid = JSON.parse(response.getBody()).metadata.uuid + '';
                    groupGr.update();

                    taskUUIDList.push(JSON.parse(response.getBody()).status.execution_context.task_uuid + '');

                } else if (response.getStatusCode() == '400' &amp;&amp; res.message_list[0].reason == "DUPLICATE_ENTITY") {

                    var payload = {
                        "kind": "user_group",
                        "filter": "group_name==" + groupGr.name + ''
                    };


                    var response = this.appUtil.makeCalmApiCall("POST", this.appUtil.configuration.api.getGroupsList + "", this.appUtil.stringify(payload));

                    if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                        var parsedJSON = this.appUtil.parse(response.getBody());
                        var entities = parsedJSON.entities;
                        var entity = entities[0];
                        var uuid = entity.metadata.uuid + '';
                        groupGr.x_nuta2_nutanix_ca_nutanix_group_uuid = uuid;
                        groupGr.update();

                    } else {

                        this.logger.debug("Nutanix_ImportUsers.importUsers:- Connection users/list not established :- " + response.haveError() + " Status code :- " + response.getStatusCode());
                    }
                    ///
                } else {
                    this.logger.error("Nutanix_ConfigureSettingScripts._checkGroupsUUID :- Error while creating group entity in calm:- " + response.haveError() + " Status code :- " + response.getStatusCode() + " Error :: " + response.getBody());
                }
                //}
                //} 

                //} 
            }

            var taskComplete = true;
            var i = 0;
            do {
                if (i &gt;= taskUUIDList.length) {
                    i = 0;
                    taskComplete = true;
                }

                var response = this.appUtil.makeCalmApiCall("GET", "/tasks/" + taskUUIDList[i], '');
                var parsedTask = JSON.parse(response.getBody());
                if (parsedTask.status + '' == 'QUEUED' || parsedTask.status + '' == 'RUNNING') {
                    taskComplete = false;
                    i++;
                } else {
                    taskUUIDList.splice(i, 1);
                }

                if (taskUUIDList.length &lt; 1)
                    break;

            } while (taskComplete == false);

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._checkGroupUUID. Error:- " + e);
        }
    },

    _updateGroupSnowRole: function(current) {

        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._updateGroupSnowRole.");
            var groups = "";
            //Check ldap or local group to pick
            var lg = new x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge();
            var status = lg.hideAccessLocalGroupOption(); //to check if the given option is for local groups.
            if (status + "" == "false")
                groups = (current.variables.assign_groups + '').split(',');
            else
                groups = (current.variables.assign_local_groups + '').split(',');

            for (var i in groups) {
                var gr = new GlideRecord("sys_user_group");
                gr.addQuery('sys_id', groups[i] + '');
                gr.query();
                if (gr.next()) {
                    r = ['3376fd254f452b001200e5201310c717', 'e098ecf6c0a80165002aaec84d906014'];

                    var grProp = new GlideRecord('x_nuta2_nutanix_ca_calm_plugin_configuration');
                    if (grProp.get(gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id'))) {
                        if (grProp.use_external_credential_system)
                            r.push('e76b74ba0ab3015700a3263b26e5e9d5');
                    }
                    for (var i = 0; i &lt; r.length; i++) {
                        var grd = new GlideRecord('sys_group_has_role');
                        grd.addQuery('group', gr.sys_id);
                        grd.addQuery('role', r[i]);
                        grd.query();

                        if (!grd.hasNext()) {
                            grd.group = gr.sys_id;
                            grd.role = r[i];
                            grd.insert();
                        }
                    }
                }
            }
            var catSysId = current.variables.cat_item + '';
            var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
            gr.addQuery('catalog_item', catSysId);
            gr.query();
            var catName = "";
            if (gr.next())
                catName = gr.catalog_item.name + '';

            this.logger.info("Required plugin roles given to all the assigned groups for catalog item::" + catName);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._updateGroupSnowRole. Error:- " + e);
        }

    },

    _updateGroupOverCalm: function(current) {
        try {

            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._updateGroupOverCalm.");

            if (!current.variables.assign_groups)
                return;

            this._checkGroupUUID(current); //this create ldap group in calm and updates ldap group uuid in SNOW if group uuid is not present in calm.
            var projects = current.variables.multiple_project.toString();
            var project_array = projects.split(',');
            for (var k = 0; k &lt; project_array.length; k++) {
                this.logger.debug('Inside Nutanix_ConfigureSettingScripts._updateGroupOverCalm. projects sys_id' + project_array[k]);
                var projectGR = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
                if (projectGR.get(project_array[k])) {
                    var projectUUID = projectGR.uuid;
                    var response = this.appUtil.makeCalmApiCall("GET", this.appUtil.configuration.api.projectInternal + "/" + projectUUID, '');
                }
                if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {
                    var parsed = this.appUtil.parse(response.getBody());
                    var acpRoles = parsed.spec.access_control_policy_list;
                    var acpConsumerRoleIndex = '';

                    for (var i in acpRoles) {
                        if (acpRoles[i].acp.resources.role_reference.uuid + '' == gs.getProperty('x_nuta2_nutanix_ca.cosumer.role.uuid') + '') {
                            acpConsumerRoleIndex = i;
                        }
                        parsed.spec.access_control_policy_list[i].operation = "UPDATE";
                    }

                    var groupGr = new GlideRecord('sys_user_group');
                    groupGr.addEncodedQuery('sys_idIN' + current.variables.assign_groups);
                    groupGr.query();

                    var groupArr = {};

                    while (groupGr.next()) {
                        groupArr[groupGr.sys_id + ''] = {
                            "uuid": (groupGr) ? groupGr.x_nuta2_nutanix_ca_nutanix_group_uuid + '' : '',
                            "name": (groupGr) ? groupGr.name + '' : ''
                        };
                    }
                    if (acpConsumerRoleIndex) { //if consumer role is there in project

                        var groups = (current.variables.assign_groups + '').split(',');
                        for (var i in groups) {
                            parsed.spec.access_control_policy_list[acpConsumerRoleIndex].acp.resources.user_group_reference_list.push({
                                "name": (groupArr[groups[i] + '']) ? groupArr[groups[i] + ''].name + '' : '',
                                "kind": "user_group",
                                "uuid": (groupArr[groups[i] + '']) ? groupArr[groups[i] + ''].uuid + '' : ''
                            });

                            parsed.spec.project_detail.resources.external_user_group_reference_list.push({
                                "name": (groupArr[groups[i] + '']) ? groupArr[groups[i] + ''].name + '' : '',
                                "kind": "user_group",
                                "uuid": (groupArr[groups[i] + '']) ? groupArr[groups[i] + ''].uuid + '' : ''
                            });
                        }


                    } else { //pushes consumer role in project

                        //var tmp = {"acp":{"name":"nuSnowAcp-"+current.variables.project,"resources":{"role_reference":{"name":"Consumer","uuid":"49e8f061-0948-4705-953b-88915397bd60","kind":"role"},"user_group_reference_list":[],"user_reference_list":[],"filter_list":{"context_list":[{"scope_filter_expression_list":[{"operator":"IN","left_hand_side":"PROJECT","right_hand_side":{"uuid_list":[current.variables.project+'']}}],"entity_filter_expression_list":[{"operator":"IN","left_hand_side":{"entity_type":"ALL"},"right_hand_side":{"collection":"ALL"}}]},{"entity_filter_expression_list":[]}]}},"description":"untitledAcp-e3c568f8-e11b-71e3-a916-493940647e79"},"metadata":{"kind":"access_control_policy"},"operation":"ADD"};

                        var projectSubnet;
                        var project = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
                        project.addQuery('uuid', projectUUID + '');
                        project.setLimit(1);
                        project.query();
                        if (project.next()) {
                            projectSubnet = project.subnet + '';
                        }

                        var arr = [];

                        var gr = new GlideRecord('x_nuta2_nutanix_ca_subnet');
                        gr.addEncodedQuery('sys_idIN' + projectSubnet);
                        gr.query();
                        while (gr.next()) {
                            arr.push(gr.cluster_uuid + '');
                        }

                        var clusterEntitle = {
                            "left_hand_side": {
                                "entity_type": "cluster"
                            },
                            "operator": "IN",
                            "right_hand_side": {
                                "uuid_list": arr
                            }
                        };


                        var tmp = {
                            "acp": {
                                "name": "nuSnowAcp-" + current.variables.project,
                                "resources": {
                                    "role_reference": {
                                        "name": "Consumer",
                                        "uuid": "49e8f061-0948-4705-953b-88915397bd60",
                                        "kind": "role"
                                    },
                                    "user_group_reference_list": [],
                                    "user_reference_list": [],
                                    "filter_list": {
                                        "context_list": [{
                                            "scope_filter_expression_list": [{
                                                "operator": "IN",
                                                "left_hand_side": "PROJECT",
                                                "right_hand_side": {
                                                    "uuid_list": [current.variables.project + '']
                                                }
                                            }],
                                            "entity_filter_expression_list": [{
                                                "operator": "IN",
                                                "left_hand_side": {
                                                    "entity_type": "ALL"
                                                },
                                                "right_hand_side": {
                                                    "collection": "ALL"
                                                }
                                            }]
                                        }, {
                                            "entity_filter_expression_list": []
                                        }]
                                    }
                                },
                                "description": ""
                            },
                            "metadata": {
                                "kind": "access_control_policy"
                            },
                            "operation": "ADD"
                        };

                        var consumerFilter = JSON.parse(gs.getProperty('x_nuta2_nutanix_ca.consumer.entitlement.filter'));
                        tmp.acp.resources.filter_list.context_list[1].entity_filter_expression_list = consumerFilter["2.9"]; //gs.getProperty('x_nuta2_nutanix_ca.calm_version')];

                        tmp.acp.resources.filter_list.context_list[1].entity_filter_expression_list.push(clusterEntitle);



                        tmp.acp.resources.role_reference = {
                            "name": "Consumer",
                            "uuid": gs.getProperty('x_nuta2_nutanix_ca.cosumer.role.uuid') + '',
                            "kind": "role"
                        };

                        tmp.acp.resources.user_group_reference_list = [];

                        var groups = (current.variables.assign_groups + '').split(',');
                        for (var i in groups) {

                            tmp.acp.resources.user_group_reference_list.push({
                                "name": (groupArr[groups[i] + '']) ? groupArr[groups[i] + ''].name + '' : '',
                                "kind": "user_group",
                                "uuid": (groupArr[groups[i] + '']) ? groupArr[groups[i] + ''].uuid + '' : ''
                            });

                            parsed.spec.project_detail.resources.external_user_group_reference_list.push({
                                "name": (groupArr[groups[i] + '']) ? groupArr[groups[i] + ''].name + '' : '',
                                "kind": "user_group",
                                "uuid": (groupArr[groups[i] + '']) ? groupArr[groups[i] + ''].uuid + '' : ''
                            });
                        }
                        parsed.spec.access_control_policy_list.push(tmp);
                    }

                    var requestBody = {
                        "spec": parsed.spec,
                        "api_version": parsed.api_version,
                        "metadata": parsed.metadata
                    }

                    var response = this.appUtil.makeCalmApiCall("PUT", this.appUtil.configuration.api.projectInternal + "/" + projectUUID, JSON.stringify(requestBody));


                    if (response.getStatusCode() == '200' || response.getStatusCode() == '201' || response.getStatusCode() == '202') {
                        this.logger.info("Nutanix_ConfigureSettingScripts._updateGroupOverCalm:- Groups successfuly updated in calm.");
                        this._updateGroupSnowRole(current);
                    } else {
                        this.logger.error("Nutanix_ConfigureSettingScripts._updateGroupOverCalm :- Error while updating groups onto calm :- " + response.haveError() + " Status code :- " + response.getStatusCode() + " Error :: " + response.getBody());
                    }
                } else {
                    this.logger.error("Nutanix_ConfigureSettingScripts._updateGroupOverCalm :- Connection to /projects_internal not established :- " + response.haveError() + " Status code :- " + response.getStatusCode());
                }
            }

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._updateGroupOverCalm. Error:- " + e);
        }
    },
    ////changes over

    _updateCatalogItem: function(source, target, bpSys_id, current) {

        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._updateCatalogItem.");
            var catItemSysId = current.variables.cat_item + '';

            var lg = new x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge();
            var status = lg.hideAccessLocalGroupOption(); //to check if the given option is for local groups.

            var ans = [];

            var assignCriteria = new GlideRecord(this.appUtil.configuration.table.catalogUserCriteria + '');
            assignCriteria.addQuery('sc_cat_item', catItemSysId);
            assignCriteria.query();

            this.logger.info("Updated user &amp; group entitlement to " + current.variables.assign_users + " :: " + current.variables.assign_groups);

            if (assignCriteria.next()) {
                var user_criteria = assignCriteria.user_criteria.getRefRecord();

                user_criteria.user = current.variables.assign_users;
                if (status + "" == "false") {
                    user_criteria.group = current.variables.assign_groups;
                } else {
                    user_criteria.group = current.variables.assign_local_groups;
                }

                var criteriaSysId = user_criteria.update();

                ans.push(catItemSysId);
                ans.push(criteriaSysId);
            }

            return ans;
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._updateCatalogItem. Error:- " + e);
        }
    },

    _copyCatalogItem: function(source, target, bpSys_id, current, blueprintType, clientData, nonFilteredClientData) {
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._copyCatalogItem.");

            var sourceGR = new GlideRecord(source);
            sourceGR.addQuery('sys_id', bpSys_id);
            sourceGR.query();

            var ans = [];
            var nicSysIdList = [];

            if (sourceGR.next()) {

                var profileSysID = '';
                var appSysID = '';
                var targetGr = sourceGR;
                var projectSysID = '';
                var environmentSysId = '';

                targetGr.sys_name = current.variables.item_name + '';
                targetGr.name = current.variables.item_name + '';
                targetGr.short_description = current.variables.item_name + '';
                targetGr.description_markdown = current.variables.description + '';
                targetGr.description = this.appUtil.markdown_renderer(current.variables.description + '');
                targetGr.active = true;
                targetGr.blueprint_name = bpSys_id + '';
                targetGr.sys_class_name = target + '';
                if (blueprintType == "published") {

                    var parsedClientData = JSON.parse(clientData);

                    targetGr.cloned_bp_json = nonFilteredClientData;
                    targetGr.cloned_bp_uuid = (parsedClientData.uuid + '') ? parsedClientData.uuid + '' : "";
                    targetGr.cloned_bp_name = (parsedClientData.name + '') ? parsedClientData.name + '' : "";
                }

                var catItemSysId = targetGr.insert();

                var imageBase64Str = gs.getProperty('x_nuta2_nutanix_ca.default.image');

                var gr = new GlideRecord('sys_attachment');
                gr.addQuery('table_sys_id', catItemSysId); //tablesys_id of the record
                gr.query();
                if (gr.next()) {
                    var kk = new GlideSysAttachment();
                    imageBase64Str = kk.getContentBase64(gr);
                }

                var attachGR = new GlideSysAttachment();
                attachGR.writeBase64(targetGr, 'picture', 'image/png', imageBase64Str);

                attachGR = new GlideSysAttachment();
                attachGR.writeBase64(targetGr, 'icon', 'image/png', gs.getProperty('x_nuta2_nutanix_ca.default.icons'));




                this.logger.debug("Created catalog item with sysId " + catItemSysId);
                this.logger.info("Catalog item " + current.variables.item_name + " creating.");

                var fieldGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                fieldGR.addEncodedQuery('cat_item=' + bpSys_id);
                fieldGR.query();

                while (fieldGR.next()) {

                    var oldSysId = fieldGR.sys_id + '';

                    var newField = fieldGR;
                    newField.cat_item = catItemSysId + '';
                    var fieldSysId = newField.insert();

                    /**Advance variable Select box choices**/
                    if (fieldGR.type + '' == 5) {
                        var glideRec = new GlideRecord('question_choice');
                        glideRec.addQuery('question', oldSysId + '');
                        glideRec.query();
                        while (glideRec.next()) {
                            glideRec.question = fieldSysId;
                            var x = glideRec.insert();

                        }
                    }
					// Multiple value insert code
					if (fieldGR.type + '' == 21) {
						
						var grOptions = new GlideRecord("x_nuta2_nutanix_ca_generic_table_for_dropdown");
						grOptions.addQuery("variable", oldSysId + "");
						grOptions.query();
						var grNewOptions = new GlideRecord("x_nuta2_nutanix_ca_generic_table_for_dropdown");
						while(grOptions.next()) {
							grNewOptions.initialize();
							grNewOptions.variable = fieldSysId + "";
							grNewOptions.name = grOptions.name + "";
							grNewOptions.value = grOptions.value + "";
							grNewOptions.insert();
						}
						
						newField.reference_qual = "variable=" + fieldSysId;
						newField.update();
					}

                    /**Advance variable Select box choices**/
                    if (fieldGR.name + '' == 'default_project')
                        projectSysID = fieldSysId;

                    if (fieldGR.name + '' == 'default_profile')
                        profileSysID = fieldSysId;

                    if (fieldGR.name + '' == 'default_app_name')
                        appSysID = fieldSysId;

                    if (parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2")) {
                        if (fieldGR.name + '' == 'default_environment')
                            environmentSysId = fieldSysId;
                    }


                    if ((fieldGR.name + '').indexOf('_nic_') != -1) {
                        nicSysIdList.push(fieldGR.sys_id + '');

                    }
                }

                this.logger.debug("Created variables for catalog item " + current.variables.item_name);

                /*var insVar = new GlideRecord(this.appUtil.configuration.table.varaiblesTable+''); //Inserts variable to check sync or delete
                insVar.addQuery('cat_item', catItemSysId);
                insVar.query();
                if(insVar.next()) {
                	insVar.initialize();
                	insVar.type = 6;
                	insVar.cat_item = catItemSysId+'';
                	insVar.active = true;
                	insVar.question_text = 'sync_flag';
                	insVar.name = 'sync_flag';
                	insVar.mandatory = 'false';
                	insVar.order = 0;
                	insVar.insert();
                }*/

                //Hide containers on order page
                var hideGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                hideGR.addQuery('cat_item', catItemSysId);
                hideGR.addQuery('active', true);
                hideGR.orderBy('order');
                var previousGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                previousGR.addQuery('cat_item', catItemSysId);
                previousGR.addQuery('active', true);
                previousGR.orderBy('order');
                hideGR.query();
                previousGR.query();
                while (hideGR.next()) {
                    if (hideGR.type == 20 &amp;&amp; previousGR.type == 19) {
                        hideGR.active = false;
                        previousGR.active = false;
                        previousGR.update();
                        hideGR.update();
                    }
                    previousGR.next();
                }


                var lg = new x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge();
                var status = lg.hideAccessLocalGroupOption(); //to check if the given option is for local groups.
                // 				var user_criteria = new GlideRecord(this.appUtil.configuration.table.userCriteria+'');
                // 				user_criteria.initialize();
                // 				user_criteria.name = "Nutanix_"+current.variables.item_name+"_Entitlement";
                // 				user_criteria.user = current.variables.assign_users;
                // 				if(status+"" == "false")
                // 					{
                // 						user_criteria.group = current.variables.assign_groups;
                // 					}
                // 				else
                // 					{
                // 						user_criteria.group = current.variables.assign_local_groups;
                // 					}				
                // 				user_criteria.role = gs.getProperty('x_nuta2_nutanix_ca.admin.role.sysId');
                // 				user_criteria.active = true;
                // 				user_criteria.advanced = true;
                // 				user_criteria.match_all = false;
                // 				user_criteria.script = "answer = false;";
                // 				var criteriaSysId = user_criteria.insert(); 
                // 				gs.info('user_criteria.group '+user_criteria.group);


                var user_criteria = new sn_uc.UserCriteria();
                user_criteria.setName("Nutanix_" + current.variables.item_name + "_Entitlement");
                user_criteria.setUsers(current.variables.assign_users);
                var group = '';
                if (status + "" == "false") {
                    group = current.variables.assign_groups;
                } else {
                    group = current.variables.assign_local_groups;
                }
                user_criteria.setGroups(group);
                user_criteria.setRoles(gs.getProperty('x_nuta2_nutanix_ca.admin.role.sysId'));
                user_criteria.setActive(true);
                user_criteria.setAdvanced(true);
                user_criteria.setMatchAll(false);
                user_criteria.setScript("answer = false;");
                var criteriaSysId = user_criteria.create();


                this.logger.debug("Entitled users &amp; groups to catalog item " + current.variables.item_name);

                /*				var assignCriteria = new GlideRecord(this.appUtil.configuration.table.catalogUserCriteria+'');
                				assignCriteria.initialize();
                				assignCriteria.sc_cat_item = catItemSysId+'';
                				assignCriteria.user_criteria = criteriaSysId+'';
                				assignCriteria.insert();*/

                var assignCriteria = new sn_sc.CatItem(catItemSysId);
                assignCriteria.availableForUserCriteria("add", [criteriaSysId]);

                ans.push(catItemSysId);
                ans.push(criteriaSysId);

                /*var onLoadclientScript = new GlideRecord(this.appUtil.configuration.table.catalogClientScript+'');
                onLoadclientScript.initialize();
                onLoadclientScript.name = "Get sync status on load";
                onLoadclientScript.type = "onLoad";
                onLoadclientScript.applies_to = "item";
                onLoadclientScript.cat_item = catItemSysId;
                onLoadclientScript.active = true;
                onLoadclientScript.order=100;
                //onLoadclientScript.sys_policy=protected;

                onLoadclientScript.description = 'This script is auto created thorugh runtime module for saving sync status.';

                onLoadclientScript.applies_catalog = true;
                onLoadclientScript.ui_type = "0";
                onLoadclientScript.applies_req_item = false;
                onLoadclientScript.applies_sc_task = false;
                onLoadclientScript.script = "function onLoad() { g_form.setValue('sync_flag', ''); var a=new GlideAjax('Nutanix_ClientServerScriptBridge');a.addParam('sysparm_name','checkQueue');a.getXML(responseParse);} function responseParse(response) {var b=response.responseXML.documentElement.getAttribute('answer');g_form.setValue('sync_flag', b);}";
                onLoadclientScript.insert();

                this.logger.debug("Created onLoad get sync value script on catalog item "+current.variables.item_name);

                var onSubmitclientScript = new GlideRecord(this.appUtil.configuration.table.catalogClientScript+'');
                onSubmitclientScript.initialize();
                onSubmitclientScript.name = "Prevent form submit";
                onSubmitclientScript.type = "onSubmit";
                onSubmitclientScript.applies_to = "item";
                onSubmitclientScript.cat_item = catItemSysId;
                onSubmitclientScript.active = true;
                onSubmitclientScript.order=100;
                //onLoadclientScript.sys_policy=protected;

                onSubmitclientScript.description = 'This script is auto created thorugh runtime module for preventing submission of form during a sync or delete.';

                onSubmitclientScript.applies_catalog = true;
                onSubmitclientScript.ui_type = "0";
                onSubmitclientScript.applies_req_item = false;
                onSubmitclientScript.applies_sc_task = false;
                onSubmitclientScript.script = "function onSubmit() { var sync_stat = g_form.getValue('sync_flag'); if(sync_stat == 'true'){return true;}else{return false;} }";
                onSubmitclientScript.insert();

                this.logger.debug("Created onSubmit validation script on catalog item "+current.variables.item_name);*/




                var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Check Catalog Item Validity",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "active": false,
                    "order": 1,
                    "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
                    "applies_catalog": true,
                    "ui_type": "0",
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = "function onLoad() { var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+''; var projectUUID = getParameterValue('projectUUID') + ''; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; } if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName); } 				 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true'; 				 }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   } }";
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();







                var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Get Project and Profile List onLoad",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "active": "true",
                    "order": "100",
                    "description": "This script is auto created thorugh runtime module for getting projects and profile list.",
                    "applies_catalog": "true",
                    "ui_type": "0",
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = "";
                if (parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2")) {
                    onLoadScript = "function onLoad() {var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchProjectAndProfileList');ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse);function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var parsed = JSON.parse(answer);var projectList = parsed.projectList;g_form.clearOptions('default_project');for (var i = 0; i &lt; projectList.length; i++) {var project = projectList[i];g_form.addOption('default_project', project.uuid, project.name)} if (projectList.length == 1) { g_form.setReadOnly('default_project', true)}new GlideModal().get('loader').destroy();}}";
                } else {
                    onLoadScript = "function onLoad() { var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching Project And Profile'); loadingDialog.renderWithContent(''+loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchProjectAndProfileList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null , loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer);var projectList = parsed.projectList; g_form.clearOptions('default_project');for (var i = 0; i &lt; projectList.length; i++) { var project = projectList[i]; g_form.addOption('default_project', project.uuid, project.name);}var profileList = parsed.profileList.split(','); g_form.clearOptions('default_profile'); for (i = 0; i &lt; profileList.length; i++) { g_form.addOption('default_profile', profileList[i] + '', profileList[i] + ''); } g_form.setValue('default_profile', profileList[0]);if (projectList.length == 1) { g_form.setReadOnly('default_project', true);} if (profileList.length == 1) { g_form.setReadOnly('default_profile', true);} new GlideModal().get('loader').destroy();var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\";var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching variables...'); loadingDialog.renderWithContent(''+loadingHTML);var cat_sys_id = g_form.getUniqueValue();var profile = g_form.getValue('default_profile').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse, null, loadingDialog);}function varResponse(response, loadingDialog) {var answer = response.responseXML.documentElement.getAttribute('answer');var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service; var sess_json = {};var var_array = [];for (var i in prof_json) {var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = i + '';sess_json['IO:'+i] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);for (var j in serv_json) {var_array = [];for (var k in serv_json[j]) {var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:'+k] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(sess_json);}}function getAdvancedVars(variable_json) {var act_var_JSON = JSON.stringify(variable_json);var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name', 'variableArrayParser');gajax.addParam('sysparm_type', 'catalog');gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + '');gajax.addParam('sysparm_varJson', act_var_JSON);gajax.getXML(getVarResponse);}function getVarResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null')return;var parsedResponse = JSON.parse(answer);for (var i in parsedResponse) {var row = parsedResponse[i];var sys_id = 'IO:' + row.sys_id;var type = row.type + '';if (row.state == 'SUCCESS') {if(type == 'LOCAL')g_form.setValue(sys_id, row.value);if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') {g_form.clearOptions(sys_id);for (var k = 0; k &lt; (row.value).length; k++) {g_form.addOption(sys_id + '', row.value[k], row.value[k]);}}}if (row.state == 'ERROR') {g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}}}";
                }
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();

                //			this.logger.debug("Created onLoad script to get project and profile list on catalog item "+current.variables.item_name);

                var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Get Credentials OnLoad",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "active": true,
                    "order": 900,
                    "description": "This script is auto created thorugh runtime module for getting Credentials list.",
                    "applies_catalog": true,
                    "ui_type": "0",
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = "function onLoad() { var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\";var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching Credentials List...'); loadingDialog.renderWithContent(''+loadingHTML); var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchCredentialsList');ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) {var answer = response.responseXML.documentElement.getAttribute('answer'); var credArr = {}; var parsed = JSON.parse(answer);for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + '').toLowerCase().replace(/ /g, '_');g_form.setValue(name + '_credential_name', credential.name + ''); g_form.setReadOnly(name + '_credential_name', true); g_form.setValue(name + '_secret_type', credential.type + '', (credential.type + '' == 'KEY') ? 'SSH Private Key' : 'Password'); g_form.setReadOnly(name + '_secret_type', true); g_form.setValue(name + '_username', credential.username.value); g_form.setReadOnly(name + '_username', credential.username.readOnly); g_form.setDisplay(name + '_username', !credential.username.readOnly); if ((credential.type == 'KEY')) {g_form.setValue(name + '_ssh_private_key', credential.ssh_private_key.value); g_form.setReadOnly(name + '_ssh_private_key', credential.ssh_private_key.readOnly); g_form.setValue(name + '_passphrase', credential.passphrase.value); g_form.setReadOnly(name + '_passphrase', credential.passphrase.readOnly); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_ssh_private_key', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + '_passphrase', !credential.passphrase.readOnly); } else { g_form.setValue(name + '_password', ''); credArr[name + '_password'] = credential.password.value; g_form.setReadOnly(name + '_password', credential.password.readOnly); g_form.setDisplay(name + '_password', !credential.password.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false');}g_form.setDisplay(name + '_credential_reference', 'false'); if (credential.credential_reference &amp;&amp; credential.credential_reference.name) {g_form.setDisplay(name + '_credential_reference', 'true');g_form.addOption(name + '_credential_reference', credential.credential_reference.uuid + '', credential.credential_reference.name + '');g_form.setReadOnly(name + '_credential_reference', credential.credential_reference.readOnly);g_form.setDisplay(name + '_credential_reference', !credential.credential_reference.readOnly);g_form.setDisplay(name + '_ssh_private_key', 'false');g_form.setDisplay(name + '_passphrase', 'false');g_form.setDisplay(name + '_password', 'false');g_form.setDisplay(name + '_secret_type', 'false');}} sessionStorage['credentials_' + g_form.getUniqueValue()] = JSON.stringify(credArr); new GlideModal().get('loader').destroy();}}";
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();

                //			this.logger.debug("Created onLoad script to get credentials data on catalog item "+current.variables.item_name);	

                /* Fetching Dynamic values for advance variable*/

                var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Fetch dynamic value for advance variables onload",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "active": true,
                    "order": 10,
                    "description": "This script is created for fetching dynamic values for advance variables onload.",
                    "applies_catalog": true,
                    "ui_type": "0",
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = " function onLoad() { var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true);  loadingDialog.setTitle('Fetching Dynamic values for advance variables...'); loadingDialog.renderWithContent(''+loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var elemen = g_form.nameMap; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'advanceVariableDynamicOptions'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parse = JSON.parse(answer); var keys = Object.keys(parse[0]); var fieldRegex = parse[1]; parse = parse[0]; sessionStorage['FieldRegex_' + g_form.getUniqueValue()] = JSON.stringify(fieldRegex); for (var i = 0; i &lt; keys.length; i++) { var row = parse[keys[i] + '']; if (row.options.state == 'SUCCESS') { g_form.clearOptions(keys[i] + ''); for (var k = 0; k &lt; (row.options.values).length; k++) { g_form.addOption(keys[i] + '', row.options.values[k], row.options.values[k]); }} else { g_form.addErrorMessage('Error in variable: ' + keys[i] + ': ' + row.options.values[0]); }} new GlideModal().get('loader').destroy();}}";
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();

                //	this.logger.debug("Created onLoad script to fetch dynamic values for advance variable on catalog item "+current.variables.item_name);
                /* Fetching Dynamic values for advance variable*/


                var catalogScriptGR = new sn_sc.CatalogClientScript();
                catalogScriptGR.setAttributes({
                    "name": "Fetch form data on change of profile",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": "" + catItemSysId,
                    "cat_variable": "IO:" + profileSysID,
                    "active": true,
                    "order": 100,
                    "description": 'This script is auto created thorugh runtime module for fetching and setting form data and visibility.',
                    "applies_catalog": true,
                    "ui_type": "0",
                    "applies_req_item": false,
                    "applies_sc_task": false,
                });
                catalogScriptGR.appliesToCatalogItem(true);
                var script = '';
                if (parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2")) {
                    script = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading ) { return; } if(newValue == '') return; var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; }  g_form.setMandatory(flds[i].prettyName, false);g_form.setDisplay(flds[i].prettyName, false); } g_form.setVariablesReadOnly(true); g_form.setDisplay('provider_icons', false); g_form.setReadOnly('default_project', false); g_form.setReadOnly('default_app_name', false); g_form.setReadOnly('default_profile', false); g_form.setDisplay('default_project', true); g_form.setDisplay('default_app_name', true); g_form.setDisplay('default_profile', true);g_form.setMandatory('default_profile', true); g_form.setDisplay('default_environment', true); g_form.setReadOnly('default_environment', false); var profile = newValue; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchOrderFormData'); ga.addParam('sysparm_profile', profile); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } var nameTypeMap = {}; var flds = g_form.nameMap; for (var i in flds) { nameTypeMap[flds[i].prettyName + ''] = fldType[flds[i].realName + ''] + ''; } var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf('cluster_name') == -1) { if (nameTypeMap[i + ''] + '' == 'masked') { fielVal[i] = parsed[i].value; g_form.setValue(i + '', ''); } else { g_form.setValue(i + '', parsed[i].value + ''); } g_form.setReadOnly(i + '', parsed[i].readOnly + ''); g_form.setDisplay(i + '', !parsed[i].readOnly); } else { g_form.setDisplay(i + '', !parsed[i].readOnly); g_form.setReadOnly(i + '', true); } } sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal); new GlideModal().get('loader').destroy(); var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchCredentialsList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var credArr = {}; var parsed = JSON.parse(answer); for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + '').toLowerCase().replace(/ /g, '_'); g_form.setValue(name + '_credential_name', credential.name + ''); g_form.setReadOnly(name + '_credential_name', true); g_form.setValue(name + '_secret_type', credential.type + '', (credential.type + '' == 'KEY') ? 'SSH Private Key' : 'Password'); g_form.setReadOnly(name + '_secret_type', true); g_form.setValue(name + '_username', credential.username.value); g_form.setReadOnly(name + '_username', credential.username.readOnly); g_form.setDisplay(name + '_username', !credential.username.readOnly); if ((credential.type == 'KEY')) { g_form.setValue(name + '_ssh_private_key', credential.ssh_private_key.value); g_form.setReadOnly(name + '_ssh_private_key', credential.ssh_private_key.readOnly); g_form.setValue(name + '_passphrase', credential.passphrase.value); g_form.setReadOnly(name + '_passphrase', credential.passphrase.readOnly); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_ssh_private_key', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + '_passphrase', !credential.passphrase.readOnly); } else { g_form.setValue(name + '_password', ''); credArr[name + '_password'] = credential.password.value; g_form.setReadOnly(name + '_password', credential.password.readOnly); g_form.setDisplay(name + '_password', !credential.password.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); } g_form.setDisplay(name + '_credential_reference', 'false'); if (credential.credential_reference &amp;&amp; credential.credential_reference.name) { g_form.setDisplay(name + '_credential_reference', 'true'); g_form.addOption(name + '_credential_reference', credential.credential_reference.uuid + '', credential.credential_reference.name + ''); g_form.setReadOnly(name + '_credential_reference', credential.credential_reference.readOnly); g_form.setDisplay(name + '_credential_reference', !credential.credential_reference.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_secret_type', 'false'); } } sessionStorage['credentials_' + g_form.getUniqueValue()] = JSON.stringify(credArr); new GlideModal().get('loader').destroy(); } }}";
                } else {
                    script = "function onChange(control, oldValue, newValue, isLoading) {if (newValue == '') {return;} var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialogbox = new GlideModal('loader', true);loadingDialogbox.setTitle('Fetching Order Form Data...'); loadingDialogbox.renderWithContent(''+loadingHTML);var fldType = {};var elemen = g_form.elements;for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;} g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'false');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = newValue;var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile);ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse, null, loadingDialogbox);function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer');   var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; }  var nameTypeMap = {}; var flds = g_form.nameMap; for(var i in flds){ nameTypeMap[flds[i].prettyName+''] = fldType[flds[i].realName+'']+''; } 		  var fielVal = {};  var parsed = JSON.parse(answer);for (var i in parsed) {if(i.indexOf('cluster_name') == -1){ if(nameTypeMap[i+'']+'' == 'masked'){ fielVal[i] = parsed[i].value; g_form.setValue(i + '', ''); } else{ g_form.setValue(i + '', parsed[i].value + ''); }			 g_form.setReadOnly(i + '', parsed[i].readOnly + ''); g_form.setDisplay(i + '', !parsed[i].readOnly);	 }else{ g_form.setDisplay(i + '', !parsed[i].readOnly);	 g_form.setReadOnly(i + '', true);	 			}		}   sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);		  new GlideModal().get('loader').destroy();var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\";var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching Credentials List...'); loadingDialog.renderWithContent(''+loadingHTML); var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchCredentialsList');ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) {var answer = response.responseXML.documentElement.getAttribute('answer'); var credArr = {}; var parsed = JSON.parse(answer);for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + '').toLowerCase().replace(/ /g, '_');g_form.setValue(name + '_credential_name', credential.name + ''); g_form.setReadOnly(name + '_credential_name', true); g_form.setValue(name + '_secret_type', credential.type + '', (credential.type + '' == 'KEY') ? 'SSH Private Key' : 'Password'); g_form.setReadOnly(name + '_secret_type', true); g_form.setValue(name + '_username', credential.username.value); g_form.setReadOnly(name + '_username', credential.username.readOnly); g_form.setDisplay(name + '_username', !credential.username.readOnly); if ((credential.type == 'KEY')) {g_form.setValue(name + '_ssh_private_key', credential.ssh_private_key.value); g_form.setReadOnly(name + '_ssh_private_key', credential.ssh_private_key.readOnly); g_form.setValue(name + '_passphrase', credential.passphrase.value); g_form.setReadOnly(name + '_passphrase', credential.passphrase.readOnly); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_ssh_private_key', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + '_passphrase', !credential.passphrase.readOnly); } else { g_form.setValue(name + '_password', ''); credArr[name + '_password'] = credential.password.value; g_form.setReadOnly(name + '_password', credential.password.readOnly); g_form.setDisplay(name + '_password', !credential.password.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false');}g_form.setDisplay(name + '_credential_reference', 'false'); if (credential.credential_reference &amp;&amp; credential.credential_reference.name) {g_form.setDisplay(name + '_credential_reference', 'true');g_form.addOption(name + '_credential_reference', credential.credential_reference.uuid + '', credential.credential_reference.name + '');g_form.setReadOnly(name + '_credential_reference', credential.credential_reference.readOnly);g_form.setDisplay(name + '_credential_reference', !credential.credential_reference.readOnly);g_form.setDisplay(name + '_ssh_private_key', 'false');g_form.setDisplay(name + '_passphrase', 'false');g_form.setDisplay(name + '_password', 'false');g_form.setDisplay(name + '_secret_type', 'false');}} sessionStorage['credentials_' + g_form.getUniqueValue()] = JSON.stringify(credArr); new GlideModal().get('loader').destroy();}}}";
                }
                catalogScriptGR.addScript(script);
                var ScriptId = catalogScriptGR.create();


                /*Onload script for subnet*/

                /*		var onLoadclientScript = new GlideRecord(this.appUtil.configuration.table.catalogClientScript+'');
                		onLoadclientScript.initialize();
                		onLoadclientScript.name = "Get Subnet Info";
                		onLoadclientScript.type = "onLoad";
                		onLoadclientScript.applies_to = "item";
                		onLoadclientScript.cat_item = catItemSysId;
                		onLoadclientScript.active = true;
                		onLoadclientScript.order=50;

                		onLoadclientScript.description = 'This script is created for getting subnet list.';

                		onLoadclientScript.applies_catalog = true;
                		onLoadclientScript.ui_type = "0";
                		onLoadclientScript.applies_req_item = false;
                		onLoadclientScript.applies_sc_task = false;
                		onLoadclientScript.script = "function onLoad() { var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getSubnet');ga.addParam('sysparm_catSysID', catalogSysId);ga.getXML(processAnswer);function processAnswer(response) {var ans = response.responseXML.documentElement.getAttribute('answer');sessionStorage['clusterName_' + g_form.getUniqueValue()] = ans;ans = JSON.parse(ans);var catalog_clusterJSON = ans.catalog_data;clusterJSON = ans.cluster_info;var nicList = [];for(var m in clusterJSON){nicList.push(clusterJSON[m].subnet);}for (var k in catalog_clusterJSON) {for (var i in catalog_clusterJSON[k].nics) {if (catalog_clusterJSON[k].value + '') {for (var l in clusterJSON) {var subnetList = clusterJSON[l].subnet;if (l != catalog_clusterJSON[k].value + '')for (var s in subnetList) g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', s);}}else{var opt = g_form.getElement(catalog_clusterJSON[k].nics[i] + '');for (var x=1, n = opt.options.length; x &lt; n; x++) {var present = false;var val = opt.options[x].value+'';for(var s=0; s &lt; nicList.length ;s++){if (nicList[s][val]) {present =true;break;}} if(!present){ g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', opt.options[x].value+''); x--;n--; } }} }}}}";
                		onLoadclientScript.insert();*/

                var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Get Subnet Info",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": "" + catItemSysId,
                    "active": false,
                    "order": 50,
                    "description": "This script is created for getting subnet list.",
                    "applies_catalog": true,
                    "ui_type": "0",
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = "function onLoad() { var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getSubnet');ga.addParam('sysparm_catSysID', catalogSysId);ga.getXML(processAnswer);function processAnswer(response) {var ans = response.responseXML.documentElement.getAttribute('answer');sessionStorage['clusterName_' + g_form.getUniqueValue()] = ans;ans = JSON.parse(ans);var catalog_clusterJSON = ans.catalog_data;clusterJSON = ans.cluster_info;var nicList = [];for(var m in clusterJSON){nicList.push(clusterJSON[m].subnet);}for (var k in catalog_clusterJSON) {for (var i in catalog_clusterJSON[k].nics) {if (catalog_clusterJSON[k].value + '') {for (var l in clusterJSON) {var subnetList = clusterJSON[l].subnet;if (l != catalog_clusterJSON[k].value + '')for (var s in subnetList){ /*g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', s);*/}}}{var opt = g_form.getElement(catalog_clusterJSON[k].nics[i] + '');for (var x=1, n = opt.options.length; x &lt; n; x++) {var present = false;var val = opt.options[x].value+'';for(var s=0; s &lt; nicList.length ;s++){if (nicList[s][val]) {present =true;break;}} if(!present){g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', opt.options[x].value+''); x--;n--; } }} }}}}";
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();

                /*End of Onload script for subnet*/
                /**/

                for (var x = 0; x &lt; nicSysIdList.length; x++) {
                    var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript.setAttributes({
                        "name": "Populate Nic on change of Nic Sys_id : " + x,
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": '' + catItemSysId,
                        "cat_variable": "IO:" + nicSysIdList[x],
                        "active": true,
                        "order": 400,
                        "description": "This script is created for onChange of Nic",
                        "applies_catalog": true,
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onChangecatalogClientScript.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } var clusterJson = JSON.parse(sessionStorage.getItem( 'clusterName_'+g_form.getUniqueValue() )); var catCluster = clusterJson.catalog_data; var clusterInfo = clusterJson.cluster_info; var clusterVal;for (var i in clusterInfo) {for (var k in clusterInfo[i].subnet) {if (k == newValue) {clusterVal = i + ''; }}}var clustername, relatedNic;for (var i in catCluster) {var nic = catCluster[i].nics; for (var k in nic) { var nicElem = nic[k]; if ('" + nicSysIdList[x] + "' == k) { if (!catCluster[i].value) { g_form.setValue(catCluster[i].name, clusterVal); relatedNic = catCluster[i].nics; addNicOptions(relatedNic);}else{g_form.setValue(catCluster[i].name, clusterVal);relatedNic = catCluster[i].nics;}}}} function addNicOptions(relatedNic) {for (var n in relatedNic) {for (var l in clusterInfo) {if (l != clusterVal &amp;&amp; clusterVal) for (var j in clusterInfo[l].subnet) { g_form.removeOption(relatedNic[n], j); }}}}}";
                    onChangecatalogClientScript.addScript(onChangeScript);
                    var onChangeCatalogClientScriptId = onChangecatalogClientScript.create();
                    this.logger.debug("Created onChange script to populate Nic SYS id  " + catalogScriptGR.cat_variable);

                }

                /**/
                this.logger.debug("Created onChange script to get form data on catalog item " + current.variables.item_name);


                var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript.setAttributes({
                    "name": "Check AppName OnChange",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "cat_variable": "IO:" + appSysID,
                    "active": true,
                    "order": 100,
                    "description": "This script is auto created thorugh runtime module for checking application name.",
                    "applies_catalog": true,
                    "ui_type": "0",
                    "applies_req_item": false,
                    "applies_sc_task": false,

                });
                onChangecatalogClientScript.appliesToCatalogItem(true);
                var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') {return;}var name = newValue; if ((newValue.length != ((newValue.trim()).length))  || (!(/^[_-\\w ]+$/.test(name) &amp;&amp; (name.trim().lastIndexOf('-') != (name.trim().length - 1))))) {g_form.clearValue('default_app_name'); g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and in between spaces are allowed and cannot end with hyphens(-). Leading and trailing spaces are not allowed.');}}";
                onChangecatalogClientScript.addScript(onChangeScript);
                var OnChangeCatalogScriptId = onChangecatalogClientScript.create();

                this.logger.debug("Created onChange script to check application name on " + current.variables.item_name);

                var onSubmitcatalogScriptGR = new sn_sc.CatalogClientScript();
                onSubmitcatalogScriptGR.setAttributes({
                    "name": "Check AppName OnSubmit",
                    "type": "onSubmit",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "active": true,
                    "order": 100,
                    "description": "This script is auto created thorugh runtime module for checking application name on submit.",
                    "applies_catalog": true,
                    "ui_type": "0",
                    "applies_req_item": false,
                    "applies_sc_task": false,
                });
                onSubmitcatalogScriptGR.appliesToCatalogItem(true);
                var onSubmitscript = "function onSubmit() { var result = true; var name = g_form.getValue('default_app_name'); if (!(/^[_-\\w ]+$/.test(name) &amp;&amp; (name.trim().lastIndexOf('-') != (name.trim().length - 1)))) { g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and spaces are allowed and cannot end with hyphens(-).'); result = false; } var errorFieldName = ''; var errorIntFieldName = ''; var parse = JSON.parse(sessionStorage.getItem('FieldRegex_' + g_form.getUniqueValue())); var keys = Object.keys(parse); for (var i = 0; i &lt; keys.length; i++) { var row = parse[keys[i] + '']; var patt = row.regex + ''; var reg = new RegExp(patt); var value = g_form.getValue(keys[i] + ''); var dataType = (row.data_type + '' == 'EXEC_SECRET' || row.data_type + '' == 'HTTP_SECRET' || row.data_type + '' == 'EXEC_LOCAL' || row.data_type + '' == 'HTTP_LOCAL') ? 'Dynamic' : row.data_type + ''; if (row.type + '' == 21) { var splitted = value.split(','); var actualVal = row.listRegex; var count = 0; for (var j = 0, n = splitted.length; j &lt; n; j++) { var listVal = actualVal[splitted[j] + ''];  if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') &amp;&amp; j == n - 1 &amp;&amp; listVal.includes('\n')){ while(listVal.indexOf('\n') != -1){ listVal = listVal.replace('\n','');} if (reg.test(listVal)) { count++;} } if (count == n) row.status = true; } else { if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') &amp;&amp; value.includes('\n')){while(value.indexOf('\n') != -1){value = value.replace('\n','');}} if (reg.test(value)) { row.status = true; } } if (value &amp;&amp; row.status == false) { result = false; g_form.hideFieldMsg(keys[i] + ''); if(dataType == ''){ errorIntFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'This is a Integer field.Please provide a integer value.'); } else{ errorFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'Value does not match specified regex: ' + row.regex); } }} if (result) {   var parse = JSON.parse(sessionStorage.getItem('fieldValues_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 			 parse = JSON.parse(sessionStorage.getItem('credentials_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 		 sessionStorage.removeItem('fieldValues_' + g_form.getUniqueValue()); sessionStorage.removeItem('credentials_' + g_form.getUniqueValue());      sessionStorage.removeItem('clusterName_' + g_form.getUniqueValue()); sessionStorage.removeItem('FieldRegex_' + g_form.getUniqueValue());var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\" ;var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Validating field value with regex..'); loadingDialog.renderWithContent(''+loadingHTML);} else { errorIntFieldName = (errorIntFieldName.endsWith(',')) ? errorIntFieldName.substr(0, errorIntFieldName.length - 1) : errorIntFieldName; errorFieldName = (errorFieldName.endsWith(',')) ? errorFieldName.substr(0, errorFieldName.length - 1) : errorFieldName; if(errorIntFieldName != '' ) g_form.addErrorMessage('Variables are Integer field.Please provide suitable values: ' + errorIntFieldName); if(errorFieldName != '' ) g_form.addErrorMessage('Variables value does not match specified Regex.Please provide suitable values: ' + errorFieldName); new GlideModal().get('loader').destroy(); return false; }var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+'';var profileName = (g_form.getValue('default_profile')+'').trim(); if(profileName == '') return; var projectUUID = (g_form.getValue('default_project')+'').trim(); if(projectUUID == '') return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName);ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; }if(flds[i].label == \"Project\"  &amp;&amp; flds[i].prettyName == \"default_project\")continue;if(flds[i].label == \"Profile\"  &amp;&amp; flds[i].prettyName == \"default_profile\")continue;if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName);  /*	 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true'; 	*/			} }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   }}";
                onSubmitcatalogScriptGR.addScript(onSubmitscript);
                var onSubmitcatalogScriptId = onSubmitcatalogScriptGR.create();

                this.logger.debug("Created onSubmit script to check application name on " + current.variables.item_name);

				
                var onLoadCatalogClientScriptGR = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScriptGR.setAttributes({
                    "name": "Hide Order details on request",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "active": true,
                    "order": 10,
                    "description": "Hide values on request details.",
                    "applies_catalog": "false",
                    "ui_type": "0",
                    "applies_req_item": "true",
                    "applies_sc_task": "false"
                });
                onLoadCatalogClientScriptGR.appliesToCatalogItem(false);
                onLoadCatalogClientScriptGR.appliesToRequestedItem(true);
                var onLoadScriptHide = "function onLoad() {if(g_form.getTableName() + '' == 'sc_req_item') {var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;}g_form.setMandatory(flds[i].prettyName,false);g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'false');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_environment', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = g_form.getValue('default_profile') + '';var cat_sys_id = g_form.getValue('cat_item') + '';var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile + '');ga.addParam('sysparm_catSysID', cat_sys_id + '');ga.getXML(parseResponse);} function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var nameTypeMap = {};var flds = g_form.nameMap;for (var i in flds) {nameTypeMap[flds[i].prettyName + ''] = fldType[flds[i].realName + ''] + '';}var fielVal = {};var parsed = JSON.parse(answer);for (var i in parsed) {if (i.indexOf('cluster_name') == -1) {if (nameTypeMap[i + ''] + '' == 'masked') {fielVal[i] = parsed[i].value;g_form.setValue(i + '', '');}g_form.setReadOnly(i + '', true); g_form.setDisplay(i + '', !parsed[i].readOnly);} else {g_form.setDisplay(i + '', !parsed[i].readOnly);g_form.setReadOnly(i + '', true);}}sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);}}";
                onLoadCatalogClientScriptGR.addScript(onLoadScriptHide);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScriptGR.create();



                var onChangecatalogClientScript1 = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript1.setAttributes({
                    "name": "Get Subnet Info on project change",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "cat_variable": "IO:" + projectSysID,
                    "active": true,
                    "order": 600,
                    "description": "This script is auto created thorugh runtime module for checking application name on submit.",
                    "applies_catalog": true,
                    "ui_type": "0",
                    "applies_req_item": false,
                    "applies_sc_task": false,

                });
                onChangecatalogClientScript1.appliesToCatalogItem(true);
                var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (newValue == '') { return; }var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getSubnet');ga.addParam('sysparm_catSysID', catalogSysId);ga.addParam('sysparm_ProjectUuid', newValue);ga.getXML(processAnswer);function processAnswer(response) {var ans = response.responseXML.documentElement.getAttribute('answer');sessionStorage['clusterName_' + g_form.getUniqueValue()] = ans;ans = JSON.parse(ans);var catalog_clusterJSON = ans.catalog_data;clusterJSON = ans.cluster_info;var nicList = [];for(var m in clusterJSON){nicList.push(clusterJSON[m].subnet);}for (var k in catalog_clusterJSON) {for (var i in catalog_clusterJSON[k].nics) {if (catalog_clusterJSON[k].value + '') {for (var l in clusterJSON) {var subnetList = clusterJSON[l].subnet;if (l != catalog_clusterJSON[k].value + '')for (var s in subnetList){ /*g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', s);*/}}}{var opt = g_form.getElement(catalog_clusterJSON[k].nics[i] + '');for (var x=1, n = opt.options.length; x &lt; n; x++) {var present = false;var val = opt.options[x].value+'';for(var s=0; s &lt; nicList.length ;s++){if (nicList[s][val]) {present =true;break;}} if(!present){g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', opt.options[x].value+''); x--;n--; } }} }}}}";
                onChangecatalogClientScript1.addScript(onChangeScript);
                var OnChangeCatalogScriptId = onChangecatalogClientScript1.create();

                this.logger.debug("Created onChange script to check application name on " + current.variables.item_name);

                var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Check Catalog Item Validity project",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "cat_variable": "IO:" + projectSysID,
                    "active": true,
                    "order": 1,
                    "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
                    "applies_catalog": true,
                    "ui_type": "0",
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') { return;} var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+''; var profileName = (g_form.getValue('default_profile')+'').trim();if(profileName == '') return;var projectUUID = (newValue+'').trim();if(projectUUID == '')return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; }  if(flds[i].label == \"Project\"  &amp;&amp; flds[i].prettyName == \"default_project\")continue;if(flds[i].label == \"Profile\"  &amp;&amp; flds[i].prettyName == \"default_profile\")continue;if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName);/* self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true'; */			}	 }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   } }";
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();


                var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Check Catalog Item Validity profile",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "cat_variable": "IO:" + profileSysID,
                    "active": true,
                    "order": 1,
                    "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
                    "applies_catalog": true,
                    "ui_type": "0",
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') { return;} var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+'';var profileName = (newValue+'').trim(); if(profileName == '') return; var projectUUID = (g_form.getValue('default_project')+'').trim(); if(projectUUID == '') return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName);ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; } if(flds[i].label == \"Project\"  &amp;&amp; flds[i].prettyName == \"default_project\")continue;if(flds[i].label == \"Profile\"  &amp;&amp; flds[i].prettyName == \"default_profile\")continue;if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName);/*	 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true'; 	*/			 }}  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   } }";
                onLoadCatalogClientScript.addScript(onLoadScript);
               
				var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();

                var onChangecatalogClientScript2 = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript2.setAttributes({
                    "name": "Set Session Vars",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "cat_variable": "IO:" + profileSysID,
                    "active": true,
                    "order": 700,
                    "description": "This script is auto created thorugh runtime module for setting session json.",
                    "applies_catalog": true,
                    "ui_type": "0",
                    "applies_req_item": false,
                    "applies_sc_task": false,

                });
                onChangecatalogClientScript2.appliesToCatalogItem(true);
                var onChangeScriptSess = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') {return;}var cat_sys_id = g_form.getUniqueValue();var profile = (newValue + '').trim();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse);function varResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');jslog(answer);var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service;var sess_json = {};for (var i in prof_json) {var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = i + '';sess_json['IO:' + i] = curr_value;}for (var j in serv_json) {for (var k in serv_json[j]) {var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:' + k] = curr_value;}}sessionStorage['varValues'] = JSON.stringify(sess_json);}}";
                onChangecatalogClientScript2.addScript(onChangeScriptSess);
                var OnChangeCatalogScriptId = onChangecatalogClientScript2.create();

                this.logger.debug("Created onChange script to set Session variables " + current.variables.item_name);

                var onChangecatalogClientScript3 = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript3.setAttributes({
                    "name": "Fetch dependencies on change of profile",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "cat_variable": "IO:" + profileSysID,
                    "active": true,
                    "order": 700,
                    "description": "This script is auto created thorugh runtime module for getting variables on change of profile.",
                    "applies_catalog": true,
                    "ui_type": "0",
                    "applies_req_item": false,
                    "applies_sc_task": false,

                });
                onChangecatalogClientScript3.appliesToCatalogItem(true);
                var onChangeScriptVars = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + '').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchLaunchVars'); ga.addParam('sysparm_catsysid', cat_sys_id); ga.addParam('sysparm_profile', profile); ga.getXML(varResponse);}function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); console.log(answer); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue('IO:' + i); var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value = curr_value; parsed_field.sys_id = i + ''; sess_json['IO:' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue('IO:' + k); var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value = curr_value; parsed_field.sys_id = k + ''; sess_json['IO:' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage['varValues'] = JSON.stringify(sess_json);}function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); gajax.addParam('sysparm_name', 'variableArrayParser'); gajax.addParam('sysparm_type', 'catalog'); gajax.addParam('sysparm_field', 'onLoad');gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + ''); gajax.addParam('sysparm_varJson', act_var_JSON); gajax.getXML(getVarResponse);}function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) {var row = parsedResponse[i]; var sys_id = 'IO:' + row.sys_id; var type = row.type + ''; if (row.state == 'SUCCESS' &amp;&amp; (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET')) {g_form.clearOptions(sys_id);for (var k = 0; k &lt; row.value.length; k++) g_form.addOption(sys_id + '', row.value[k], row.value[k]);g_form.setValue(sys_id, row.value);} else {if (row.data_type + '' != 'BASE') {g_form.clearOptions(sys_id);for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + '', row.options[k], row.options[k]);}g_form.setValue(sys_id, row.value);}if (row.state == 'ERROR') {g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}new GlideModal().get('variables_loader').destroy(); }}";
                onChangecatalogClientScript3.addScript(onChangeScriptVars);
                var OnChangeCatalogScriptId = onChangecatalogClientScript3.create();

                this.logger.debug("Created onChange script to set Session variables " + current.variables.item_name);

                if (parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2")) {
                    this.logger.debug("Created On Change of Project (calm evirment 3.2) client script on  " + current.variables.item_name);
                    var onChangeCatalogProject = new sn_sc.CatalogClientScript();
                    onChangeCatalogProject.setAttributes({
                        "name": "On Change of Project",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": '' + catItemSysId,
                        "cat_variable": "IO:" + projectSysID,
                        "active": true,
                        "order": 700,
                        "description": "This script is auto created thorugh runtime module for getting variables on change of project.",
                        "applies_catalog": true,
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,

                    });
                    onChangeCatalogProject.appliesToCatalogItem(true);
                    var onChangeProjectScript = "function onChange(control, oldValue, newValue, isLoading){if (isLoading || newValue == ''){return;}var project = g_form.getValue('default_project');var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchEnvironments');ga.addParam('sysparm_project', project);ga.getXML(parseResponse);function parseResponse(response){var answer = response.responseXML.documentElement.getAttribute('answer');var result = JSON.parse(answer);if (result.length == 0) {g_form.hideFieldMsg('default_environment', true);g_form.clearOptions('default_environment');g_form.showFieldMsg('default_environment', 'This Project has no valid Environments configured, you cannot proceed with the launch.  Please contact your administrator'); g_form.hideFieldMsg('default_profile', true);g_form.clearOptions('default_profile');g_form.setMandatory('default_profile', true);g_form.showFieldMsg('default_profile', 'There are no applicable Profile(s) that match the selected Environment.  Please choose a different Environment to proceed.');var elemen = g_form.elements;for (var i in elemen) { g_form.setDisplay(elemen[i].fieldName, false);} g_form.setDisplay('default_profile', true);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setMandatory('default_profile', true);}else{g_form.clearMessages();g_form.clearOptions('default_environment');for (var i = 0; i &lt; result.length; i++){var jsonObj = result[i];g_form.addOption('default_environment', jsonObj.UUID + '', jsonObj.Name + '');}}}}";
                    onChangeCatalogProject.addScript(onChangeProjectScript);
                    var OnChangeCatalogScriptId = onChangeCatalogProject.create();
                    this.logger.debug("Created On Change of Project (calm evirment 3.2) client script on  " + current.variables.item_name);


                    this.logger.debug("Created On Change of Environment (calm evirment 3.2) client script on  " + current.variables.item_name);
                    var onChangeCatalogEnvironment = new sn_sc.CatalogClientScript();
                    onChangeCatalogEnvironment.setAttributes({
                        "name": "On Change of Environment variable",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": '' + catItemSysId,
                        "cat_variable": "IO:" + environmentSysId,
                        "active": true,
                        "order": 700,
                        "description": "This script is auto created thorugh runtime module for getting variables on change of project.",
                        "applies_catalog": true,
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,

                    });
                    onChangeCatalogEnvironment.appliesToCatalogItem(true);
                    var onChangeEnvironmentScript = "function onChange(control, oldValue, newValue, isLoading){if (isLoading || newValue == '') {return;} var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\";var loadingDialog = new GlideModal('environment_loader', true);loadingDialog.setTitle('Fetching Profiles...');loadingDialog.renderWithContent('' + loadingHTML);var gUrl = new GlideURL();gUrl.setFromCurrent();var def_project;for (var i = 0; i &lt; g_form.getControl('default_project').options.length; i++){if (g_form.getControl('default_project').options[i].value == g_form.getValue('default_project')) {def_project = g_form.getControl('default_project').options[i].innerText;break;}}var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchProfilesBasisOnEnvironment');ga.addParam('sysparm_env', g_form.getValue('default_environment'));ga.addParam('sysparm_proValue', g_form.getValue('default_project'));ga.addParam('sysparm_pro', def_project + '');ga.addParam('sysparm_profile', gUrl.getParam('profileSysId'));ga.addParam('sysparm_blueprint', gUrl.getParam('uuid'));ga.addParam('sysparm_type', gUrl.getParam('type'));ga.getXML(parseData);function parseData(response) {var answer = response.responseXML.documentElement.getAttribute('answer');jslog(' On Change of Environment variable answer' + answer);answer = JSON.parse(answer);if (answer.length == 0) {g_form.hideFieldMsg('default_profile', true); g_form.clearOptions('default_profile');g_form.showFieldMsg('default_profile', 'There are no applicable Profile(s) that match the selected Environment.  Please choose a different Environment to proceed.');var elemen = g_form.elements;for (var i in elemen) {g_form.setDisplay(elemen[i].fieldName, false);}g_form.setDisplay('default_profile', true);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setMandatory('default_profile', true);}else{var elemen = g_form.elements;for (var i in elemen) {g_form.setDisplay(elemen[i].fieldName, true);}g_form.hideFieldMsg('default_profile', true);g_form.clearOptions('default_profile');for (var i = 0; i &lt; answer.length; i++) {g_form.addOption('default_profile', answer[i], answer[i]);}if (answer.length == 1) {g_form.setReadOnly('default_profile', true);}}new GlideModal().get('environment_loader').destroy();new GlideModal().get('environment_loader').destroy();new GlideModal().get('environment_loader').destroy();}}";
                    onChangeCatalogEnvironment.addScript(onChangeEnvironmentScript);
                    var OnChangeCatalogScriptId = onChangeCatalogEnvironment.create();
                    this.logger.debug("Created On Change of Environment (calm evirment 3.2) client script on  " + current.variables.item_name);
                }



                var cat_ui_policy = new GlideRecord(this.appUtil.configuration.table.catalogUIPolicy + '');
                cat_ui_policy.initialize();
                cat_ui_policy.catalog_item = catItemSysId;
                cat_ui_policy.short_description = 'Make Variables RITM ReadOnly';
                cat_ui_policy.applies_catalog = false;
                cat_ui_policy.applies_sc_task = false;
                cat_ui_policy.applies_req_item = true;
                cat_ui_policy.run_scripts = true;
                cat_ui_policy.script_true = 'function onCondition() { g_form.setVariablesReadOnly(true); }';
                cat_ui_policy.insert();



                this.logger.debug("Created ui policy to make field readonly on RITM on catalog item " + current.variables.item_name);

            }

            this.logger.info("New Catalog item " + current.variables.item_name + " creation completed.");
            return ans;

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._copyCatalogItem. Error:- " + e);
        }
    },

    _insertIntoRuntimeConfigTable: function(ans, current) {
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._insertIntoRuntimeConfigTable.");

            var createCatalog = current.variables.create_catalog + '';

            if (createCatalog == 'yes') {

                // 				var project = new GlideRecord(this.appUtil.configuration.table.Project+'');
                // 				project.addQuery('sys_id', current.variables.project+'');
                // 				project.setLimit(1);
                // 				project.query();
                // 				project.next();

                var gr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
                gr.initialize();
                gr.multiple_application_profile = current.variables.multiple_application_profile + '';
                //gr.assigned_users = current.variables.assign_users+'';
                gr.user_criteria = ans[1];
                gr.blueprint = current.variables.blueprint + '';
                //gr.description = current.variables.description+'';
                gr.item_name = ans[0] + '';
                gr.multiple_projects = current.variables.multiple_project + '';
                gr.insert();

                this.logger.info("Inserting value and runtime value of fields into variable proerpteis table.");
            } else {
                var gr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
                gr.addQuery('item_name', current.variables.cat_item + '');
                gr.query();
                if (gr.next()) {
                    gr.application_profile = gr.application_profile + ',' + current.variables.application_profile + '';
                    gr.update();
                }

                this.logger.info("Updating value and runtime value of fields into variable proerpteis table.");
            }

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._insertIntoRuntimeConfigTable. Error:- " + e);
        }

    },

    setMultiProfileServiceVariables: function(current) {
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts.setMultiProfileServiceVariables.");

            var performAction = current.variables.type + '';
            var catName = '';


            if (performAction == 'new') {
                var profile = current.variables.multiple_application_profile+'';
				var profile_arr = profile.split(",");
                var blueprint = current.variables.blueprint;
                var catSysId = current.description;
                var multiprofile_service_data = JSON.parse(current.variables.service_data);

                this.logger.debug("Got Profile:- " + profile + " Blueprint:- " + blueprint + " Catalog Item:- " + catSysId + " and Service Variables Data:- " + current.variables.service_data + " for setting service variables");

                var fieldGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                fieldGR.addEncodedQuery('cat_item=' + catSysId);
                fieldGR.query();

                var fieldInfo = {};

                while (fieldGR.next()) {
                    fieldInfo[fieldGR.name] = fieldGR.sys_id + '';
                }


                this.logger.debug("Fethed the mapping of fields to sysIds. JSON string:- " + JSON.stringify(fieldInfo));
                for (var c in multiprofile_service_data) {
                    var profile = multiprofile_service_data[c].profile_sys_id;
                    var profile_gr = new GlideRecord('x_nuta2_nutanix_ca_application_profile');
                    if (profile_gr.get(profile)) {}


                    var service_data = multiprofile_service_data[c].service_configuration;

                    var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');

                    for (var i in service_data) {
                        var serviceName = i;
                        var categoryList = service_data[i];

                        for (var j in categoryList) {
                            var categoryName = j;
                            var category = categoryList[j];

                            var keys = Object.keys(category);

                            if (!category[keys[0]].notCmplx || category[keys[0]].notCmplx + '' == 'false') {

                                this.logger.debug("Mapping PortList variables " + JSON.stringify(category[keys[0]]) + " in Varaibles properties table");

                                gr.initialize();
                                var temp1 = categoryName.replace(profile_gr.name + '_', '');
                                gr.variable = fieldInfo[temp1 + ''] + '';
                                gr.application_profile = profile + '';
                                gr.catalog_item = catSysId + '';
                                gr.default_value = JSON.stringify(category[keys[0]]);
                                gr.isprofilevariable = 'false';
                                gr.runtime_config = 'false';
                                gr.uuid = '';
                                var temp2 = serviceName.replace(profile_gr.name + '_', '');
                                gr.service_name = fieldInfo[temp2 + ''] + '';
                                var temp3 = categoryName.replace(profile_gr.name + '_', '');
                                gr.category_name = fieldInfo[temp3 + ''] + '';
                                gr.insert();

                            } else {
                                for (var k in category) {
                                    var varia = category[k];

                                    this.logger.debug("Mapping service variable " + varia.name + " with value " + varia.value + " and runtime config as " + varia.runtime_config + " againsts service " + serviceName + " and category " + categoryName + " in Varaibles properties table");

                                    if (varia.data_type + '' == 'LOCAL' &amp;&amp; (varia.val_type + '' == 'DATE_TIME' || varia.val_type + '' == 'DATE'))
                                        varia.value = this.appScriptInstance._formttedDateTime(varia.value + '', varia.val_type + '', true);


                                    gr.initialize();
                                    var temp1 = (varia.name).replace(profile_gr.name + '_', '');

                                    gr.variable = fieldInfo[temp1 + ''] + '';
                                    gr.application_profile = profile + '';
                                    gr.catalog_item = catSysId + '';
                                    gr.default_value = varia.value + '';
                                    gr.isprofilevariable = varia.isprofilevariable + '';
                                    gr.runtime_config = varia.runtime_config + '';
                                    gr.uuid = varia.uuid + '';
                                    var temp = serviceName.replace(profile_gr.name + '_', '');
                                    gr.service_name = fieldInfo[temp + ''] + '';
                                    var temp1 = categoryName.replace(profile_gr.name + '_', '');
                                    gr.category_name = fieldInfo[temp1 + ''] + '';

                                    gr.isdisabled = varia.isdisabled + '';
                                    gr.issupported = varia.isSupported + '';
                                    gr.isservicevariable = varia.isservicevariable + '';


                                    gr.type = varia.type;
                                    gr.value_type = varia.val_type + '';
                                    gr.field_regex = varia.regex + '';
                                    gr.data_type = varia.data_type + '';
                                    gr.uuid = varia.uuid + '';

                                    gr.field_json = varia.field + "";
                                    gr.is_hidden = (varia.isHidden + "" == 'true') ? true : false;


                                    gr.insert();

                                    catName = gr.catalog_item.name + '';

//                                     if (varia.isservicevariable + '' == 'true')
//                                         this._createOnChangeScript(fieldInfo[varia.name + ''] + '', catSysId + "");
                                }
                            }

                        }
                    }

                    this.logger.info("Set service variables values for " + catName + ".");
                }
				
				this.logger.info("Set service variables values for " + catName + ".");
			
				for(var i = 0 ; i &lt; profile_arr.length ; i++){
				
					this._createOnChangeScriptForDependee(catSysId , profile_arr[i], "serviceVar" );
				}
            }
			else {

                var profile = current.variables.multiple_application_profile+'';
				var profile_arr = profile.split(",");
                var blueprint = current.variables.blueprint;
                var catSysId = current.description;
                var multiprofile_service_data = JSON.parse(current.variables.service_data);
                var delta_profiles = ((current.variables.delta_profiles).toString()).split(',');

                // 				gs.info("##### Profile : "+profile+" blueprint "+blueprint+" catSysId "+catSysId+"  multiprofile_service_data "+multiprofile_service_data+" delta_profiles "+delta_profiles+"type of delta profile "+typeof delta_profiles+" delta_profiles [0] "+delta_profiles[0]);

                var service_data = JSON.parse(current.variables.service_data + '');


                for (var c in multiprofile_service_data) {
                    var profile = multiprofile_service_data[c].profile_sys_id;

                    var profile_gr = new GlideRecord('x_nuta2_nutanix_ca_application_profile');
                    if (profile_gr.get(profile)) {}
                    var service_data = multiprofile_service_data[c].service_configuration;

                    var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                    gr.addQuery('catalog_item', catSysId);
                    gr.addQuery('application_profile', profile);
                    gr.addQuery('isprofilevariable', false);
                    gr.query();

                    while (gr.next()) {
                        var jsonData = service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''];

                        if (!jsonData.notCmplx || jsonData.notCmplx + '' == 'false') {
                            gr.default_value = JSON.stringify(service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + '']);
                            gr.update();
                            this.logger.debug("Updated service port list " + gr.default_value);
                        } else {
                            if (service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].data_type + '' == 'LOCAL' &amp;&amp; (service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].val_type + '' == 'DATE_TIME' || service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].val_type + '' == 'DATE'))
                                service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].value = this.appScriptInstance._formttedDateTime(service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].value + '', service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].val_type + '', true);

                            gr.default_value = service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].value + '';
                            gr.runtime_config = service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].runtime_config + '';
                            gr.update();

                            this.logger.debug("Updated service variable " + gr.variable.name + " with value " + gr.default_value + " and runtime config as " + gr.runtime_config + " againsts service " + gr.service_name.name + " and category " + gr.category_name.name + " in Variables properties table");
                            catName = gr.catalog_item.name + '';

                        }
                    }
                }
                this.logger.info("Updated service variables values for " + catName + ".");

                var multiprofile_service_data = JSON.parse(current.variables.service_data);
                var fieldGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                fieldGR.addEncodedQuery('cat_item=' + catSysId);
                fieldGR.query();

                var fieldInfo = {};

                while (fieldGR.next()) {
                    fieldInfo[fieldGR.name] = fieldGR.sys_id + '';
                }

                for (var c in multiprofile_service_data) {
                    var profile = multiprofile_service_data[c].profile_sys_id;
                    var profile_gr = new GlideRecord('x_nuta2_nutanix_ca_application_profile');
                    if (profile_gr.get(profile)) {}

                    var service_data = multiprofile_service_data[c].service_configuration;
                    for (var i in delta_profiles) {
                        if (profile + '' == delta_profiles[i] + '') {
                            var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');

                            for (var i in service_data) {
                                var serviceName = i;
                                var categoryList = service_data[i];

                                for (var j in categoryList) {
                                    var categoryName = j;
                                    var category = categoryList[j];

                                    var keys = Object.keys(category);

                                    if (!category[keys[0]].notCmplx || category[keys[0]].notCmplx + '' == 'false') {

                                        this.logger.debug("Mapping PortList variables " + JSON.stringify(category[keys[0]]) + " in Varaibles properties table");

                                        gr.initialize();
                                        var temp1 = categoryName.replace(profile_gr.name + '_', '');
                                        gr.variable = fieldInfo[temp1 + ''] + '';
                                        gr.application_profile = profile + '';
                                        gr.catalog_item = catSysId + '';
                                        gr.default_value = JSON.stringify(category[keys[0]]);
                                        gr.isprofilevariable = 'false';
                                        gr.runtime_config = 'false';
                                        gr.uuid = '';
                                        var temp2 = serviceName.replace(profile_gr.name + '_', '');
                                        gr.service_name = fieldInfo[temp2 + ''] + '';
                                        var temp3 = categoryName.replace(profile_gr.name + '_', '');
                                        gr.category_name = fieldInfo[temp3 + ''] + '';
                                        gr.insert();

                                    } else {
                                        for (var k in category) {
                                            var varia = category[k];

                                            this.logger.debug("Mapping service variable " + varia.name + " with value " + varia.value + " and runtime config as " + varia.runtime_config + " againsts service " + serviceName + " and category " + categoryName + " in Varaibles properties table");

                                            if (varia.data_type + '' == 'LOCAL' &amp;&amp; (varia.val_type + '' == 'DATE_TIME' || varia.val_type + '' == 'DATE'))
                                                varia.value = this.appScriptInstance._formttedDateTime(varia.value + '', varia.val_type + '', true);


                                            gr.initialize();
                                            var temp1 = (varia.name).replace(profile_gr.name + '_', '');
                                            gr.variable = fieldInfo[temp1 + ''] + '';
                                            gr.application_profile = profile + '';
                                            gr.catalog_item = catSysId + '';
                                            gr.default_value = varia.value + '';
                                            gr.isprofilevariable = varia.isprofilevariable + '';
                                            gr.runtime_config = varia.runtime_config + '';
                                            gr.uuid = varia.uuid + '';
                                            var temp = serviceName.replace(profile_gr.name + '_', '');
                                            gr.service_name = fieldInfo[temp + ''] + '';
                                            var temp1 = categoryName.replace(profile_gr.name + '_', '');
                                            gr.category_name = fieldInfo[temp1 + ''] + '';

                                            gr.isdisabled = varia.isdisabled + '';
                                            gr.issupported = varia.isSupported + '';
                                            gr.isservicevariable = varia.isservicevariable + '';


                                            gr.type = varia.type;
                                            gr.value_type = varia.val_type + '';
                                            gr.field_regex = varia.regex + '';
                                            gr.data_type = varia.data_type + '';
                                            gr.uuid = varia.uuid + '';

                                            gr.field_json = varia.field + "";
                                            gr.is_hidden = (varia.isHidden + "" == 'true') ? true : false;

                                            gr.insert();

                                            catName = gr.catalog_item.name + '';

//                                             if (varia.isservicevariable + '' == 'true')
//                                                 this._createOnChangeScript(fieldInfo[varia.name + ''] + '', catSysId + "");
                                        }
                                    }

                                }
                            }
                        }
                    }
                }
				
				for(var i = 0 ; i &lt; profile_arr.length ; i++){
					
					this._createOnChangeScriptForDependee(catSysId , profile_arr[i], "serviceVar" );
				}
            }

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts.setMultiProfileServiceVariables. Error:- " + e);
        }
    },

    _onChangeScripts: function(variaJSON, catSysId) {
        try {
            for (var i in variaJSON) {
                this._createOnChangeScript(i, catSysId);
            }
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._onChangeScripts. Error:- " + e);
        }
    },

    _createOnChangeScript: function(varSysId, catSysId) {
        try {
			var grCatalogScript = new GlideRecord("catalog_script_client");
			grCatalogScript.addEncodedQuery("cat_item=" + catSysId + "^name=Fetch values OnChange^type=onChange^cat_variableLIKEIO:" + varSysId);
			grCatalogScript.query();
			if(!grCatalogScript.next()){
			var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
            onChangecatalogClientScript.setAttributes({
                "name": "Fetch values OnChange",
                "type": "onChange",
                "applies_to": "item",
                "cat_item": '' + catSysId,
                "cat_variable": "IO:" + varSysId,
                "active": true,
                "order": 1000,
                "description": "This script is auto created thorugh runtime module for fetching values.",
                "applies_catalog": "true",
                "ui_type": "0",
                "applies_req_item": false,
                "applies_sc_task": false,
            });
            onChangecatalogClientScript.appliesToCatalogItem(true);
				   var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) {if (!sessionStorage['varValues']) return;var varValues = JSON.parse(sessionStorage['varValues']);oldValue = varValues[control.id + ''];if (isLoading || newValue == '' || oldValue + '' == newValue + '') {    new GlideModal().get('loader').destroy();return;}function varResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service; var var_array = [];for (var i in prof_json) {if (i + '' == control.id + '')continue;var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);varValues['IO:' + i] = curr_value + '';var parsed_field = JSON.parse(field);parsed_field.def_val = parsed_field.value + '';parsed_field.value = curr_value, parsed_field.sys_id = i + '', var_array.push(parsed_field);} getAdvancedVars(var_array);for (var j in serv_json) {var_array = [];for (var k in serv_json[j]) {if (control.id + '' == k) {continue;}var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);varValues['IO:' + k] = curr_value + '';var parsed_field = JSON.parse(field);parsed_field.def_val = parsed_field.value + '';parsed_field.value = curr_value, parsed_field.sys_id = k + '', var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(varValues);}function getAdvancedVars(variable_json) {var act_var_JSON = JSON.stringify(variable_json);var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name', 'variableArrayParser'),gajax.addParam('sysparm_field', control.id +''), gajax.addParam('sysparm_type', 'catalog'), gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + ''),gajax.addParam('sysparm_varJson', act_var_JSON), gajax.getXML(getVarResponse);}function getVarResponse(response) { new GlideModal().get('loader').destroy();var answer = response.responseXML.documentElement.getAttribute('answer');if (answer + '' == '' || answer + '' == 'undefined' || answer + '' == 'null') return;var parsedResponse = JSON.parse(answer);for (var i in parsedResponse) {var row = parsedResponse[i]; var sys_id = 'IO:' + row.sys_id;if (control.id + '' == sys_id) {continue;}var type = row.type + '';if (row.state == 'SUCCESS' &amp;&amp; (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET')) {g_form.clearOptions(sys_id);for (var k = 0; k &lt; row.value.length; k++) g_form.addOption(sys_id + '', row.value[k], row.value[k]);g_form.setValue(sys_id, row.value);} else {if (row.data_type + '' != 'BASE') {g_form.clearOptions(sys_id);for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + '', row.options[k], row.options[k]);}g_form.setValue(sys_id, row.value);}if (row.state == 'ERROR') {g_form.clearOptions(sys_id); g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}}}var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching variables...'); loadingDialog.renderWithContent(''+loadingHTML);var cat_sys_id = g_form.getUniqueValue();var profile = g_form.getValue('default_profile').trim();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars'), ga.addParam('sysparm_catsysid', cat_sys_id), ga.addParam('sysparm_profile', profile), ga.getXML(varResponse, null, loadingDialog);}";
          onChangecatalogClientScript.addScript(onChangeScript);
            var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
	}
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._createOnChangeScript. Error:- " + e);
        }
    },

    // calm 3.2 Envirment task

    fetchProfilesBasisOnEnvironment: function() {
        try {
            var body = new Object();
            var profile = [];
            body["api_version"] = "3.0";
            var metadata = {};
            var api_info;
            if (this.getParameter('sysparm_type') + "" == "x_nuta2_nutanix_ca_nutanix_marketplaceitems") {
                metadata.kind = "marketplace_item";
                api_info = "calm_marketplace_items";
            } else {
                metadata.kind = "blueprint";
                api_info = "blueprints";
            }
            metadata["categories"] = {};
            //sysparm_blueprint
            var project_reference = {};
            project_reference["kind"] = "project";
            project_reference["name"] = this.getParameter("sysparm_pro") + "";
            project_reference["uuid"] = this.getParameter("sysparm_proValue") + "";
            metadata["project_reference"] = project_reference;

            body["metadata"] = metadata;
            var specs = {};
            var environment_profile_pairs = [];
            var environment = {};
            environment["uuid"] = this.getParameter("sysparm_env") + "";
            var app_profile = this.getParameter("sysparm_profile");
            app_profile = app_profile.split(",");
            for (var i = 0; i &lt; app_profile.length; i++) {
                var profile_obj = {};
                var gr = new GlideRecord("x_nuta2_nutanix_ca_application_profile");
                if (gr.get(app_profile[i])) {
                    profile_obj.app_profile = {
                        "name": gr.name + ""
                    };
                    profile.push(gr.name + "");
                }
                profile_obj.environment = environment;
                environment_profile_pairs.push(profile_obj);
            }
            specs["environment_profile_pairs"] = environment_profile_pairs;
            var final_profile = [];
            body["spec"] = specs;
            this.appUtil = new Nutanix_Calm_Utils();
            this.logger.debug("Nutanix_ConfigureSettingScripts.fetchProfilesBasisOnEnvironment" + JSON.stringify(body));
            var response = this.appUtil.makeCalmApiCall('POST', '/' + api_info + '/' + this.getParameter("sysparm_blueprint") + "/patch_with_environment/validate", JSON.stringify(body));
            this.logger.debug("Nutanix_ConfigureSettingScripts.fetchProfilesBasisOnEnvironment" + JSON.stringify(response.getBody()) + response.getStatusCode());
            if (response.getStatusCode() + "" == "200" || response.getStatusCode() + "" == "201") {
                response = JSON.parse(response.getBody());
                var environment_profile_pair = response.status.environment_profile_pairs;

                for (var i = 0; i &lt; environment_profile_pair.length; i++) {
                    var name = environment_profile_pair[i].app_profile.name + "";
                    var state = environment_profile_pair[i].state;
                    if (profile.indexOf(name) != -1) {
                        if (state == "valid") {
                            final_profile.push(name);
                        }
                    }
                }
            } else {
                this.logger.error("Nutanix_ConfigureSettingScripts.fetchProfilesBasisOnEnvironment patch_with_environment/validate call failed response statusCode : " + response.getStatusCode());
            }
            return JSON.stringify(final_profile);
        } catch (e) {
            this.logger.error("Nutanix_ConfigureSettingScripts.fetchProfilesBasisOnEnvironment " + e);
        }

    },
    fetchEnvironments: function() {
        this.logger.debug("inside Nutanix_ConfigureSettingScripts.fetchEnvironments");
        var project = this.getParameter("sysparm_project");
        var gr_pro = new GlideRecord("x_nuta2_nutanix_ca_nutanix_project");
        gr_pro.addQuery("uuid", project);
        gr_pro.query();
        var arr = [];
        if (gr_pro.next()) {
            var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_environment");
            gr.addQuery("project", gr_pro.sys_id);
            gr.query();
            while (gr.next()) {
                var obj = {};
                obj["Name"] = (gr.name + "");
                obj["UUID"] = (gr.uuid + "");
                arr.push(obj);
            }
        }
        return (JSON.stringify(arr));
    },

    type: 'Nutanix_ConfigureSettingScripts'

};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-11-13 16:38:54&lt;/sys_created_on&gt;&lt;sys_id&gt;75c3833837fd2300fdfc097973990e2f&lt;/sys_id&gt;&lt;sys_mod_count&gt;578&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_ConfigureSettingScripts&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_75c3833837fd2300fdfc097973990e2f&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-07-13 17:52:52&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1977263151</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.4.5 Complete Build">346d737d1bb0011081326464604bcb11</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-01-03 07:26:35</sys_created_on>
<sys_id>bc6d737d1bb0011081326464604bcb12</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17e1ed138810000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-01-03 07:26:35</sys_updated_on>
<table/>
<target_name>Nutanix_ConfigureSettingScripts</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>aa18828affd53010fbd00bfa2689137f</update_guid>
<update_guid_history>aa18828affd53010fbd00bfa2689137f:-1977263151,538b7142a6d530100a5a652f188370f7:1675492567,677c7c0630d130106b6922b12847656b:154779377,b7da78c2e0d13010865f6614dfe46569:1905900141,2aebc438d9553010aa8b802973c30bba:1596063504,717a00745a5530104fce55cda1cce525:-649705009,ac8ff768fd153010b1ca748bff5915a6:160827214,ab973be0c1153010306708b9fecf4878:1802929685,ea7d7b90d5597010de6aef84a44826b1:745419558,9a5cca8892d5301058fcca14e7ae8d31:-932151725,84813d08ac553010ce57a29b4874027c:834656827,6aaa21c854553010c862d648ead3eadb:211925568,d677a98488553010ee5acc2db8ae1188:1684615242,914ebc671609b4109d3cb86aa00276e4:699650821,e434f31f6505b410a9ae2dc1afa06d1d:747192559,cbf2f29a9801f01096654f72a2bace59:-894758934,244654925e89b010a65eb54cdfa19c74:1519789641,470e7ece69c1b010cfe11ec69e408425:1821332375,cfcaf20a10c1b01029968ccec1d2f1a9:1961136125,64d932ce83c1b010bfc5f83f5274678d:-210893079,70927065a2c93010a2e5b00a1a86fc17:-1683239988,4341446579453010decf3a1b08aeb82f:-896456924,a61eb7dd5e053010da87bdd541048f76:1867817956,52e309f6aac4bc109b634cce241323e4:-1164771172,2f83493a14c4bc10a3193bd9a1fe5700:-1785983923,189f08fe9cc0bc105032da0bc7749497:484367703,74ea0f2ecfcc7c10138247c15ca236b3:653844417,56a536224fc07c1001c2cb9d7e381cc0:1854644139,3a4a7a9650083c10c2d6e2a750165773:-1651728514,abbb987db5487810574e9b37df1619ed:213554611,0705d435c04878108b46bed693923961:-1647332622,5ddd00f9fc087810d3f6d7c1f9174ace:16459002,f3b67fedad047810caaa77f8672b595f:-1183035278,fadf222102c8f41011ef0bdc7f9725f6:1582148719,16a7de61bb08f4109bf2ce38855191ad:-1968237729,f47553d9aac4b4106e2f2e13be85082b:-1394259762,b2a0ad11b500b4104eb069ed214419f0:500803982,f7ea0ce42e08f010b6b1c88e69fea749:1820385952,017a33100c08f01072d6343d2ffafb50:1306971744,10ec83c4e848b010f292c978da116ec3:1286648248,84a083cc4d08b010a9097d949f7a1cbc:155489049,ef712608d4c4b010a98a2db971f19035:-2141390013,ad79b5c4bcc0b010ed9198a47f269d8c:1644289389,2559bd009fc0b0108f4f6f6e8dc62a42:43605913,f1c339c071c0b010b93617862211448f:1644289389,1c517d401dc0b010572998b495f7c9c0:-1351097034,ed2291cb4ded241013131dfee3ed461b:1055099831,3953b9cef365a010879f0e61063d4c69:-1189841817,212d2cc80b332300b37707f308e476c1:1474472888,f59628442833230071a89ca6b270db68:1965922265,6ba2a04459332300ca516c1c7858641c:1972821307,d1f91d282127230047fb7bb529b251aa:1875771069,9eb751580623a300728067ec014302b1:735878130,b8bb45103323a300eeb03b9d3723b0a4:2106653218,5f29c95c80ef6300bd14f3f931fa2778:-1905033145,459e8c1c886f63001e5629fe3f399576:6470929,3441c0d0746f6300f6a24017558e6142:1065809142,e0e04490ea6f63009b31fe085a3eaac5:-1024757928,8b8f73c0506f6300fe2f5e3dd5f26376:1406690245,99661f48fdeb63007af502f7381a2bca:-2100029723,c2e17fd7a0fc60100b2c969d15cb9faa:-596981149,f8efe5de95c4a0106fd1b0496026b898:205606953,132e5d1234c4a010bf43a33447b8b39d:-960065880,67bb115eba84a010eadba7979b589813:-21633336,2217d5960b84a0107a5915252dc95b43:1740580877,a6235152e084a0103c33be1f72c3d471:1705107376,9100595a9144a01067ac626f449643cc:-1649855386,9f41499e6504a010f5dd1ee0e278f2bc:1265128700,79cdf146170c60102eeec4d465c7533c:1994581026,5ca73d8eeec86010251b88407087d45d:-1004091363,d7f4f1caa8c86010968c7995dc3be964:935160829,9542350ae5c860101e19fa5a820eefdc:-2130383463,786524427a846010479d5816caf764e5:511704233,14e4684a9844601081b0d4a5d7d885d7:871484670,fad9dc0a484460100bb8a798c573f3cb:-298300494,fcc8900a5744601023d143c315e5a286:1290917975,d9179446d0446010df7ea0068fd3c44b:405614430,b94558c2fb446010dcf7d4febd79b3c3:871484670,fc22d082784460103db73bb425fcf4ac:605359006,1dab840e81046010a1e5ec9fa8115a49:1393768782,c96868b9c1482010e244fd9ac1d53f2a:2121208221,a6981cf5f2482010e6d46b133ba1ba33:1050941749,4184112da4709010023afd0e8912e206:-1304121442,59427715a97c5010253d3162c09cd605:1672077125,0e1c9bc9bd70501026072e2fce04603f:-1696037193,0ef9aac54ffc10109e275ed6d9537e16:-1510549871,16f1d768e9e45410bfef2650e98cae0b:-821684643,0bc5329450a814104c71f33c0add4964:1729157361,39a3ba5432a814103e75e7d88e0f250a:1134027802,9680b21090a81410979ddd72407eef45:1343230461,c26b715c286414101b04e2c8a3da224e:-792562923,cc36bd94f9641410b6794fd209216816:-1031812228,a3cc68845f28d010874bdc545005556f:-421654938,721fa83d362f28108363497ea8f356a7:1157360293,eedd47e9cd27681020d0c90f90a37fe2:-1990655154,6ab8f6a1cce368109583e4533fc6b283:-1266365220,34c67229dca36810558c2a469fe9896c:87151291,b484baa1d26368109245e2c89995a749:-512811207,32b106957aebe4104796d2010939ae05:-405231282,b1d5d515f9e7a8505fb188c4af8b231b:132657891,4b9cd85549a3a850d093933c9f95ac6e:507366021,4713200d87af2850b32d4af94ad3685e:1440960590,ecc0a8c5c3af2850d0dee44408f80dc6:-1993900778,9a0d94cd8b6f2850ab2282139c4043b3:1306150294,53db9c0da16f2850975b01f53935e2c3:-1583125994,ee8a90c9a36f28505f9551f8e0291146:214031638,ce455045346f28502af2b491b00c40d2:-1624668436,fe9314c15a6f2850303675024d31ce43:1826400305,cb3d0489bf2f28501ad5297df59c16f0:1951564893,7fb984c5c72f2850cbecba977910bd81:-582875435,5918c445782f2850bf433cf2e694fdb4:-2108094509,44b48c01ab2f2850ad95267705577198:1893397508,2d1208cd7aeb2850fb5d2da4f729c118:-1733382002,d7eebbf8d1eb2850e298505166ab0782:-521504728,236d73f4b4eb2850a2b24fd829505b9b:-935469780,249b77b466eb285032c9bdab68c60e92:1682391145,e4f93fb0efeb28502a575d94bbf30e4a:1651276655,ae95f330e6eb2850195124c16bbf7d55:-462100539,8364b7bcbdab2850fbfddf7e687580a2:256920279,115c40b804232850c1183477545117c4:-1255463558,474b80f4422328509d269696e92b8fc9:340943639,80d5487891efe450671e0718b9dc66f9:100882704,dc2fb3e44dafe450c313c30cab4b9521:340943639,1f2bd7a003e7e450e6eb129df63cb2b4:100882704,2347d72809a7e450b1af51331bb6ec9a:668987982,d434136403a7e450786ef1ba30daa5e5:22389811,8362d36c0667e450e606de1d0fed92cd:667012180,b22c215405af6450cd40778e814ebf8e:1833007974,491ba9d04eaf6450a3bff18d4aa5c854:1827052757,2385a9dcdb6f645041aafb2b65708083:-1034692083,6af3695c546f6450cfeb59a611a82cea:618212707,90f2a1d82c6f6450daa19525e8f3aa8a:987303739,fbc305a70d1fe050a42e952e1d40137f:1833007974,efc470eb29dbe0505fa96e6c4b906f9d:-1416969524,b87914ab385be050fd5e0f557aaf7b9b:117290690,a45773d7fcd7e050ed9751160a9dbbd8:1912824130,b6367b57d0d7e050dc14e992f47a8f7f:-836145166,2fe4b757eed7e05070529c2f42af0735:-1258053161,c6c29fdf2117e0501ffd8693aae415e6:1659772540,d7dd4f976c17e0504b8c1e2a3b70fec1:-1280678162,33fb0f974217e050eaa9ee1d0299cc2b:-113263504,5a848b9b67d3e0505785827e25d3baff:1659772540,faf3c39bb0d3e0507162945b56e6e625:1493245432,b8d2c5d575dfe01034fc2d3e54575de4:158990900,809a7c1de91fe0102128764dca7dd8eb:834025564,b9ed9bc965df24503629bc7f741aebd1:-1993524322,64b8d789bfdba01036b2502b2c0ebf9d:-1915626394,bbdd9388a15f2450e65b1273479d3467:-141594718,93becf4c071f2450ff28c82bf47befd4:-1050357894,26f17a44dddb24507c6f4aa652eda058:1224266282,24448ebaa7cf2050d41d3bd8653ca0ec:1218027852,1e08766288cbac1083086ef2e1aaa936:-1936212047,ec194aaead0bac10ff520a2297801186:1739986338,838d084dd143281079ac392fd6cff77a:-1927416986,0d6ccc0d69432810c5633ca896acfbdf:911724301,fc93efbc1ccfe410e6b35bed6dd35ea3:554908490,43af97b892cfe410ac07c2d5a377a938:1472524450,f26d93345acfe4102a7645a71749e0b7:641264607,b62b17bc0e8fe410fbf8235e5b30a2a3:-631008750,46ca5bfcea8fe4100b53e4584f3088d1:733467951,779893bc868fe410329a4304c36475dd:-96592498,7d56dfb8418fe4100a134622b1f0f21c:2007383658,a4dc9c38c287e41056a7a8d6e7224d0b:-586159130,613adc743a87e4104cc68ece7ba2c209:-1475190068,d258b32c0cc3e4108a90204ad156188c:-886329138,65925ad0cd83a410fe02d069c36aca23:-305273394,ff487d98bb03a4105211c9208e116b75:1364124702,ff65f554a903a41066a05948e9db84ef:-980442061,d6747118fe03a410c555457408fe282a:-895676518,712f0598f08b64106dbb4264b101f5fd:1004114738,d2c691cca54be0107658ba5e0a8765bc:697515414,f4afbc88ee0be010b87459a5867f6a52:-1313523081,3dcdc8886107e0100313a90e7004002b:-564455622,7d523ffb3ab2e010c0acb8c8b59af4f8:440669397,862a8fbbb0bea010a627a3fe66541f17:1185386627,7289837f9bbea010447b6a21430ebe35:1117790567,18fdbc7f913aa010e5d49fc89cdaf187:-173041377,2b3a4dfe053ee4508d9d386aef728b50:429861134,4655c53ac73ee45006d10b55b1939580:-161288432,25adf8b2a73ee4502e41a54d8dd03a47:-478890791,0386b0b2bc3ee450deb6f19e1c469307:938936195,6023307ed9fae450dca129054dc8cdf2:-478890791,22a17cfa36fae45030f4ae11384943dc:-2097323161,f930343ac7fae450d4d51a270f7bd6ed:-1580751824,f725c4ba187ae450741531718b6f6c1a:-161288432,29fd33660b7ae450bcec80d14f5282a5:-914290836,38e9dad2ad3a6450fa340c0f764880f0:-161288432,6347569a3df664507579f137d74d3a28:-350190014,4306965ef8f66450044c423808fa187a:429942047,155871363d62e410be96e4af0745af83:550277159,b3b3713a0422e410036cbae8dadf1443:137480909,9f3cc63c1d4e2b00438236adba734174:-1120900491,f7303320e1822b00177d2c1680536996:-1500211880,561ea7accf422b0027fe031da348653e:500570330,bb6d276c7f422b004f97230988beb4a8:-942158918,fe4a63e8c4422b00a591c7a2e5aeb8ad:-697012778,7ff910d4524ea70047ba5af7ca42c234:-1047898512,c41276e7e77d2700a63880e71adb3d79:-141350877,f60f995b8871e30086dbc880cf48b609:1513819955,79fcd9d77971e300fb4dcefdd37d2d70:1482287239,8939d113a371e300a34a11c1834498df:-534529906,d1786fe472422b002c6aeafe5bf5ee5e:-1040130432,6c536b6423422b006906a3929284b7c9:1886024193,8befd3e06c422b00145ece7eee2a5441:15587755,d41121d46542e7001a1b7f8a23aaafdc:-1800816530,c36f4c01c744a010bc272dec8b6d51b5:-1992233950,3248880d3b04a0103c45025bd26de8a7:-1833017365,e5ef7026ad6f54109779aa46c92e7e55:1616147809,3b597156de675410891a2698dcd4ca07:1468196792,3a2bad867d2b1410d9dac4514743f219:1772913191,feaaad86952b1410317f8f1d658bbcec:-1254919706,23abdcf57ce7d0103c5b5edb4a71aecf:1764433557,59ea94b5f8e7d010ea8299fd9e75887a:-753471165,93730c714ea7d01077140b51ed4d3cfe:-751229948,77330c71fea7d01062b3c14a819bdef8:542176913,2d6a3ba93b67d0101ce0751dc9ea10bb:1448084201,da653b658267d01034ab5c3def396063:542176913,473373254567d0105c3b1d5171ac2c28:1792133874,fb2cabadc727d010b24700d423a62928:-250492030,f5d6f9a5622f10108080bf8d18a618e1:-1645470349,4c138a5c86a758507f8695f2ca83325f:493161386,61eb4977269b50103dbf4b75ddab8a94:1504385365,3f160d33ba9b501032911850aafc408c:-914725237,60bbb4f7135b5010139930b83d0f207b:302458098,1313fc7f4b1b5010290277d3432a814d:-1911876119,2e4f24fb791b5010717da4595e2887eb:1219622821,e7335873bad750105bbe533f70a032da:-1485932751,e22272af6c53501074adbbd31a2402e1:-419111573,01cd622b425350104ca81c4ce6702148:2118911264,517f962f52135010fee974753b88da65:-1065961815,73fe802318db10109541fb8132f18c71:1216174146,338c8c2f2e9b1010c1e2abbabf9b4a9e:385987718,2b607c3f3d1bd450d6a922f1a4575363:1523216832,7549e03bb01bd45064bb456b3f447cac:-234921222,1ad5e477941bd4501fa785ac9534364f:-1592605335,7c9ed4bf0fd7d450b49787418fec7828:576627197,a18b44b31cd7d4502e49c3aec3e3b008:1688714709,29fc787908571410876a9e22fdf8619b:583337574,99ede14147d75010274002e989ce77dd:120880822,99ede14147d75010274002e989ce77dd:120880822,01c4a1c54a9750105fa35fd8aab0baed:439881143,a6ce9501d897501054a59a0567ac42d6:836513344,899170788d135c10d5b177180dc24a61:640050117,dd603cf4d0135c107aca48f5373ec5de:-303458123,6bf7acfc55df1c10154465dc91375f6c:-115022120,3c6fd87432df1c1034cc3d6d0bc942a0:1081999118,723c107081df1c10d6e31ff5f045018f:-870727260,481154b8dc9f1c100703c7b5d3372204:383365488,173ce7e407db1c106aece7ae472767cd:-567547525,e14a8b9c62db1010a496d2ed65c2661a:-91061928,cfc11b3708c754d0695e583e9a1918a5:-296104871,70ae3d3bb08354d04dc5edee7aa6e45f:441255059,574df1f7d58354d0c0a87f5fc3868668:956178587,390c75b7728354d02b5f307b64574dc2:-1351873308,c73bbd77228354d0991376a931dea14c:1256712282,c10a75379e8354d04a6e168264ee53e3:-2127086092,1265f1bfd34354d07cd8b3cd1f5603a6:-396219039,691135fbdf4354d030e5f154e3312d4f:-234903201,ec76a9f35d4354d09204d7795eb59f72:-1253139043,039421b32f4354d04cdc0ea92cadf628:940653822,f57cd1fb0b0354d01ae5d9eef3d0795f:-488094675,b8e81d3b830354d0388aec38e55e6c88:-2144132685,ca7919a7fd4714d0a64f271480dd6d24:685798717,d1e020639ac314d0b8fa09384f7d57a7:-2099009295,138fd02310c314d0c4fae880df0e7af0:143662967,88205f06054b10d0b02f1810216e66f8:685798717,743f8306de4b10d063c1848a76c48223:-1291645390,399dd5a99103dc905c9bf7235ce89294:-1207036688,917adde5a303dc90a297aa48f6d2d6b3:2003293769,818a706135cf9c90e0f083f40b1ba3fc:-2103326838,8625f82d4c8f9c902c6610f62a70f0c2:-597556588,7942f8a9498f9c90c8f22969c4bfff32:-1605008784,a37038e5508f9c90296d6d39246bcec8:-401960118,04703bf613fad4903275d5659ab8f81e:-1762417155,ff672fb249fad490bb798419c20f22c0:-1873121497,c91b6dbd377e14904c01cdd3bc83bba7:1359013221,d478a93d2d7e1490a5e60e247d60ead8:1501598115,e904a73e6eb61010292cfeacf87d2da1:155501108,65e363f62f7a1010d738833403ed3e39:427396727,477b67a9fa3a1490ceea85a2693eb5c7:155501108,e76827295a3a1490138aed134da9331b:-1899152686,8adf9b61ad3a14908310dc7b8eb34281:-507960406,935c832588f61490adb01dab256a0754:24904520,14fc54e1de321490c3a35897ea3410d8:716531111,3b6b98a12a3214908c1d64f25279bfcd:-1666429400,d34a58611f321490f4995223a831ad34:-1642306225,b4b810215d321490512818f65d9e6b48:1733716174,d2e294e999fed090afda973b9de8b327:1394301855,04d0dc29e6fed0904aa155090e148120:-144045150,53ac4ca561fed0908ee63f58961b82c7:-389488878,2f1cb71d0fbed0901ebbb3857d788e79:543662722,568af399c2bed09081b600760d227d5f:1661295588,04b83fd5c1bed090a8675be210ecfcc4:1656238787,886677551fbed090d38bbb607c9c5313:1305716251,7d033f15c1bed09072f7bf3fd5602837:-79049203,855233d1e6bed0909ccf5f9c9b59edab:309169823,1a4bd755167ed090c9b52697c8ba14fe:27088900,9bc65f11b87ed090eeb8bde59030ba98:1394301855,fb9357dde43ed09079265241c9c91ce0:-93387691,72547c6f11ae5850c13d1d49e56bdee6:1394301855,c96599512c62905024ae4b3d5ac373b7:-1669528031,b6a3059194229050763f555512b9180b:-284922511,aaa535a953a29050cf38ca1363487a01:1193455576,c2f100dd602e5050693b1f3752efd324:1322678583,ace193c1296a5050fca98491f73491de:-477761495,642e8b41956a50507dd22dc81afce3d1:-538805311,019c4301b46a50504bb9cb090e5cc219:1916441340,78e9074d172a5050e52ed589ee2ef167:1609290262,fc588b49a32a50500444c9f8296d7c2e:-2096700546,0d844b091e2a5050dd7f60d59ec39ddf:-79214327,632ef24d8de650506ed6fe3151f81c6d:-373439574,177ee0c525a250501b6d69f96c2d694d:-701988418,9d592441daa25050b68c7b0e79582b59:360210720,88be14c54f625050e61eb228012cedde:917309523,f670b4ddfb161410a0975df8f413d521:2077919840,7e0b2c1d0e1614105f3696393301aae3:-72533004,184046011d9ed010e300d102c32f301c:-715965028,90bbfdc9395ed010c2f3b1ff4867e8b3:-13659457,e6f9f189345ed0107b2951c1f7aa1c87:1064577111,0799f189fa5ed010972dd0e46f095156:-238330391,12d87d09b95ed0107cb4c4e459ab6075:1414545481,4c37f5c56c5ed010bd8dabe06e852117:-376272774,359e5145c11ed0107072abdb48059b84:278584425,baa7558deedad010a344a56537224e61:1488621107,2ce6558d37dad010fae6d242ae057895:251392005,ec35154d91dad010bb51f07f11512c3e:-901654972,ceae0509d5dad0103adabe44a034b08d:-1315935573,f1cb414588dad010370f04f3a46c057f:1921044531,689b05050adad010c542c02b395e323a:-1976106943,ce178101f0dad010e1c49ec8eba6c5bd:900685137,919fb405259ad01094991830f974b215:572694065,c3d82e5cad7954907f585133ac06cb4a:367926821,56b7661c56795490b0117f3b3e1cdbaa:-10997159,79b466580f795490100d42fe603dad5f:-1463756687,71d3a618ac795490143def04c2c9f999:578847982,fedada10827954900e92e8dc600bf822:1508533470,c390e300c6e51850f9c40065d2855311:-1246477275,1770e3002de518501ba21a66525fed1c:-613914437,8ecf1f8466a51850071322a05ae3ffaa:-1246477275,5117d6371719d45006ff80b04798badf:229974658,8da41be081201010ff90899edc1ca396:761914233,7f07f8fa45dcd01079a3f3e96b12d745:1441129369,cb571bceb1945410a6e0b100cfe9b914:1852015472,ef8f740a10d41410266d18df81bd2522:131914711,3a530b423958141033ddb9ff199c0ed9:500727157,0af643994f5c90103db93df66b009f72:264889966,1141c395ab5c9010601a618c416f46b1:207544514,3cd5e7bca3885c101981cc6b518ae787:-1002475025,f87e83bcd1485c106fc853b4069fe5b5:-1630455096,e7629104a804d81010c7420357e323ef:1232571184,f2885f7b8dff0010f0f3a43d2a66c0aa:1105432602,b97916b8726f4410582a64c64b2586be:-1630455096,b0fcdd68a8ef041039b79b64435ab3e4:341934940,6d2c596850ef0410e4c3fd677658d3a9:-1218067992,21a95960d5ef0410cb24b4ec8dc2077f:1375546830,bd074533dd4700108c5db65544c2a98f:-433684952,301205bb56070010a73148f05504d2f4:-3703672,35cbb03782070010d724eeea767f04d4:-564052287,3978fc3307070010aeaadefd5748a0e1:-1472079261,3d94fc7f56c300100ea708849661f7b2:1142192920,35fdacf34ec30010f13bc23dc7786c31:8974399,81aa607328c300101b7a0a9f00381787:758546023,401d1c77bd8300100935a707cf548edc:-384532710,784758bf914300100b10621c3bad7b2d:-36623750,e881dc3f5b430010b40038df400377c5:1295454032,c78e04bb8d4300101f50541e115bca71:-1754500143,e93d4c3b08430010979a7a125747f7f0:-379511406,f89c44f745430010282a6d4af79f7905:433066943,447b04f742430010440d885102beb3a7:1011731344,880bccb74b43001046edbc36bba4884d:734471731,e7aa4c773e430010b434c7ff4e7ef841:-1110072733,762900777c4300105510f1c6a5052abd:734471731,f2d7c4f3a3430010cafa4bd758fde0cb:1766667701,3f1740ff5e030010132172f97d67ca35:1753664431,5941c8bf6b03001054872b496434a21b:807302527,db80843f4b0300109d63fda06f10eca8:-263901409,417fffebf603001008a365b303f72de6:69598990,71aeb7eb860300106c7c8f4508fbc9a0:1753664431,01ad37ab88030010c986213bc115d3ca:-208832367,58dcfb6b86030010a34a81075873ef14:1766667701,121af7272a03001009ab9976cd6bed29:-1607519703,ce73a66bf8b68410e9c07000e02916c4:-57930953,d451222b26b6841087489011f30e75b6:-381101280,8c5f5e276ab68410ba39afede2446c7b:-890874136,9e1d5ae3e7b684100339bf7a01e6a43b:-620470049,c7a75a6fd5768410941b3dce833d748e:1469333225,9b259eebc47684107e1023cb1c6fbb9f:-524501578,732496eb97768410f484799f0a4f177a:-497400972,b113d2ab9d768410e35a8fe74fee1278:-1012912641,1e31126ba87684109d5c9a6d35c750c2:43925247,b7001267737684101d400a0775839730:-437178942,a766740e92fe40103e3f863adb2e9092:1268951249,04e1640e0dbe401011b7706344935cf8:-239240839,dd5a677dadba40106aa00f0d916864ac:1095057568,07c16f35cdfa40104f1c07a91c2ac52d:917203043,e3206b35bbfa40106647f348fc073487:-590043976,fb0c5f350cfa4010f0ba046b7baf427a:131038949,26a13befef028490634c7bb39cf479fc:1926821837,958353624a86c0901d328ed271e87b3e:-563937869,3367b59aed86809073bc8b46fa2ab99d:-830559596,f34cee14a72d841081df93c50e07e302:-237997336,8a98a8f6f41180105950414ef43f6161:953689350,5a5f95fee3510010e2cf4bbfd0370ae9:302572807,5a5f95fee3510010e2cf4bbfd0370ae9:302572807,7997ea43de790c10e3e092efabbbdd43:-1104788231,9187805286d14c10e8c3674e78911b9e:302572807,c935c012a6d14c108257a28113b72436:430891913,eb64c05e0a914c10fcf8adb691b397d9:571139561,18bc7bc24b914c10e90a4c1b56baea4f:1632915295,1580b706e2514c10855293d1569f7c7c:2094765251,4c7931e51cd5c8107848c21df6cc50fc:1556213633,ae2edd2dac55c810087e2268adea253e:1153012001,73e21dada115c8103cde317d94539d66:-997519306,c7a9091d2a5988108222b683ab5b63eb:1271438391,0285945970d58810d3b68004a6f0194f:-1745742247,1f63d05983d588102329be5ffaea2778:1732867349,da901cdd859588106707b9d3029e5040:2098909439,8c187da43a19081041b75e8aa4532f25:1690824889,6768f4e261b7b300ca3e73c0d7969871:325342875,d75c5e164cff7300ede4950da89a0a0f:-1320290326,c9f4565ea6bf7300667ee61596d6dd2e:2118546932,6e636e563d373300cba8a65445bef3a4:-655341986,86da0a9a44b33300e999508e4ea972ba:-1090911937,c61a3c46173373003dc1f013844f4ab8:324025723,3663f00267337300214186de493732b7:-845583615,00cfac0e65ff3300fce4d1c52e0b3625:-1129561287,85a13306daf7730025d253826e870827:392385327,84fb63ce0ab77300142ad6b13f628718:890990618,4ce26b42c2b77300a460ce607442cac2:1126117023,2e92e7029bb773001f29508d30e65998:-2065220906,2b316702a9b77300795ee4bbae32ac74:-661318934,063d8c11287b330010fb98d876606287:890154701,0a994f1ca33773009dd2c15cf28a73f5:1038442192,54e58f586a377300811a73c8cd304c56:-2039858672,4fd48b5820377300afc31fdd8668d423:-1938493409,470fe21c6fb3730034e4acd01adada0d:280064304,1f74e65c05737300f2a8b70948dcf622:141017344,92c2e65c1673730063873f246388b01c:678875932,deb09144a3bb7300118aa76ff67e1cba:280064304,ab809544febb73007fe599a694298a95:1494440481,dfee010475bb7300fbd0c7fe88ef533c:1381773573,5791e17b0d637300cb2c9a4ee9a92c3c:-1969894150,830d55b3d463730046ee46cc04b1c961:-669344185,c06452945d337300944c75a29cc639fd:907799312,dfdf3d40633733008df14512dcf03f91:50681350,921c69841cf3330099dd8a667db905e8:535357156,7741214016f33300def83efe3ed33dc8:863150788,18ac51c8feb33300a09410bd02542e0d:230182039,697bdd88a0b33300697bd2125a3dcb36:-1337519963,a84ba53926a33300209ddd97ff9de9bb:-1331551696,987e9db949633300bb915c9d87adb702:-1204987844,db2385a1cbe37300bc260a3783ac72ce:811441335,76da5021a2637300fce7e72131319331:1740202500,a6b59c2dac2373006f8fa06c237c209d:-985102419,b4ff8c69cd237300dee7521539b677ca:1945066666,243be34d00e33300c0aaad712704d52f:1044321641,45c8e74dcee33300d92e77bb6c43198c:1725016939,965e5bc5f3e33300497838e9132be89a:1753245222,d2a1ee7846a33300260bb049db96da53:364212093,6554e2e6fb13330010c64d50b684d29d:-1394626435,0466eb21e1173300acf1ece0e3649503:1778433155,100e33d0015b3300cf0383108c233e45:1131244627,21a4ff94c31b33005f5e71e277e08f3d:-1075620266,7b8b679c6e97330064b0a5bc09503000:1516109094,52daa39cfd9733007dc540e19f3108fe:672435482,34e807d315c3370001c7124391c75ce8:94759328,624c5adf838ff3005b7c8b421542b0ff:504857174,0ae4047ac9cb73001bc67b5f48adf4ba:-86295255,5b1d5f12cb0373002bce42d4de4ec0be:-1287143617,42bfbe864d073300d3182ca39c8555c1:701244212,5aa57a0e29c3330068d02bd7cdb59c17:1807279883,3629e602c9c3330087f57b72154d02ad:1347524982,65082ace6b833300f6f55144e80cf857:-677665913,62366e4e9e833300e82f42fcb4c19d8b:990937220,58d366cab5833300f29978cf0869ab05:-352350045,00285bc5df837300b103d9bc0c53c374:-778962601,a9a71bc561837300e1f09041c4d0628b:2037413206,2f7cc30dd2437300a9859a6c001ddb46:-219844982,9b847601b70373008cc393f96f5ec211:-1387136593,2a991e09b78f330011ffb80176730142:-906416427,99a71645b88f33002d76e4b04e332342:1958624469,f207da815f8f330077406a4957b2a567:257146343,93d356c1918f330072f0b781a7533953:106077413,9cd549f4cc433300b26b6d9d27428d37:-1369396865,f20097c8a6033300806c9230d8994b48:-448753601,589b4ab31e7233004fd3309efa27cf3c:1974094018,153f53baf57e730032caf64126d2bba7:33853828,e3ac537aa87e73003a0ddf3f4f89b550:138630921,d867a23ae2ba730077bb6386a0f2e6b5:1731138489,e127a23a7cba730034354c1e8cc3c5a4:1152582658,d7762eb690ba7300d0564000084b7de8:-49912054,2e0626be4d7a73000ba1ba01200b1c02:1678772428,e32bd6fea87a730012b35aeec0b25683:602055586,48fa96be7b7a73000a841e495a6d1e41:-1905818123,d08a5a7ece7a73003a4079f044589867:1904241583,26d9d67e3f7a7300ee6d7649ce64c53f:434135891,8b19563ebb7a730000cc17dbedda6b91:-94918848,f1526a6ebc327300a96bf74d00f8aa31:-1010189881,29b1e62ed532730001a493ac7dd34908:-817716970,3cd0eaea8e3273004fb99f65613fcd5c:-255171661,30502a6ac43273005d803d667dc3e5b5:-400456261</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_security_acl_c6a12ef337866300fdfc097973990e46</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_security_acl"><sys_security_acl action="INSERT_OR_UPDATE"><active>true</active><admin_overrides>true</admin_overrides><advanced>false</advanced><condition/><description>Allow read for records in sysauto_script, for users with role x_nuta2_nutanix_ca.calm_admin.</description><name>sysauto_script</name><operation display_value="read">read</operation><script/><sys_class_name>sys_security_acl</sys_class_name><sys_created_by>girishgyani</sys_created_by><sys_created_on>2018-12-05 08:05:38</sys_created_on><sys_id>c6a12ef337866300fdfc097973990e46</sys_id><sys_mod_count>10</sys_mod_count><sys_name>sysauto_script</sys_name><sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_security_acl_c6a12ef337866300fdfc097973990e46</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2021-08-10 10:49:03</sys_updated_on><type display_value="record">record</type></sys_security_acl></record_update>]]></payload>
<payload_hash>1151708080</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.4.5 Complete Build">346d737d1bb0011081326464604bcb11</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-01-03 07:26:35</sys_created_on>
<sys_id>f06d737d1bb0011081326464604bcb14</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17e1ed2cabd0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-01-03 07:26:35</sys_updated_on>
<table>sysauto_script</table>
<target_name>sysauto_script</target_name>
<type>Access Control</type>
<update_domain>global</update_domain>
<update_guid>1b9334c3e735301077abe1b362f51fd9</update_guid>
<update_guid_history>1b9334c3e735301077abe1b362f51fd9:1151708080,9a7704c3dbb1301099d9c9a87b1748c6:542169833,1933aff638313010926d258abff07c73:1151708080,15ba5795c5313010931c0044c10ae4b3:542169833,146adf55be3130102b7ce6cfa93688f6:1151708080,004ab392dba13010aecdbd81fa6f445b:542169833,1204a6b72c8663004f3f14ef1ab7ea18:-1623210046,4dd3e677e286630074943a2b09514396:-1810650967,cee1e637b58663004459e20b70e1d553:-1623210046,4fd126374b866300c8a5b4cae3389bc6:563744139,7fb1aef36a866300f21bbe5ab73fc048:792844501</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_cc07c62137412300d27b8cf6c3990e83</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Nutanix_Calm_Utils&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description&gt;DAO util and changes&lt;/description&gt;&lt;name&gt;Nutanix_Calm_Utils&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Nutanix_Calm_Utils = Class.create();
Nutanix_Calm_Utils.prototype = {
    initialize: function() {//new Nutanix_Calm_Utils().getMacroDependencies();
        this.logger = new Nutanix_Calm_Logger();
        /*
		How to use alias in script
		1. Add new alias in either of table,api,property
		2. In respective script includes, instantiate Nutanix_Calm_Utils var apputil
		3. Referance specific value as apputil.configuration.&lt;api/table/property&gt;.&lt;key-name&gt;
 		*/
        this.version = gs.getProperty('x_nuta2_nutanix_ca.calm_version');
        this.configuration = {
            "api": {
                "getProjectList": "/projects/list",
                "getBlueprintList": "/blueprints/list",
                "getBlueprintDetail": "/blueprints/",
                "getAppList": "/apps/list",
                "getAppDetail": "/apps/",
                "getMarketplaceItemDetail": "/calm_marketplace_items/",
                "getCategories": "/categories/AppFamily/list",
                "getIcon": "/static/app_icons/",
                "getEnvironment": "/environments/",
                "getUsersList": "/users/list",
                "getRolesList": "/roles/list",
                "projectInternal": "/projects_internal",
                "directoryServices": "/directory_services/list",
                "getMarketplaceItem": "/calm_marketplace_items/list",
                "getGroupsList": "/user_groups/list",
                "proxyLogin": "/proxy_login",
                "getSubnets": "/subnets/list"
            },
            "table": {
                "NutanixStagingApplication": "x_nuta2_nutanix_ca_nutanix_staging_application",
                "NutanixCalmAction": "x_nuta2_nutanix_ca_nutanix_calm_action",
                "NutanixCalmApplication": "x_nuta2_nutanix_ca_nutanix_calm_application",
                "ActionWorkflowStaging": "x_nuta2_nutanix_ca_app_action_workflow_trigger",
                "AppDeployment": "x_nuta2_nutanix_ca_application_deployment",
                "Blueprint": "x_nuta2_nutanix_ca_nutanix_blueprint",
                "Project": "x_nuta2_nutanix_ca_nutanix_project",
                "CalmPluginConfig": "x_nuta2_nutanix_ca_calm_plugin_configuration",
                "stagingProject": "x_nuta2_nutanix_ca_nutanix_staging_project",
                "stagingBlueprints": "x_nuta2_nutanix_ca_nutanix_staging_blueprints",
                "processQueue": "x_nuta2_nutanix_ca_nutanix_process_queue",
                "applicationProfiles": "x_nuta2_nutanix_ca_application_profile",
                "varaiblesTable": "item_option_new",
                "variableSetTable": "io_set_item",
                "stagingMarketplaceItem": "x_nuta2_nutanix_ca_nutanix_staging_marketplace_items",
                "catalog": "sc_catalog",
                "category": "sc_category",
                "sysUiAction": "sys_ui_action",
                "catalogProfileRelation": "x_nuta2_nutanix_ca_catalog_item_and_application_profile_relation",
                "variablesProperties": "x_nuta2_nutanix_ca_catalog_variables_properties",
                "catalogUserCriteria": "sc_cat_item_user_criteria_mtom",
                "userCriteria": "user_criteria",
                "catalogProjectRelation": "x_nuta2_nutanix_ca_nutanix_calm_projects_blueprints_relationship",
                "Credentials": "x_nuta2_nutanix_ca_nutanix_calm_credential",
                "appRunlogs": "x_nuta2_nutanix_ca_nutanix_calm_app_runlogs",
                "stagingEnvironment": "x_nuta2_nutanix_ca_nutanix_staging_environment",
                "runtimeConfig": "x_nuta2_nutanix_ca_nutanix_runtime_configuration",
                "catalogClientScript": "catalog_script_client",
                "catalogUIPolicy": "catalog_ui_policy",
                "catItem": "sc_cat_item",
                "awsStorage": "x_nuta2_nutanix_ca_nutanix_storage",
                "awsTag": "x_nuta2_nutanix_ca_nutanix_aws_tag_list",
                "StagingGCP": "x_nuta2_nutanix_ca_staging_gcp",
                "blankDisks": "x_nuta2_nutanix_ca_blank_disks",
                "networking": "x_nuta2_nutanix_ca_networking",
                "disks": "x_nuta2_nutanix_ca_disks",
                "stagingAzure": "x_nuta2_nutanix_ca_staging_azure",
                "security": "x_nuta2_nutanix_ca_secret",
                "nw_profiles": "x_nuta2_nutanix_ca_network_profiles",
                "dataDisk": "x_nuta2_nutanix_ca_data_disk",
                "subnet": "x_nuta2_nutanix_ca_subnet",
                "dropDownTable": "x_nuta2_nutanix_ca_generic_table_for_dropdown",
                "recoveryPoints": "x_nuta2_nutanix_ca_restore_points",
                "marketplaceItem": "x_nuta2_nutanix_ca_nutanix_marketplaceitems"
            },
        };
    },
    // Get credentials

    _getApiToken: function() { //Orchestration api token call
        try {
            var credential_alias = "";
            var calmInstanceURL = "";
            var midApplication = "";
            var retries = 0;

            var grConfig = new GlideRecord(this.configuration.table.CalmPluginConfig);
            if (grConfig.get(gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id') + "")) {
                grConfig.query();
                if (grConfig.next()) {
                    credential_alias = grConfig.credential + "";
                    calmInstanceURL = grConfig.calm_instance + "";
                    midApplication = grConfig.mid_application + "";

                }
            }

            while (retries &lt; 3) {

                var inputs = {};
                inputs['endpoint'] = calmInstanceURL + gs.getProperty('x_nuta2_nutanix_ca.API_Prefix') + '/users/me';
                inputs['midapplication'] = midApplication + "";
                inputs['credentialalias'] = credential_alias + "";

                var outputs = sn_fd.FlowAPI.executeAction('x_nuta2_nutanix_ca.nutanix_refresh_token', inputs, 10000);

                var response = outputs['response'] + "";
                var statuscode = outputs['statuscode'] + "";
                var headers = outputs['headers'];

                if (statuscode == '200' || statuscode == '201') {
                    var parse_headers = JSON.parse(headers);
                    var cookie = parse_headers["Set-Cookie"][0];
                    gs.setProperty("x_nuta2_nutanix_ca.nuta_session_token", cookie + "");
                    this.logger.info("Refreshing Nutanix session.");
                    break;
                    //return "200";
                }

                retries++;
            }
            //return "401";
        } catch (err) {
            this.logger.error("Failed getting token. Error: " + err);
        }
    },

    // Use this method to make Calm API client call to the Nutanix for JSON response
    makeCalmApiCall: function(httpMethod, endpoint, body) { //Original makeCalmApiCall
        try {
            var credential_status = "";
            var cookie = "";

            var grConfig = new GlideRecord(this.configuration.table.CalmPluginConfig);
            grConfig.addQuery('sys_id', gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id'));
            grConfig.query();
            if (grConfig.next()) {
                //this.Catalog = grConfig.service_catalog;
                this.midServer = (grConfig.mid_server) ? grConfig.mid_server.getDisplayValue() + '' : "";
                this.midApplicationServer = (grConfig.mid_application) ? grConfig.mid_application.default_mid_server.name + "" : "";
                this.calmInstanceURL = grConfig.calm_instance + '';
                this.userName = grConfig.calm_admin_username + "";
                this.password = grConfig.calm_admin_password.getDecryptedValue() + "";
                cookie = gs.getProperty("x_nuta2_nutanix_ca.nuta_session_token") + "";
            }

            var endpointURL = this.calmInstanceURL + gs.getProperty('x_nuta2_nutanix_ca.API_Prefix') + endpoint;

            var request = new sn_ws.RESTMessageV2();
            request.setEccParameter('skip_sensor', true);
            request.setRequestHeader("Accept", "application/json");
            request.setRequestHeader("Content-Type", "application/json");

            if (gs.getProperty("x_nuta2_nutanix_ca.use_external_credential_system") + "" == "false") {
                request.setBasicAuth(this.userName, this.password);
				if(gs.getProperty("x_nuta2_nutanix_ca.Calm_SaaS_and_ServiceNow") + "" == "false"){
					request.setMIDServer(this.midServer + '');
				}
            } else {
                request.setMIDServer(this.midApplicationServer + "");

                if (cookie + "" == "") {
                    gs.eventQueue("x_nuta2_nutanix_ca.refresh_token", "", "", "");
                    request.setRequestHeader("Cookie", cookie);
                } else {
                    var preset_cookie = cookie + "";
                    request.setRequestHeader("Cookie", preset_cookie);
                }
            }

            request.setHttpMethod(httpMethod);
            request.setEndpoint(endpointURL);

            if (body)
                request.setRequestBody(body);

            request.disableForcedVariableSubstitution();

            //if(this.midServer.status =='Up' &amp;&amp; this.midServer.validated == 'true') {

            var response = request.executeAsync();

            if (gs.getProperty("x_nuta2_nutanix_ca.use_external_credential_system") + "" == "true" &amp;&amp; response.getStatusCode() == "401") {
                this.logger.info("Nutanix session has expired.");
                //credential_status = this._getApiToken();
                gs.eventQueue("x_nuta2_nutanix_ca.refresh_token", "", "", "");
                //if(credential_status != '401')
                return this.makeCalmApiCall(httpMethod, endpoint, body);
            }
            //this.logger.debug(' MID Server '+this.midServer.getDisplayValue()+''+ ' is Up ');
			this.logger.debug("====makeCalmApiCall \nhttpMethod: "+httpMethod+"\nendpointURL:"+endpointURL+"\nrequest body"+JSON.stringify(body)+"\nresponse StatusCode: "+response.getStatusCode()+"\n response body:"+response.getBody());
            return response;
            //} else {
            //this.logger.error(' MID Server '+this.midServer.getDisplayValue()+''+ ' is Down / Not Validated ');
            //return false;
            //}
        } catch (err) {
            this.logger.error("Make Calm API Call [makeCalmApiCall] Error: " + err);
        }
    },
	 makeAsyncCalmApiCall: function(httpMethod, endpoint, body) { //Original makeCalmApiCall
        try {
            var credential_status = "";
            var cookie = "";
			var grConfig = new GlideRecord(this.configuration.table.CalmPluginConfig);
            grConfig.addQuery('sys_id', gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id'));
            grConfig.query();
            if (grConfig.next()) {
				this.midServer = (grConfig.mid_server) ? grConfig.mid_server.getDisplayValue() + '' : "";
                this.midApplicationServer = (grConfig.mid_application) ? grConfig.mid_application.default_mid_server.name + "" : "";
                this.calmInstanceURL = grConfig.calm_instance + '';
                this.userName = grConfig.calm_admin_username + "";
                this.password = grConfig.calm_admin_password.getDecryptedValue() + "";
                cookie = gs.getProperty("x_nuta2_nutanix_ca.nuta_session_token") + "";
            }
            var endpointURL = this.calmInstanceURL + gs.getProperty('x_nuta2_nutanix_ca.API_Prefix') + endpoint;
            var request = new sn_ws.RESTMessageV2();
            request.setEccParameter('skip_sensor', true);
            request.setRequestHeader("Accept", "application/json");
            request.setRequestHeader("Content-Type", "application/json");
            if (gs.getProperty("x_nuta2_nutanix_ca.use_external_credential_system") + "" == "false") {
                request.setBasicAuth(this.userName, this.password);
				if(gs.getProperty("x_nuta2_nutanix_ca.Calm_SaaS_and_ServiceNow") + "" == "false"){
					request.setMIDServer(this.midServer + '');
				}
            } else {
                request.setMIDServer(this.midApplicationServer + "");
                if (cookie + "" == "") {
                    gs.eventQueue("x_nuta2_nutanix_ca.refresh_token", "", "", "");
                    request.setRequestHeader("Cookie", cookie);
                } else {
                    var preset_cookie = cookie + "";
                    request.setRequestHeader("Cookie", preset_cookie);
                }
            }
            request.setHttpMethod(httpMethod);
            request.setEndpoint(endpointURL);
            if (body)
                request.setRequestBody(body);

			request.disableForcedVariableSubstitution();
			
            var response = request.executeAsync();
            if (gs.getProperty("x_nuta2_nutanix_ca.use_external_credential_system") + "" == "true" &amp;&amp; response.getStatusCode() == "401") {
                this.logger.info("Nutanix session has expired.");
                gs.eventQueue("x_nuta2_nutanix_ca.refresh_token", "", "", "");
                return this.makeCalmApiCall(httpMethod, endpoint, body);
            }
			this.logger.debug("makeCalmApiCall \nhttpMethod: "+httpMethod+"\nendpointURL:"+endpointURL+"\nresponse StatusCode: "+response.getStatusCode()+"\n response body:"+response.getBody());
			
            return response;
        } catch (err) {
            this.logger.error("Make Calm API Call [makeCalmApiCall] Error: " + err);
        }
    },
    //===========================API call to get CALM version=========================//
    makeCalmApiVersionCall: function(httpMethod, endpoint, body) {
        try {
			var cookie = "";
            var grConfig = new GlideRecord(this.configuration.table.CalmPluginConfig);
            grConfig.addQuery('sys_id', gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id'));
            grConfig.query();
            if (grConfig.next()) {
				this.userName = grConfig.calm_admin_username + "";                    //added authentiction check
                this.password = grConfig.calm_admin_password.getDecryptedValue() + "";
                //this.Catalog = grConfig.service_catalog;
                if (gs.getProperty("x_nuta2_nutanix_ca.use_external_credential_system") + "" == "false")
                    this.midServer = grConfig.mid_server;
                else
                    this.midServer = grConfig.mid_application.default_mid_server;

                this.calmInstanceURL = grConfig.calm_instance + '';
            }

            var endpointURL = this.calmInstanceURL + endpoint;

            var request = new sn_ws.RESTMessageV2();
            request.setEccParameter('skip_sensor', true);
            request.setRequestHeader("Accept", "text/html");
            request.setHttpMethod(httpMethod);
			if(gs.getProperty("x_nuta2_nutanix_ca.Calm_SaaS_and_ServiceNow") + "" == "false"){
				request.setMIDServer(this.midServer.getDisplayValue() + '');
			}
            request.setEndpoint(endpointURL);
// 			request.setBasicAuth(this.userName, this.password); //basic Authentication.
			
			
			
			if(gs.getProperty("x_nuta2_nutanix_ca.use_external_credential_system") + "" == "false")
				{
					request.setBasicAuth(this.userName, this.password); //basic Authentication.
				}
			else
				{
					cookie = gs.getProperty("x_nuta2_nutanix_ca.nuta_session_token") + ""; //cookie status
					request.setMIDServer(this.midApplicationServer + "");
					if (cookie + "" == "") 
					{
						gs.eventQueue("x_nuta2_nutanix_ca.refresh_token", "", "", "");
						request.setRequestHeader("Cookie", cookie);
					} 
					else 
					{
                    var preset_cookie = cookie + "";
                    request.setRequestHeader("Cookie", preset_cookie);
					}
				}
			
            if (body)
                request.setRequestBody(body);

            if ((this.midServer.status == 'Up' &amp;&amp; this.midServer.validated == 'true') &amp;&amp; (gs.getProperty("x_nuta2_nutanix_ca.Calm_SaaS_and_ServiceNow") + "" == "false")) {
                var response = request.executeAsync();
				this.logger.debug("makeCalmApiVersionCall \nhttpMethod: "+httpMethod+"\nendpointURL:"+endpointURL+"\nresponse StatusCode: "+response.getStatusCode()+"\n response body:"+response.getBody());
                this.logger.debug(' MID Server ' + this.midServer.getDisplayValue() + '' + ' is Up ');
                return response;
            }
			if(gs.getProperty("x_nuta2_nutanix_ca.Calm_SaaS_and_ServiceNow") + "" == "true"){
			    var response = request.executeAsync();
				this.logger.debug("makeCalmApiVersionCall \nhttpMethod: "+httpMethod+"\nendpointURL:"+endpointURL+"\nresponse StatusCode: "+response.getStatusCode()+"\n response body:"+response.getBody());
                return response;
			}else {
                this.logger.error(' MID Server ' + this.midServer.getDisplayValue() + '' + ' is Down / Not Validated ');
                return false;
            }
			
        } catch (err) {
            this.logger.error("Make Calm API Version Call [makeCalmApiVersionCall] Error: " + err);
        }
    },
    //===========================End of API call to get CALM version==================//

    makeProxyCall: function(httpMethod, endpoint, body, userId) { //API Proxy Call
        try {
            var userGr = new GlideRecord('sys_user');
            if (userGr.get(userId)) {
                var proxyURL = this.configuration.api.proxyLogin + '';
                var calmUserName = userGr.email + '';
                calmUserName = calmUserName.toLowerCase() + '';
                var proxyBody = {
                    "proxy_for_username": calmUserName
                };
                var proxyResponse = this.makeCalmApiCall('POST', proxyURL, this.stringify(proxyBody));
            }
            if (proxyResponse.getStatusCode() == '200' || proxyResponse.getStatusCode() == '201') {
                var parsedProxyResp = this.parse(proxyResponse.getBody());
                var sessionId = parsedProxyResp.ntnx_igw_session + '';
                var idExpiresIn = parsedProxyResp.expires + '';
                var grConfig = new GlideRecord(this.configuration.table.CalmPluginConfig);
                grConfig.addQuery('sys_id', gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id'));
                grConfig.query();
                if (grConfig.next()) {
                    this.midServer = (grConfig.mid_server) ? grConfig.mid_server : grConfig.mid_application.default_mid_server;
                    this.calmInstanceURL = grConfig.calm_instance + '';
                }

                var domain = this.calmInstanceURL.replace('https://', '').replace(':9440', '');
                var cookie = 'NTNX_IGW_SESSION=' + sessionId + '; path=/; domain=' + domain + '; Secure; HttpOnly; Expires=' + this.proxyUTCConverter(idExpiresIn) + ';';
                var endpointURL = this.calmInstanceURL + gs.getProperty('x_nuta2_nutanix_ca.API_Prefix') + endpoint;

                var proxyRequest = new sn_ws.RESTMessageV2();
                proxyRequest.setEccParameter('skip_sensor', true);
                proxyRequest.setRequestHeader("Accept", "application/json");
                proxyRequest.setRequestHeader("Content-Type", "application/json");
                proxyRequest.setRequestHeader("Cookie", cookie);
                proxyRequest.setHttpMethod(httpMethod);
				if(gs.getProperty("x_nuta2_nutanix_ca.Calm_SaaS_and_ServiceNow") + "" == "false"){
					proxyRequest.setMIDServer(this.midServer.getDisplayValue() + '');
				}
                proxyRequest.setEndpoint(endpointURL);
                if (body)
                    proxyRequest.setRequestBody(body);

                proxyRequest.disableForcedVariableSubstitution();

                if (this.midServer.status == 'Up' &amp;&amp; this.midServer.validated == 'true') {
                    proxyResponse = proxyRequest.executeAsync();
					this.logger.debug("makeProxyCall \nhttpMethod: "+httpMethod+"\nendpointURL:"+endpointURL+"\proxyResponse StatusCode: "+proxyResponse.getStatusCode()+"\n response body:"+proxyResponse.getBody());
                    this.logger.debug(' MID Server ' + this.midServer.getDisplayValue() + '' + ' is Up ');
                    return proxyResponse;
                }
				if(gs.getProperty("x_nuta2_nutanix_ca.Calm_SaaS_and_ServiceNow") + "" == "true"){
					proxyResponse = proxyRequest.executeAsync();
					this.logger.debug("makeProxyCall \nhttpMethod: "+httpMethod+"\nendpointURL:"+endpointURL+"\proxyResponse StatusCode: "+proxyResponse.getStatusCode()+"\n response body:"+proxyResponse.getBody());
                    return proxyResponse;
				}
				else {
                    this.logger.error(' MID Server ' + this.midServer.getDisplayValue() + '' + ' is Down / Not Validated ');
                    return false;
                }

            }
			if (proxyResponse.getStatusCode() == '403'){ return this.makeCalmApiCall(httpMethod, endpoint, body); }
			else {
                this.logger.error("Error in makeProxyCall API Call [makeProxyCall] Error: " + proxyResponse.getBody());
            }
        } catch (err) {
            this.logger.error("Make Proxy API Call [makeProxyCall] Error: " + err);
        }
    },

    makeIntermediateApiCall: function(httpMethod, endpoint, body, userId) { //API intermediate Proxy Call

        var local_groups_flag = "";
        var grConfig = new GlideRecord(this.configuration.table.CalmPluginConfig);
        grConfig.addQuery('sys_id', gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id'));
        grConfig.query();
        if (grConfig.next()) {
            local_groups_flag = grConfig.use_local_groups + "";
        }

        if (!this.versionNewCheck() || local_groups_flag == "true") {
            return this.makeCalmApiCall(httpMethod, endpoint, body);
        } else {

            var grUser = new GlideRecord('sys_user_has_role');
            grUser.addEncodedQuery('role.name=x_nuta2_nutanix_ca.calm_admin^ORrole.name=admin^user=' + userId);

            grUser.query();

            if (grUser.next()) //user_name.hasRole("x_nuta2_nutanix_ca.calm_admin")) 
            {
                return this.makeCalmApiCall(httpMethod, endpoint, body);
            } else {
                return this.makeProxyCall(httpMethod, endpoint, body, userId);
            }
        }
    },

    makeCalmApiCallForIcon: function(httpMethod, endpoint, body, sysId) {
        try {
            var grConfig = new GlideRecord(this.configuration.table.CalmPluginConfig);
            grConfig.addQuery('sys_id', gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id'));
            grConfig.query();
            if (grConfig.next()) {
                //this.Catalog = grConfig.service_catalog;
                this.midServer = grConfig.mid_server;
                this.calmInstanceURL = grConfig.calm_instance + '';
                this.userName = grConfig.calm_admin_username + '';
                this.password = grConfig.calm_admin_password.getDecryptedValue() + '';
            }

            var endpointURL = this.calmInstanceURL + gs.getProperty('x_nuta2_nutanix_ca.API_Prefix') + endpoint;
            var tablename = 'sc_cat_item';
            var recordSysId = sysId;
            var filename = 'picture';
            var request = new sn_ws.RESTMessageV2();
            request.setEccParameter('skip_sensor', true);
            request.setBasicAuth(this.userName, this.password);
            request.setHttpMethod(httpMethod);
			if(gs.getProperty("x_nuta2_nutanix_ca.Calm_SaaS_and_ServiceNow") + "" == "false"){
				request.setMIDServer(this.midServer.getDisplayValue() + '');
			}
            request.setEndpoint(endpointURL);
            request.saveResponseBodyAsAttachment(tablename, recordSysId, filename);
            if (body)
                request.setRequestBody(body);

            request.disableForcedVariableSubstitution();

            if (this.midServer.status == 'Up' &amp;&amp; this.midServer.validated == 'true') {
                var response = request.executeAsync();
				this.logger.debug("makeCalmApiCallForIcon \nhttpMethod: "+httpMethod+"\nendpointURL:"+endpointURL+"\nresponse StatusCode: "+response.getStatusCode()+"\n response body:"+response.getBody());
                this.logger.debug(' MID Server ' + this.midServer.getDisplayValue() + '' + ' is Up ');
                return response;
            }
			if(gs.getProperty("x_nuta2_nutanix_ca.Calm_SaaS_and_ServiceNow") + "" == "true"){
					var response = request.executeAsync();
					this.logger.debug("makeCalmApiCallForIcon \nhttpMethod: "+httpMethod+"\nendpointURL:"+endpointURL+"\nresponse StatusCode: "+response.getStatusCode()+"\n response body:"+response.getBody())
                    return response;
			}
			else {
                this.logger.error(' MID Server ' + this.midServer.getDisplayValue() + '' + ' is Down / Not Validated ');
                return false;
            }
        } catch (err) {
            this.logger.error("Make API Call [makeCalmApiCallForIcon] Error: " + err);
        }
    },

    ///changes

    generateRequestBody: function(name, version, presetOffset, pageBreaker) {

        if (!this.versionNewCheck()) {
            var responseBody = "";
            switch (name) {

                case "startImportMPI":
                    responseBody = {
                        "kind": "marketplace_item",
                        "offset": 0,
                        "length": 1
                    };
                    return responseBody;

                case "importMPIData":
                    responseBody = {
                        "kind": "marketplace_item",
                        "offset": presetOffset,
                        "length": pageBreaker
                    };
                    return responseBody;

                default:
                    this.logger.error("Inside Nutanix_Calm_Utils.generateRequestBody :: " + name + " not found");
            }
        } else {
            var responseBody = "";
            switch (name) {

                case "startImportMPI":
                    responseBody = {
                        "kind": "marketplace_item",
                        "offset": 0,
                        "filter": "app_state==PUBLISHED",
                        "length": 1
                    };
                    return responseBody;

                case "importMPIData":
                    responseBody = {
                        "kind": "marketplace_item",
                        "offset": presetOffset,
                        "filter": "app_state==PUBLISHED",
                        "length": pageBreaker
                    };
                    return responseBody;

                default:
                    this.logger.error("Inside Nutanix_Calm_Utils.generateRequestBody :: " + name + " not found");

            }
        }
    },

    ///
    //Show/Hide 'Sync' ui action on authentication success or failure
    showHideSyncUiAction: function(SyncStatus) {
        try {
            var grAction = new GlideRecord(this.configuration.table.sysUiAction);
            grAction.addQuery('action_name', 'nutanix_sync');
            grAction.query();
            if (grAction.next()) {
                grAction.form_button = SyncStatus;
                grAction.update();
            }
        } catch (e) {
            this.logger.error("Inside Nutanix_Calm_Utils.showHideSyncUiAction Error: " + e);
        }

    },

    //Show/Hide 'Save Properties' ui action on MID Server Down/not validated
    showHideSaveUiAction: function(SaveStatus) {
        try {
            var grAction = new GlideRecord(this.configuration.table.sysUiAction);
            grAction.addQuery('action_name', 'save_properties');
            grAction.query();
            if (grAction.next()) {
                grAction.form_button = SaveStatus;
                grAction.update();
            }
        } catch (e) {
            this.logger.error("Inside Nutanix_Calm_Utils.showHideSaveUiAction Error: " + e);
        }

    },


    updateCatalogName: function(name) {
        var gr = new GlideRecord(this.configuration.table.catalog);
        gr.addQuery('sys_id', gs.getProperty('x_nuta2_nutanix_ca.nutanix_catalog_sysId') + '');
        gr.query();
        if (gr.next()) {
            gr.title = name + '';
            gr.update();
        } else {
            gr.initialize();
            gr.title = name;
            //gr.desktop_image = '';   //Image needed to be added.
            gr.insert();
        }
    },

    //('importApplications', 'POST', '/apps/list', 'payload');
    insertIntoQueue: function(topic, method, parameter, payload, process, desc) {
        var gr = new GlideRecord(this.configuration.table.processQueue);
        gr.initialize();
        gr.topic = topic + '';
        gr.method = method + '';
        gr.parameter = parameter + '';
        gr.payload = payload + '';
        gr.process_name = process + '';
        gr.description = desc + '';
        gr.state = "ready";
        gr.insert();
    },

    // Inserts app run logs into App Runlogs table
    insertAppRunlogs: function(parsedJson) {
        try {
            var grRunlogs = new GlideRecord(this.configuration.table.appRunlogs);
            grRunlogs.initialize();

            //grRunlogs.name = parsedJson.status.action_reference.name;
            var action_name_vars = ['action_install_ngt', 'action_manage_ngt', 'action_uninstall_ngt', 'action_update'];
            var action_name = parsedJson.status.action_reference.name + '';
            if (action_name_vars.indexOf(action_name) != -1) {
                var action_name_json = {
                    'action_install_ngt': 'Install NGT',
                    'action_manage_ngt': 'Manage NGT',
                    'action_uninstall_ngt': 'Uninstall NGT',
                    'action_update': 'App Edit'
                };
                action_name = action_name_json[action_name];
            } else {
                var aname = action_name.replace('action_', '').replace('_', ' ');
                aname = aname.split(" ");
                for (var j = 0, x = aname.length; j &lt; x; j++) {
                    aname[j] = aname[j][0].toUpperCase() + aname[j].substr(1);
                }
                action_name = aname.join(" ");
            }
            grRunlogs.name = action_name + '';

            grRunlogs.uuid = parsedJson.metadata.uuid;
            grRunlogs.description = parsedJson.status.description;
            grRunlogs.app_uuid = parsedJson.status.application_reference.uuid;
            grRunlogs.app_name = parsedJson.status.application_reference.name;
            grRunlogs.is_runlog_archived = parsedJson.status.is_runlog_archived;
            grRunlogs.is_critical = parsedJson.status.is_critical;
			grRunlogs.state_reason = (parsedJson.status.reason_list).toString();//stringify
            grRunlogs.state = parsedJson.status.state;
            grRunlogs.type = parsedJson.status.type;
            grRunlogs.kind = parsedJson.metadata.kind;
            grRunlogs.last_update_time = this.calmDateConvertor(parsedJson.metadata.last_update_time);
            grRunlogs.creation_time = this.calmDateConvertor(parsedJson.metadata.creation_time);
            grRunlogs.insert();

        } catch (e) {
            this.logger.error("Error occured while inserting app run logs, Nutanix_Calm_Utils.insertAppRunlogs: " + e);
        }
    },

    // Calm "last_update_time", "creation_time" date convertor specific to SNOW datetime format
    calmDateConvertor: function(getdate) {
        try {
            var date = new Date(getdate / 1000);
            var year = date.getUTCFullYear();
            var month = date.getUTCMonth() + 1; // getMonth() is zero-indexed, so we'll increment to get the correct month number
            var day = date.getUTCDate();
            var hours = date.getUTCHours();
            var minutes = date.getUTCMinutes();
            var seconds = date.getUTCSeconds();
            var lastUpdate = year + '-' + month + '-' + day + ' ' + hours + ':' + minutes + ':' + seconds;
            return lastUpdate;
        } catch (e) {
            this.logger.error("Error occured inside Nutanix_Calm_Utils.calmDateConvertor: " + e);
        }
    },

    parse: function(str) {
        if (str)
            return JSON.parse(str);

        return '';
    },

    stringify: function(str) {
        if (str)
            return JSON.stringify(str);

        return '';
    },

    proxyUTCConverter: function(timeStamp) {
        var d = new Date(timeStamp * 1000);
        return d.toGMTString();
    },

    markdown_renderer: function(markdown_string) {
        try {

            if (markdown_string == '')
                return '';

            x_nuta2_nutanix_ca.Markdown_lib;
            var converter = new showdown.Converter();
            var html_string = converter.makeHtml(markdown_string);
            var markdown_desc = (html_string + '').replace(/(&lt;h[1-9])/g, '&lt;strong').replace(/(&lt;\/h[1-9]&gt;)/g, '&lt;/strong&gt;').replace(/&lt;ul&gt;/g, '&lt;ul style="list-style-position: inside;"&gt;');

            return markdown_desc;
        } catch (e) {
            this.logger.error(e);
        }
    },

    versionNewCheck: function() {
        var old_version_array = ["2.4", "2.5", "2.6"];

        if (old_version_array.indexOf(this.version + "") == -1)
            return true;
        else
            return false;

    },

    _createMacroArray: function(macro_string) {

        var split_macros = macro_string.split("@@{");
        var macro_array = [];
        for (var i = 0; i &lt; split_macros.length; i++) {
            if (split_macros[i].indexOf("}@@") != -1)
                macro_array.push(split_macros[i].split("}@@")[0] + "");
        }

        return macro_array;
    },

    getMacroDependencies: function(field) {
		try {

            var field_json = (field) ? JSON.parse(field) : {};
            var dep_json = {};
            var all_dep = [];

            var type = field_json.type + "";
            if (type == "EXEC_LOCAL" || type == "EXEC_SECRET") {
                var attrs = field_json.options.attrs;
                dep_json.script = {
                    "dependencies": this._createMacroArray(attrs.script + ""),
                    "value": attrs.script
                };
                dep_json.all_dep = dep_json.script.dependencies;
            } else if (type == "HTTP_LOCAL" || type == "HTTP_SECRET") {
                var supported_fields = {
                    "content_type": "",
                    "url": "",
                    "request_body": ""
                };
                var attrs = field_json.options.attrs;
				
                for (var i in supported_fields) {
                    dep_json[i] = {
                        "dependencies": this._createMacroArray(attrs[i] + ""),
                        "value": attrs[i]
                    };
                    all_dep = all_dep.concat(dep_json[i].dependencies);
                }
                dep_json.response_paths = {
                    "dependencies": this._createMacroArray(JSON.stringify(attrs.response_paths)),
                    "value": attrs.response_paths
                };
				dep_json.all_dep = all_dep.concat(dep_json.response_paths.dependencies);
            } else if (field_json.data_type + "" == "LIST_SINGLE" || field_json.data_type + "" == "LIST") {
				
				var choice_arr = field_json.options.choices.toString();
				dep_json["local"] = {
                    "dependencies": this._createMacroArray(choice_arr + ""),
                    "value": field_json.value+""
                };
                dep_json.all_dep = dep_json.local.dependencies;
				
			} else {
                dep_json["local"] = {
                    "dependencies": this._createMacroArray(field_json.value + ""),
                    "value": field_json.value+""
                };
                dep_json.all_dep = dep_json.local.dependencies;
            }

            return dep_json;
        } catch (e) {
            gs.info(e);
        }
    },

    createPreMap: function(field, type) {

		try{
        var pre_array = [];

        if (type == "LOCAL" || type == "SECRET" || type == "PREDEFINED")
            return field.local.dependencies;

        if (type == "EXEC_LOCAL" || type == "EXEC_SECRET") {
            return field.script.dependencies;
        }

        if (type == "HTTP_LOCAL" || type == "HTTP_SECRET") {
            var supported_fields = {
                "content_type": "",
                "url": "",
                "request_body": "",
                "response_paths": ""
            };
            for (var i in supported_fields) {
                var sup_array = field[i].dependencies;
                for (var j = 0; j &lt; sup_array.length; j++) {
                    if (pre_array.indexOf(sup_array[j]) == -1)
                        pre_array.push(sup_array[j]);
                }
            }
            return pre_array;
        }
		} catch(e){gs.error(type);}
    },

    createDependencyMap: function(var_array) {
        var arr = JSON.stringify(var_array);
        arr = JSON.parse(arr);
        return this._tsort(arr);
    },

    _tsort: function(map) {
		
        var error_map = {};
		
        function tsort(edges) {
            var nodes = {},
                sorted = [],
                visited = {};

            var Node = function Node(id) {
                this.id = id;
                this.afters = [];
            };

            edges.forEach(function(v) {
                var from = v[0],
                    to = v[1];
                if (!nodes[from]) nodes[from] = new Node(from);
                if (!nodes[to]) nodes[to] = new Node(to);
                nodes[from].afters.push(to);
            });
            Object.keys(nodes).forEach(function visit(idstr, ancestors) {
                var node = nodes[idstr],
                    id = node.id;
                if (visited[idstr]) return;
                if (!Array.isArray(ancestors)) ancestors = [];
                ancestors.push(id);
                visited[idstr] = true;
                node.afters.forEach(function(afterID) {
                    if (ancestors.indexOf(afterID) &gt;= 0) error_map[afterID] = id;
                    visit(afterID.toString(), ancestors.map(function(v) {
                        return v;
                    }));
                });
                sorted.unshift(id);
            });
            return sorted;
        }

        var createEdges = function createEdges(dep) {
            var result = [];
            Object.keys(dep).forEach(function(key) {
                dep[key].forEach(function(n) {
                    result.push([n, key]);
                });
            });
            return result;
        };
		
        var list = createEdges(map);
		
		var sorted_array = tsort(list);
		
		for(var i in map){
			if(!map[i].length &amp;&amp; sorted_array.indexOf(i) == -1)
				sorted_array.unshift(i);
		}
		
        return {
            "Dep_array": sorted_array,
            "error_map": error_map
        };
    },

    _tsort2: function(map) {
		var error = "";
        function topologicalSortHelper(node, visited, temp, graph, result) {
            temp[node] = true;

            var neighbors = graph[node];

            for (var i = 0; i &lt; neighbors.length; i += 1) {

                var n = neighbors[i];

                if (temp[n]) {
					error = 'Circular dependency detected for variable: '+n;
                    this.logger.error(error);
					return;
                }

                if (!visited[n]) {

                    topologicalSortHelper(n, visited, temp, graph, result);

                }

            }

            temp[node] = false;

            visited[node] = true;

            result.push(node);

        }

        function topsort(graph) {

            var result = [];
            var visited = [];

            var temp = [];

            for (var node in graph) {

                if (!visited[node] &amp;&amp; !temp[node]) {

                    topologicalSortHelper(node, visited, temp, graph, result);

                }

            }

            return result;

        }
		
		return {
            "Dep_array": topsort(map),
            "error_map": [error]
        };
    },
	migrateV1_4_3 : function(){
	try {
		var delete_blueprint = {};
		var str = [];
		var answer = '';

		var blueprint = new GlideRecord('x_nuta2_nutanix_ca_nutanix_blueprint');
		blueprint.addQuery('state', 'ACTIVE');
		blueprint.query();
		while (blueprint.next()) {
			var final_var_list = [];
			var response = this.makeCalmApiCall("get", '/blueprints/' + blueprint.uuid, "");
			if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {
				var app_profile_list = JSON.parse(response.getBody()).spec.resources.app_profile_list;
				if (app_profile_list.length &lt; 1)
					continue;

				for (var i in app_profile_list) {
					var variable_list = app_profile_list[i].variable_list;
					if (variable_list.length &lt; 1)
						continue;

					for (var j in variable_list) {
						var var_index = final_var_list.indexOf(variable_list[j].name);
						(var_index == -1) ? final_var_list.push(variable_list[j].name): delete_blueprint[blueprint.name] = {
							"sys_id": blueprint.sys_id + '',
							"variables": variable_list[j].name + ''
						};
					}
				}
			}
		}
		gs.info("V1_4_3 migration , blueprint to be deleted : " + JSON.stringify(delete_blueprint));


		var delete_mpi = {};
		var mpi = new GlideRecord('x_nuta2_nutanix_ca_nutanix_marketplaceitems');
		mpi.addQuery('state', 'active');
		mpi.query();
		while (mpi.next()) {
			var final_var_list = [];
			var response = this.makeCalmApiCall("get", '/calm_marketplace_items/' + mpi.uuid, "");
			if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {
				response = JSON.parse(response.getBody());
				var app_profile = (response.status.resources.app_blueprint_template.status.resources.app_profile_list);
				if (app_profile.length &lt; 1)
					continue;
				for (var i in app_profile) {
					var variable_list = app_profile[i].variable_list;
					if (variable_list.length &lt; 1)
						continue;
					for (var j in variable_list) {
						var var_index = final_var_list.indexOf(variable_list[j].name);
						(var_index == -1) ? final_var_list.push(variable_list[j].name): delete_mpi[mpi.name + " " + mpi.version] = {
							"sys_id": mpi.sys_id + '',
							"variables": variable_list[j].name + ''
						};
					}
				}
			}
			
		}
		gs.info("V1_4_3 migration, MPI to be deleted : : " + JSON.stringify(delete_mpi));

		var str = [];
		for (var z in delete_blueprint) {
					
			var count = 0;
			var cat_item = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
			cat_item.addQuery('blueprint', delete_blueprint[z].sys_id);
			cat_item.query();
            
			while (cat_item.next()) {
				count++;
				cat_item.state = 'deleted';
				cat_item.update();
		//		gs.info(" Deactivated catalog " + cat_item.item_name.name + " in V1_4_3 migration ");
				var catItem = cat_item.item_name.getRefRecord();
				catItem.active = false;
				catItem.update();
				gs.info(" Deactivated catalog " + cat_item.item_name.name + " in V1_4_3 migration ");
			}
			
			var variable = new GlideRecord('item_option_new');
			variable.addQuery('cat_item', delete_blueprint[z].sys_id + '');
			variable.query();
		//	gs.info("deleted blueprint " + variable.cat_item.name + " in V1_4_3 migration ");
			while (variable.next()) {
				variable.cat_item = "";
				variable.update();
			}
			var variables_properties  = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
			variables_properties.addQuery('catalog_item', delete_blueprint[z].sys_id+'');
			variables_properties.query();
			while(variables_properties.next()){
				variables_properties.deleteRecord();
			}
			if(count &gt; 0)
				str.push(z);
			gs.info("Blueprint "+z+" is migrated to V1.4.3");
		}
		for (var k in delete_mpi) {
			var count = 0;
			var cat_item = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
			cat_item.addQuery('blueprint',delete_mpi[k].sys_id + '');
			cat_item.query();

			while (cat_item.next()) {
				count++;
				cat_item.state = 'deleted';
				cat_item.update();
		//		gs.info(" Deactivated catalog " + cat_item.item_name.name + " in V1_4_3 migration ");
				var catItem = cat_item.item_name.getRefRecord();
				catItem.active = false;
				catItem.update();
				gs.info(" Deactivated catalog " + cat_item.item_name.name + " in V1_4_3 migration ");
			}
			var mpi = new GlideRecord('item_option_new');
			mpi.addQuery('cat_item', delete_mpi[k].sys_id + '');
			mpi.query();
	//		gs.info("deleted MPI " + mpi.cat_item.name + " in V1_4_3 migration ");
			while (mpi.next()) {
				mpi.cat_item = "";
				mpi.update();
			}
			var variables_properties  = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
			variables_properties.addQuery('catalog_item', delete_mpi[k].sys_id+'');
			variables_properties.query();
			while(variables_properties.next()){
				variables_properties.deleteRecord();
			}
	//		gs.info("deleted blueprint " + mpi.name + " in V1_4_3 migration ");
			if(count &gt; 0)
				str.push(k);
			gs.info("MPI "+k+" is migrated to V1.4.3")
		}
		gs.info(str);
		

		gs.setProperty('x_nuta2_nutanix_ca.1_4_3', "1");
		str.length &gt; 0 ? gs.setProperty('x_nuta2_nutanix_ca.1_4_3_bp', str) : '';
		
		var var_property = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties'); 
		var_property.addEncodedQuery('isprofilevariable=true');
		var_property.query();
		while(var_property.next()){
			 var base_var = new GlideRecord('item_option_new');
             base_var.get(var_property.variable);
             base_var.description = var_property.uuid;
			 base_var.update();
	//		gs.info(var_property.variable.name+"updated in V1_4_3 migration");
		}
		this.insertIntoQueue('startInventorySync', '', '', '', 'Start inventory sync', 'This process is invoking the import of all the inventories.');
	} 
	catch (err) {
		gs.info("V1_4_3 migration ," + err);
	}
	},

    type: 'Nutanix_Calm_Utils'

	
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;mumtaz.ansari&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-09 13:20:11&lt;/sys_created_on&gt;&lt;sys_id&gt;cc07c62137412300d27b8cf6c3990e83&lt;/sys_id&gt;&lt;sys_mod_count&gt;316&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_Calm_Utils&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_cc07c62137412300d27b8cf6c3990e83&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-07-27 03:44:14&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>1216488432</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.4.5 Complete Build">346d737d1bb0011081326464604bcb11</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-01-03 07:26:35</sys_created_on>
<sys_id>f46d737d1bb0011081326464604bcb13</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17e1ed1e4030000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-01-03 07:26:35</sys_updated_on>
<table/>
<target_name>Nutanix_Calm_Utils</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>2b1c4fd230213010a081fa88501e42e7</update_guid>
<update_guid_history>2b1c4fd230213010a081fa88501e42e7:1216488432,0ba88a8aa6d53010b94297b56d813747:-385514916,049b04382f553010473ece7f66028198:-1632598290,f32ec32ca711301063c2fc2864bd9336:1803006346,1dcd0fe8d8113010154ac70ca3564287:-91467592,9de595151ee7a8505347a3f199717e4c:1991498067,23451e0d1fab685032e2366996d61330:-1359795341,07141689e7ab685095ad1318ca4808a4:-1385154366,b0c30a09ce2b685066c2f7d5b1a42a11:-1916675437,f0ef75c1622b685065e3160536d33cb2:-2106372668,224f3981632b6850c02c833327e244e5:-629982135,a43dbd01262b6850bd2218c44f87bbec:-795623122,806b3d4d96e768501368abc37619395f:897437648,38bc3760d6afe450a2d271bfad8dd0f9:-559306764,d94ab4af5ddbe050e26c2dc61e953c66:1065383329,8a8008a38a1be050b61660fbc7c4789b:995871067,059bff9fdbd7e050dba7cc0fbec7bdf1:-1074102222,162bffdb72d7e05091d122298845fbb1:-807041294,f1a60cd1329b6c1038865661009aa206:670733650,57cf3f4df45b6c10350126492e79719d:1748392096,e89cf30d105b6c10387793fb7958c3f0:-1718538466,39c97309285b6c1068d9502b89716476:9683510,ed13449514536450a3a3946e8b492b62:-625154092,32260bc9b75f24105916309bcf972ab1:-1718538466,98fdf6895f5f2410eb012f80f603cb48:1142123488,64a9bc208717a010b2bcff37c99b18d3:1500248117,e7612b50a2cfac1042622df762ae411c:433819442,25ac16c0d44f6c104378d93fa48dd49b:1261537780,3cae7478081fe05040def7fb88c0b674:372130242,19f4c6ac6b17e0504d37b76081a745e6:-760913758,57289782b5032c105c060ff3e73cf32a:1470504511,ff6c692da74f6810d4a0459a4ac89959:9683510,904721e58e4f6810fa7abb18b9ca0c54:-1924842460,a763d7141347a4108c5baad1ce0122ec:-1221580520,b9c1b8d8510764108e60fceab68f1a76:1201879943,5629824f6d2ea410fb8b80c0d7daefa9:-580514552,e4f7028b5b2ea4102f366f2ed3a2f388:-1308439452,40d4028b1e2ea4102c6c6d6df3562682:-419389598,90f3064ba52ea4106ad9c61071e8ce2b:-138399324,a183420b382ea4109be9398356ce9931:-1101507772,cb434ac7502ea4107a7decb3a75e19c1:2118783886,7e92020b742ea410d6eb30a7bc59c0ef:-517713638,47f1c6c7cd2ea410ed4ca53826443c98:-1167147846,c1f904c3fba6a4105a2f971cb9974bca:31064640,922900439aa6a41037809b8f1ea161fb:-2076634797,b948844319a6a410e727e195e4f1cbe6:-1986833347,0589fabe0d22a410eeefdca56dd71236:274081148,b784f63a7422a41025486df3e759438c:1095628317,45d3363a8b22a41096d36d392a50e085:519817271,5460faf24c22a4104320798e1a00c746:1757579613,47ccaa328222a410500dee141c329cc1:-2044115447,0ca2c08f1f2260103ebc7a74de47bfc4:-602151229,69fe76baaa6a201048e556890250f36f:844487474,b71a853e3d82e410ad7b9df8768b2e96:-1308439452,3ca3013ac382e410a67872e29b291587:-184484956,81a1fcba7c42e4103fef008e496072c6:-1859996223,7d9ca4763d42e4109cb9619a27ce7eeb:-700746788,edc15fca180a6410531c73723450582b:-1537827042,37b60b0633c66410ff4a70a3074ebb8b:-844126338,f71d5b78008a28505383ea8e2bfa6967:-1629203490,6e0d5b78308a2850e6b7f1d33d266360:-1303240130,74e8073c6f4a28501db68eea3bd3353c:-1656482562,c57f71fc37822850c5e3323d1b83d7f7:618512356,467a317c9042285086754e058e802eb1:2038663202,dc9b3d1895c62450269f5605485e5ba0:2068391738,8f2eac98e7c22450e2c706a48984e05b:381450646,37d8e45070c2245012de7f6602af0082:1072730093,8b04a81480c224507b89c3f7faa1d6ff:1526717229,3acedc1098c22450e0712ead4fc7fa29:1386446374,7e6e181075c22450aca7fad2f0b7a25c:819833986,572d18dc258224506de2a689fbe8d26f:70328679,e1fbbe9c51396810c701e13243aef399:2068391738,1ad3715825756810c8305f6a20bd9e1c:1299782207,f64637178cc5a010e5d6cce191e1ed7c:794574022,41fe27977641a010cf52bb19ebdf8e49:-1162172460,3a382317390d60100cdd3a22a1e31756:-1720968745,8506ab9ff5c960109dd527d5a27ebac0:-1480299067,87949b5b6749201019d4fd7f75f1feac:2047460462,bc54535b7d492010ece97d36b9cbbed2:197412046,09241b5ba149201083275892119a1674:-2112234879,9ed3135b9c492010534b1dd8d10a593c:-1154098148,b1a01f9745492010e48f2483f6539b94:-2112234879,1f00d7171e49201082c83bc0dd7ebe75:477655778,0f0efe5f14852010490bfd543f0bccc4:2058676548,7c187697ca452010ae72bf3880244b71:554753000,4d37fa57294520108d8eb1cb81f9a60c:-2092582353,c2073e179c452010525c8d6d97d321ff:134978440,1ca56a9bb681a01009dedc90c2f99c17:-84550483,0e65669b5781a0109bed58c6b6518001:508288653,6df4ea1bce81a010079fe8e6008460b4:-1018148627,6fc1ae93e281a010619c04c34b182966:-1219859515,f32c169b6941a0105f30bc98a77d5409:813996737,c2f75ad38f41a010a7af3057ee4eece1:-1837960032,aa6f8edba8cd6010b343d3764bba5c08:-1371065259,b2a78693388d6010ee036641d628daf4:1984564746,49c04617854d60104bd75a79ac2e510e:-929198226,d1deb55bf54d6010313280802ab37219:-1034966017,6266ed972d0d6010b90c5a399c85f090:-2143074387,586f4d1b3b816010e2ced8921e181342:-894455589,2d3a8dd36e8160108caf92b1f96575ba:-1158615153,ec3785dfc1416010665ef0c3a1f27f9a:-238751210,ba1c285b96412090fefffdd307ec57b6:-1778960937,ba1c285b96412090fefffdd307ec57b6:-1778960937,0a7b20179f4120905cf41071b14fbf83:-398606045,0a39e4979b412090e067809b2dcb35cc:77506037,0af7044fcac1ec508a6f5cdaa82decbb:1592236647,730fceb22589ac50cd78e0e9dce6223a:778679874,a70f2c729f8d6c5045ce341e804e640e:212524770,ea9da872df8d6c501d4988219d683538:-1491054638,44eae4fe2b4d6c50798bbdfd4cbc7921:-450531328,9e8d50767e4d6c500a371182a25bbe39:-22926363,a71d1076884d6c508442605ada56a24b:305593674,69d654724a4d6c501a048397cafd45c0:-516026927,d5c07fea70496c508943bc94829a0afd:-1159142025,2c9f936eb2096c505908be516d9da3de:1172023152,a9c9bc625d816c500a77c0a4cbfdc85e:-1465992257,bca8346237816c5049e437d83df2c89c:-856285477,4616e7aad0812c1074a33dc8c5a820f2:2062547225,80c487d228c1e8109ec625f9e780030a:-1003074713,4e996830c445a450eca50157b2880fa6:-280436743,aa6a9ea21e382050005619f32755e906:-475985189,adb524fc45c5201048ff31fb68ac73df:1207511384,ef319d6abe3420508bf04da864f03bed:-1725784686,664e4d66fd342050933f61b8e03dd607:-1246111289,783dc566dc342050ab32ff484b89f4f3:308438742,7fb9c16261342050d8fab77c5209653b:-268475562,9c6889229e342050714d409cfd9c4975:-660742223,aab605ee4ff020504095c545dddbd7f4:308438742,77f5c9ae18f020502a51361cedf8792b:1182541328,9cb44dea6ff02050db45fd691dc71e00:965727796,03a2cdaa6ef02050d40509997d2f69dd:-499249684,6cb1056abaf020508d1890a522c8bd07:2022299203,3d204d2a49f02050c2174a60f04894c9:-1369079489,e6ff7c2a4ff02050d993570ec85a6063:-499249684,e5bd34a2ebf020504432617877b0c9a6:-1388073913,eb5c145af034ec10936c67cd8ee6b8e6:-499249684,695d401e18f0ec100512c82c2592f684:-1179768822,c3d9c41ab5f0ec10e52906a190f206d4:135236869,bef640d68cf0ec10bef1772414387b10:1932028713,ef6227c2af70ec1009f5faaf23a093be:1282268883,840fd7ced830ec108043f8092bd206f5:2024070210,d9dcdf06e930ec108d82502f0a59dff3:1527963938,69190fcea3fcac1067977c0633878efd:1706282203,3b61c7cafdfcac1067865cdf3d2e9342:1527963938,fe3b93f1b8b4ac101c4d9d052b195bad:1706282203,275bc7f58e74ac103a9dc4aa6bbb4e36:1628799004,3c86c731cb74ac10dc4912209726248d:1710239481,b014811227e0241053c316f8c50c840b:-2038794393,8f62c15e1ba02410d9d7db84eb1fb300:1467487879,1feef41e63a024101ec0d813b73dd9f1:29603083,d5f82d56bb64e010d6d9c30cc76a1432:1207511384,1eb6691a6b64e01004ee8fda70dae3e3:-698584641,599425968c64e01011efb56f339e08af:-1546385751,ccb8a84a30a0a010be3e8cabb28f20e2:1157381549,b9bd308260a7141009d1a45f65333aef:1883650057,ae4dfc423ba71410755cb0187edb18b6:-1504345741,84ac7082f5a7141033f36764a0cbfa04:-665294929,42ea740223a714100ee8f7300e1958a4:1011490111,c7f9fc02bca71410f23255dd2fadec75:1076727468,84293402e9a7141023bcea8a8a315394:378531725,922838ce1e6714101b2bc737f1d7cc95:746374128,cc46f48a026714106c4b63154c121488:-2093866599,3be470ca53671410c70373eabda272aa:-62248380,6a343c0e326714106af4676e2abcd309:-157584389,8dd1f0ca8e671410457e5f5bf6a34196:-1951128383,df91b48a7167141041ccae93473b4027:-1442617945,4090f84a8367141075e24a5cc8fc186a:2050462117,019fecc6c067141072f79593cd328328:-1831188795,787facc6e267141095a2fa898eab22f3:-218743293,58eee04a196714102fed89dcddcc4bc5:-1831188795,c39da40a5f671410bf7a7efc07465413:2048920037,39a6dc71c1e7d010d18e0169c755ea52:906781525,01a210fd70a7d01056a5355ec799143f:505886764,e302d4b9cfa7d010d107acb81f0e6d80:-1764571886,8370587d02a7d01037da4132ed10955e:2078562337,850c88b3a7d7d450242a3035b659c654:597391151,e44639ecb4d71c1063aca00e8a2cf4eb:-892405644,5c3c6928d4d71c105171f27959a3e2b4:2040406697,6a2b29e452d71c10c9b6c626159f1adf:404193919,f75a1c2cf2931c103b5419dd938fcab0:-1492400141,7375493dbfaa9050eb4055ce77b52673:1225862913,d03438bd7e6a9050267746c54d050d1b:-8613182,f7687716af14d010bcb3dc3d7f5255a5:1841950767,46efa875b8985010ad2d948d2c50ce80:1917529601,fdfe6cb52b985010fc4c97c57e5f6696:391584771,0aef32028a5814103f20b1da6538f7c6:-1054649825,2d41f51d98c49450008c80112298fa8d:7024653,3a0fe119cb849450bf9a6f99acb82c9d:-2063652868,c9ad2dd567c494503668444ff5f39e39:-1926451537,91ce64110880945028378435b33559b4:-419128519,756e2cdd4d409450eb98f96c1242652a:-726268620,626b6cd5804094502b6fddbca3bbbe78:1350530146,00eaa0115c4094503f974a1e6ed0283c:1097110424,aeaaa4153a4094502a868a18349e1d89:1072866694,ca62a859c700945099506bcc27cf92e6:1105396883,1de9a07f4a3b8c1080924c17a1acccee:-1473050218,8df8683b8e3b8c10235d6d8d92e6a943:-416441710,cf9e33eb90378c1037ac6db56c02befa:-1224839798,bf76f32b08f38c10d10c1fc4af1a8b85:1156754090,11a373a3a8f38c105212ca069ab67dad:-674292436,e1d177ef9ab38c10e01bcb24eb3ca703:478526910,61ecb8edbef3c010e0eba1d4d19aa376:-1705682866,852311e6e2230010745fac29bfba6d75:1018307385,6081fb01ded34010e3fc2b3f1c8d3ac9:681981532,31e0ff4105d34010ccc3f135f620b248:16326279,24ef234193d340106aff90c439e2e0e9:-1988975767,27cfaf012ad340107a0c037c1e1b3f1a:-1528290642,e54fa78d3e934010cf980a60a5a432ff:-1261945501,0b7d2f4daf9340100679e7a4d7f62205:108306278,fadca78d55934010f8f5145b83a714fa:-1722235142,363ceb4dbe934010e3ad284585ebbafe:1730098361,ef4967890a93401099a2d34620d270bc:6821147,3ddfd64d71db0010122d2bf85192c8c1:-185829358,e1de9e0d26db00108957f9579c60326c:-101961738,10bf8e4da39b0010e908e837057801e3:154883992,50a9d4385fd3001045f360f74dc4020a:1372376674,a7d814f491d300104b0899e0e507aaa5:805872783,fbbb3360ed5f0410688e9d2e798e78d5:2063878629,f54cebda5d4fc010b8505077f002b494:-1354894918,e276d419e3c70010a0df446941e8e443:-1214763492,f6e7c88a2c7e4010868929a9593f346d:-37487785,5a1db85ae16000106ebce4d45ef5fe78:-468448675,d564843aadbbf3007a09a34adcf81312:2134306854,2ebc7fee6d3bf300f6047d8b9c4c2949:-463460632,2397eb6948b333001f5e9b426982e8db:-1430333070,9b9b87d1b077330020578a6fe81eceb9:404727060,be52f4c95f2b3300175a1fa3c5cd42a1:-1241190103,28b5c2b00e63330004a1081af9a80ae5:-1014061663,c906858573df330050af5efb86a6464f:1416748225,6dea86f75172330010ef5f8bdfa564bb:195597801,6d1bb84c35b2330004e67592b96aab81:2101651716,4dcafc4c50b23300beed94d3d4e67ae9:-1274462870,789ab44c12b233005466861233c15aa5:-1097618369,5be9344c0db2330091e3f5ff46a55667:-1861443188,4659fc0cf5b23300e198857bcdddf091:1441827055,bbe5879ae3a2330038043fee8bec790c:1967914857,8c85ba1ebe623300f603b202b20e4824:-1245825130,ebe0365e87623300913d753ed7d89702:344087215,e298a6db2acff3004c51d146d6331c19:-352558727,da6a86b3a6723300395edec4c356b718:601796858,e9c463b511b233008dcab6efdd042a05:1396697269,73709df76d7633006d6c9f987ad87b00:240563474,19690d73bc763300c270f630fe3c62a4:1062521728,1f35f887258233000aa19fe78028382b:1388854173,ea253cc71d82330023ba1a8cc933652c:327979110,02e4f44762823300e09356ead0fa5b48:-1811692405,dfb370c736823300e983ef303f01b514:1388854173,54b3b88767823300aba696f0ad315d42:-273468163,67833447c8823300897b2db4f67aaa99:-682300393,eb065d009f0e3300fa77911fa5c1599d:1388854173,7283d104120a33009647acb2516f24f8:-1520857,8f9800097d1f3300bf88a72f79e2bceb:1990703629,74c9e6270c893300fe19e1421a433a34:344087215,2b99eee3c48933000713f06a20c9a609:445303032,5978a6a3fe89330096387f43539eae04:1542210748,adf722a3838933008f241867543b31cd:320182338,b41766a36d893300e3e2fbc39b268382:245319624,17c5a66326893300578b9b715e31256a:2128763330,e86566ef6a4933006f22e2b300d58bae:1141746189,c615e623c889330066507d26488846c2:-888239665,b3f46a23d68933000353fce10a876dca:999585783,93d46a23aa893300ae8c3095c71b0adf:-156386778,495b9e674a4933004ed85a7b14019c65:-1075560250,268ade67f7493300813cf1768cd324ab:1468239795,ba5112af16093300dbecd05e833c5b61:2025756305,3a0f822fac0933004b135db2b3060e04:1525564970,1ced82eb87093300cbc203fcdf827bcc:-1595414578,f30cc26b4a0933004f07d83343fa1a3e:-1841920116,fb954667ab093300d3228e896106645f:139672442,89714263d10933002764995614ee778a:-2047818780,783947d7ccb073009f7b9a289d845243:1664189231,5f2ce15b78bc330019c1251dbce2db99:1344231297,8c8c626e5f7833005f146d29009880b8:2048893628,67cbf8783430b300e0cf6eb80848396e:-183637656,d92aa4bc39fc7300ddf50098b1044c46:756771976,79201cf083bc73006e6188847af07bab:683982105,ab890ce464b0730075b92922ba008d3b:1890913806,e87980e48db0730055d55c279ef362d2:-2055294049,240580ece1707300239bbdc475446560:-1897943010,12c783458438330042985007636a30b3:1890913806,e7da35386ef0f30045d878d6d2467b7e:-1322583702,048c3944163033007ce5954103de6f3a:-1281797981,ede97d00cb30330037db91f69e20a6d2:1554116198,af1695f7f0a03300d9aa26f55bbe36be:1960442693,63a91973e9e033008ca1ca8c349b9fd0:827788452,49296a23085033004c28815ffecaa6b6:-44464157,74c8a62380503300fbf7a8741f16ac35:-837492737,9d70e34bf76c33008cf942a5df7b8de9:1669009267,87d69b83a06c330042b12e79012e8ebf:1983010569,67c657c30a6c3300feba6e17aa99f4f1:-2063810673,52e1e28b4da83300414d69d7b5da69c2:-843339734,5ca42676536033006e1450d3c431cf38:-1379735095,972ef5fed3c033002f04b7fd660f11d6:916214372,2bad4a53c52e6300949200b0b467c7e0:1289926590,67eae517c7aa63008d5f4aabbfb0f8a2:-1564236883,358d0ecb49a26300d3aa690585619951:1065150832,de140e4731a26300acbb850ae0d66447:-504486437,cd0e4c03b0ae23003a38fa08f0800ebd:-2112665817,3c91b07a5ca62300c60ae243592de180:1885335981,b7a077261c2623009110b85c0d7e57f6:240199054,f6b0ebd00ce223002b72eb45598e3833:-587797936,2d4cd39cf8a22300f2f5de9d038ba596:1159552271,84535b90fb2663008e74faa51946d5c0:817947824,75916acc3a66230082d51178c6f97c03:1483891257,99fd6d003fe22300bafbde99866909ef:-484971044,4b3a6d005ce2230035ed8ec2cf47b0c4:-1052171364,18a78d8c262223003ffa7e78914b8197:-484971044,2b9926ff058223002c8bb8125f154ca5:796385693,211b5277db822300a3ee96183503e821:472942619,8f999af3028223003a4046a92220fb02:-503582359,b29ac6776b422300d71ace5fbd006d53:31732372,d0623de3230623002733c8bd4a177f8e:-372205656,c2a1495bd782a30086b29ba9c9cc7c4f:1912644188,e95cb8938082a300ab069bc1400f4dda:1985826361,a3e39c1bed02a300c11af68991e3ae4f:167991996,b2301817a502a3005838bf32b8a758b1:-990520716,637761a1628a2300ff8d0078b953da1c:1688517324,a8e2e0ad1f06230089145ac71a53bed7:-1776621505,d8976159ecc223004ad254ff2c79c981:-1842019564,ed8970d1f8422300321da662a2b968ce:-97848339,29dcfcc967066b009a3858610083f71e:-1042701577,b24f680110066b00185c500e1a19d4de:1951309313,60f5ec494cc26b00556b49d1edbb536d:1891592437,f5309950408e2300740ce55e25eef619:-2060227712,f63ec110f38e2300adafa9339b24e002:810742891,7ead89dc254e230068662e8043188a9c:1136719629,d6da815cfd4e23004ea3f265eddf7a2b:-776447500,c5e349d0924e2300b2f2673f7e59316d:-549523885,f82d0e8c56862300f9d646448cd53a9a:866126304,301d5283e87523003448ccb4b988e599:-666693685,afeb1e434d75230008806ce877096361:253922448,07c3864f1ef123004c8f82c95e4d1b3e:-607216006,b83382cb24f123001a04ed3380b83fa6:1939680493,106ab9c7bef1230009502141c93898a8:-1666048103,3dcee98fcab12300c5aed6fc3061b722:-58668486,937e218f1eb12300e623e9d74ce493a8:-607216006,86bc61cb06b12300a1d6ce1dbf58c88b:-569454194,d0a91e07f0b9a3005b4269817e7e18f9:-1104963394,d0b6e1c362f5a300466dd1b345efe6da:992225794,45f4a1039cf5a300fefa76ecc6920ca0:-1136790922,5bad9dcb82b5a30025783ef4baa2348f:873845548,677a7faec039630023d03a479bc97558:1438022542,3e6a7fae4c3963006bc70b2aeed3b951:1302355598,737f12da12f9230017cfd0f7cf2cec38:1438022542,fd0431f11f75e300819956b957d0c1d8:-1614843276,8f88c57519f1e30032cd16d5f949c3fe:-1708585935,97b749fd57fd2300e0fd7c565308b068:862696279,92974d715c3163001543d85471f42df9:-379608796,2e77cd71b43163002a19ecb73e54efde:854484825,b47ef7edc13d23005468f7f185ed4d9c:-1587995975,e51ef3edea3d230043db7e7fce3b797a:1161824316,a77dff6d2a3d2300a740b15b7e288747:-606199214,7a2c732dd73d2300b24c984b837ff56c:-1025347161,1adffb156ef1230075f7e851ee4ae3c6:1241088169,5fa5bc6dfff5a30086193c6125c8e866:-754602674,6018a8d5836d2300d957e536e5a08c64:1786128469,002f110187652300c3ccf79fd27c3ddc:244504230,bce4a48501e1230012691220b880aa0c:-676849501,e7464ae801212300ae40b489254314bb:-77708988,32406d14722963008c76d6a26c36ad92:-1015307147,117bb543eed12300947a461f60646cb0:-1801119527,4216fd4fd79123007b8c6f028117403f:-1093476056,60a4cdcf62112300552423ab2aecb411:376767278,4de530ba45912300a90b840b65fac61d:381494677,e1424b56a75123000bdde251181f97ef:1741981683,9cd8f054a42d23000bb4ac24e1c1baf7:1731031146,3e98f410242d2300b5cc05fdaac488e1:-1100326519,3952a5fa6e952300560b977d79c58e0b:1727849333,2d3ed03233152300ee301914f1975060:1093139738,69182b5efb9d230049dd02f69eeb675a:820698938,23d72b5e509d2300d8e45d9218844f40:-498397573,3f77eb1ec29d23007dac6230dabe50fb:1746460774,4a342f5ab99d2300789741e24ee9f4fc:1570937844,f15f1f56b19d23000c863cb1d50c1697:1878383819,13447ed6741d230090969f346b3610fb:583572587,f77e3fe61ad12300d526fe1ddd30df69:1783218942,59e4875264152300a67a293efd0bddbe:-85140564,3e6b6612eed123003af199fb13803785:-2052516138,32ac688eb61d2300fa8c57c23fcedd3f:1586355424,c86ca08e4f1d2300c50fdf92f108640d:-1564394133,86abe80e431d2300279dba1e95e70ddd:-1770319341,4a9a600e501d23000540f6502e3c43e9:-641103501,c9e9280ece1d230021e93ead6f92b6e1:-182189005,1e49acca5c1d23009febb302fc45abd6:-1199287213,503920ca7a1d2300f26521753167f4d7:-1384747517,2cb86c4a701d23007ac317fe2d05536b:-1036576009,83956c4ad41d2300a0627e1b1cb1f763:895067125,8705e80a351d230090244b7565da2d22:-1517002870,2d179f2547112300083bdec5aed8d716:619773215,ec868cf97c512300e4a968dbc749d045:339057694,46ddb938c4d12300fa0005d8527a01eb:-530584369,697cfdb453d1230053fe2423b1efbe8f:617939878,cee8f4b0e4dd23009e7d64cf60c3dca0:-754938354,4e073cfcf29d2300bf5149956108dac3:1186470154,a1a534fc1a9d2300add3f80cafd222f8:1368592038,7b6534fc259d2300fca491e5e0a25a6d:-1971579545,d663b87cb59d2300846ef2c70e22c27a:-663801934,0643f83c099d230071278aa97e645704:-173218921,7933b0b86d9d2300811dca0446bfb299:-267801899,691ee0783b9d230079028fdaccad2598:735034123,f46554786d5d230070d150bd261ef15e:1929433413,fe4358349f5d2300edc8abf7812e377d:-593066623,8c015434ea5d230092b3900f6bf0e241:-1163449663,86fd0830d75d23001d12b554d2ac2558:-1751284441,69757b60bc1d2300000eca5130f5d7c5:-1772029879,af29be58771123002e6424df3a6bba11:-316090238,41c33ed0901123006cceabb949f4c600:831224956,d6a6917795cd23005f104d772b853f86:268008152,4c5070771e4d2300ce01a17ffe33909c:151205789,dcd2a227c0c5a300193c273ededccea7:40333851,9ef0e2e326c5a300d472157d00e4ce1e:56452773,1f3f1e638bc5a3009eea9ea80ea96eff:-1893247731,25ac11a7e88523007642c4635d2b6001:-915065046,1b7cdd67c38523001d0a29181f8122de:1001649820,664cd967e5852300e24ba755b2e62f31:-1378107027,4dbb196799852300f425cd24d3bf51a7:1129056810,1f5bd16724852300ce3f1e4494124ad9:-683076092,04fa1d2714852300d936f10dae5456eb:301120033,714755a3ce852300b25327aa96e76d1b:810830716,5cd9c9a74f452300c4904d9f7cf0c98b:-683076092,e4c398a3f1c12300d81b41b84f862e49:1234535235,a95354a3d8c12300df0b56605532303e:1739961597,1652146300c1230040aa7ffcbbee26b2:-510357201,15e114639dc12300fe6a692e482357ad:-1593936654,4321d4efa78123008eff1be4b522d199:-151142886,58de44afaa8123006894176fbc006807:1039072466,d6a970efbc052300159fbad5d7aadee9:382554143,74897c6fa8052300d5c8bdb0279a5659:-2095677452,2569bcaf9e0523003137d910f11458e6:593806146,35d7fc2fad0523003985f6bcc680d7ba:-1921525184,6797346fb00523006adbc1637fc9a408:-1554795412,2537fc2faf05230049da6bf3c1a543b5:-754857388,8be634abcb0523002962446fea483e73:-617809692,2a56b0ab9e0523008e8d4ba31010995c:718925376,7eaba8e3c4052300d238013ffb647002:1003504369,02b23f9ffb412300f840e6c9a2eaae15:1471106428,0092fb9f704123002c128187d875e2e8:1312140642,78a0bf5fa9412300bbd493677413a326:-383440449,3b7eeb1ff0412300e9a4798c23f70661:-648995161,fa3ea75b8d412300edd20469b7ccbf1b:51835091,6bac635b50412300bdadf0aec5163f6a:1091477255,735f73930041a300f6f8bb46ff326fa3:249568305,568f201b3c49630074a0e400c0aa7fc0:-1931523059,83cf07cf33456300855103455ae8ded5:-2070930081,84bf8b4ffb056300fe7d0617901a628b:1842252555,fd3fcf8f83456300dcbcc8f160d7967b:911212182,a07545eae545e3004f0fed9a9bacec69:194890797,91f9f4e24e45e30013307843f71ca846:1772564359,11da6c2a5505e300ce82207ed852c857:1395583904,d27204ee3181e300acf5ec2d18f22301:1213373881,22af7bcec4c12300934e9e143c07bca8:1584108704,2cccc7b54bc12300bb1bb95e051751ff:-518467077,9eadb63969812300396736d5128f2c0d:2141133413,d4bcdfb13b4523009eb7a6ada0a68c1b:1323389742,91e3573d56052300eb43dab606537f0d:-2009685848,b053fab509c1230055576b7cd0d4b7fc:-850130911,13777239d38123005cd8a3aed83bb194:-531617724,7617b2f57f812300e7c8affd884b042c:759044228,5a93b275e4812300127d43fbf82ade3f:-2106764558,f2423eb1f5812300d97042cf31edb4f2:-839528526,677136710c812300c22744101ea8ae21:553052209,38cf2ab1a2812300d574fe40923f8a08:849427136,c74c62710b81230009dd5f4cafb18280:1582422541,ed25ae39d54123006c9b4e7c5da69c93:1810348366,1daf9e39784123003efc709984d6098d:2125162294,5f6fdef542412300dab2737dd8f7b3a3:1149931353,e71fda39604123004c31f089c66cf260:-797722392,a2fd96f5ed412300e059b6bd5776f2ad:-1410515181,89cf3571eb012300ecdabb5481ce084a:-1455467242,35b121f9ed092300b98578bf102bcbcf:-2132334686,f3178e21e94123004c8a087ac0e02461:-393435071</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_bbb0915f37896300fdfc097973990eaf</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;&lt;sys_script action="INSERT_OR_UPDATE"&gt;&lt;abort_action&gt;false&lt;/abort_action&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;action_delete&gt;false&lt;/action_delete&gt;&lt;action_insert&gt;true&lt;/action_insert&gt;&lt;action_query&gt;false&lt;/action_query&gt;&lt;action_update&gt;true&lt;/action_update&gt;&lt;active&gt;true&lt;/active&gt;&lt;add_message&gt;false&lt;/add_message&gt;&lt;advanced&gt;true&lt;/advanced&gt;&lt;change_fields&gt;false&lt;/change_fields&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;collection&gt;x_nuta2_nutanix_ca_nutanix_process_queue&lt;/collection&gt;&lt;condition/&gt;&lt;description/&gt;&lt;execute_function&gt;false&lt;/execute_function&gt;&lt;filter_condition table="x_nuta2_nutanix_ca_nutanix_process_queue"&gt;state=ready^EQ&lt;item display_value="Ready" endquery="false" field="state" goto="false" newquery="false" operator="=" or="false" value="ready"/&gt;&lt;item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/&gt;&lt;/filter_condition&gt;&lt;is_rest&gt;false&lt;/is_rest&gt;&lt;message/&gt;&lt;name&gt;CALM Queue Post Insert BR&lt;/name&gt;&lt;order&gt;100&lt;/order&gt;&lt;priority&gt;100&lt;/priority&gt;&lt;rest_method/&gt;&lt;rest_method_text/&gt;&lt;rest_service/&gt;&lt;rest_service_text/&gt;&lt;rest_variables/&gt;&lt;role_conditions/&gt;&lt;script&gt;&lt;![CDATA[(function executeRule(current, previous /*null when async*/) {
	this.logger = new Nutanix_Calm_Logger();
	// Add your code here
	try{
		
		var topic = current.topic+'';		
		current.state = "processing";
		current.update();
		
		var call="";
		var callFunction ="";
		switch (topic) {
				
			case "startMigration" :                 call = new Migration_Script();
													callFunction = call.updateCatalog();
													current.comments = "Migration Completed.";
													current.state = "complete";
													break;
				
			case "startMigration_1_4_5": 	        var appUtil = new Migration_Script();
													appUtil.updateTheFetchOnChangeClientScripts();
													current.comments = "V_1_4_5_Migration Completed.";
													current.state = "complete";
													break;
				
			case "startMigration_1_4_4" :           var appUtil = new Migration_Script();
													appUtil.addEnvironmentVariableToAllCatalogs();
													current.comments = "V_1_4_4Migration Completed.";
													current.state = "complete";
													
													break;
				
			
				
			case "start1_4_3_Migration" :           var appUtil = new Nutanix_Calm_Utils();
													appUtil.migrateV1_4_3();
													current.comments = "V_1_4_3Migration Completed.";
													current.state = "complete";
													
													break;
				
			case "startInventorySync" :             call = new Nutanix_ImportUsers();
													call.startUsersImport();
				
													call = new Nutanix_ImportUsers();
													call.startGroupsImport();

													call = new Nutanix_Import_Subnets();
													call.startSubnetImport();
				
													call = new Nutanix_ImportProjects();
													call.startImportProjects();

													//call = new Nutanix_Categories();
													//call.importCategoryData();

													call = new Nutanix_ImportBlueprints();
													call.startImportBlueprints();

													call = new Nutanix_Import_Marketplace_Items();
													call.startImportMPI();

													call = new NutanixAppIntermediateDao();
													call.startAppImport();
													call.startDeletedAppImport();
				
				                                    current.comments = "Imports Started.";
													current.state = "complete";				
													
													break;
				
			case "ProcessApplicationProfiles" :     call = new Nutanix_ImportApplicationProfiles();
													callFunction = call.processApplicationProfiles(current);													
				                                    current.comments = "Application Profiles processed";
													current.state = "complete";
				
													current.process_name = 'Process application profiles';			
													current.description = 'This process invokes the import of application profiles.';
													break;				
				
				
			case "importApplications" :             call = new NutanixAppIntermediateDao();
													call.importApplications(current);
				                                    current.comments = "Aplications imported";
				                                    current.state = "complete";
				
													break;		
				
			case "processImportedApp" :             call = new NutanixAppIntermediateDao();
				                                    current.comments = "Imported Applications processed";
													call.processImportedApp(current);													
				                                    current.state = "complete";
				
													break;	
				
			case "importDeletedApplications" :      call = new NutanixAppIntermediateDao();
													call.importDeletedApplications(current);
				                                    current.comments = "Deleted Aplications imported";
				                                    current.state = "complete";
				
													break;		
						
			
			case "importProjectData" :              call = new Nutanix_ImportProjects();
													callFunction = call.importProjectData(current);
													current.comments = "Projects imported";
													current.state = "complete";
				
													break;
				
			case "processImportProjectData" :       call = new Nutanix_ImportProjects();
													current.comments = "Imported Projects processed";
													callFunction = call.processImportProjectData(current);
													current.state = "complete";
				
													break;
				
			case "importBlueprintDataByUUID" :      call = new Nutanix_ImportBlueprints();
													callFunction = call.importBlueprintDataByUUID(current);
													current.comments = "Blueprint details imported";
													current.state = "complete";
				
													break;
				
			case "processImportBlueprintData" :     call = new Nutanix_ImportBlueprints();
													current.comments = "Imported Blueprint processed";
													callFunction = call.processImportBlueprintData(current);
													current.state = "complete";
				
													break;
			case "importMPIData" :                  call = new Nutanix_Import_Marketplace_Items();
													callFunction = call.importMPIData(current);
													current.comments = "MarketplaceItem imported";
													current.state = "complete";
				
													break;
				
			case "processImportMPIData" :           call = new Nutanix_Import_Marketplace_Items();
													current.comments = "Imported MarketplaceItem processed";
													callFunction = call.processImportMPIData(current);
													current.state = "complete";
				
													break;
				
			/*case "createUserCriteria" :             call = new Nutanix_ImportBlueprints();
													current.comments = "Adding User Criteria.";
													callFunction = call.createUserCriteria(current);
													current.state = "complete";
													break;*/
				
			case "MapCatItemToProject" :            if(current.payload != "") {
														call = new Nutanix_ImportProjects();
														current.comments = "Mapping Catalog Items to Projects";
														callFunction = call.MapCatItemToProject(current);
														current.state = "complete";
				
														break;
													}
													else{
														current.comments = "No Project reference list for SysId:"+current.parameter;
														current.state = "complete";
														break;
													}
				
			case "ProcessingCredentials" :           call = new Nutanix_ImportCredentials();
													 current.comments = "Imported Credentials processed";
													 callFunction = call.ProcessingCredentials(current);
													 current.state = "complete";
				
													 break;
												
			case "processCatalogVariables" :        call = new Nutanix_CreateCatalogVariables();
													callFunction = call.processCatalogVariables(current);
													current.comments = "Blueprint/MPI variables created.";
													current.state = "complete";
				
													break;
				
			case "processingIcon" :                 call = new Nutanix_Import_Marketplace_Items();
													callFunction = call.processingIcon(current);
													current.comments = "Imported MarketplaceItem Icons processed.";
													current.state = "complete";
				
													break; 
				
			case "startImportEnvironment":          call = new Nutanix_ImportEnvironment();
													callFunction = call.startImportEnvironment(current);
													current.comments = "Import of environments";
													current.state = "complete";
				
													break; 
				
			case "processImportedEnvironment" :     call = new Nutanix_ImportEnvironment();
													callFunction = call.processImportedEnvironment(current);
													current.comments = "Processing of environment";
													current.state = "complete";
				
													break; 
				
			case "processEnvCredentials" :          call = new Nutanix_ImportCredentials();
													callFunction = call.processEnvCredentials(current);
													current.comments = "Processing of environment credentials";
													current.state = "complete";
				
													break;
				
			case "importUsers" :                    call = new Nutanix_ImportUsers();
													callFunction = call.importUsers(current);
													current.comments = "Updates the UUID of imported users to those of calm";
													current.state = "complete";
				
													break;
				
			case "importGroups" :                    call = new Nutanix_ImportUsers();
													callFunction = call.importGroups(current);
													current.comments = "Updates the UUID of imported groups to those of calm";
													current.state = "complete";
				
													break;
				
			case "processProviders" :               call = new Nutanix_ProcessProviders();
													callFunction = call.processProviders(current);
													current.comments = "Processing of environment providers";
													current.state = "complete";
				
													break;   
				
// 			case "processAWStorage" :               call = new Nutanix_ProcessProviders();
// 													callFunction = call.processAWStorage(current);
// 													current.comments = "Processing of AWS storage";
// 													current.state = "complete";
				
// 													break;   
				
// 			case "processTags" :                    call = new Nutanix_ProcessProviders();
// 													callFunction = call.processTags(current);
// 													current.comments = "Processing of Tags";
// 													current.state = "complete";
				
// 													break;    
// 			case "processBlankDisk" :               call = new Nutanix_ProcessProviders();
// 													callFunction = call.processBlankDisk(current);
// 													current.comments = "Processing of BlankDisk";
// 													current.state = "complete";
				
// 													break;    
// 			case "processNetworkInterfaces" :       call = new Nutanix_ProcessProviders();
// 													callFunction = call.processNetworkInterfaces(current);
// 													current.comments = "Processing of NetworkInterfaces";
// 													current.state = "complete";
				
// 													break;  
				
// 			case "processDisks" :                   call = new Nutanix_ProcessProviders();
// 													callFunction = call.processDisks(current);
// 													current.comments = "Processing of Disks";
// 													current.state = "complete";
				
// 													break; 
				
// 			case "processOSProfile" :               call = new Nutanix_ProcessProviders();
// 													callFunction = call.processOSProfile(current);
// 													current.comments = "Processing of OS Profile";
// 													current.state = "complete";
				
// 													break;    
				
// 			case "processNetworkProfiles" :         call = new Nutanix_ProcessProviders();
// 													callFunction = call.processNetworkProfiles(current);
// 													current.comments = "Processing of Network Profiles";
// 													current.state = "complete";
				
// 													break; 
			
// 			case "processDataDisk" :                call = new Nutanix_ProcessProviders();
// 													callFunction = call.processDataDisk(current);
// 													current.comments = "Processing of Data Disk";
// 													current.state = "complete";
				
// 													break; 
			
// 			case "processNutanixDisk" :             call = new Nutanix_ProcessProviders();
// 													callFunction = call.processNutanixDisk(current);
// 													current.comments = "Processing of Nutanix Disks.";
// 													current.state = "complete";
// 													break;
				
			case "processSubnets" :                 call = new Nutanix_Import_Subnets();
													callFunction = call.processSubnets(current);
													current.comments = "Processing of Subnets.";
													current.state = "complete";
				
													break;
				
			case "importRecoveryPoints" :           call = new Nutanix_ImportRecoveryPoints();
													callFunction = call.importRecoveryPoints(current);
													current.comments = "Import of Recovery Points.";
													current.state = "complete";
				
													break;
				
			case "processAhvRecoveryPoints" :       call = new Nutanix_ImportRecoveryPoints();
													callFunction = call.processAhvRecoveryPoints(current);
													current.comments = "Processing of AHV Recovery Points.";
													current.state = "complete";
				
													break;
				
			case "processAwsRecoveryPoints" :       call = new Nutanix_ImportRecoveryPoints();
													callFunction = call.processAwsRecoveryPoints(current);
													current.comments = "Processing of AMIs.";
													current.state = "complete";
				
													break;	
			
			case "processVmwareRecoveryPoints" :    call = new Nutanix_ImportRecoveryPoints();
													callFunction = call.processVmwareRecoveryPoints(current);
													current.comments = "Processing of VMWare Recovery Points.";
													current.state = "complete";
				
													break;	
				
			case "startInventoryDelete" :           call = new Delete_Inventory();
													call.deleteInventory();
													current.comments = "Starts the deletion of calm snow data.";
													current.state = "complete";
													gs.setProperty('x_nuta2_nutanix_ca.Delete_Flag','0');
													this.logger.info("Inventory deletion has successfully completed.");
													break; 
				
			default :                               this.logger.error("Method :: "+topic+" not found inside CALM Queue Post Insert BR.");
													break;
				
		}
		
	}catch(e) {
		current.state = "error";
		current.comments = "Exception caught inside CALM Queue Post Insert BR : "+e; 
		this.logger.error("Exception caught inside CALM Queue Post Insert BR : "+e);
		
	}finally{
		current.update();
		this.logger.info("CALM Queue Post Insert BR ran sucessfully");
	}

})(current, previous);]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-14 19:58:34&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;bbb0915f37896300fdfc097973990eaf&lt;/sys_id&gt;&lt;sys_mod_count&gt;82&lt;/sys_mod_count&gt;&lt;sys_name&gt;CALM Queue Post Insert BR&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_bbb0915f37896300fdfc097973990eaf&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-07-07 13:01:24&lt;/sys_updated_on&gt;&lt;template/&gt;&lt;when&gt;async&lt;/when&gt;&lt;/sys_script&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=bbb0915f37896300fdfc097973990eaf"/&gt;&lt;/record_update&gt;</payload>
<payload_hash>1546574397</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.4.5 Complete Build">346d737d1bb0011081326464604bcb11</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-01-03 07:26:35</sys_created_on>
<sys_id>f86d737d1bb0011081326464604bcb12</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17e1ed138700000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-01-03 07:26:35</sys_updated_on>
<table>x_nuta2_nutanix_ca_nutanix_process_queue</table>
<target_name>CALM Queue Post Insert BR</target_name>
<type>Business Rule</type>
<update_domain>global</update_domain>
<update_guid>9adbc28873d530102de45d6ad1a27ece</update_guid>
<update_guid_history>9adbc28873d530102de45d6ad1a27ece:1546574397,36aefca7bb09b4104f26ad7704ac79d8:1027236733,3c3f3315a3453010faab3d493d4951a1:-1087638242,e71998a4b60ba41034a118ff5a8e5651:-1786798839,623a85d3b781601016e92fb35dc699f8:850604808,fad1a024a013501032408c827ab59a01:-860939647,566a6c7be3219410dbbead8ca62ff506:1555223931,6dc9283bfc21941033f1b5864d1d4ec2:810007801,a1fe59c64c255010bd664dca27b981a6:810007801,2dd3a5adab3944103b4409a210808b90:1442195893,072da9eac73bb300ba488f9282721c28:1828341754,b5a5818575df330064cc8be698d53c84:-1264698420,0ae9a550edb2330083ac781245d72418:-1790012302,ca99f6de7b623300810be0bba9d52cc0:347639304,65aa86330a3a3300394108f0158f806a:-218226572,ff131311ffa23300901b0b72d7ba7560:182684174,5aeb611b15bc3300b435a8e4e3d31175:2058851827,f6790cdac2e033007dc047d33e0acdf6:1329591928,6f2572e34e143300a219428e0d6cdf12:-1560476379,23d0fe6ba5d033002a9730c6a1b597b6:-298398622,7f41802c095033006cfb04bc310016bf:-1808920150,eb64f1c3840c3300b58be800684825d8:-1082137276,e332b54fb0c833004eea7a624cfec946:-2046263791,373231c120832300baa39ec469345073:-957216339,bde079cd924323002aceaca4fa18eb40:-831597633,36e5e2447f322300ad16271df493a507:-146187127,faaaa5933faa63002138751fe281ba61:864117116,8b9dca8bcaa26300161c0d5a0fc06b47:-117261664,ad26380b71ee23000794f68dc71f9f99:-960480305,f220b32636262300b19720b55e3fbfd5:-256310908,ae10b326ee26230094d58cb6ecf00fce:-1648393065,bcff6326172623005f7ce39bba763d12:1079254834,522563ae76e223007bc54dd706d17880:977754310,c34fdc86dda26300db8df302509e9f82:794859114,4e355d8cc662230032aa216cf016d33f:-1497518300,d371d1880b6223005550ea114a9b2838:-56043395,674a490402622300cc98dc2eb301a13c:-1456565443,f183113dd4122300d6929e92d60ce594:-1651936013,6c1b8d1068522300b0cd1b1d0f8ba992:923013573,e896541f9d02a3007e1a8ae3c8c1eac2:-1408485879,48151c5bde02a30013fb51a54999f2d2:-494754017,23a6ddcd91466b0059c15a7fcc2c6da0:-936893512,0e848941d8466b00634093d4a600b5ef:1063480246,7764494153466b00bbd24126f39a3da0:-175139695,aaec3cc956066b008408246d162573dc:2130389375,dd04644989c26b00f09ef8706f818400:-1294107837,b7e8adc717f5a300fbc71e061366abfd:2029954177,f8ab741e0ff5230052cd48b7d5b0655d:-1874103587,76a465394635e300ea845393180b83f9:54423497,0cc40db16ef1e3007f961be3efcdcd7f:1280628513,1defe0a910f5a300b828d67214b241be:-662906672,2c0ee4e50cf5a3008765e45f25dacf76:-1450709752,b07724e1c4f5a3002956ea81facbb776:-1529791267,94ee5f0187b9630090f940471cfff6de:-1162330319,138e570154b96300d69ddbfec5c20494:1533409521,c015e4554e6d2300f651b69bb1a8c8cc:-148526255,f4041b28c32523003de907be98b7ab1f:1784191909,88ebda3765152300d7aaa6f973f16827:1836702593,5e5b5a37c81523006cf79b390043662c:-905503957,5cb5bc4fe05123005424628ebeb4aa27:-2141048635,f967ccc3c2112300f0042e4a11e8a592:-279721595,92f38843351123009dbef46787a137fb:237522898,84a3213e979523005430521238d53412:-1445107717,d38559b273952300a5ea3b920f6857ab:1269245409,ff2845ba0a552300110193f58d36ad91:1753065237,8a91c47ede9123009978778665e3f706:996518732,3d0a7be67d91230011625b289c3f7bdd:-129430740,4ac9f3e6999123008b22c910895032bc:1810600742,2ea97be68391230020a3722b45a1b1d3:53090790,a1f83f660f9123005cc457e3aca10a9f:-559054214,e8e8ff663c912300cb3d49e9d9d47f61:1336326260,78fa8be6e7112300a803b0e766a363f6:7505214,07d717927f9d2300dbfdea8c98ac472b:-429338116,aae18c7a2ad1230000a18e692b7ecdd1:-1373919756,b35ff7e63fd12300a1be23ee7265877a:-1120294527,db13ff66469123001f1f82f21e4dee96:350511550,e936ef667a9123003153d10f3932ff0f:396412953,2fe607620b512300d44964d0aafe890c:604204092,2dce5756ac55230029c24c930f4d6ceb:-1593874500,e45e9792715523006846a6ded6c483a4:190119948,75d6531278552300f50b3d075b82ca69:2023833913,609c0f96481523000ff28285411be7a4:234303908,74cbc39642152300e1eb38d8f6bc6e85:448758465,0c3bc35655152300c9b979bec4612d4b:1417140707,993a8bd299152300b985f39505e4e97e:-396633100,62a84bd2ca15230063aa7c0b8c0a349f:1062555803,850ffe1e4bd12300b7dfb7e1bfda5e0d:2126984610,cf9a1608b451230017a907bb61523936:-868424183,b8dccd2b5a4523000669646534f2bdf1:360327139,be5b416b10452300a5707f7bfd346df9:-702058998,7e72615b28c96300600a575a54685303:980471509,554fd59727c96300f2ff10e8d12ffa8d:213021568,6f1f5597bcc96300b0639a63798eac53:1147603682,7fae9d57f7c963009ae232f26b6a4860:-1194791625,9372519ffc896300075f5bebdbd6619c:131003476,1c42d55f318963006dd01eb3259dfd5c:-1921484377</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_app_module_1798dae54f41230065e48020a310c763</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_app_module"><sys_app_module action="INSERT_OR_UPDATE"><active>true</active><application display_value="Nutanix Calm">7776fd254f452b001200e5201310c714</application><assessment/><device_type/><filter/><hint>All Application logs</hint><homepage/><image/><link_type>LIST</link_type><map_page/><mobile_title>Logs</mobile_title><mobile_view_name>Mobile</mobile_view_name><name>syslog_app_scope</name><order>805</order><override_menu_roles>false</override_menu_roles><query>&amp;sysparm_fixed_query=sys_scope=3b7631654f452b001200e5201310c76b</query><report/><roles>admin,x_nuta2_nutanix_ca.calm_admin</roles><sys_class_name>sys_app_module</sys_class_name><sys_created_by>nitin</sys_created_by><sys_created_on>2018-10-09 14:37:35</sys_created_on><sys_domain>global</sys_domain><sys_domain_path>/</sys_domain_path><sys_id>1798dae54f41230065e48020a310c763</sys_id><sys_mod_count>20</sys_mod_count><sys_name>All</sys_name><sys_overrides/><sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_app_module_1798dae54f41230065e48020a310c763</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2021-08-05 12:52:52</sys_updated_on><timeline_page/><title>All</title><uncancelable>false</uncancelable><view_name/><window_name/></sys_app_module></record_update>]]></payload>
<payload_hash>174425111</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.4.5 Complete Build">346d737d1bb0011081326464604bcb11</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-01-03 07:26:35</sys_created_on>
<sys_id>fc6d737d1bb0011081326464604bcb11</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17e1ed24d880000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-01-03 07:26:35</sys_updated_on>
<table>syslog_app_scope</table>
<target_name>All</target_name>
<type>Module</type>
<update_domain>global</update_domain>
<update_guid>40002399af3130109034e886ff9c2a8e</update_guid>
<update_guid_history>40002399af3130109034e886ff9c2a8e:174425111,8a9022f377866300df9591907d3861b3:828355049,36354d447fc223008e1d00f5ad7ece92:-587501990,b12245041ec22300f5a573d3ca704140:-1937022047,551249c067c223003221a445f926e5f7:654953813,6c020dc0f2c2230062d1811b28fa693b:-702336573,76e18dc0c8c223000b90951284e78c14:-1105433588,aba18dc07dc2230001780797f599b9cb:-1732235979,502145c0a2c223009823f06b4ac24247:-811385135,d51185c090c2230062422ed6cad0f800:624415326,852a1884754223009c36e27a4b9a04ae:-67957829,aa565f270c716700e0d04d66f0e9a9cd:1111643356,2a9f4bdbc539e300477ad211dcc8dfa6:-1725343837,94ddc5bf9e8d23002ee917e756745009:1580473040,b830fc377a4d2300d937efa81f5bfbfa:310187178,feff2c37fa4d2300f2ef455224fe3c31:-1829851731,d549adef0405a30019d4dee6d9cf3fb6:1378981964,bbdb16ca37c16300ea222f447d36b38d:-1829851731,3b099ae57641230064956a0b3da1915e:1957037414,b2e8dee52e412300d002212afcfb7771:-1392497658,b9d8dea52141230000b4d5bf9c01486f:-963142072</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_ui_action_9342931e37152300d27b8cf6c3990e64</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_ui_action"&gt;&lt;sys_ui_action action="INSERT_OR_UPDATE"&gt;&lt;action_name&gt;nutanix_sync&lt;/action_name&gt;&lt;active&gt;true&lt;/active&gt;&lt;client&gt;true&lt;/client&gt;&lt;client_script_v2&gt;&lt;![CDATA[function onClick(g_form) {

}]]&gt;&lt;/client_script_v2&gt;&lt;comments/&gt;&lt;condition&gt;gs.getProperty('x_nuta2_nutanix_ca.calm_version')!=''&amp;amp;&amp;amp;(new Nutanix_ClientServerScriptBridge().checkQueue())&amp;amp;&amp;amp;gs.getProperty('x_nuta2_nutanix_ca.check.authentication')=='true'&lt;/condition&gt;&lt;form_action&gt;true&lt;/form_action&gt;&lt;form_button&gt;true&lt;/form_button&gt;&lt;form_button_v2&gt;false&lt;/form_button_v2&gt;&lt;form_context_menu&gt;true&lt;/form_context_menu&gt;&lt;form_link&gt;true&lt;/form_link&gt;&lt;form_menu_button_v2&gt;false&lt;/form_menu_button_v2&gt;&lt;form_style/&gt;&lt;hint/&gt;&lt;isolate_script&gt;false&lt;/isolate_script&gt;&lt;list_action&gt;false&lt;/list_action&gt;&lt;list_banner_button&gt;false&lt;/list_banner_button&gt;&lt;list_button&gt;false&lt;/list_button&gt;&lt;list_choice&gt;false&lt;/list_choice&gt;&lt;list_context_menu&gt;false&lt;/list_context_menu&gt;&lt;list_link&gt;false&lt;/list_link&gt;&lt;list_save_with_form_button&gt;false&lt;/list_save_with_form_button&gt;&lt;list_style/&gt;&lt;messages/&gt;&lt;name&gt;Sync Now&lt;/name&gt;&lt;onclick&gt;syncConfirmation()&lt;/onclick&gt;&lt;order&gt;100&lt;/order&gt;&lt;script&gt;&lt;![CDATA[//Client-side 'onclick' function
function syncConfirmation() { 
	var delConfirm = confirm("This will sync the complete inventory of Calm entities in ServiceNow. Launching Blueprints, Catalog and performing Day 2 actions will not be possible during this process. Do you really want to continue?");
	if(delConfirm) {
		importApp();
	}
	else
		return false;
} //function for pop up message
function importApp(){
	var href = parent.location.toString();
	if(href.indexOf("nav_to.do?uri=%2F") &gt;= 0){
		parent.location = "/nav_to.do?uri=%2Fx_nuta2_nutanix_ca_nutanix_process_queue_list.do%3Fsysparm_userpref_module%3D91e0175a37152300d27b8cf6c3990e07%26sysparm_query%3Dstate!%3Dcomplete%5EEQ%26sysparm_clear_stack%3Dtrue";
		
	} else{
		parent.location = "/x_nuta2_nutanix_ca_nutanix_process_queue_list.do?sysparm_userpref_module=91e0175a37152300d27b8cf6c3990e07&amp;sysparm_query=state!=complete^EQ&amp;sysparm_clear_stack=true";
		
	}
	gsftSubmit(null, g_form.getFormElement(), 'nutanix_sync');
}

if(typeof window == 'undefined')
	runScriptIncludeCode();


function runScriptIncludeCode(){
	updateCalmVersion();
	
	if(new x_nuta2_nutanix_ca.Migration_Script().checkForTheRuntimeConfigurationsCatalogItems()){
		var appUtil = new Nutanix_Calm_Utils();
		appUtil.insertIntoQueue('startMigration_1_4_5', '', '', '', 'Migrating to v1.4.5', 'This process is migrating v1.4.4 to v1.4.5');
	}
	if(new x_nuta2_nutanix_ca.Migration_Script().isCatalogItemsAvailable()){
		var appUtil = new Nutanix_Calm_Utils();
		appUtil.insertIntoQueue('startMigration_1_4_4', '', '', '', 'Migrating to v1.4.4', 'This process is migrating v1.4 to v1.4.4');
	}
	if(new x_nuta2_nutanix_ca.Migration_Script().isMigrationNeeded()){
		var appUtil = new Nutanix_Calm_Utils();
		appUtil.insertIntoQueue('startMigration', '', '', '', 'Migrating to v1.4', 'This process is migrating v1.3 to v1.4.');
	}
	if(gs.getProperty('x_nuta2_nutanix_ca.1_4_3') == 0){
		var appUtil = new Nutanix_Calm_Utils();
		appUtil.insertIntoQueue('start1_4_3_Migration', '', '', '', 'Migrating to v1.4', 'This process is migrating v1.3 to v1.4.');	
	}
	else{
		var appUtil = new Nutanix_Calm_Utils();
		appUtil.insertIntoQueue('startInventorySync', '', '', '', 'Start inventory sync', 'This process is invoking the import of all the inventories.');
	}
	
}
function updateCalmVersion(){
	var previous_calm_vesrsion = parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version'));
	var new_calm_version ;
	gs.setProperty('x_nuta2_nutanix_ca.calm_version', '');
	var logger = new Nutanix_Calm_Logger();
    var utils = new Nutanix_Calm_Utils();

    var authResp = utils.makeCalmApiCall("post", "/projects/list", '{"kind" : "project"}');
    var statusCode = authResp.getStatusCode();
   
    if (authResp.getStatusCode() == '200' || authResp.getStatusCode() == '201') {

        var verResp = utils.makeCalmApiVersionCall("get", "/apps/version", '');
        if (verResp.getStatusCode() == '200' || verResp.getStatusCode() == '201') {
            var response = verResp.getBody();
			
				new_calm_version = parseFloat(response.split('.')[0] + '.' + response.split('.')[1]);
			    if((parseFloat(new_calm_version) == parseFloat("3.2")) &amp;&amp; (parseFloat(new_calm_version) &gt; parseFloat(previous_calm_vesrsion))){
					   gs.setProperty('x_nuta2_nutanix_ca.1_4_4', '0');
				}
			
            current.calm_version = response.split('.')[0] + '.' + response.split('.')[1];
            gs.setProperty('x_nuta2_nutanix_ca.calm_version', current.calm_version);    
            current.update();
			logger.info('Sync Now Calm Version updated-&gt;' + current.calm_version);
        } else {
            current.calm_version = '';
            current.update();

            gs.addErrorMessage('Nutanix Calm Version cannot be detected.Please check the logs and retry saving properties.');
            logger.error('Calm Version cannot be detected. Error-&gt;' + verResp.getBody());
        }
}
}
]]&gt;&lt;/script&gt;&lt;show_insert&gt;true&lt;/show_insert&gt;&lt;show_multiple_update&gt;false&lt;/show_multiple_update&gt;&lt;show_query&gt;false&lt;/show_query&gt;&lt;show_update&gt;true&lt;/show_update&gt;&lt;sys_class_name&gt;sys_ui_action&lt;/sys_class_name&gt;&lt;sys_created_by&gt;mumtaz.ansari&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-24 13:00:55&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;9342931e37152300d27b8cf6c3990e64&lt;/sys_id&gt;&lt;sys_mod_count&gt;452&lt;/sys_mod_count&gt;&lt;sys_name&gt;Sync Now&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_action_9342931e37152300d27b8cf6c3990e64&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-07-07 12:55:27&lt;/sys_updated_on&gt;&lt;table&gt;x_nuta2_nutanix_ca_calm_plugin_configuration&lt;/table&gt;&lt;ui11_compatible&gt;true&lt;/ui11_compatible&gt;&lt;ui16_compatible&gt;false&lt;/ui16_compatible&gt;&lt;/sys_ui_action&gt;&lt;/record_update&gt;</payload>
<payload_hash>1782239378</payload_hash>
<remote_update_set display_value="Nutanix Calm v1.4.5 Complete Build">346d737d1bb0011081326464604bcb11</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-01-03 07:26:35</sys_created_on>
<sys_id>fc6d737d1bb0011081326464604bcb14</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>17e1ed138590000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2022-01-03 07:26:35</sys_updated_on>
<table>x_nuta2_nutanix_ca_calm_plugin_configuration</table>
<target_name>Sync Now</target_name>
<type>UI Action</type>
<update_domain>global</update_domain>
<update_guid>477a86c446d53010d4b4e9c09df8b820</update_guid>
<update_guid_history>477a86c446d53010d4b4e9c09df8b820:1782239378,b39efca78009b410ff80f46aa731a367:-332454607,21c0a2c6c381b0109409e98db61ca9ae:206239443,f890ae86ff81b010f191b5e5f8902d55:-640971994,4b6c7f95a9c13010dafb8c3b9f326f91:206239443,e507738534c13010933c5203d4ef594e:-1553726957,b5a67b45bcc1301037e2968956916c49:-826934170,725330e395053010cb5beeededee244b:-1553726957,3fc2f4a3e9053010f6ec3188650b22ca:-826934170,fdc4ea42905328505bc20d67b3301b6f:-1553726957,ea37130616032c10670fca5e75c219f0:-1779884368,b0559b8231032c10af5e18bc3bd3f9e3:-1914797187,790c556191832810c8fd00ec48239bc4:-1779884368,b9ba15213f832810bca47c39f4d7f63b:-1914797187,45cd6d8c08cbe01083fc0b81b83495f3:-2085355847,da4f1d04ffcbe01019c30320d6928914:-2081461940,ec8576ef49fe6010f288100cedc4df98:-2085355847,0d453eaf44fe60107f1e3e65b5f0a093:-2081461940,481df9dbf5b22010079a9247172aadbb:-2085355847,b0d2fdd3cbb220104a0faabaa21ecb9b:-2081461940,7662955b343220108b468af7a4230b54:-2085355847,98a1591bb4322010035ba2f0befdfb47:-2081461940,5762239ef2be6450815f03ef2a43d583:-2085355847,05af179a9ebe6450eb71186fd4b77f3b:-2081461940,1e6af61a22ba6450f18c4a6edd8fc6f5:-2085355847,07cbaa9e927a64504df8fa89013e49ea:-2081461940,6cb33d06257a24503eb36f4dbc90e2a3:-2085355847,9bca654ebf3a2450f40150113e54fe79:-2081461940,f17694f9e1faa050bc825fef0101dce7:-2085355847,aeea44b111faa05083ffcd9d19e1a544:-2081461940,1eea80b1f6faa05065fbe85609255bbd:-2085355847,116a8c716efaa0506587c72d7e7788a2:-2081461940,d1881fd1b6fa6050c248c7395aa5863c:-2085355847,043817d130fa6050eddb085109e864d4:-2081461940,7bca83513e3a6050b9887f87e83ce650:-2085355847,38f9c711e83a6050aafa60bb9efc324d:-2081461940,88e94711bd3a60503855a0104a616427:-2085355847,1ed10b9912f66050da1305bcb15f2967:-2081461940,757bf219cfb66050e0d21c4ad9e53297:-2085355847,6b93ba9129b660505a4140b27fcb161e:-2081461940,3c07924505b6205023c665c804bd8448:-2085355847,86661a05c8b620502a1d861e6716320e:-2081461940,07e1d2c51e7620501380406c4efcaf96:-2085355847,fdfdc281573620502b6534dc687a481c:-2081461940,7387fd09a9beec10d8624eb62cccedfe:-2085355847,2f27f50932beec1094428ca4844e59ef:-2081461940,133d24b0e33eac10428426e36f65bd25:-2085355847,749c68705a3eac1078167dda1b95a297:-2081461940,cd1e9c60257e6c10ad36c02136aea606:-2085355847,6e41d4e4d33e6c1008c8d9fe6be3055b:-2081461940,d36561b77faae810619d1a9a6a356445:-2085355847,ccf42977adaae81060c16ab2726dd3ac:-2081461940,1aac2caf902ea81061daeaa6b10e09bf:-2085355847,359bc85fb622a8106b69a2c053d47d69:-2081461940,3c97ae8b4322681044e08a048d989de7:-2085355847,dd472a8b272268100a6def77e830eb73:-2081461940,123c677e23262810e9692fa1fa56fe8d:-2085355847,d19aeffaec2628104f413e4e12bac3e1:-2081461940,19e5d6fecee2e410bc87932e60bd1285:-2085355847,22de8aba04e2e410644b0457ac020eaa:-2081461940,4ca129fe582ea410116e9b8fb57d2ccd:-2085355847,395125fe602ea410d8a325d14b5aac51:-2081461940,30a3330e482e2410dc3e6f4f17670828:-2085355847,3471f30ec42e24101bbba605840cb064:-2081461940,2e90a6658ea22010aaa5a5b9a43d5793:-2085355847,6e40ee2550a2201018bc37bd9aefbe95:-2081461940,d3c352ecd04fa410a263030ea6cfd31e:-1779884368,9843d2ec0b4fa410af7f964f15aa4954:-1923024751,52c51614f783a41023254827a70c4021:-1779884368,a0702d58d80f6410e02fabfd0c526d99:-2085355847,ffbdd594c10f64107850056dab06d1bb:-2081461940,b6a5b890e7476410ede021f8ad338ffd:-2085355847,2ee4bc5043476410dd05b2743a11edd6:-2081461940,4733b810f14764102786ead6130f43f6:-2085355847,8be27410924764104de1c61b968143ac:-2081461940,b7c2f010fb4764101f6cd7dde216c403:-2085355847,93823cdce407641073b573f992ee82a9:-2081461940,ec32f4dc79076410b2089ed578c6b35c:-2085355847,33d1fc9cad0764108f7c56ff6c0fda53:-2081461940,178e641c71076410baf051265ec349da:-2085355847,959e9c1022076410c4547d692ad20667:-2081461940,93a56e80fb032410355b213bcd92e032:-2085355847,3d55a6809e03241062b877617daf4be0:-2081461940,b38616cc13c7e010bab43cabfb8e9912:-2085355847,e8265e8ccfc7e010b2599a4153e807ac:-2081461940,6fe51a8c68c7e010669e7a9f919e67f8:-2085355847,6f65128c50c7e010e60cc0c70e557e22:-2081461940,9d359a4cedc7e0100e149e0e3eb0f6b1:-2085355847,88f4964c6ec7e010d1983a99c4020875:-2081461940,aa14160c4bc7e0101d7ff1047c5e01ba:-2085355847,4b1bc244e3c7e0107ebf88c90e360cd2:-2081461940,efa7cd04004fa010122cd754611cad8c:-2085355847,385705045d4fa010414558f762c49e04:-2081461940,434ee71c8a96e810270f3bc19b78dc8c:448599724,2e67a6f236c6e41074a97ad64fdf5b96:927579386,883666b2d0c6e41053074ff217794063:-778390707,52779ef2ec86e4101d3a96c01232cae0:927579386,a0b59ab26686e410f572181be83980dc:-778390707,5f7de9f6d706e4105db9289cd6d3bf1c:927579386,09ed45fedf82e4105bbde8f902c78c60:-2013979218,bb8d01fe2582e41072302ae34819fa54:-1772394215,8e7d8dbea482e410152c7e54dcd27a15:-2013979218,ad0b817ee982e41076dd053269d6754c:-901214150,56dacd3e0c82e4103ca6bc6fdb97046a:-1636415475,db29c9fadd82e410aec9de239130da73:-901214150,09d885fae882e4109566421fbe6d1397:-1636415475,cdf2347e4442e410c70eac018052bdc0:-901214150,9012783e8c42e410f5ff9e720fdd807e:-1636415475,14cfacba7d42e4107120114ce254034c:-901214150,ebae20ba1442e410b7da172bdfccf981:-1636415475,b340dc9a8fca641047979e528077fad3:-901214150,60409c9a6dca6410b6df5c4c3c20b8f5:-1636415475,54409c9a3bca64108d569b74e4dce0c0:-901214150,72205c9a1eca6410cf4f9b89b8b9a1e2:-1636415475,ae205c9adbca64106902ef4e39227e9d:-901214150,f58b04d6c3ca641015b11ee62fcb9e4c:-1636415475,3fc99f42ff4a64109e1ad0661420dc46:-901214150,64d94bc22b0a6410728b1dd315f16205:-1636415475,d5ffb28603466410a2a0f20ce3654ca0:-901214150,f5efbe46e746641071c6f89b4964c653:-1636415475,6def7e466f4664108352fed0de071b56:-901214150,ad3bbece95c2641062a152f30d76a960:-1636415475,2031865b3e4d60100bba99b8b9ee298f:-2027390131,954a85d38c81601016cf914bbd6b6297:-1458023348,8cbba636e4852010cc4c629ea1b17ecf:443524632,7119161334812010643957c0c7e2f6e3:1271541381,3a00179bd94d20106b22734218437e4c:443524632,84972a0ff6c9ec50e1e51f508741dad5:774654541,bed4268bb4c9ec50fa4a5908e34d5434:-665457203,7502260b6ec9ec50a18c9abecd7911c0:11459980,6db982b26909ac50f594a5b875055d35:774654541,020906725509ac50a68611b427abb439:-1816305126,ac968d3a79cd6c50012f12902470f679:774654541,055405f6facd6c50f1be151aedaf9c3e:-1816305126,ae3a64fe4b4d6c50a3cdabf7cfc51e42:774654541,b80823aa81496c50ec289afbdb0189a5:1603526084,7827e76a62496c50193074c6ff467619:-1816289647,a7e9bc6223816c50ed489076f611a49f:1603526084,f62d6026b5416c503df2cbd98c6978ff:-708314117,dbacace2d9416c505abcf6c2dca78998:-708303736,de5f42dad4492c50805d58a8d3735fe4:-708314117,d5c8c696d3492c50e2bee26dd969ba26:-708303736,761c62025d89e8507c98a731ce38e5c5:-708314117,3830260a9149e8508a911b4da927e985:-708303736,74bf3d4a0685e850cef0e6b064023ae7:-708314117,defbf1c65b85e85088ea7397a5853714:-708303736,fed661e9a145685094dcab1b18a4e92e:-708314117,5cf4a969f7456850437b9e97fc8ec682:-708303736,ad1ed755c709285068326d59c6472ab3:-708314117,f19d135562092850278673b5b86074ae:-708303736,a31cce453049e4501dde87e41ae85d8c:-708314117,7e0b464d0109e450e758cee70d9bd8e2:-708303736,9002977c37cda45014f4440fd8ed5d8b:-708314117,25819f3c13cda450045fd9ef95e985cc:-708303736,35fd83f0db8da450c8b70d72e2c32589:-708314117,d77d0fb0548da450ec10fed3b323e116:-708303736,d0b9cbf4eb0da4509c2cca0e8458a3c4:-708314117,34d747b4c10da450fbbbe63f2a7022f4:-708303736,b0713537b97ce050652c5abb3ea63cf0:-708314117,c1cb12f21bb46050185ed8454a08dae7:-708303736,30ef6db236b060500f52dd69eea202fd:-708314117,0175eea241b8205098d2a1aa657c0892:-708303736,e7f322a2b9b820509a2d209ab888fb6a:-708314117,ef932a622fb820508e3253312bde2b83:-708303736,f45d5266ed38205054f268bea2b4a87d:-708314117,642c522632382050b7c899c4d5cce5ee:-708303736,d63c79ee96b42050f4bf0ded63640cbe:-708314117,99bbb1eee7b42050ac893ac57a931d09:-708303736,dad3ec9a6fb4ec1072a36cd61c82e816:-708314117,6833249a8eb4ec109918c7dfb47cd5cd:-708303736,970ddc5e3334ec10ab7b1a4a5386abee:-708314117,60b0d8563e34ec10c9e2c682fdfa7952:-708303736,5f6c6af9b6b0ac106eec7c66e346ce76:-708314117,9679e6799bb0ac109ef40e26abef1eb6:-708303736,ca4152757130ac10e19587901286cfd3:-708314117,91e01e356130ac10113d71719cc3d21e:-708303736,d933be1a36ac2410d3e6b341f55bc507:-708314117,b742721a4bac2410bdbecdbb0bdbbce8:-708303736,eaf462da0a2c241016ce27dbc75e14e2:-708314117,31b46e9a852c241052c00b7d9784bf01:-708303736,15485a9e80a82410e1cb1c1056749889:-708314117,3c08169ec0a82410d2998c909e872847:-708303736,f8231e9670682410c9b6dc9d8279edd2:-708314117,21525296c9682410c1a0b117c8c62ea6:-708303736,ecb5c29ad3e4241024718d8976609f44:-708314117,da550e5a1ee42410e0cc561ba193b3f7:-708303736,496c351ed3642410ebaae988096cceed:-708314117,6d0cfdda2d64241015689432c6e6c4a0:-708303736,bd137206952ce01062b72fc2fee752ce:-708314117,9e1442863ba8e010f3557b707c157164:-708303736,1604a8b7d794e4100f6c20b0674b3f68:-708314117,dc3f54f32794e4101f1602a65937fe2b:-708303736,b79c88b7e114e4108b71c805f0f2d4e1:-708314117,e0f90c37cf14e410bb7361bc6453f5a1:-708303736,8ab3e16b775ca4108aaedaa805caf5b5:-708314117,d2389d63df5ca41066f63833cd912d33:-708303736,f7b4116f3a1ca4100ccfdc9983e1b371:-708314117,ff44192f471ca410f8be2e4ac89f70ef:-708303736,fdcf4da7971ca41012a548687b33bc85:-708314117,8e9f49a7e71ca4102809a07889e8f8fe:-708303736,d57b4163a51ca410b78860fc13a8ae0f:-708314117,ad2bc923311ca41032b947b7b1ad0837:-708303736,d989c92ff6d8a4101bb92234cd226541:-708314117,1049452f23d8a410595f9bb54f53c0e3:-708303736,3feee06b2698a410fd3741bac47593d5:-708314117,c5beec2bd598a41005120fa533a6b3b8:-708303736,6e2628aff958a410f48fc496ba2eb932:-708314117,e25068abd658a410233edc6a3275b925:-708303736,b07e1ca7c658a4103367e4e7f8e443de:-708314117,1b0e94a74f58a410af3f54285c8bee3b:-708303736,c80c7b5f48d4a410da07d064bc283672:-708314117,99bbf35f66d4a410d47553af95ee50d3:-708303736,35461b532c94a410b781fc196ad6d89b:-708314117,aaf517530594a410a30ecc83c2ed7b28:-708303736,996cc31bf454a410d024c811941fe36b:-708314117,0d1c8fd7bf54a410eee18d26b1b4705e:-708303736,e70a4fd3d654a4101cdfd10c1dd7b5a6:-708314117,e19987d35054a410910e615b06c017f8:-708303736,68160b9fe114a410b51c0eabddc4db90:-708314117,3675039f2d14a410c47083aff8c97041:-708303736,d368fe53f714a410b1966661624f49fb:-708314117,48c3430b43986410d8312625d01b49c7:-708303736,b45f92cb601864103ee36ee65f5f25d2:-708314117,068956c71d1864105e0b07e220eacd5b:-708303736,0cdd874d909420106c981e1793d110a2:-708314117,d09d434d4c9420105e73a9fe3d9ad9de:-708303736,8196edcd11d350106258c75c9d81a638:-708314117,7c4e5c050e135010b844def08d4a7897:1646977599,8ad4c270071b1010a849c2358242f40c:1271541381,f0d3f93c37d3101034de07c551da5ea2:980671885,b9b3b93cf9d310103178c8006943f903:2038853953,69b3793cd4d31010caaa6d1f6531afab:980671885,65518e803b9f54d082e20effd62e3c9a:-467769775,7e2e5ab3c44754d066465a81bd8a44e5:-1784174370,85af9ffe620b90d04191c4282da1b590:-467769775,6daa7f9e194750d078584e3a53b81eb1:-1784174370,cadcc519d0c39c90591b426b471d2ea7:-467769775,b1925af06e835c90faf52505606df0fe:-1784174370,6712d260d0031c903aad89914b6e66e9:-467769775,7f1c8a2ceccfd890833d84cbf1443004:-1784174370,918df8acd5fe1c50dedb97d9d3dae57b:-467769775,9b3408a0277e1c5076409bf8eb46ba27:-1784174370,992f2ed4837a1c500fd1d9b79a737caa:-467769775,174a0fc4f9321c502e0a48ada7d2b7ee:-1784174370,378c58bb366a985052acdb231c732b19:-467769775,9c1b947b6f6a9850059b2d8f5d004699:-1784174370,96839c730a6a98506a2315778a07ded6:-467769775,71f110731c6a9850da55ae104156bdd3:-1784174370,6951b793592a58504696ecd910025a43:-467769775,77d5ab9b43e65850ff1617394df35e31:-1784174370,21c7135bb4a258501195e7a3bbf6f1bb:-467769775,fad6531b41a25850e03288f37e119dd0:-1784174370,bc941b17aaa25850f1d072a9fc7cec43:-467769775,b093dbd373a25850a151fcfc2fd8d016:-1784174370,606b4bdb8b625850455f97ec04e6419a:-467769775,548c201ba6ea1850f43b3632ef6d9c3f:-1784174370,289ccd6eaea694506e4a71a77a96ec27:-467769775,6cabcd2e7ea694504e96bf9c4714a214:-1784174370,2a494d2a01a694503ead5781206bca74:-467769775,81d78de686a6945087c40cf3aa344acf:-1784174370,08a201a233a6945090786731b2dc8990:-467769775,58100522a5a69450a7f4fc653d2f3d3b:-1784174370,74b854ee54ee5450299eaa994c131da2:-467769775,75b5f4127fe6545029138e0e29f71c04:-1784174370,ef21d416ee625450726b8cc138033076:-467769775,5df944de1f225450bf440fa669a741d9:-1784174370,9640f6062e2a1450815fd4cb46f41cc2:-467769775,bf5feac2ae2a1450128d64f8bf2c2d9c:-1784174370,6bd80dad5d6e90509725c85184f86a77:-467769775,8ce389a92b6e905021201da3e082ac81:-1784174370,7479dfddada6905008fdffb2b1fda8d4:-467769775,93f6a9191aa290502b28f7d985cf1636:-1784174370,6150904d88ee1050fa33891c079a110d:-467769775,09b68c8598ee105004f5db5882a32f24:-1784174370,f80ca8d480ae9c10a6a6be9dd0a2c502:-467769775,e15aa4947bae9c1052528fea5ca3f122:-1784174370,983d50c8176e5c104e4e97c5efd6e3bb:-467769775,0b9c5888e56e5c10e36ad6af7c657745:-1784174370,c2bc000ce5aa5c10083301055bd78304:-467769775,a5fb04c8f6aa5c103bcad0018ba2d1ef:-1784174370,ad0bf73f8b1a5c10fe76888b2be65be8:-467769775,57a62f7bc1565c1082f1dc99e9895e45:-2103075343,abd6d7ff42165c105069915cd13ba486:-1295507522,cc2017b7d8d25c10ed3f8785952f0a88:-2103075343,758f4b7727d25c1018e843b646779e32:-1295507522,b8f0e63b789e1c100795b4a4bd03730b:-2103075343,b36062b7889e1c107584ede5e0f7073d:-1295507522,4939f2ebc4521c10a401ed76d7981461:-2103075343,3b9732ab43521c10e059e8b3a253766a:-1295507522,afaad99fc6de981035a424595cf9b59d:-2103075343,1faf09d7cbde9810ab27a35e980ca78b:-1295507522,d639cd1fdb5e981040737df589103a05:-2103075343,e14478df071e9810f610c62317d72333:-1295507522,30d113bd1b16d4109437d942c35ad698:-2103075343,4d5545b548de941020786a8de05ef971:-1295507522,3040087d841e5410a73b07adc1492613:-2103075343,21a1bfe1ec1e54105b4d6bcd5b5d12f4:-1295507522,3c2b854c6cd21010ab54152d5be96b49:-2103075343,d9aacd0c96d21010b681db87340fdb8e:-1295507522,1fb14ea4e90a1010b9c2c3362cd53948:-2103075343,10cc356c3ec610109c9c30277cac33e1:-687824871,da0c3d2c82c61010fa9e02ea55507944:-976423484,fae9f1a034c610105c85a1da64afc5bf:2025208838,d1367d6c118610103c2a013c55b95ecb:1515512998,c1637d6c1e8610102d93ae66ace30c26:963336326,e17dad68d78610105fe0f7e78d89093b:1425056729,a53b25a435861010d0bf55cf0b85683e:963336326,aafa2964bb8610108e7c7a49060c81be:-1208593942,99f9296456861010fadc6993c0479ec8:2120431144,8b486924b18610107e673ac3d4f16341:-1208593942,1618a5246286101021290cb46bd9c488:1230900458,dd27ada08f861010472bc7f248b42723:2087597464,62e5edec81461010c86b6d153c81f2bb:900627373,7111c1e0f906101034266d427d0479fc:1271541381,f8d0cda07c061010b53987580c1b2b89:975999704,dd9ff86c6cc2101058dd2fed235dc242:1271541381,d05ff46c12c210103456b6f1f0930e4b:975999704,9bacbc64cac21010b120e19fd47f6097:1271541381,2eba9ca46c4210100b4c0bbf2eec28d4:975999704,e100985267f118103cd90447b939fc49:1271541381,1abe0812d3f11810c59ee6ccc9a70e40:975999704,9b0817475f041010b0455a103e52cfae:1271541381,b714a08e44d78010e4620406a0d97494:975999704,7bc1bf81bcd340100efb6ce5120254d0:1271541381,ee01f3814fd340108d53146e3f987525:975999704,b5e56f852793401039109cd98af0d4b1:1271541381,c6c5ab854d934010e2de9dec94e6d13e:975999704,7ca5a7854c934010a0cb7eee76ed5b35:1271541381,eb55ef459f934010163924b704f4d35a:975999704,4c8f7ec58413401076c133b45f63d283:1271541381,c83e3a856913401048565abcacb96619:975999704,969dbe45a213401095ac915259d4469c:1271541381,0c0d364532134010f4492284fbec7225:975999704,a6cc7e05581340108534b8007ad1fc96:1271541381,2f457e8de8df0010d31c2fa5eccd8efa:975999704,eb4f2e85be9f00100e3b1a8a4a2cc393:1271541381,24f8a6458a1f001036c8bffe79fd967b:1990093829,87182e450c1f0010de83422730a20ea1:-267174851,e3036641771f0010782105c4716564fe:2052147412,1102eecd35db0010a6e7d0fc3151bd5e:1560078981,a8716a8d16db001080b65a037424232a:-1849389703,490126cd25db0010b85f093b8852dc0e:591380689,6e706a8de7db0010745291a78af207e0:-783699060,2a10a28d2adb001033b8b1b2ec9a4dc8:591380689,faed920d17db0010913c40e933299bf5:-783699060,b5bb91e53cc74010a517c9d5b9c3dd48:591380689,564bd5a56fc74010e33cc0d0d8dae58d:-128407402,03949d6d80874010f2da3523ecd47d4b:2019096243,3f64d96d738740101b0af604f95193db:-1491246676,47349961b2874010402bbd2fa69b0b47:-220654354,142411e1b3874010ac072c229e479e23:-2008962947,9c14516dd0874010695819b82a6400e4:-1286085155,4b1e4161ed8740104c03d979ce8cbcbd:2038242813,0bbd89ad38474010430423865e480cc2:754528827,c3965059bac7001093abf081d6d8e786:1492362791,ddce3385ff87001053a61e1f68b215ae:-600000013,22fa97890d830010fa0492a5d79220c1:1492362791,6cad03415783001039f40c87a61911ea:-600000013,e15da472cb11001039b9ae68bafe3578:1492362791,2d548e37d8a000103476e266d9d0caa5:-1010824337,2134ca3796a000101a688208bfc90b11:-70679749,c36e21631ae00010226b334552333733:-1010824337,226eed238be0001042650d7a3d35a538:-70679749,ecfda523e5e0001045552c584e57b9dc:-1010824337,14fd652371e00010892d94411d9aee18:-70679749,fe9d2123bde000104c0da7cbd1c6d364:-1010824337,269d2123fae000106f7ddc72ccb8dc13:-70679749,cf8c61efe5a00010ef834256f1812f3c:-1010824337,57ab65afcaa0001089c79a73819a16d0:-70679749,294bad6fb8a0001098dc5ec641697e02:-1010824337,3ada296f95a0001031145024ca590f8e:-1258394346,72da296f0ba0001086272f634f4b2361:-1762257118,fc9a256f2ea000108682de2972e1bf70:-1258394346,3c9a256fdea00010122637d59998464b:-1762257118,127a216f53a00010d07d8763c7b7e76b:-1258394346,8209612f06a00010f211196957a5e336:496574537,7109612f8aa000109f50d858d9b72e0f:1135659413,d2c86deb8fa00010c582bf21616657ff:496574537,16e625ab48a00010e98bd5e24bb2a3dc:1135659413,2c766d6bf2a0001017786b5665c61c6d:496574537,cda32de77da000108194a21a0e3b1603:1135659413,c11e59e367a00010cb41d91c5cdf7f55:496574537,7c1e19e356a00010f5f2c7cdddcd618b:1135659413,9e0cd963fea00010602e7fe132d36f09:496574537,18e3112f18600010ea51e727556237ba:1135659413,333e21229720401075a3e849a18b29e1:496574537,d3bde1ee0aec001059c037f6be2219d7:1135659413,d75ce1aeaaec00100c54e8c768b01d52:496574537,1ccb296e6dec00106dda4c9762bc7d98:1135659413,d2623c568c6000109d5f07a028c27eef:496574537,0d427856146000104c3f4f0ed2fa6b20:1135659413,11bcce078d1b00101f87eb0ea90e60a3:980671885,ce6c86ecc3d90810e41dce6031e1c0d4:2038853953,687b06ecf6d90810bda09aa5bf6faa22:980671885,a45b0e2892d90810f9daf23e39ce8649:2038853953,39d0026c2059081089ffc92a7706b8f7:980671885,40a04a2c8e590810215c91bd145f51d6:2038853953,84cbf5a8a6190810f8182a50f7ab5fad:980671885,24bb75a8301908101fb3b131acc584ba:2038853953,1a9bf1a88d1908101dc341ca6426096b:980671885,cc9bfd28d8190810523dc745da8eda4f:2038853953,fb009aedfac10010e93ebfbf4af2934a:496574537,33bf86edd0c1001083607e8ea737aa25:1135659413,e3bf42ed1ec100107ba951cc05208011:496574537,ed5ec2adaac10010402f939c82b25009:1135659413,555e4e2950c10010667142c8ff46a424:496574537,854e42adc0c1001029ce797ed0c7cbb7:1135659413,0d4e822df2c100109febf35fe66e1497:496574537,b70ec22d95c10010bba37c01fe1c92fa:1135659413,e30e0ae974c1001008e3099b4bde195d:496574537,62fdc2e94ec10010017f4dad362973a9:1135659413,8c15d0fadc33f30081c32d819ce9bad0:496574537,235df666203fb3001ee5804c73fd43bb:331251442,ea51da08713373007390913f0aeb32a1:-667355002,6c005ec40d33730068440fcc924881f2:-2091137646,8ab7613bcb273300b54293d87175aa6b:-667355002,0ee5fcfb8fa33300ad47a3240af86eb1:-2091137646,dd351f8df5237300a085ef1fad163e27:-667355002,a1d4978da6237300c9ffc26a7a86a0ef:-2091137646,b482f58d90eb33008487bcf13ad3ff33:-667355002,c422718d86eb3300900525021b5a6094:-2091137646,0d5db950e2973300632d5f35a32490d1:-667355002,4f1db55046973300c2a2f302accdb99f:-2091137646,745b6c645b833300d38e350fc074083e:-667355002,6ce528a077833300d92f47cc589aa1ee:-2091137646,bcf406db9ec233005dc3533f72b2efcb:-667355002,0282b8264fbb330059dfcf348ac5e6e6:741104852,ec430a239cdf3300324eb8b25cf56591:-667355002,723d716f9b9f3300eac64e5539fd9cfe:-2091137646,185a26a2575333005a63cae2ae17e36a:-667355002,afc866621453330008b11155348dd210:-2091137646,53c1407c4b937300798fe200de324f3e:-667355002,73bf73ac779373002e7e0c65972e0826:-2091137646,dcddeb90bcd733003196cba807b0e5a5:-667355002,99fcef1430d73300f548df38e83dbc14:-2091137646,c5f14b93e38337001011d62c9225b177:-667355002,ba700b53188337009a046424588cb68a:-2091137646,106e2ad33d0337004280f25b90c7905e:-667355002,b0cce693ac0337005e65ea8d30dbff60:-2091137646,86456fcffec7f300f9f6088239fd2d5c:-667355002,f4d467cfeac7f3002e3dee6cfa32becd:-2091137646,eceeaa4f9543f3005c5a197cbdddc37f:-667355002,ab8e664fa743f3002a90f5e8d64c736a:-2091137646,461a2e4fc103f30027bb9a9c07b7f833:-667355002,c1e9e64f7703f3000f9cdf4065a7a9d7:-2091137646,c762668b2fcfb3003a76d8446e2dda26:-667355002,f0e16ecbebcfb300edac5523427560e5:-2091137646,c71e1ecff38fb3003bdc26277be9bae9:-667355002,84ddd6cf348fb30079ab108084a88fee:-2091137646,3066c1837b4bb3007c3c11863e2f85d9:-667355002,1936cd43314bb300ed473a1165e8d9be:-2091137646,d58adf561ccf3300a2ae05c5912cc98a:-667355002,8a89db5681cf3300d824e2176eff1460:-2091137646,21d43a41dc037300ad2d157fd6dd104c:-667355002,6506c9f453433300f27815c666ad9c82:-2091137646,15181d6c96473300571493f7a088bf84:-667355002,12c7d56c2547330009f2b54bf6f09341:-2091137646,0b93112c4b0733006eee681b363a812b:-667355002,4c6199a806073300ff48b285970db65a:-2091137646,afa7df08df43330090de91953d3e9367:-667355002,216797c89343330069870d1d892e675e:-2091137646,d5530fb665fa7300b7865aa0fbaa6694:-667355002,db22cffe63fa73005b5d6d1d2101de7f:-2091137646,acbba7712ff2330077e9714719240b42:-667355002,8d6a6b31a7f23300d4d1507c12fffd35:-2091137646,3568addb1e26b300d87f0c8c11a8336d:-667355002,9aa5e19b7426b3007b2a4aa37d03e858:-2091137646,367d6d8a78ae33004f356e514e54362d:-667355002,e8d6a986bdae33004a3c7cc9328f26d7:-2091137646,a57dee7525d633008c0161b54911381c:-667355002,13fe70cf89823300037158f9bfb56898:-2091137646,acae77aa89063300703a054c3cfd141d:-667355002,f55efbaa52063300c0c0031b9f5430d8:-298244386,0034072a584233001d3acebabe38e4cd:853431433,df9e83b8c9f133002371a76926a956de:-904254251,699d0b78b4f1330093e5aef9f49d044a:853431433,7e4b07f4dff13300aaf834aad8a145df:-904254251,52f18f70ecf13300c6e7637407210711:853431433,07a1c77057f133007274f422134d87d3:-904254251,4ca143fc8ab133007bb3e18f49b0457a:853431433,82e42eb882713300b1b2aa0f638b401c:-298244386,f3f32eb8b47133001deed51dfc87d726:436846058,5a9bdef8b73133005fca848bfa8d72af:-298244386,564b5af8b931330053864e751806dc61:436846058,6c8a5ab8b73133005d473cefe1a26365:-298244386,648a5678503133002f76ed76d78c7e0b:436846058,a3581eb47f313300ca73bfee3ef79f14:-298244386,9548dab4023133001b96ad9a8d6c363d:436846058,5548dab4e63133006ca21cd0bc602a22:-298244386,610856b418313300ba4dde318c40aa03:436846058,79d752b4dd3133008ecd860f8882e1ed:-298244386,e2c752b434313300c3ba8cacd0e17711:436846058,22c712b4e1313300292fc268e982bbee:-298244386,9a8a0e36e6e03300161e6ab5a40b1404:912385486,a7a0986e3a20730078a9d39a8225d41e:-1327932070,0b80d46e3320730081586a7006954d54:912385486,31bf8caa1c207300e51782e7f0739f24:-1327932070,60af88ea78207300e0866dd5deeeafd6:912385486,89dac866ee20730016c293471a77cd88:-1327932070,01ca8c663d2073007f7fb4bc40b10fd0:912385486,130880ee63ec3300cda0ab83928f023f:-1327932070</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
</unload>
